
CarMotionSim_Sampler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d3c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08002ec4  08002ec4  00012ec4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002eec  08002eec  00020004  2**0
                  CONTENTS
  4 .ARM          00000008  08002eec  08002eec  00012eec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002ef4  08002ef4  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08002ef4  08002ef4  00012ef4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08002efc  08002efc  00012efc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08002f04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
 10 .bss          00000070  20000004  20000004  00020004  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000074  20000074  00020004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021d39  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003113  00000000  00000000  00041d6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a68  00000000  00000000  00044e80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000009b0  00000000  00000000  000458e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007176  00000000  00000000  00046298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000109e8  00000000  00000000  0004d40e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0005ddf6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b64  00000000  00000000  0005de48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002eac 	.word	0x08002eac

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08002eac 	.word	0x08002eac

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b085      	sub	sp, #20
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80004d4:	4b08      	ldr	r3, [pc, #32]	; (80004f8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80004d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80004d8:	4907      	ldr	r1, [pc, #28]	; (80004f8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	4313      	orrs	r3, r2
 80004de:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80004e0:	4b05      	ldr	r3, [pc, #20]	; (80004f8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80004e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	4013      	ands	r3, r2
 80004e8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004ea:	68fb      	ldr	r3, [r7, #12]
}
 80004ec:	bf00      	nop
 80004ee:	3714      	adds	r7, #20
 80004f0:	46bd      	mov	sp, r7
 80004f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f6:	4770      	bx	lr
 80004f8:	40023800 	.word	0x40023800

080004fc <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80004fc:	b480      	push	{r7}
 80004fe:	b083      	sub	sp, #12
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
 8000504:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000506:	683b      	ldr	r3, [r7, #0]
 8000508:	041a      	lsls	r2, r3, #16
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	619a      	str	r2, [r3, #24]
}
 800050e:	bf00      	nop
 8000510:	370c      	adds	r7, #12
 8000512:	46bd      	mov	sp, r7
 8000514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000518:	4770      	bx	lr
	...

0800051c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b086      	sub	sp, #24
 8000520:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000522:	463b      	mov	r3, r7
 8000524:	2200      	movs	r2, #0
 8000526:	601a      	str	r2, [r3, #0]
 8000528:	605a      	str	r2, [r3, #4]
 800052a:	609a      	str	r2, [r3, #8]
 800052c:	60da      	str	r2, [r3, #12]
 800052e:	611a      	str	r2, [r3, #16]
 8000530:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8000532:	2080      	movs	r0, #128	; 0x80
 8000534:	f7ff ffca 	bl	80004cc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8000538:	2004      	movs	r0, #4
 800053a:	f7ff ffc7 	bl	80004cc <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LCD_RS_Pin|LCD_ENABLE_Pin|LCD_D4_Pin|LCD_D5_Pin
 800053e:	213f      	movs	r1, #63	; 0x3f
 8000540:	480a      	ldr	r0, [pc, #40]	; (800056c <MX_GPIO_Init+0x50>)
 8000542:	f7ff ffdb 	bl	80004fc <LL_GPIO_ResetOutputPin>
                          |LCD_D6_Pin|LCD_D7_Pin);

  /**/
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_ENABLE_Pin|LCD_D4_Pin|LCD_D5_Pin
 8000546:	233f      	movs	r3, #63	; 0x3f
 8000548:	603b      	str	r3, [r7, #0]
                          |LCD_D6_Pin|LCD_D7_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800054a:	2301      	movs	r3, #1
 800054c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800054e:	2302      	movs	r3, #2
 8000550:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000552:	2300      	movs	r3, #0
 8000554:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000556:	2300      	movs	r3, #0
 8000558:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800055a:	463b      	mov	r3, r7
 800055c:	4619      	mov	r1, r3
 800055e:	4803      	ldr	r0, [pc, #12]	; (800056c <MX_GPIO_Init+0x50>)
 8000560:	f001 ff8f 	bl	8002482 <LL_GPIO_Init>

}
 8000564:	bf00      	nop
 8000566:	3718      	adds	r7, #24
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	40020800 	.word	0x40020800

08000570 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000570:	b480      	push	{r7}
 8000572:	b085      	sub	sp, #20
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	f003 0307 	and.w	r3, r3, #7
 800057e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000580:	4b0c      	ldr	r3, [pc, #48]	; (80005b4 <__NVIC_SetPriorityGrouping+0x44>)
 8000582:	68db      	ldr	r3, [r3, #12]
 8000584:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000586:	68ba      	ldr	r2, [r7, #8]
 8000588:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800058c:	4013      	ands	r3, r2
 800058e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000594:	68bb      	ldr	r3, [r7, #8]
 8000596:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000598:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800059c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005a2:	4a04      	ldr	r2, [pc, #16]	; (80005b4 <__NVIC_SetPriorityGrouping+0x44>)
 80005a4:	68bb      	ldr	r3, [r7, #8]
 80005a6:	60d3      	str	r3, [r2, #12]
}
 80005a8:	bf00      	nop
 80005aa:	3714      	adds	r7, #20
 80005ac:	46bd      	mov	sp, r7
 80005ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b2:	4770      	bx	lr
 80005b4:	e000ed00 	.word	0xe000ed00

080005b8 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b083      	sub	sp, #12
 80005bc:	af00      	add	r7, sp, #0
 80005be:	4603      	mov	r3, r0
 80005c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	db0c      	blt.n	80005e4 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005ca:	79fb      	ldrb	r3, [r7, #7]
 80005cc:	f003 021f 	and.w	r2, r3, #31
 80005d0:	4907      	ldr	r1, [pc, #28]	; (80005f0 <__NVIC_ClearPendingIRQ+0x38>)
 80005d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005d6:	095b      	lsrs	r3, r3, #5
 80005d8:	2001      	movs	r0, #1
 80005da:	fa00 f202 	lsl.w	r2, r0, r2
 80005de:	3360      	adds	r3, #96	; 0x60
 80005e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80005e4:	bf00      	nop
 80005e6:	370c      	adds	r7, #12
 80005e8:	46bd      	mov	sp, r7
 80005ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ee:	4770      	bx	lr
 80005f0:	e000e100 	.word	0xe000e100

080005f4 <LL_RCC_HSE_EnableBypass>:
  * @brief  Enable HSE external oscillator (HSE Bypass)
  * @rmtoll CR           HSEBYP        LL_RCC_HSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableBypass(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 80005f8:	4b05      	ldr	r3, [pc, #20]	; (8000610 <LL_RCC_HSE_EnableBypass+0x1c>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a04      	ldr	r2, [pc, #16]	; (8000610 <LL_RCC_HSE_EnableBypass+0x1c>)
 80005fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000602:	6013      	str	r3, [r2, #0]
}
 8000604:	bf00      	nop
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	40023800 	.word	0x40023800

08000614 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000618:	4b05      	ldr	r3, [pc, #20]	; (8000630 <LL_RCC_HSE_Enable+0x1c>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a04      	ldr	r2, [pc, #16]	; (8000630 <LL_RCC_HSE_Enable+0x1c>)
 800061e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000622:	6013      	str	r3, [r2, #0]
}
 8000624:	bf00      	nop
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr
 800062e:	bf00      	nop
 8000630:	40023800 	.word	0x40023800

08000634 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8000638:	4b07      	ldr	r3, [pc, #28]	; (8000658 <LL_RCC_HSE_IsReady+0x24>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000640:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000644:	bf0c      	ite	eq
 8000646:	2301      	moveq	r3, #1
 8000648:	2300      	movne	r3, #0
 800064a:	b2db      	uxtb	r3, r3
}
 800064c:	4618      	mov	r0, r3
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	40023800 	.word	0x40023800

0800065c <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800065c:	b480      	push	{r7}
 800065e:	b083      	sub	sp, #12
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000664:	4b06      	ldr	r3, [pc, #24]	; (8000680 <LL_RCC_SetSysClkSource+0x24>)
 8000666:	689b      	ldr	r3, [r3, #8]
 8000668:	f023 0203 	bic.w	r2, r3, #3
 800066c:	4904      	ldr	r1, [pc, #16]	; (8000680 <LL_RCC_SetSysClkSource+0x24>)
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	4313      	orrs	r3, r2
 8000672:	608b      	str	r3, [r1, #8]
}
 8000674:	bf00      	nop
 8000676:	370c      	adds	r7, #12
 8000678:	46bd      	mov	sp, r7
 800067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067e:	4770      	bx	lr
 8000680:	40023800 	.word	0x40023800

08000684 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000688:	4b04      	ldr	r3, [pc, #16]	; (800069c <LL_RCC_GetSysClkSource+0x18>)
 800068a:	689b      	ldr	r3, [r3, #8]
 800068c:	f003 030c 	and.w	r3, r3, #12
}
 8000690:	4618      	mov	r0, r3
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop
 800069c:	40023800 	.word	0x40023800

080006a0 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80006a8:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <LL_RCC_SetAHBPrescaler+0x24>)
 80006aa:	689b      	ldr	r3, [r3, #8]
 80006ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80006b0:	4904      	ldr	r1, [pc, #16]	; (80006c4 <LL_RCC_SetAHBPrescaler+0x24>)
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	4313      	orrs	r3, r2
 80006b6:	608b      	str	r3, [r1, #8]
}
 80006b8:	bf00      	nop
 80006ba:	370c      	adds	r7, #12
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr
 80006c4:	40023800 	.word	0x40023800

080006c8 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80006d0:	4b06      	ldr	r3, [pc, #24]	; (80006ec <LL_RCC_SetAPB1Prescaler+0x24>)
 80006d2:	689b      	ldr	r3, [r3, #8]
 80006d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80006d8:	4904      	ldr	r1, [pc, #16]	; (80006ec <LL_RCC_SetAPB1Prescaler+0x24>)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	4313      	orrs	r3, r2
 80006de:	608b      	str	r3, [r1, #8]
}
 80006e0:	bf00      	nop
 80006e2:	370c      	adds	r7, #12
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr
 80006ec:	40023800 	.word	0x40023800

080006f0 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b083      	sub	sp, #12
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80006f8:	4b06      	ldr	r3, [pc, #24]	; (8000714 <LL_RCC_SetAPB2Prescaler+0x24>)
 80006fa:	689b      	ldr	r3, [r3, #8]
 80006fc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000700:	4904      	ldr	r1, [pc, #16]	; (8000714 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	4313      	orrs	r3, r2
 8000706:	608b      	str	r3, [r1, #8]
}
 8000708:	bf00      	nop
 800070a:	370c      	adds	r7, #12
 800070c:	46bd      	mov	sp, r7
 800070e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000712:	4770      	bx	lr
 8000714:	40023800 	.word	0x40023800

08000718 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800071c:	4b05      	ldr	r3, [pc, #20]	; (8000734 <LL_RCC_PLL_Enable+0x1c>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a04      	ldr	r2, [pc, #16]	; (8000734 <LL_RCC_PLL_Enable+0x1c>)
 8000722:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000726:	6013      	str	r3, [r2, #0]
}
 8000728:	bf00      	nop
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	40023800 	.word	0x40023800

08000738 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 800073c:	4b07      	ldr	r3, [pc, #28]	; (800075c <LL_RCC_PLL_IsReady+0x24>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000744:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000748:	bf0c      	ite	eq
 800074a:	2301      	moveq	r3, #1
 800074c:	2300      	movne	r3, #0
 800074e:	b2db      	uxtb	r3, r3
}
 8000750:	4618      	mov	r0, r3
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	40023800 	.word	0x40023800

08000760 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 8000760:	b480      	push	{r7}
 8000762:	b085      	sub	sp, #20
 8000764:	af00      	add	r7, sp, #0
 8000766:	60f8      	str	r0, [r7, #12]
 8000768:	60b9      	str	r1, [r7, #8]
 800076a:	607a      	str	r2, [r7, #4]
 800076c:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 800076e:	4b0d      	ldr	r3, [pc, #52]	; (80007a4 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000770:	685a      	ldr	r2, [r3, #4]
 8000772:	4b0d      	ldr	r3, [pc, #52]	; (80007a8 <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 8000774:	4013      	ands	r3, r2
 8000776:	68f9      	ldr	r1, [r7, #12]
 8000778:	68ba      	ldr	r2, [r7, #8]
 800077a:	4311      	orrs	r1, r2
 800077c:	687a      	ldr	r2, [r7, #4]
 800077e:	0192      	lsls	r2, r2, #6
 8000780:	430a      	orrs	r2, r1
 8000782:	4908      	ldr	r1, [pc, #32]	; (80007a4 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000784:	4313      	orrs	r3, r2
 8000786:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8000788:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800078a:	685b      	ldr	r3, [r3, #4]
 800078c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000790:	4904      	ldr	r1, [pc, #16]	; (80007a4 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000792:	683b      	ldr	r3, [r7, #0]
 8000794:	4313      	orrs	r3, r2
 8000796:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 8000798:	bf00      	nop
 800079a:	3714      	adds	r7, #20
 800079c:	46bd      	mov	sp, r7
 800079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a2:	4770      	bx	lr
 80007a4:	40023800 	.word	0x40023800
 80007a8:	ffbf8000 	.word	0xffbf8000

080007ac <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b085      	sub	sp, #20
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80007b4:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80007b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007b8:	4907      	ldr	r1, [pc, #28]	; (80007d8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	4313      	orrs	r3, r2
 80007be:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80007c0:	4b05      	ldr	r3, [pc, #20]	; (80007d8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80007c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	4013      	ands	r3, r2
 80007c8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007ca:	68fb      	ldr	r3, [r7, #12]
}
 80007cc:	bf00      	nop
 80007ce:	3714      	adds	r7, #20
 80007d0:	46bd      	mov	sp, r7
 80007d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d6:	4770      	bx	lr
 80007d8:	40023800 	.word	0x40023800

080007dc <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80007dc:	b480      	push	{r7}
 80007de:	b085      	sub	sp, #20
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80007e4:	4b08      	ldr	r3, [pc, #32]	; (8000808 <LL_APB2_GRP1_EnableClock+0x2c>)
 80007e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80007e8:	4907      	ldr	r1, [pc, #28]	; (8000808 <LL_APB2_GRP1_EnableClock+0x2c>)
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	4313      	orrs	r3, r2
 80007ee:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80007f0:	4b05      	ldr	r3, [pc, #20]	; (8000808 <LL_APB2_GRP1_EnableClock+0x2c>)
 80007f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	4013      	ands	r3, r2
 80007f8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007fa:	68fb      	ldr	r3, [r7, #12]
}
 80007fc:	bf00      	nop
 80007fe:	3714      	adds	r7, #20
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr
 8000808:	40023800 	.word	0x40023800

0800080c <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 800080c:	b480      	push	{r7}
 800080e:	b083      	sub	sp, #12
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000814:	4b06      	ldr	r3, [pc, #24]	; (8000830 <LL_FLASH_SetLatency+0x24>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	f023 0207 	bic.w	r2, r3, #7
 800081c:	4904      	ldr	r1, [pc, #16]	; (8000830 <LL_FLASH_SetLatency+0x24>)
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	4313      	orrs	r3, r2
 8000822:	600b      	str	r3, [r1, #0]
}
 8000824:	bf00      	nop
 8000826:	370c      	adds	r7, #12
 8000828:	46bd      	mov	sp, r7
 800082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082e:	4770      	bx	lr
 8000830:	40023c00 	.word	0x40023c00

08000834 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000838:	4b04      	ldr	r3, [pc, #16]	; (800084c <LL_FLASH_GetLatency+0x18>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	f003 0307 	and.w	r3, r3, #7
}
 8000840:	4618      	mov	r0, r3
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	40023c00 	.word	0x40023c00

08000850 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000850:	b480      	push	{r7}
 8000852:	b083      	sub	sp, #12
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8000858:	4b06      	ldr	r3, [pc, #24]	; (8000874 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8000860:	4904      	ldr	r1, [pc, #16]	; (8000874 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	4313      	orrs	r3, r2
 8000866:	600b      	str	r3, [r1, #0]
}
 8000868:	bf00      	nop
 800086a:	370c      	adds	r7, #12
 800086c:	46bd      	mov	sp, r7
 800086e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000872:	4770      	bx	lr
 8000874:	40007000 	.word	0x40007000

08000878 <LL_DMA_IsActiveFlag_HT0>:
  * @rmtoll LISR  HTIF0    LL_DMA_IsActiveFlag_HT0
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT0(DMA_TypeDef *DMAx)
{
 8000878:	b480      	push	{r7}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->LISR ,DMA_LISR_HTIF0)==(DMA_LISR_HTIF0));
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	f003 0310 	and.w	r3, r3, #16
 8000888:	2b10      	cmp	r3, #16
 800088a:	bf0c      	ite	eq
 800088c:	2301      	moveq	r3, #1
 800088e:	2300      	movne	r3, #0
 8000890:	b2db      	uxtb	r3, r3
}
 8000892:	4618      	mov	r0, r3
 8000894:	370c      	adds	r7, #12
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr

0800089e <LL_DMA_IsActiveFlag_HT1>:
  * @rmtoll LISR  HTIF1    LL_DMA_IsActiveFlag_HT1
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT1(DMA_TypeDef *DMAx)
{
 800089e:	b480      	push	{r7}
 80008a0:	b083      	sub	sp, #12
 80008a2:	af00      	add	r7, sp, #0
 80008a4:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->LISR ,DMA_LISR_HTIF1)==(DMA_LISR_HTIF1));
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80008ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80008b2:	bf0c      	ite	eq
 80008b4:	2301      	moveq	r3, #1
 80008b6:	2300      	movne	r3, #0
 80008b8:	b2db      	uxtb	r3, r3
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	370c      	adds	r7, #12
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr

080008c6 <LL_DMA_IsActiveFlag_TC0>:
  * @rmtoll LISR  TCIF0    LL_DMA_IsActiveFlag_TC0
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC0(DMA_TypeDef *DMAx)
{
 80008c6:	b480      	push	{r7}
 80008c8:	b083      	sub	sp, #12
 80008ca:	af00      	add	r7, sp, #0
 80008cc:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->LISR ,DMA_LISR_TCIF0)==(DMA_LISR_TCIF0));
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	f003 0320 	and.w	r3, r3, #32
 80008d6:	2b20      	cmp	r3, #32
 80008d8:	bf0c      	ite	eq
 80008da:	2301      	moveq	r3, #1
 80008dc:	2300      	movne	r3, #0
 80008de:	b2db      	uxtb	r3, r3
}
 80008e0:	4618      	mov	r0, r3
 80008e2:	370c      	adds	r7, #12
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr

080008ec <LL_DMA_IsActiveFlag_TC1>:
  * @rmtoll LISR  TCIF1    LL_DMA_IsActiveFlag_TC1
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC1(DMA_TypeDef *DMAx)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b083      	sub	sp, #12
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->LISR ,DMA_LISR_TCIF1)==(DMA_LISR_TCIF1));
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80008fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000900:	bf0c      	ite	eq
 8000902:	2301      	moveq	r3, #1
 8000904:	2300      	movne	r3, #0
 8000906:	b2db      	uxtb	r3, r3
}
 8000908:	4618      	mov	r0, r3
 800090a:	370c      	adds	r7, #12
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr

08000914 <LL_DMA_IsActiveFlag_TE0>:
  * @rmtoll LISR  TEIF0    LL_DMA_IsActiveFlag_TE0
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TE0(DMA_TypeDef *DMAx)
{
 8000914:	b480      	push	{r7}
 8000916:	b083      	sub	sp, #12
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->LISR ,DMA_LISR_TEIF0)==(DMA_LISR_TEIF0));
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	f003 0308 	and.w	r3, r3, #8
 8000924:	2b08      	cmp	r3, #8
 8000926:	bf0c      	ite	eq
 8000928:	2301      	moveq	r3, #1
 800092a:	2300      	movne	r3, #0
 800092c:	b2db      	uxtb	r3, r3
}
 800092e:	4618      	mov	r0, r3
 8000930:	370c      	adds	r7, #12
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr

0800093a <LL_DMA_IsActiveFlag_TE1>:
  * @rmtoll LISR  TEIF1    LL_DMA_IsActiveFlag_TE1
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TE1(DMA_TypeDef *DMAx)
{
 800093a:	b480      	push	{r7}
 800093c:	b083      	sub	sp, #12
 800093e:	af00      	add	r7, sp, #0
 8000940:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->LISR ,DMA_LISR_TEIF1)==(DMA_LISR_TEIF1));
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800094a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800094e:	bf0c      	ite	eq
 8000950:	2301      	moveq	r3, #1
 8000952:	2300      	movne	r3, #0
 8000954:	b2db      	uxtb	r3, r3
}
 8000956:	4618      	mov	r0, r3
 8000958:	370c      	adds	r7, #12
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr

08000962 <LL_DMA_IsActiveFlag_DME0>:
  * @rmtoll LISR  DMEIF0    LL_DMA_IsActiveFlag_DME0
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_DME0(DMA_TypeDef *DMAx)
{
 8000962:	b480      	push	{r7}
 8000964:	b083      	sub	sp, #12
 8000966:	af00      	add	r7, sp, #0
 8000968:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->LISR ,DMA_LISR_DMEIF0)==(DMA_LISR_DMEIF0));
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	f003 0304 	and.w	r3, r3, #4
 8000972:	2b04      	cmp	r3, #4
 8000974:	bf0c      	ite	eq
 8000976:	2301      	moveq	r3, #1
 8000978:	2300      	movne	r3, #0
 800097a:	b2db      	uxtb	r3, r3
}
 800097c:	4618      	mov	r0, r3
 800097e:	370c      	adds	r7, #12
 8000980:	46bd      	mov	sp, r7
 8000982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000986:	4770      	bx	lr

08000988 <LL_DMA_IsActiveFlag_FE0>:
  * @rmtoll LISR  FEIF0    LL_DMA_IsActiveFlag_FE0
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_FE0(DMA_TypeDef *DMAx)
{
 8000988:	b480      	push	{r7}
 800098a:	b083      	sub	sp, #12
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->LISR ,DMA_LISR_FEIF0)==(DMA_LISR_FEIF0));
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	f003 0301 	and.w	r3, r3, #1
 8000998:	2b01      	cmp	r3, #1
 800099a:	bf0c      	ite	eq
 800099c:	2301      	moveq	r3, #1
 800099e:	2300      	movne	r3, #0
 80009a0:	b2db      	uxtb	r3, r3
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	370c      	adds	r7, #12
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr

080009ae <LL_DMA_IsActiveFlag_FE1>:
  * @rmtoll LISR  FEIF1    LL_DMA_IsActiveFlag_FE1
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_FE1(DMA_TypeDef *DMAx)
{
 80009ae:	b480      	push	{r7}
 80009b0:	b083      	sub	sp, #12
 80009b2:	af00      	add	r7, sp, #0
 80009b4:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->LISR ,DMA_LISR_FEIF1)==(DMA_LISR_FEIF1));
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009be:	2b40      	cmp	r3, #64	; 0x40
 80009c0:	bf0c      	ite	eq
 80009c2:	2301      	moveq	r3, #1
 80009c4:	2300      	movne	r3, #0
 80009c6:	b2db      	uxtb	r3, r3
}
 80009c8:	4618      	mov	r0, r3
 80009ca:	370c      	adds	r7, #12
 80009cc:	46bd      	mov	sp, r7
 80009ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d2:	4770      	bx	lr

080009d4 <LL_DMA_ClearFlag_HT0>:
  * @rmtoll LIFCR  CHTIF0    LL_DMA_ClearFlag_HT0
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_HT0(DMA_TypeDef *DMAx)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b083      	sub	sp, #12
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CHTIF0);
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	2210      	movs	r2, #16
 80009e0:	609a      	str	r2, [r3, #8]
}
 80009e2:	bf00      	nop
 80009e4:	370c      	adds	r7, #12
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr

080009ee <LL_DMA_ClearFlag_HT1>:
  * @rmtoll LIFCR  CHTIF1    LL_DMA_ClearFlag_HT1
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_HT1(DMA_TypeDef *DMAx)
{
 80009ee:	b480      	push	{r7}
 80009f0:	b083      	sub	sp, #12
 80009f2:	af00      	add	r7, sp, #0
 80009f4:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CHTIF1);
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009fc:	609a      	str	r2, [r3, #8]
}
 80009fe:	bf00      	nop
 8000a00:	370c      	adds	r7, #12
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr

08000a0a <LL_DMA_ClearFlag_TC0>:
  * @rmtoll LIFCR  CTCIF0    LL_DMA_ClearFlag_TC0
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC0(DMA_TypeDef *DMAx)
{
 8000a0a:	b480      	push	{r7}
 8000a0c:	b083      	sub	sp, #12
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CTCIF0);
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	2220      	movs	r2, #32
 8000a16:	609a      	str	r2, [r3, #8]
}
 8000a18:	bf00      	nop
 8000a1a:	370c      	adds	r7, #12
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr

08000a24 <LL_DMA_ClearFlag_TC1>:
  * @rmtoll LIFCR  CTCIF1    LL_DMA_ClearFlag_TC1
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC1(DMA_TypeDef *DMAx)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CTCIF1);
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a32:	609a      	str	r2, [r3, #8]
}
 8000a34:	bf00      	nop
 8000a36:	370c      	adds	r7, #12
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr

08000a40 <LL_DMA_ClearFlag_TE0>:
  * @rmtoll LIFCR  CTEIF0    LL_DMA_ClearFlag_TE0
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TE0(DMA_TypeDef *DMAx)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CTEIF0);
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	2208      	movs	r2, #8
 8000a4c:	609a      	str	r2, [r3, #8]
}
 8000a4e:	bf00      	nop
 8000a50:	370c      	adds	r7, #12
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr

08000a5a <LL_DMA_ClearFlag_TE1>:
  * @rmtoll LIFCR  CTEIF1    LL_DMA_ClearFlag_TE1
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TE1(DMA_TypeDef *DMAx)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	b083      	sub	sp, #12
 8000a5e:	af00      	add	r7, sp, #0
 8000a60:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CTEIF1);
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a68:	609a      	str	r2, [r3, #8]
}
 8000a6a:	bf00      	nop
 8000a6c:	370c      	adds	r7, #12
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr

08000a76 <LL_DMA_ClearFlag_DME0>:
  * @rmtoll LIFCR  CDMEIF0    LL_DMA_ClearFlag_DME0
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_DME0(DMA_TypeDef *DMAx)
{
 8000a76:	b480      	push	{r7}
 8000a78:	b083      	sub	sp, #12
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CDMEIF0);
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	2204      	movs	r2, #4
 8000a82:	609a      	str	r2, [r3, #8]
}
 8000a84:	bf00      	nop
 8000a86:	370c      	adds	r7, #12
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr

08000a90 <LL_DMA_ClearFlag_FE0>:
  * @rmtoll LIFCR  CFEIF0    LL_DMA_ClearFlag_FE0
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_FE0(DMA_TypeDef *DMAx)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CFEIF0);
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	609a      	str	r2, [r3, #8]
}
 8000a9e:	bf00      	nop
 8000aa0:	370c      	adds	r7, #12
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr

08000aaa <LL_DMA_ClearFlag_FE1>:
  * @rmtoll LIFCR  CFEIF1    LL_DMA_ClearFlag_FE1
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_FE1(DMA_TypeDef *DMAx)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	b083      	sub	sp, #12
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CFEIF1);
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	2240      	movs	r2, #64	; 0x40
 8000ab6:	609a      	str	r2, [r3, #8]
}
 8000ab8:	bf00      	nop
 8000aba:	370c      	adds	r7, #12
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr

08000ac4 <LL_USART_IsActiveFlag_PE>:
  * @rmtoll SR           PE            LL_USART_IsActiveFlag_PE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_PE(USART_TypeDef *USARTx)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_PE) == (USART_SR_PE));
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	f003 0301 	and.w	r3, r3, #1
 8000ad4:	2b01      	cmp	r3, #1
 8000ad6:	bf0c      	ite	eq
 8000ad8:	2301      	moveq	r3, #1
 8000ada:	2300      	movne	r3, #0
 8000adc:	b2db      	uxtb	r3, r3
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	370c      	adds	r7, #12
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr

08000aea <LL_USART_IsActiveFlag_FE>:
  * @rmtoll SR           FE            LL_USART_IsActiveFlag_FE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_FE(USART_TypeDef *USARTx)
{
 8000aea:	b480      	push	{r7}
 8000aec:	b083      	sub	sp, #12
 8000aee:	af00      	add	r7, sp, #0
 8000af0:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_FE) == (USART_SR_FE));
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	f003 0302 	and.w	r3, r3, #2
 8000afa:	2b02      	cmp	r3, #2
 8000afc:	bf0c      	ite	eq
 8000afe:	2301      	moveq	r3, #1
 8000b00:	2300      	movne	r3, #0
 8000b02:	b2db      	uxtb	r3, r3
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	370c      	adds	r7, #12
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr

08000b10 <LL_USART_IsActiveFlag_NE>:
  * @rmtoll SR           NF            LL_USART_IsActiveFlag_NE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_NE(USART_TypeDef *USARTx)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_NE) == (USART_SR_NE));
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	f003 0304 	and.w	r3, r3, #4
 8000b20:	2b04      	cmp	r3, #4
 8000b22:	bf0c      	ite	eq
 8000b24:	2301      	moveq	r3, #1
 8000b26:	2300      	movne	r3, #0
 8000b28:	b2db      	uxtb	r3, r3
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	370c      	adds	r7, #12
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr

08000b36 <LL_USART_IsActiveFlag_ORE>:
  * @rmtoll SR           ORE           LL_USART_IsActiveFlag_ORE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_ORE(USART_TypeDef *USARTx)
{
 8000b36:	b480      	push	{r7}
 8000b38:	b083      	sub	sp, #12
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	f003 0308 	and.w	r3, r3, #8
 8000b46:	2b08      	cmp	r3, #8
 8000b48:	bf0c      	ite	eq
 8000b4a:	2301      	moveq	r3, #1
 8000b4c:	2300      	movne	r3, #0
 8000b4e:	b2db      	uxtb	r3, r3
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	370c      	adds	r7, #12
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr

08000b5c <LL_USART_IsActiveFlag_IDLE>:
  * @rmtoll SR           IDLE          LL_USART_IsActiveFlag_IDLE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_IDLE(USART_TypeDef *USARTx)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_IDLE) == (USART_SR_IDLE));
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	f003 0310 	and.w	r3, r3, #16
 8000b6c:	2b10      	cmp	r3, #16
 8000b6e:	bf0c      	ite	eq
 8000b70:	2301      	moveq	r3, #1
 8000b72:	2300      	movne	r3, #0
 8000b74:	b2db      	uxtb	r3, r3
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	370c      	adds	r7, #12
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr

08000b82 <LL_USART_ClearFlag_PE>:
  * @rmtoll SR           PE            LL_USART_ClearFlag_PE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_PE(USART_TypeDef *USARTx)
{
 8000b82:	b480      	push	{r7}
 8000b84:	b085      	sub	sp, #20
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8000b90:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	685b      	ldr	r3, [r3, #4]
 8000b96:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8000b98:	68fb      	ldr	r3, [r7, #12]
}
 8000b9a:	bf00      	nop
 8000b9c:	3714      	adds	r7, #20
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr

08000ba6 <LL_USART_ClearFlag_FE>:
  * @rmtoll SR           FE            LL_USART_ClearFlag_FE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_FE(USART_TypeDef *USARTx)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	b085      	sub	sp, #20
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8000bb4:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	685b      	ldr	r3, [r3, #4]
 8000bba:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8000bbc:	68fb      	ldr	r3, [r7, #12]
}
 8000bbe:	bf00      	nop
 8000bc0:	3714      	adds	r7, #20
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr

08000bca <LL_USART_ClearFlag_NE>:
  * @rmtoll SR           NF            LL_USART_ClearFlag_NE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_NE(USART_TypeDef *USARTx)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	b085      	sub	sp, #20
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8000bd8:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8000be0:	68fb      	ldr	r3, [r7, #12]
}
 8000be2:	bf00      	nop
 8000be4:	3714      	adds	r7, #20
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr

08000bee <LL_USART_ClearFlag_ORE>:
  * @rmtoll SR           ORE           LL_USART_ClearFlag_ORE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	b085      	sub	sp, #20
 8000bf2:	af00      	add	r7, sp, #0
 8000bf4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8000bfc:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8000c04:	68fb      	ldr	r3, [r7, #12]
}
 8000c06:	bf00      	nop
 8000c08:	3714      	adds	r7, #20
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr

08000c12 <LL_USART_ClearFlag_IDLE>:
  * @rmtoll SR           IDLE          LL_USART_ClearFlag_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_IDLE(USART_TypeDef *USARTx)
{
 8000c12:	b480      	push	{r7}
 8000c14:	b085      	sub	sp, #20
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8000c20:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8000c28:	68fb      	ldr	r3, [r7, #12]
}
 8000c2a:	bf00      	nop
 8000c2c:	3714      	adds	r7, #20
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr

08000c36 <LL_ADC_IsActiveFlag_EOCS>:
  * @rmtoll SR       EOC            LL_ADC_IsActiveFlag_EOCS
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOCS(ADC_TypeDef *ADCx)
{
 8000c36:	b480      	push	{r7}
 8000c38:	b083      	sub	sp, #12
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_EOCS) == (LL_ADC_FLAG_EOCS));
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	f003 0302 	and.w	r3, r3, #2
 8000c46:	2b02      	cmp	r3, #2
 8000c48:	bf0c      	ite	eq
 8000c4a:	2301      	moveq	r3, #1
 8000c4c:	2300      	movne	r3, #0
 8000c4e:	b2db      	uxtb	r3, r3
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	370c      	adds	r7, #12
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr

08000c5c <LL_ADC_IsActiveFlag_OVR>:
  * @rmtoll SR       OVR            LL_ADC_IsActiveFlag_OVR
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_OVR(ADC_TypeDef *ADCx)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_OVR) == (LL_ADC_FLAG_OVR));
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	f003 0320 	and.w	r3, r3, #32
 8000c6c:	2b20      	cmp	r3, #32
 8000c6e:	bf0c      	ite	eq
 8000c70:	2301      	moveq	r3, #1
 8000c72:	2300      	movne	r3, #0
 8000c74:	b2db      	uxtb	r3, r3
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	370c      	adds	r7, #12
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr

08000c82 <LL_ADC_ClearFlag_EOCS>:
  * @rmtoll SR       EOC            LL_ADC_ClearFlag_EOCS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_EOCS(ADC_TypeDef *ADCx)
{
 8000c82:	b480      	push	{r7}
 8000c84:	b083      	sub	sp, #12
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	f06f 0202 	mvn.w	r2, #2
 8000c90:	601a      	str	r2, [r3, #0]
}
 8000c92:	bf00      	nop
 8000c94:	370c      	adds	r7, #12
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr

08000c9e <_Z5Rev16t>:
	return lobyte << 8 | hibyte;
}


inline uint16_t Rev16(uint16_t a)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	b083      	sub	sp, #12
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	80fb      	strh	r3, [r7, #6]
  asm ("rev16 %1,%0"
 8000ca8:	88fb      	ldrh	r3, [r7, #6]
 8000caa:	ba5b      	rev16	r3, r3
 8000cac:	80fb      	strh	r3, [r7, #6]
          : "=r" (a)
          : "r" (a));
  return a;
 8000cae:	88fb      	ldrh	r3, [r7, #6]
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	370c      	adds	r7, #12
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr

08000cbc <main>:
 * @brief  The application entry point.
 * @retval int
 */
const char *myName = "TranHoangAnh";
int main()
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000cc0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000cc4:	f7ff fd8a 	bl	80007dc <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000cc8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000ccc:	f7ff fd6e 	bl	80007ac <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000cd0:	2007      	movs	r0, #7
 8000cd2:	f7ff fc4d 	bl	8000570 <__NVIC_SetPriorityGrouping>

  SystemClock_Config();
 8000cd6:	f000 f9e7 	bl	80010a8 <_Z18SystemClock_Configv>
  MX_GPIO_Init();
 8000cda:	f7ff fc1f 	bl	800051c <MX_GPIO_Init>
  UHAL_USART1::developing::fristRun(reinterpret_cast<uintptr_t>(&usartBuffer), 8);
 8000cde:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <main+0x3c>)
 8000ce0:	2108      	movs	r1, #8
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f001 fa58 	bl	8002198 <_ZN11UHAL_USART110developing8fristRunEjt>
// UHAL_TIM5_PWM::developing::firstRun();
  //UHAL_ADC::developing::firstRun(reinterpret_cast<uintptr_t>(adcBuffer));

  while (true)
  {
	  UHAL_USART1::send('A');
 8000ce8:	2041      	movs	r0, #65	; 0x41
 8000cea:	f001 fa07 	bl	80020fc <_ZN11UHAL_USART14sendEh>
	  LL_mDelay(100);
 8000cee:	2064      	movs	r0, #100	; 0x64
 8000cf0:	f002 f882 	bl	8002df8 <LL_mDelay>
	  UHAL_USART1::send('A');
 8000cf4:	e7f8      	b.n	8000ce8 <main+0x2c>
 8000cf6:	bf00      	nop
 8000cf8:	20000050 	.word	0x20000050

08000cfc <USART1_IRQHandler>:
}

extern "C"
{
  void USART1_IRQHandler(void)
  {
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
    using namespace UHAL_USART1;
    using namespace UHAL_USART1::flag_IT;
    usartInterrupt++;
 8000d00:	4b39      	ldr	r3, [pc, #228]	; (8000de8 <USART1_IRQHandler+0xec>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	3301      	adds	r3, #1
 8000d06:	4a38      	ldr	r2, [pc, #224]	; (8000de8 <USART1_IRQHandler+0xec>)
 8000d08:	6013      	str	r3, [r2, #0]
		}
		namespace IDLE /// Idle Line Detected
		{
			__SFI auto isSet()
			{
				return LL_USART_IsActiveFlag_IDLE(thisInstance);
 8000d0a:	4838      	ldr	r0, [pc, #224]	; (8000dec <USART1_IRQHandler+0xf0>)
 8000d0c:	f7ff ff26 	bl	8000b5c <LL_USART_IsActiveFlag_IDLE>
 8000d10:	4603      	mov	r3, r0
 8000d12:	bf00      	nop
    if(IDLE::isSet())
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	bf14      	ite	ne
 8000d18:	2301      	movne	r3, #1
 8000d1a:	2300      	moveq	r3, #0
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d01a      	beq.n	8000d58 <USART1_IRQHandler+0x5c>
    {
    	UHAL_DMA2::DMA_USART1::disable();
 8000d22:	f000 fc2d 	bl	8001580 <_ZN9UHAL_DMA210DMA_USART17disableEv>
    	waitUntil(UHAL_DMA2::DMA_USART1::isDisabled());
 8000d26:	f000 fc35 	bl	8001594 <_ZN9UHAL_DMA210DMA_USART110isDisabledEv>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	bf0c      	ite	eq
 8000d30:	2301      	moveq	r3, #1
 8000d32:	2300      	movne	r3, #0
 8000d34:	b2db      	uxtb	r3, r3
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d000      	beq.n	8000d3c <USART1_IRQHandler+0x40>
 8000d3a:	e7f4      	b.n	8000d26 <USART1_IRQHandler+0x2a>
    	UHAL_DMA2::DMA_USART1::setNumberOfDataTransfer(8);
 8000d3c:	2008      	movs	r0, #8
 8000d3e:	f000 fbe5 	bl	800150c <_ZN9UHAL_DMA210DMA_USART123setNumberOfDataTransferEt>
    	UHAL_DMA2::DMA_USART1::enable();
 8000d42:	f000 fbd9 	bl	80014f8 <_ZN9UHAL_DMA210DMA_USART16enableEv>
    	usartIdel++;
 8000d46:	4b2a      	ldr	r3, [pc, #168]	; (8000df0 <USART1_IRQHandler+0xf4>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	3301      	adds	r3, #1
 8000d4c:	4a28      	ldr	r2, [pc, #160]	; (8000df0 <USART1_IRQHandler+0xf4>)
 8000d4e:	6013      	str	r3, [r2, #0]
				if constexpr (systemDebug == debug_T::debugOn)
				{
					auto posAssert = isSet();
					assert_param(posAssert);
				}
				LL_USART_ClearFlag_IDLE(thisInstance);
 8000d50:	4826      	ldr	r0, [pc, #152]	; (8000dec <USART1_IRQHandler+0xf0>)
 8000d52:	f7ff ff5e 	bl	8000c12 <LL_USART_ClearFlag_IDLE>
			}
 8000d56:	bf00      	nop
		}
		namespace PE /// Parity error detected
		{
			__SFI auto isSet()
			{
				return LL_USART_IsActiveFlag_PE(thisInstance);
 8000d58:	4824      	ldr	r0, [pc, #144]	; (8000dec <USART1_IRQHandler+0xf0>)
 8000d5a:	f7ff feb3 	bl	8000ac4 <LL_USART_IsActiveFlag_PE>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	bf00      	nop
    	IDLE::clear();
    }
    if(PE::isSet() || NF::isSet()||FE::isSet()||ORE::isSet())
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d114      	bne.n	8000d90 <USART1_IRQHandler+0x94>
		}
		namespace NF /// Noise flag
		{
			__SFI auto isSet()
			{
				return LL_USART_IsActiveFlag_NE(thisInstance);
 8000d66:	4821      	ldr	r0, [pc, #132]	; (8000dec <USART1_IRQHandler+0xf0>)
 8000d68:	f7ff fed2 	bl	8000b10 <LL_USART_IsActiveFlag_NE>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	bf00      	nop
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d10d      	bne.n	8000d90 <USART1_IRQHandler+0x94>
		}
		namespace FE /// Framing error
		{
			__SFI auto isSet()
			{
				return LL_USART_IsActiveFlag_FE(thisInstance);
 8000d74:	481d      	ldr	r0, [pc, #116]	; (8000dec <USART1_IRQHandler+0xf0>)
 8000d76:	f7ff feb8 	bl	8000aea <LL_USART_IsActiveFlag_FE>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	bf00      	nop
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d106      	bne.n	8000d90 <USART1_IRQHandler+0x94>
		}
		namespace ORE /// Overrun error detected
		{
			__SFI auto isSet()
			{
				return LL_USART_IsActiveFlag_ORE(thisInstance);
 8000d82:	481a      	ldr	r0, [pc, #104]	; (8000dec <USART1_IRQHandler+0xf0>)
 8000d84:	f7ff fed7 	bl	8000b36 <LL_USART_IsActiveFlag_ORE>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	bf00      	nop
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <USART1_IRQHandler+0x98>
 8000d90:	2301      	movs	r3, #1
 8000d92:	e000      	b.n	8000d96 <USART1_IRQHandler+0x9a>
 8000d94:	2300      	movs	r3, #0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d021      	beq.n	8000dde <USART1_IRQHandler+0xe2>
    {
    	usartErro++;
 8000d9a:	4b16      	ldr	r3, [pc, #88]	; (8000df4 <USART1_IRQHandler+0xf8>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	3301      	adds	r3, #1
 8000da0:	4a14      	ldr	r2, [pc, #80]	; (8000df4 <USART1_IRQHandler+0xf8>)
 8000da2:	6013      	str	r3, [r2, #0]
    	UHAL_DMA2::DMA_USART1::disable();
 8000da4:	f000 fbec 	bl	8001580 <_ZN9UHAL_DMA210DMA_USART17disableEv>
    	waitUntil(UHAL_DMA2::DMA_USART1::isDisabled());
 8000da8:	f000 fbf4 	bl	8001594 <_ZN9UHAL_DMA210DMA_USART110isDisabledEv>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	bf0c      	ite	eq
 8000db2:	2301      	moveq	r3, #1
 8000db4:	2300      	movne	r3, #0
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d000      	beq.n	8000dbe <USART1_IRQHandler+0xc2>
 8000dbc:	e7f4      	b.n	8000da8 <USART1_IRQHandler+0xac>
				LL_USART_ClearFlag_PE(thisInstance);
 8000dbe:	480b      	ldr	r0, [pc, #44]	; (8000dec <USART1_IRQHandler+0xf0>)
 8000dc0:	f7ff fedf 	bl	8000b82 <LL_USART_ClearFlag_PE>
			}
 8000dc4:	bf00      	nop
				LL_USART_ClearFlag_NE(thisInstance);
 8000dc6:	4809      	ldr	r0, [pc, #36]	; (8000dec <USART1_IRQHandler+0xf0>)
 8000dc8:	f7ff feff 	bl	8000bca <LL_USART_ClearFlag_NE>
			}
 8000dcc:	bf00      	nop
				LL_USART_ClearFlag_FE(thisInstance);
 8000dce:	4807      	ldr	r0, [pc, #28]	; (8000dec <USART1_IRQHandler+0xf0>)
 8000dd0:	f7ff fee9 	bl	8000ba6 <LL_USART_ClearFlag_FE>
			}
 8000dd4:	bf00      	nop
				if constexpr (systemDebug == debug_T::debugOn)
				{
					auto posAssert = isSet();
					assert_param(posAssert);
				}
				LL_USART_ClearFlag_ORE(thisInstance);
 8000dd6:	4805      	ldr	r0, [pc, #20]	; (8000dec <USART1_IRQHandler+0xf0>)
 8000dd8:	f7ff ff09 	bl	8000bee <LL_USART_ClearFlag_ORE>
			}
 8000ddc:	bf00      	nop
    	PE::clear();
    	NF::clear();
    	FE::clear();
    	ORE::clear();
    }
    NVIC_ClearPendingIRQ(UHAL_USART1::thisIRQn);
 8000dde:	2025      	movs	r0, #37	; 0x25
 8000de0:	f7ff fbea 	bl	80005b8 <__NVIC_ClearPendingIRQ>
  }
 8000de4:	bf00      	nop
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	20000044 	.word	0x20000044
 8000dec:	40011000 	.word	0x40011000
 8000df0:	2000004c 	.word	0x2000004c
 8000df4:	20000048 	.word	0x20000048

08000df8 <DMA2_Stream0_IRQHandler>:

  void DMA2_Stream0_IRQHandler()
  {
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
    dmaInterrupt++;
 8000dfc:	4b39      	ldr	r3, [pc, #228]	; (8000ee4 <DMA2_Stream0_IRQHandler+0xec>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	3301      	adds	r3, #1
 8000e02:	4a38      	ldr	r2, [pc, #224]	; (8000ee4 <DMA2_Stream0_IRQHandler+0xec>)
 8000e04:	6013      	str	r3, [r2, #0]
          namespace DMEIF // Direct mode error
          {
           
            __SFI auto isSet()
            {
               return LL_DMA_IsActiveFlag_DME0(thisInstance);
 8000e06:	4838      	ldr	r0, [pc, #224]	; (8000ee8 <DMA2_Stream0_IRQHandler+0xf0>)
 8000e08:	f7ff fdab 	bl	8000962 <LL_DMA_IsActiveFlag_DME0>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	bf00      	nop
    using namespace UHAL_DMA2::DMA_ADC1;
    if (flag_IT::DMEIF::isSet())
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	bf14      	ite	ne
 8000e14:	2301      	movne	r3, #1
 8000e16:	2300      	moveq	r3, #0
 8000e18:	b2db      	uxtb	r3, r3
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d008      	beq.n	8000e30 <DMA2_Stream0_IRQHandler+0x38>
    {
      dmaDirectModeERROR++;
 8000e1e:	4b33      	ldr	r3, [pc, #204]	; (8000eec <DMA2_Stream0_IRQHandler+0xf4>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	3301      	adds	r3, #1
 8000e24:	4a31      	ldr	r2, [pc, #196]	; (8000eec <DMA2_Stream0_IRQHandler+0xf4>)
 8000e26:	6013      	str	r3, [r2, #0]
            }
            __SFI auto clear()  
            {
                LL_DMA_ClearFlag_DME0(thisInstance);
 8000e28:	482f      	ldr	r0, [pc, #188]	; (8000ee8 <DMA2_Stream0_IRQHandler+0xf0>)
 8000e2a:	f7ff fe24 	bl	8000a76 <LL_DMA_ClearFlag_DME0>
            }       
 8000e2e:	bf00      	nop
               return LL_DMA_IsActiveFlag_HT0(thisInstance);
 8000e30:	482d      	ldr	r0, [pc, #180]	; (8000ee8 <DMA2_Stream0_IRQHandler+0xf0>)
 8000e32:	f7ff fd21 	bl	8000878 <LL_DMA_IsActiveFlag_HT0>
 8000e36:	4603      	mov	r3, r0
 8000e38:	bf00      	nop
      flag_IT::DMEIF::clear();
    }
    if (flag_IT::HTIF::isSet())
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	bf14      	ite	ne
 8000e3e:	2301      	movne	r3, #1
 8000e40:	2300      	moveq	r3, #0
 8000e42:	b2db      	uxtb	r3, r3
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d008      	beq.n	8000e5a <DMA2_Stream0_IRQHandler+0x62>
    {
      dmaHalfTrans++;
 8000e48:	4b29      	ldr	r3, [pc, #164]	; (8000ef0 <DMA2_Stream0_IRQHandler+0xf8>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	4a28      	ldr	r2, [pc, #160]	; (8000ef0 <DMA2_Stream0_IRQHandler+0xf8>)
 8000e50:	6013      	str	r3, [r2, #0]
               LL_DMA_ClearFlag_HT0(thisInstance);
 8000e52:	4825      	ldr	r0, [pc, #148]	; (8000ee8 <DMA2_Stream0_IRQHandler+0xf0>)
 8000e54:	f7ff fdbe 	bl	80009d4 <LL_DMA_ClearFlag_HT0>
            }         
 8000e58:	bf00      	nop
               return LL_DMA_IsActiveFlag_TC0(thisInstance);
 8000e5a:	4823      	ldr	r0, [pc, #140]	; (8000ee8 <DMA2_Stream0_IRQHandler+0xf0>)
 8000e5c:	f7ff fd33 	bl	80008c6 <LL_DMA_IsActiveFlag_TC0>
 8000e60:	4603      	mov	r3, r0
 8000e62:	bf00      	nop
     flag_IT::HTIF::clear();
    }
    if (flag_IT::TCIF::isSet())
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	bf14      	ite	ne
 8000e68:	2301      	movne	r3, #1
 8000e6a:	2300      	moveq	r3, #0
 8000e6c:	b2db      	uxtb	r3, r3
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d008      	beq.n	8000e84 <DMA2_Stream0_IRQHandler+0x8c>
    {
      dmaCompTrans++;
 8000e72:	4b20      	ldr	r3, [pc, #128]	; (8000ef4 <DMA2_Stream0_IRQHandler+0xfc>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	3301      	adds	r3, #1
 8000e78:	4a1e      	ldr	r2, [pc, #120]	; (8000ef4 <DMA2_Stream0_IRQHandler+0xfc>)
 8000e7a:	6013      	str	r3, [r2, #0]
                LL_DMA_ClearFlag_TC0(thisInstance);
 8000e7c:	481a      	ldr	r0, [pc, #104]	; (8000ee8 <DMA2_Stream0_IRQHandler+0xf0>)
 8000e7e:	f7ff fdc4 	bl	8000a0a <LL_DMA_ClearFlag_TC0>
            }       
 8000e82:	bf00      	nop
               return LL_DMA_IsActiveFlag_TE0(thisInstance);
 8000e84:	4818      	ldr	r0, [pc, #96]	; (8000ee8 <DMA2_Stream0_IRQHandler+0xf0>)
 8000e86:	f7ff fd45 	bl	8000914 <LL_DMA_IsActiveFlag_TE0>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	bf00      	nop
      flag_IT::TCIF::clear();
    }
    if (flag_IT::TEIF::isSet())
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	bf14      	ite	ne
 8000e92:	2301      	movne	r3, #1
 8000e94:	2300      	moveq	r3, #0
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d008      	beq.n	8000eae <DMA2_Stream0_IRQHandler+0xb6>
    {
      dmaTransError++;
 8000e9c:	4b16      	ldr	r3, [pc, #88]	; (8000ef8 <DMA2_Stream0_IRQHandler+0x100>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	4a15      	ldr	r2, [pc, #84]	; (8000ef8 <DMA2_Stream0_IRQHandler+0x100>)
 8000ea4:	6013      	str	r3, [r2, #0]
                LL_DMA_ClearFlag_TE0(thisInstance);
 8000ea6:	4810      	ldr	r0, [pc, #64]	; (8000ee8 <DMA2_Stream0_IRQHandler+0xf0>)
 8000ea8:	f7ff fdca 	bl	8000a40 <LL_DMA_ClearFlag_TE0>
            }       
 8000eac:	bf00      	nop
               return LL_DMA_IsActiveFlag_FE0(thisInstance);
 8000eae:	480e      	ldr	r0, [pc, #56]	; (8000ee8 <DMA2_Stream0_IRQHandler+0xf0>)
 8000eb0:	f7ff fd6a 	bl	8000988 <LL_DMA_IsActiveFlag_FE0>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	bf00      	nop
      flag_IT::TEIF::clear();
    }
    if (flag_IT::FEIF::isSet())
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	bf14      	ite	ne
 8000ebc:	2301      	movne	r3, #1
 8000ebe:	2300      	moveq	r3, #0
 8000ec0:	b2db      	uxtb	r3, r3
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d008      	beq.n	8000ed8 <DMA2_Stream0_IRQHandler+0xe0>
    {
      dmaFifoOverUnder++;
 8000ec6:	4b0d      	ldr	r3, [pc, #52]	; (8000efc <DMA2_Stream0_IRQHandler+0x104>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	3301      	adds	r3, #1
 8000ecc:	4a0b      	ldr	r2, [pc, #44]	; (8000efc <DMA2_Stream0_IRQHandler+0x104>)
 8000ece:	6013      	str	r3, [r2, #0]
                LL_DMA_ClearFlag_FE0(thisInstance);
 8000ed0:	4805      	ldr	r0, [pc, #20]	; (8000ee8 <DMA2_Stream0_IRQHandler+0xf0>)
 8000ed2:	f7ff fddd 	bl	8000a90 <LL_DMA_ClearFlag_FE0>
            }       
 8000ed6:	bf00      	nop
      flag_IT::FEIF::clear();
    }

    NVIC_ClearPendingIRQ(thisIRQn);
 8000ed8:	2038      	movs	r0, #56	; 0x38
 8000eda:	f7ff fb6d 	bl	80005b8 <__NVIC_ClearPendingIRQ>
  }
 8000ede:	bf00      	nop
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	20000028 	.word	0x20000028
 8000ee8:	40026400 	.word	0x40026400
 8000eec:	2000003c 	.word	0x2000003c
 8000ef0:	2000002c 	.word	0x2000002c
 8000ef4:	20000030 	.word	0x20000030
 8000ef8:	20000034 	.word	0x20000034
 8000efc:	20000038 	.word	0x20000038

08000f00 <DMA2_Stream5_IRQHandler>:

  void DMA2_Stream5_IRQHandler()
  {
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
	  using namespace UHAL_DMA2::DMA_USART1;
	  usartDMA ++;
 8000f04:	4b46      	ldr	r3, [pc, #280]	; (8001020 <DMA2_Stream5_IRQHandler+0x120>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	3301      	adds	r3, #1
 8000f0a:	4a45      	ldr	r2, [pc, #276]	; (8001020 <DMA2_Stream5_IRQHandler+0x120>)
 8000f0c:	6013      	str	r3, [r2, #0]
          namespace DMEIF // Direct mode error
          {
           
            __SFI auto isSet()
            {
               return LL_DMA_IsActiveFlag_DME0(thisInstance);
 8000f0e:	4845      	ldr	r0, [pc, #276]	; (8001024 <DMA2_Stream5_IRQHandler+0x124>)
 8000f10:	f7ff fd27 	bl	8000962 <LL_DMA_IsActiveFlag_DME0>
 8000f14:	4603      	mov	r3, r0
 8000f16:	bf00      	nop
	  if (flag_IT::DMEIF::isSet())
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	bf14      	ite	ne
 8000f1c:	2301      	movne	r3, #1
 8000f1e:	2300      	moveq	r3, #0
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d008      	beq.n	8000f38 <DMA2_Stream5_IRQHandler+0x38>
	      {
	        dmaDirectModeERROR++;
 8000f26:	4b40      	ldr	r3, [pc, #256]	; (8001028 <DMA2_Stream5_IRQHandler+0x128>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	4a3e      	ldr	r2, [pc, #248]	; (8001028 <DMA2_Stream5_IRQHandler+0x128>)
 8000f2e:	6013      	str	r3, [r2, #0]
            }
            __SFI auto clear()  
            {
                LL_DMA_ClearFlag_DME0(thisInstance);
 8000f30:	483c      	ldr	r0, [pc, #240]	; (8001024 <DMA2_Stream5_IRQHandler+0x124>)
 8000f32:	f7ff fda0 	bl	8000a76 <LL_DMA_ClearFlag_DME0>
            }       
 8000f36:	bf00      	nop
               return LL_DMA_IsActiveFlag_HT1(thisInstance);
 8000f38:	483a      	ldr	r0, [pc, #232]	; (8001024 <DMA2_Stream5_IRQHandler+0x124>)
 8000f3a:	f7ff fcb0 	bl	800089e <LL_DMA_IsActiveFlag_HT1>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	bf00      	nop
	        flag_IT::DMEIF::clear();
	      }

	      if (flag_IT::HTIF::isSet())
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	bf14      	ite	ne
 8000f46:	2301      	movne	r3, #1
 8000f48:	2300      	moveq	r3, #0
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d008      	beq.n	8000f62 <DMA2_Stream5_IRQHandler+0x62>
	      {
	        dmaHalfTrans++;
 8000f50:	4b36      	ldr	r3, [pc, #216]	; (800102c <DMA2_Stream5_IRQHandler+0x12c>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	3301      	adds	r3, #1
 8000f56:	4a35      	ldr	r2, [pc, #212]	; (800102c <DMA2_Stream5_IRQHandler+0x12c>)
 8000f58:	6013      	str	r3, [r2, #0]
               LL_DMA_ClearFlag_HT1(thisInstance);
 8000f5a:	4832      	ldr	r0, [pc, #200]	; (8001024 <DMA2_Stream5_IRQHandler+0x124>)
 8000f5c:	f7ff fd47 	bl	80009ee <LL_DMA_ClearFlag_HT1>
            }         
 8000f60:	bf00      	nop
               return LL_DMA_IsActiveFlag_TC1(thisInstance);
 8000f62:	4830      	ldr	r0, [pc, #192]	; (8001024 <DMA2_Stream5_IRQHandler+0x124>)
 8000f64:	f7ff fcc2 	bl	80008ec <LL_DMA_IsActiveFlag_TC1>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	bf00      	nop
	       flag_IT::HTIF::clear();
	      }

	      if (flag_IT::TCIF::isSet())
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	bf14      	ite	ne
 8000f70:	2301      	movne	r3, #1
 8000f72:	2300      	moveq	r3, #0
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d023      	beq.n	8000fc2 <DMA2_Stream5_IRQHandler+0xc2>
	      {
	    	 usartBuffer[4] = Rev16(usartBuffer[0]);
 8000f7a:	4b2d      	ldr	r3, [pc, #180]	; (8001030 <DMA2_Stream5_IRQHandler+0x130>)
 8000f7c:	881b      	ldrh	r3, [r3, #0]
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f7ff fe8d 	bl	8000c9e <_Z5Rev16t>
 8000f84:	4603      	mov	r3, r0
 8000f86:	461a      	mov	r2, r3
 8000f88:	4b29      	ldr	r3, [pc, #164]	; (8001030 <DMA2_Stream5_IRQHandler+0x130>)
 8000f8a:	811a      	strh	r2, [r3, #8]
	    	 usartBuffer[5] = Rev16(usartBuffer[1]);
 8000f8c:	4b28      	ldr	r3, [pc, #160]	; (8001030 <DMA2_Stream5_IRQHandler+0x130>)
 8000f8e:	885b      	ldrh	r3, [r3, #2]
 8000f90:	4618      	mov	r0, r3
 8000f92:	f7ff fe84 	bl	8000c9e <_Z5Rev16t>
 8000f96:	4603      	mov	r3, r0
 8000f98:	461a      	mov	r2, r3
 8000f9a:	4b25      	ldr	r3, [pc, #148]	; (8001030 <DMA2_Stream5_IRQHandler+0x130>)
 8000f9c:	815a      	strh	r2, [r3, #10]
	    	 usartBuffer[6] = Rev16(usartBuffer[2]);
 8000f9e:	4b24      	ldr	r3, [pc, #144]	; (8001030 <DMA2_Stream5_IRQHandler+0x130>)
 8000fa0:	889b      	ldrh	r3, [r3, #4]
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f7ff fe7b 	bl	8000c9e <_Z5Rev16t>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	461a      	mov	r2, r3
 8000fac:	4b20      	ldr	r3, [pc, #128]	; (8001030 <DMA2_Stream5_IRQHandler+0x130>)
 8000fae:	819a      	strh	r2, [r3, #12]
	        dmaCompTrans++;
 8000fb0:	4b20      	ldr	r3, [pc, #128]	; (8001034 <DMA2_Stream5_IRQHandler+0x134>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	4a1f      	ldr	r2, [pc, #124]	; (8001034 <DMA2_Stream5_IRQHandler+0x134>)
 8000fb8:	6013      	str	r3, [r2, #0]
                LL_DMA_ClearFlag_TC1(thisInstance);
 8000fba:	481a      	ldr	r0, [pc, #104]	; (8001024 <DMA2_Stream5_IRQHandler+0x124>)
 8000fbc:	f7ff fd32 	bl	8000a24 <LL_DMA_ClearFlag_TC1>
            }       
 8000fc0:	bf00      	nop
               return LL_DMA_IsActiveFlag_TE1(thisInstance);
 8000fc2:	4818      	ldr	r0, [pc, #96]	; (8001024 <DMA2_Stream5_IRQHandler+0x124>)
 8000fc4:	f7ff fcb9 	bl	800093a <LL_DMA_IsActiveFlag_TE1>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	bf00      	nop
	        flag_IT::TCIF::clear();
	      }

	      if (flag_IT::TEIF::isSet())
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	bf14      	ite	ne
 8000fd0:	2301      	movne	r3, #1
 8000fd2:	2300      	moveq	r3, #0
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d008      	beq.n	8000fec <DMA2_Stream5_IRQHandler+0xec>
	      {
	        dmaTransError++;
 8000fda:	4b17      	ldr	r3, [pc, #92]	; (8001038 <DMA2_Stream5_IRQHandler+0x138>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	3301      	adds	r3, #1
 8000fe0:	4a15      	ldr	r2, [pc, #84]	; (8001038 <DMA2_Stream5_IRQHandler+0x138>)
 8000fe2:	6013      	str	r3, [r2, #0]
                LL_DMA_ClearFlag_TE1(thisInstance);
 8000fe4:	480f      	ldr	r0, [pc, #60]	; (8001024 <DMA2_Stream5_IRQHandler+0x124>)
 8000fe6:	f7ff fd38 	bl	8000a5a <LL_DMA_ClearFlag_TE1>
            }       
 8000fea:	bf00      	nop
               return LL_DMA_IsActiveFlag_FE1(thisInstance);
 8000fec:	480d      	ldr	r0, [pc, #52]	; (8001024 <DMA2_Stream5_IRQHandler+0x124>)
 8000fee:	f7ff fcde 	bl	80009ae <LL_DMA_IsActiveFlag_FE1>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	bf00      	nop
	        flag_IT::TEIF::clear();
	      }

	      if (flag_IT::FEIF::isSet())
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	bf14      	ite	ne
 8000ffa:	2301      	movne	r3, #1
 8000ffc:	2300      	moveq	r3, #0
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	2b00      	cmp	r3, #0
 8001002:	d008      	beq.n	8001016 <DMA2_Stream5_IRQHandler+0x116>
	      {
	        dmaFifoOverUnder++;
 8001004:	4b0d      	ldr	r3, [pc, #52]	; (800103c <DMA2_Stream5_IRQHandler+0x13c>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	3301      	adds	r3, #1
 800100a:	4a0c      	ldr	r2, [pc, #48]	; (800103c <DMA2_Stream5_IRQHandler+0x13c>)
 800100c:	6013      	str	r3, [r2, #0]
                LL_DMA_ClearFlag_FE1(thisInstance);
 800100e:	4805      	ldr	r0, [pc, #20]	; (8001024 <DMA2_Stream5_IRQHandler+0x124>)
 8001010:	f7ff fd4b 	bl	8000aaa <LL_DMA_ClearFlag_FE1>
            }       
 8001014:	bf00      	nop
	        flag_IT::FEIF::clear();
	      }

    NVIC_ClearPendingIRQ(thisIRQn);
 8001016:	2044      	movs	r0, #68	; 0x44
 8001018:	f7ff face 	bl	80005b8 <__NVIC_ClearPendingIRQ>
  }
 800101c:	bf00      	nop
 800101e:	bd80      	pop	{r7, pc}
 8001020:	20000040 	.word	0x20000040
 8001024:	40026400 	.word	0x40026400
 8001028:	2000003c 	.word	0x2000003c
 800102c:	2000002c 	.word	0x2000002c
 8001030:	20000050 	.word	0x20000050
 8001034:	20000030 	.word	0x20000030
 8001038:	20000034 	.word	0x20000034
 800103c:	20000038 	.word	0x20000038

08001040 <ADC_IRQHandler>:

  void ADC_IRQHandler()
  {
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
    	/*This bit is set by hardware at the end of the conversion of a regular group of channels. It is
    cleared by software or by reading the ADC_DR register.*/
        namespace EOC   /// @brief End of conversion of regular group
        {
            __SFI auto isSet() {
              return  LL_ADC_IsActiveFlag_EOCS(thisInstance);
 8001044:	4815      	ldr	r0, [pc, #84]	; (800109c <ADC_IRQHandler+0x5c>)
 8001046:	f7ff fdf6 	bl	8000c36 <LL_ADC_IsActiveFlag_EOCS>
 800104a:	4603      	mov	r3, r0
 800104c:	bf00      	nop

    /// compt
    if (UHAL_ADC::flag_IT::EOC::isSet())
 800104e:	2b00      	cmp	r3, #0
 8001050:	bf14      	ite	ne
 8001052:	2301      	movne	r3, #1
 8001054:	2300      	moveq	r3, #0
 8001056:	b2db      	uxtb	r3, r3
 8001058:	2b00      	cmp	r3, #0
 800105a:	d008      	beq.n	800106e <ADC_IRQHandler+0x2e>
    {
      adcComp++;
 800105c:	4b10      	ldr	r3, [pc, #64]	; (80010a0 <ADC_IRQHandler+0x60>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	3301      	adds	r3, #1
 8001062:	4a0f      	ldr	r2, [pc, #60]	; (80010a0 <ADC_IRQHandler+0x60>)
 8001064:	6013      	str	r3, [r2, #0]
            }

            __SFI auto clear() {
                LL_ADC_ClearFlag_EOCS(thisInstance);
 8001066:	480d      	ldr	r0, [pc, #52]	; (800109c <ADC_IRQHandler+0x5c>)
 8001068:	f7ff fe0b 	bl	8000c82 <LL_ADC_ClearFlag_EOCS>
            }
 800106c:	bf00      	nop
            [[deprecated("this flag no pending")]] __SFI auto clearPendingBit();
        }
        namespace OVR   /// @brief Overrun error
        {
            __SFI auto isSet() {
               return LL_ADC_IsActiveFlag_OVR(thisInstance);
 800106e:	480b      	ldr	r0, [pc, #44]	; (800109c <ADC_IRQHandler+0x5c>)
 8001070:	f7ff fdf4 	bl	8000c5c <LL_ADC_IsActiveFlag_OVR>
 8001074:	4603      	mov	r3, r0
 8001076:	bf00      	nop
      UHAL_ADC::flag_IT::EOC::clear();
    }
    /// Overrun Handle
    if (UHAL_ADC::flag_IT::OVR::isSet())
 8001078:	2b00      	cmp	r3, #0
 800107a:	bf14      	ite	ne
 800107c:	2301      	movne	r3, #1
 800107e:	2300      	moveq	r3, #0
 8001080:	b2db      	uxtb	r3, r3
 8001082:	2b00      	cmp	r3, #0
 8001084:	d004      	beq.n	8001090 <ADC_IRQHandler+0x50>
    {
      adcOverrun++;
 8001086:	4b07      	ldr	r3, [pc, #28]	; (80010a4 <ADC_IRQHandler+0x64>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	3301      	adds	r3, #1
 800108c:	4a05      	ldr	r2, [pc, #20]	; (80010a4 <ADC_IRQHandler+0x64>)
 800108e:	6013      	str	r3, [r2, #0]
      // todo implement this recover for overrun.
      // UHAL_ADC::recoverAdcFormOverrun(reinterpret_cast<uintptr_t>(&adcBuffer[0]));
    }
    NVIC_ClearPendingIRQ(ADC_IRQn);
 8001090:	2012      	movs	r0, #18
 8001092:	f7ff fa91 	bl	80005b8 <__NVIC_ClearPendingIRQ>
  }
 8001096:	bf00      	nop
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40012000 	.word	0x40012000
 80010a0:	20000024 	.word	0x20000024
 80010a4:	20000020 	.word	0x20000020

080010a8 <_Z18SystemClock_Configv>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_5);
 80010ac:	2005      	movs	r0, #5
 80010ae:	f7ff fbad 	bl	800080c <LL_FLASH_SetLatency>
  while (LL_FLASH_GetLatency() != LL_FLASH_LATENCY_5)
 80010b2:	f7ff fbbf 	bl	8000834 <LL_FLASH_GetLatency>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b05      	cmp	r3, #5
 80010ba:	bf14      	ite	ne
 80010bc:	2301      	movne	r3, #1
 80010be:	2300      	moveq	r3, #0
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d000      	beq.n	80010c8 <_Z18SystemClock_Configv+0x20>
 80010c6:	e7f4      	b.n	80010b2 <_Z18SystemClock_Configv+0xa>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 80010c8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80010cc:	f7ff fbc0 	bl	8000850 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSE_EnableBypass();
 80010d0:	f7ff fa90 	bl	80005f4 <LL_RCC_HSE_EnableBypass>
  LL_RCC_HSE_Enable();
 80010d4:	f7ff fa9e 	bl	8000614 <LL_RCC_HSE_Enable>

  /* Wait till HSE is ready */
  while (LL_RCC_HSE_IsReady() != 1)
 80010d8:	f7ff faac 	bl	8000634 <LL_RCC_HSE_IsReady>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b01      	cmp	r3, #1
 80010e0:	bf14      	ite	ne
 80010e2:	2301      	movne	r3, #1
 80010e4:	2300      	moveq	r3, #0
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d000      	beq.n	80010ee <_Z18SystemClock_Configv+0x46>
 80010ec:	e7f4      	b.n	80010d8 <_Z18SystemClock_Configv+0x30>
  {
  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_4, 168, LL_RCC_PLLP_DIV_2);
 80010ee:	2300      	movs	r3, #0
 80010f0:	22a8      	movs	r2, #168	; 0xa8
 80010f2:	2104      	movs	r1, #4
 80010f4:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80010f8:	f7ff fb32 	bl	8000760 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 80010fc:	f7ff fb0c 	bl	8000718 <LL_RCC_PLL_Enable>

  /* Wait till PLL is ready */
  while (LL_RCC_PLL_IsReady() != 1)
 8001100:	f7ff fb1a 	bl	8000738 <LL_RCC_PLL_IsReady>
 8001104:	4603      	mov	r3, r0
 8001106:	2b01      	cmp	r3, #1
 8001108:	bf14      	ite	ne
 800110a:	2301      	movne	r3, #1
 800110c:	2300      	moveq	r3, #0
 800110e:	b2db      	uxtb	r3, r3
 8001110:	2b00      	cmp	r3, #0
 8001112:	d000      	beq.n	8001116 <_Z18SystemClock_Configv+0x6e>
 8001114:	e7f4      	b.n	8001100 <_Z18SystemClock_Configv+0x58>
  {
  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001116:	2000      	movs	r0, #0
 8001118:	f7ff fac2 	bl	80006a0 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_4);
 800111c:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8001120:	f7ff fad2 	bl	80006c8 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
 8001124:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001128:	f7ff fae2 	bl	80006f0 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 800112c:	2002      	movs	r0, #2
 800112e:	f7ff fa95 	bl	800065c <LL_RCC_SetSysClkSource>

  /* Wait till System clock is ready */
  while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001132:	f7ff faa7 	bl	8000684 <LL_RCC_GetSysClkSource>
 8001136:	4603      	mov	r3, r0
 8001138:	2b08      	cmp	r3, #8
 800113a:	bf14      	ite	ne
 800113c:	2301      	movne	r3, #1
 800113e:	2300      	moveq	r3, #0
 8001140:	b2db      	uxtb	r3, r3
 8001142:	2b00      	cmp	r3, #0
 8001144:	d000      	beq.n	8001148 <_Z18SystemClock_Configv+0xa0>
 8001146:	e7f4      	b.n	8001132 <_Z18SystemClock_Configv+0x8a>
  {
  }
  LL_Init1msTick(168000000);
 8001148:	4803      	ldr	r0, [pc, #12]	; (8001158 <_Z18SystemClock_Configv+0xb0>)
 800114a:	f001 fe47 	bl	8002ddc <LL_Init1msTick>
  LL_SetSystemCoreClock(168000000);
 800114e:	4802      	ldr	r0, [pc, #8]	; (8001158 <_Z18SystemClock_Configv+0xb0>)
 8001150:	f001 fe78 	bl	8002e44 <LL_SetSystemCoreClock>
}
 8001154:	bf00      	nop
 8001156:	bd80      	pop	{r7, pc}
 8001158:	0a037a00 	.word	0x0a037a00

0800115c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001160:	e7fe      	b.n	8001160 <NMI_Handler+0x4>

08001162 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001162:	b480      	push	{r7}
 8001164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001166:	e7fe      	b.n	8001166 <HardFault_Handler+0x4>

08001168 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800116c:	e7fe      	b.n	800116c <MemManage_Handler+0x4>

0800116e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800116e:	b480      	push	{r7}
 8001170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001172:	e7fe      	b.n	8001172 <BusFault_Handler+0x4>

08001174 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001178:	e7fe      	b.n	8001178 <UsageFault_Handler+0x4>

0800117a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800117a:	b480      	push	{r7}
 800117c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800117e:	bf00      	nop
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr

08001188 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800118c:	bf00      	nop
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr

08001196 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001196:	b480      	push	{r7}
 8001198:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800119a:	bf00      	nop
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr

080011a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011a8:	bf00      	nop
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr

080011b2 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80011b2:	b480      	push	{r7}
 80011b4:	af00      	add	r7, sp, #0

  /* USER CODE END UART4_IRQn 0 */
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80011b6:	bf00      	nop
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr

080011c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011c4:	4b06      	ldr	r3, [pc, #24]	; (80011e0 <SystemInit+0x20>)
 80011c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011ca:	4a05      	ldr	r2, [pc, #20]	; (80011e0 <SystemInit+0x20>)
 80011cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011d4:	bf00      	nop
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	e000ed00 	.word	0xe000ed00

080011e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80011e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800121c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011e8:	480d      	ldr	r0, [pc, #52]	; (8001220 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011ea:	490e      	ldr	r1, [pc, #56]	; (8001224 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011ec:	4a0e      	ldr	r2, [pc, #56]	; (8001228 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011f0:	e002      	b.n	80011f8 <LoopCopyDataInit>

080011f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011f6:	3304      	adds	r3, #4

080011f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011fc:	d3f9      	bcc.n	80011f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011fe:	4a0b      	ldr	r2, [pc, #44]	; (800122c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001200:	4c0b      	ldr	r4, [pc, #44]	; (8001230 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001202:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001204:	e001      	b.n	800120a <LoopFillZerobss>

08001206 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001206:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001208:	3204      	adds	r2, #4

0800120a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800120a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800120c:	d3fb      	bcc.n	8001206 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800120e:	f7ff ffd7 	bl	80011c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001212:	f001 fe27 	bl	8002e64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001216:	f7ff fd51 	bl	8000cbc <main>
  bx  lr    
 800121a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800121c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001220:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001224:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8001228:	08002f04 	.word	0x08002f04
  ldr r2, =_sbss
 800122c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8001230:	20000074 	.word	0x20000074

08001234 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001234:	e7fe      	b.n	8001234 <CAN1_RX0_IRQHandler>
	...

08001238 <__NVIC_GetPriorityGrouping>:
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800123c:	4b04      	ldr	r3, [pc, #16]	; (8001250 <__NVIC_GetPriorityGrouping+0x18>)
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	0a1b      	lsrs	r3, r3, #8
 8001242:	f003 0307 	and.w	r3, r3, #7
}
 8001246:	4618      	mov	r0, r3
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr
 8001250:	e000ed00 	.word	0xe000ed00

08001254 <__NVIC_EnableIRQ>:
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	4603      	mov	r3, r0
 800125c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800125e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001262:	2b00      	cmp	r3, #0
 8001264:	db0b      	blt.n	800127e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001266:	79fb      	ldrb	r3, [r7, #7]
 8001268:	f003 021f 	and.w	r2, r3, #31
 800126c:	4907      	ldr	r1, [pc, #28]	; (800128c <__NVIC_EnableIRQ+0x38>)
 800126e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001272:	095b      	lsrs	r3, r3, #5
 8001274:	2001      	movs	r0, #1
 8001276:	fa00 f202 	lsl.w	r2, r0, r2
 800127a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800127e:	bf00      	nop
 8001280:	370c      	adds	r7, #12
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	e000e100 	.word	0xe000e100

08001290 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	4603      	mov	r3, r0
 8001298:	6039      	str	r1, [r7, #0]
 800129a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800129c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	db0a      	blt.n	80012ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	b2da      	uxtb	r2, r3
 80012a8:	490c      	ldr	r1, [pc, #48]	; (80012dc <__NVIC_SetPriority+0x4c>)
 80012aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ae:	0112      	lsls	r2, r2, #4
 80012b0:	b2d2      	uxtb	r2, r2
 80012b2:	440b      	add	r3, r1
 80012b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012b8:	e00a      	b.n	80012d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	b2da      	uxtb	r2, r3
 80012be:	4908      	ldr	r1, [pc, #32]	; (80012e0 <__NVIC_SetPriority+0x50>)
 80012c0:	79fb      	ldrb	r3, [r7, #7]
 80012c2:	f003 030f 	and.w	r3, r3, #15
 80012c6:	3b04      	subs	r3, #4
 80012c8:	0112      	lsls	r2, r2, #4
 80012ca:	b2d2      	uxtb	r2, r2
 80012cc:	440b      	add	r3, r1
 80012ce:	761a      	strb	r2, [r3, #24]
}
 80012d0:	bf00      	nop
 80012d2:	370c      	adds	r7, #12
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr
 80012dc:	e000e100 	.word	0xe000e100
 80012e0:	e000ed00 	.word	0xe000ed00

080012e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b089      	sub	sp, #36	; 0x24
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	60f8      	str	r0, [r7, #12]
 80012ec:	60b9      	str	r1, [r7, #8]
 80012ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	f003 0307 	and.w	r3, r3, #7
 80012f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	f1c3 0307 	rsb	r3, r3, #7
 80012fe:	2b04      	cmp	r3, #4
 8001300:	bf28      	it	cs
 8001302:	2304      	movcs	r3, #4
 8001304:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	3304      	adds	r3, #4
 800130a:	2b06      	cmp	r3, #6
 800130c:	d902      	bls.n	8001314 <NVIC_EncodePriority+0x30>
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	3b03      	subs	r3, #3
 8001312:	e000      	b.n	8001316 <NVIC_EncodePriority+0x32>
 8001314:	2300      	movs	r3, #0
 8001316:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001318:	2201      	movs	r2, #1
 800131a:	69bb      	ldr	r3, [r7, #24]
 800131c:	fa02 f303 	lsl.w	r3, r2, r3
 8001320:	1e5a      	subs	r2, r3, #1
 8001322:	68bb      	ldr	r3, [r7, #8]
 8001324:	401a      	ands	r2, r3
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800132a:	2101      	movs	r1, #1
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	fa01 f303 	lsl.w	r3, r1, r3
 8001332:	1e59      	subs	r1, r3, #1
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	400b      	ands	r3, r1
         );
 8001338:	4313      	orrs	r3, r2
}
 800133a:	4618      	mov	r0, r3
 800133c:	3724      	adds	r7, #36	; 0x24
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
	...

08001348 <LL_DMA_EnableStream>:
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8001352:	4a0c      	ldr	r2, [pc, #48]	; (8001384 <LL_DMA_EnableStream+0x3c>)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	4413      	add	r3, r2
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	461a      	mov	r2, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	4413      	add	r3, r2
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4908      	ldr	r1, [pc, #32]	; (8001384 <LL_DMA_EnableStream+0x3c>)
 8001364:	683a      	ldr	r2, [r7, #0]
 8001366:	440a      	add	r2, r1
 8001368:	7812      	ldrb	r2, [r2, #0]
 800136a:	4611      	mov	r1, r2
 800136c:	687a      	ldr	r2, [r7, #4]
 800136e:	440a      	add	r2, r1
 8001370:	f043 0301 	orr.w	r3, r3, #1
 8001374:	6013      	str	r3, [r2, #0]
}
 8001376:	bf00      	nop
 8001378:	370c      	adds	r7, #12
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	08002edc 	.word	0x08002edc

08001388 <LL_DMA_DisableStream>:
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8001392:	4a0c      	ldr	r2, [pc, #48]	; (80013c4 <LL_DMA_DisableStream+0x3c>)
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	4413      	add	r3, r2
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	461a      	mov	r2, r3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	4413      	add	r3, r2
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4908      	ldr	r1, [pc, #32]	; (80013c4 <LL_DMA_DisableStream+0x3c>)
 80013a4:	683a      	ldr	r2, [r7, #0]
 80013a6:	440a      	add	r2, r1
 80013a8:	7812      	ldrb	r2, [r2, #0]
 80013aa:	4611      	mov	r1, r2
 80013ac:	687a      	ldr	r2, [r7, #4]
 80013ae:	440a      	add	r2, r1
 80013b0:	f023 0301 	bic.w	r3, r3, #1
 80013b4:	6013      	str	r3, [r2, #0]
}
 80013b6:	bf00      	nop
 80013b8:	370c      	adds	r7, #12
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	08002edc 	.word	0x08002edc

080013c8 <LL_DMA_IsEnabledStream>:
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN) == (DMA_SxCR_EN));
 80013d2:	4a0a      	ldr	r2, [pc, #40]	; (80013fc <LL_DMA_IsEnabledStream+0x34>)
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	4413      	add	r3, r2
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	461a      	mov	r2, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	4413      	add	r3, r2
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 0301 	and.w	r3, r3, #1
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	bf0c      	ite	eq
 80013ea:	2301      	moveq	r3, #1
 80013ec:	2300      	movne	r3, #0
 80013ee:	b2db      	uxtb	r3, r3
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	370c      	adds	r7, #12
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr
 80013fc:	08002edc 	.word	0x08002edc

08001400 <LL_DMA_SetDataLength>:
{
 8001400:	b480      	push	{r7}
 8001402:	b085      	sub	sp, #20
 8001404:	af00      	add	r7, sp, #0
 8001406:	60f8      	str	r0, [r7, #12]
 8001408:	60b9      	str	r1, [r7, #8]
 800140a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 800140c:	4a0d      	ldr	r2, [pc, #52]	; (8001444 <LL_DMA_SetDataLength+0x44>)
 800140e:	68bb      	ldr	r3, [r7, #8]
 8001410:	4413      	add	r3, r2
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	461a      	mov	r2, r3
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	4413      	add	r3, r2
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	0c1b      	lsrs	r3, r3, #16
 800141e:	041b      	lsls	r3, r3, #16
 8001420:	4908      	ldr	r1, [pc, #32]	; (8001444 <LL_DMA_SetDataLength+0x44>)
 8001422:	68ba      	ldr	r2, [r7, #8]
 8001424:	440a      	add	r2, r1
 8001426:	7812      	ldrb	r2, [r2, #0]
 8001428:	4611      	mov	r1, r2
 800142a:	68fa      	ldr	r2, [r7, #12]
 800142c:	440a      	add	r2, r1
 800142e:	4611      	mov	r1, r2
 8001430:	687a      	ldr	r2, [r7, #4]
 8001432:	4313      	orrs	r3, r2
 8001434:	604b      	str	r3, [r1, #4]
}
 8001436:	bf00      	nop
 8001438:	3714      	adds	r7, #20
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	08002edc 	.word	0x08002edc

08001448 <LL_DMA_SetMemoryAddress>:
{
 8001448:	b480      	push	{r7}
 800144a:	b085      	sub	sp, #20
 800144c:	af00      	add	r7, sp, #0
 800144e:	60f8      	str	r0, [r7, #12]
 8001450:	60b9      	str	r1, [r7, #8]
 8001452:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, MemoryAddress);
 8001454:	4a07      	ldr	r2, [pc, #28]	; (8001474 <LL_DMA_SetMemoryAddress+0x2c>)
 8001456:	68bb      	ldr	r3, [r7, #8]
 8001458:	4413      	add	r3, r2
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	461a      	mov	r2, r3
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	4413      	add	r3, r2
 8001462:	461a      	mov	r2, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	60d3      	str	r3, [r2, #12]
}
 8001468:	bf00      	nop
 800146a:	3714      	adds	r7, #20
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr
 8001474:	08002edc 	.word	0x08002edc

08001478 <LL_DMA_SetPeriphAddress>:
{
 8001478:	b480      	push	{r7}
 800147a:	b085      	sub	sp, #20
 800147c:	af00      	add	r7, sp, #0
 800147e:	60f8      	str	r0, [r7, #12]
 8001480:	60b9      	str	r1, [r7, #8]
 8001482:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, PeriphAddress);
 8001484:	4a07      	ldr	r2, [pc, #28]	; (80014a4 <LL_DMA_SetPeriphAddress+0x2c>)
 8001486:	68bb      	ldr	r3, [r7, #8]
 8001488:	4413      	add	r3, r2
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	461a      	mov	r2, r3
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	4413      	add	r3, r2
 8001492:	461a      	mov	r2, r3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6093      	str	r3, [r2, #8]
}
 8001498:	bf00      	nop
 800149a:	3714      	adds	r7, #20
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr
 80014a4:	08002edc 	.word	0x08002edc

080014a8 <LL_AHB1_GRP1_EnableClock>:
{
 80014a8:	b480      	push	{r7}
 80014aa:	b085      	sub	sp, #20
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80014b0:	4b08      	ldr	r3, [pc, #32]	; (80014d4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80014b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014b4:	4907      	ldr	r1, [pc, #28]	; (80014d4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80014bc:	4b05      	ldr	r3, [pc, #20]	; (80014d4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80014be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	4013      	ands	r3, r2
 80014c4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80014c6:	68fb      	ldr	r3, [r7, #12]
}
 80014c8:	bf00      	nop
 80014ca:	3714      	adds	r7, #20
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr
 80014d4:	40023800 	.word	0x40023800

080014d8 <_ZN9UHAL_DMA210DMA_USART116setBufferAddressEj>:
// DMA2 USART6

void UHAL_DMA2::DMA_USART1::enablePerihClock() {
    LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA2);
}
void UHAL_DMA2::DMA_USART1::setBufferAddress(uintptr_t bufferAddress) {
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
    LL_DMA_SetMemoryAddress(thisInstance, thisStream, bufferAddress);
 80014e0:	687a      	ldr	r2, [r7, #4]
 80014e2:	2105      	movs	r1, #5
 80014e4:	4803      	ldr	r0, [pc, #12]	; (80014f4 <_ZN9UHAL_DMA210DMA_USART116setBufferAddressEj+0x1c>)
 80014e6:	f7ff ffaf 	bl	8001448 <LL_DMA_SetMemoryAddress>
}
 80014ea:	bf00      	nop
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	40026400 	.word	0x40026400

080014f8 <_ZN9UHAL_DMA210DMA_USART16enableEv>:
	  NVIC_EnableIRQ(thisIRQn);
	
}


void UHAL_DMA2::DMA_USART1::enable() {
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
    LL_DMA_EnableStream(thisInstance, thisStream);
 80014fc:	2105      	movs	r1, #5
 80014fe:	4802      	ldr	r0, [pc, #8]	; (8001508 <_ZN9UHAL_DMA210DMA_USART16enableEv+0x10>)
 8001500:	f7ff ff22 	bl	8001348 <LL_DMA_EnableStream>
}
 8001504:	bf00      	nop
 8001506:	bd80      	pop	{r7, pc}
 8001508:	40026400 	.word	0x40026400

0800150c <_ZN9UHAL_DMA210DMA_USART123setNumberOfDataTransferEt>:

void UHAL_DMA2::DMA_USART1::setNumberOfDataTransfer(uint16_t numb) {
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	4603      	mov	r3, r0
 8001514:	80fb      	strh	r3, [r7, #6]
    LL_DMA_SetDataLength(thisInstance, thisStream, numb);
 8001516:	88fb      	ldrh	r3, [r7, #6]
 8001518:	461a      	mov	r2, r3
 800151a:	2105      	movs	r1, #5
 800151c:	4803      	ldr	r0, [pc, #12]	; (800152c <_ZN9UHAL_DMA210DMA_USART123setNumberOfDataTransferEt+0x20>)
 800151e:	f7ff ff6f 	bl	8001400 <LL_DMA_SetDataLength>
}
 8001522:	bf00      	nop
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	40026400 	.word	0x40026400

08001530 <_ZN9UHAL_DMA210DMA_USART120setPeripheralADDressEj>:

void UHAL_DMA2::DMA_USART1::setPeripheralADDress(const uintptr_t address) {
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
    LL_DMA_SetPeriphAddress(thisInstance, thisStream, address);
 8001538:	687a      	ldr	r2, [r7, #4]
 800153a:	2105      	movs	r1, #5
 800153c:	4803      	ldr	r0, [pc, #12]	; (800154c <_ZN9UHAL_DMA210DMA_USART120setPeripheralADDressEj+0x1c>)
 800153e:	f7ff ff9b 	bl	8001478 <LL_DMA_SetPeriphAddress>
}
 8001542:	bf00      	nop
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	40026400 	.word	0x40026400

08001550 <_ZN9UHAL_DMA210DMA_USART110initializeEv>:
    flag_IT::HTIF::enableInterrupt();
    flag_IT::TCIF::enableInterrupt();
    flag_IT::TEIF::enableInterrupt();
}

void UHAL_DMA2::DMA_USART1::initialize() {
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
    LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA2);
 8001554:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001558:	f7ff ffa6 	bl	80014a8 <LL_AHB1_GRP1_EnableClock>
    NVIC_SetPriority(thisIRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800155c:	f7ff fe6c 	bl	8001238 <__NVIC_GetPriorityGrouping>
 8001560:	4603      	mov	r3, r0
 8001562:	2200      	movs	r2, #0
 8001564:	2100      	movs	r1, #0
 8001566:	4618      	mov	r0, r3
 8001568:	f7ff febc 	bl	80012e4 <NVIC_EncodePriority>
 800156c:	4603      	mov	r3, r0
 800156e:	4619      	mov	r1, r3
 8001570:	2044      	movs	r0, #68	; 0x44
 8001572:	f7ff fe8d 	bl	8001290 <__NVIC_SetPriority>
    NVIC_EnableIRQ(thisIRQn);
 8001576:	2044      	movs	r0, #68	; 0x44
 8001578:	f7ff fe6c 	bl	8001254 <__NVIC_EnableIRQ>
}
 800157c:	bf00      	nop
 800157e:	bd80      	pop	{r7, pc}

08001580 <_ZN9UHAL_DMA210DMA_USART17disableEv>:

void UHAL_DMA2::DMA_USART1::disable() {
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
    LL_DMA_DisableStream(thisInstance, thisStream);
 8001584:	2105      	movs	r1, #5
 8001586:	4802      	ldr	r0, [pc, #8]	; (8001590 <_ZN9UHAL_DMA210DMA_USART17disableEv+0x10>)
 8001588:	f7ff fefe 	bl	8001388 <LL_DMA_DisableStream>
}
 800158c:	bf00      	nop
 800158e:	bd80      	pop	{r7, pc}
 8001590:	40026400 	.word	0x40026400

08001594 <_ZN9UHAL_DMA210DMA_USART110isDisabledEv>:

uint8_t UHAL_DMA2::DMA_USART1::isDisabled()
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
	return !LL_DMA_IsEnabledStream(thisInstance, thisStream);
 8001598:	2105      	movs	r1, #5
 800159a:	4805      	ldr	r0, [pc, #20]	; (80015b0 <_ZN9UHAL_DMA210DMA_USART110isDisabledEv+0x1c>)
 800159c:	f7ff ff14 	bl	80013c8 <LL_DMA_IsEnabledStream>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	bf0c      	ite	eq
 80015a6:	2301      	moveq	r3, #1
 80015a8:	2300      	movne	r3, #0
 80015aa:	b2db      	uxtb	r3, r3
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	40026400 	.word	0x40026400

080015b4 <_ZNSt14_Function_baseC1Ev>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2200      	movs	r2, #0
 80015c0:	609a      	str	r2, [r3, #8]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4618      	mov	r0, r3
 80015c6:	370c      	adds	r7, #12
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr

080015d0 <_ZNSt14_Function_baseD1Ev>:

    ~_Function_base()
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d005      	beq.n	80015ec <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	6879      	ldr	r1, [r7, #4]
 80015e8:	2203      	movs	r2, #3
 80015ea:	4798      	blx	r3
    }
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	4618      	mov	r0, r3
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <_ZNSt8functionIFvvEEC1Ev>:

      /**
       *  @brief Default construct creates an empty function call wrapper.
       *  @post @c !(bool)*this
       */
      function() noexcept
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b082      	sub	sp, #8
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4618      	mov	r0, r3
 8001602:	f7ff ffd7 	bl	80015b4 <_ZNSt14_Function_baseC1Ev>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4618      	mov	r0, r3
 800160a:	3708      	adds	r7, #8
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}

08001610 <_ZNSt8functionIFvvEED1Ev>:
    class function<_Res(_ArgTypes...)>
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	4618      	mov	r0, r3
 800161c:	f7ff ffd8 	bl	80015d0 <_ZNSt14_Function_baseD1Ev>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	4618      	mov	r0, r3
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
	...

0800162c <_Z41__static_initialization_and_destruction_0ii>:
#define CARMOTIONSIM_SAMPLER_UHAL_INTERRUPT_HANDLER_HPP

#include <functional>
#include "main_cpp.hpp"

std::function<void(void)> interruptCallback;
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	6039      	str	r1, [r7, #0]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2b01      	cmp	r3, #1
 800163a:	d107      	bne.n	800164c <_Z41__static_initialization_and_destruction_0ii+0x20>
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001642:	4293      	cmp	r3, r2
 8001644:	d102      	bne.n	800164c <_Z41__static_initialization_and_destruction_0ii+0x20>
 8001646:	4809      	ldr	r0, [pc, #36]	; (800166c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001648:	f7ff ffd5 	bl	80015f6 <_ZNSt8functionIFvvEEC1Ev>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d107      	bne.n	8001662 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001658:	4293      	cmp	r3, r2
 800165a:	d102      	bne.n	8001662 <_Z41__static_initialization_and_destruction_0ii+0x36>
 800165c:	4803      	ldr	r0, [pc, #12]	; (800166c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800165e:	f7ff ffd7 	bl	8001610 <_ZNSt8functionIFvvEED1Ev>
 8001662:	bf00      	nop
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	20000064 	.word	0x20000064

08001670 <_GLOBAL__sub_I_interruptCallback>:
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
 8001674:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001678:	2001      	movs	r0, #1
 800167a:	f7ff ffd7 	bl	800162c <_Z41__static_initialization_and_destruction_0ii>
 800167e:	bd80      	pop	{r7, pc}

08001680 <_GLOBAL__sub_D_interruptCallback>:
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
 8001684:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001688:	2000      	movs	r0, #0
 800168a:	f7ff ffcf 	bl	800162c <_Z41__static_initialization_and_destruction_0ii>
 800168e:	bd80      	pop	{r7, pc}

08001690 <__NVIC_GetPriorityGrouping>:
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001694:	4b04      	ldr	r3, [pc, #16]	; (80016a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	0a1b      	lsrs	r3, r3, #8
 800169a:	f003 0307 	and.w	r3, r3, #7
}
 800169e:	4618      	mov	r0, r3
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr
 80016a8:	e000ed00 	.word	0xe000ed00

080016ac <__NVIC_EnableIRQ>:
{
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	4603      	mov	r3, r0
 80016b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	db0b      	blt.n	80016d6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016be:	79fb      	ldrb	r3, [r7, #7]
 80016c0:	f003 021f 	and.w	r2, r3, #31
 80016c4:	4907      	ldr	r1, [pc, #28]	; (80016e4 <__NVIC_EnableIRQ+0x38>)
 80016c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ca:	095b      	lsrs	r3, r3, #5
 80016cc:	2001      	movs	r0, #1
 80016ce:	fa00 f202 	lsl.w	r2, r0, r2
 80016d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80016d6:	bf00      	nop
 80016d8:	370c      	adds	r7, #12
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	e000e100 	.word	0xe000e100

080016e8 <__NVIC_SetPriority>:
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	4603      	mov	r3, r0
 80016f0:	6039      	str	r1, [r7, #0]
 80016f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	db0a      	blt.n	8001712 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	b2da      	uxtb	r2, r3
 8001700:	490c      	ldr	r1, [pc, #48]	; (8001734 <__NVIC_SetPriority+0x4c>)
 8001702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001706:	0112      	lsls	r2, r2, #4
 8001708:	b2d2      	uxtb	r2, r2
 800170a:	440b      	add	r3, r1
 800170c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001710:	e00a      	b.n	8001728 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	b2da      	uxtb	r2, r3
 8001716:	4908      	ldr	r1, [pc, #32]	; (8001738 <__NVIC_SetPriority+0x50>)
 8001718:	79fb      	ldrb	r3, [r7, #7]
 800171a:	f003 030f 	and.w	r3, r3, #15
 800171e:	3b04      	subs	r3, #4
 8001720:	0112      	lsls	r2, r2, #4
 8001722:	b2d2      	uxtb	r2, r2
 8001724:	440b      	add	r3, r1
 8001726:	761a      	strb	r2, [r3, #24]
}
 8001728:	bf00      	nop
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr
 8001734:	e000e100 	.word	0xe000e100
 8001738:	e000ed00 	.word	0xe000ed00

0800173c <NVIC_EncodePriority>:
{
 800173c:	b480      	push	{r7}
 800173e:	b089      	sub	sp, #36	; 0x24
 8001740:	af00      	add	r7, sp, #0
 8001742:	60f8      	str	r0, [r7, #12]
 8001744:	60b9      	str	r1, [r7, #8]
 8001746:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	f003 0307 	and.w	r3, r3, #7
 800174e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001750:	69fb      	ldr	r3, [r7, #28]
 8001752:	f1c3 0307 	rsb	r3, r3, #7
 8001756:	2b04      	cmp	r3, #4
 8001758:	bf28      	it	cs
 800175a:	2304      	movcs	r3, #4
 800175c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	3304      	adds	r3, #4
 8001762:	2b06      	cmp	r3, #6
 8001764:	d902      	bls.n	800176c <NVIC_EncodePriority+0x30>
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	3b03      	subs	r3, #3
 800176a:	e000      	b.n	800176e <NVIC_EncodePriority+0x32>
 800176c:	2300      	movs	r3, #0
 800176e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001770:	2201      	movs	r2, #1
 8001772:	69bb      	ldr	r3, [r7, #24]
 8001774:	fa02 f303 	lsl.w	r3, r2, r3
 8001778:	1e5a      	subs	r2, r3, #1
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	401a      	ands	r2, r3
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001782:	2101      	movs	r1, #1
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	fa01 f303 	lsl.w	r3, r1, r3
 800178a:	1e59      	subs	r1, r3, #1
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	400b      	ands	r3, r1
         );
 8001790:	4313      	orrs	r3, r2
}
 8001792:	4618      	mov	r0, r3
 8001794:	3724      	adds	r7, #36	; 0x24
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
	...

080017a0 <LL_AHB1_GRP1_EnableClock>:
{
 80017a0:	b480      	push	{r7}
 80017a2:	b085      	sub	sp, #20
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80017a8:	4b08      	ldr	r3, [pc, #32]	; (80017cc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80017aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017ac:	4907      	ldr	r1, [pc, #28]	; (80017cc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4313      	orrs	r3, r2
 80017b2:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80017b4:	4b05      	ldr	r3, [pc, #20]	; (80017cc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80017b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	4013      	ands	r3, r2
 80017bc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80017be:	68fb      	ldr	r3, [r7, #12]
}
 80017c0:	bf00      	nop
 80017c2:	3714      	adds	r7, #20
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr
 80017cc:	40023800 	.word	0x40023800

080017d0 <LL_APB2_GRP1_EnableClock>:
{
 80017d0:	b480      	push	{r7}
 80017d2:	b085      	sub	sp, #20
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80017d8:	4b08      	ldr	r3, [pc, #32]	; (80017fc <LL_APB2_GRP1_EnableClock+0x2c>)
 80017da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80017dc:	4907      	ldr	r1, [pc, #28]	; (80017fc <LL_APB2_GRP1_EnableClock+0x2c>)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4313      	orrs	r3, r2
 80017e2:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80017e4:	4b05      	ldr	r3, [pc, #20]	; (80017fc <LL_APB2_GRP1_EnableClock+0x2c>)
 80017e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	4013      	ands	r3, r2
 80017ec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80017ee:	68fb      	ldr	r3, [r7, #12]
}
 80017f0:	bf00      	nop
 80017f2:	3714      	adds	r7, #20
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr
 80017fc:	40023800 	.word	0x40023800

08001800 <LL_DMA_SetDataTransferDirection>:
{
 8001800:	b480      	push	{r7}
 8001802:	b085      	sub	sp, #20
 8001804:	af00      	add	r7, sp, #0
 8001806:	60f8      	str	r0, [r7, #12]
 8001808:	60b9      	str	r1, [r7, #8]
 800180a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 800180c:	4a0d      	ldr	r2, [pc, #52]	; (8001844 <LL_DMA_SetDataTransferDirection+0x44>)
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	4413      	add	r3, r2
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	461a      	mov	r2, r3
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	4413      	add	r3, r2
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001820:	4908      	ldr	r1, [pc, #32]	; (8001844 <LL_DMA_SetDataTransferDirection+0x44>)
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	440b      	add	r3, r1
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	4619      	mov	r1, r3
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	440b      	add	r3, r1
 800182e:	4619      	mov	r1, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	4313      	orrs	r3, r2
 8001834:	600b      	str	r3, [r1, #0]
}
 8001836:	bf00      	nop
 8001838:	3714      	adds	r7, #20
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	08002ee4 	.word	0x08002ee4

08001848 <LL_DMA_SetMode>:
{
 8001848:	b480      	push	{r7}
 800184a:	b085      	sub	sp, #20
 800184c:	af00      	add	r7, sp, #0
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	60b9      	str	r1, [r7, #8]
 8001852:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 8001854:	4a0d      	ldr	r2, [pc, #52]	; (800188c <LL_DMA_SetMode+0x44>)
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	4413      	add	r3, r2
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	461a      	mov	r2, r3
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	4413      	add	r3, r2
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f423 7290 	bic.w	r2, r3, #288	; 0x120
 8001868:	4908      	ldr	r1, [pc, #32]	; (800188c <LL_DMA_SetMode+0x44>)
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	440b      	add	r3, r1
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	4619      	mov	r1, r3
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	440b      	add	r3, r1
 8001876:	4619      	mov	r1, r3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	4313      	orrs	r3, r2
 800187c:	600b      	str	r3, [r1, #0]
}
 800187e:	bf00      	nop
 8001880:	3714      	adds	r7, #20
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	08002ee4 	.word	0x08002ee4

08001890 <LL_DMA_SetPeriphIncMode>:
{
 8001890:	b480      	push	{r7}
 8001892:	b085      	sub	sp, #20
 8001894:	af00      	add	r7, sp, #0
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	60b9      	str	r1, [r7, #8]
 800189a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 800189c:	4a0d      	ldr	r2, [pc, #52]	; (80018d4 <LL_DMA_SetPeriphIncMode+0x44>)
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	4413      	add	r3, r2
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	461a      	mov	r2, r3
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	4413      	add	r3, r2
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80018b0:	4908      	ldr	r1, [pc, #32]	; (80018d4 <LL_DMA_SetPeriphIncMode+0x44>)
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	440b      	add	r3, r1
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	4619      	mov	r1, r3
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	440b      	add	r3, r1
 80018be:	4619      	mov	r1, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	4313      	orrs	r3, r2
 80018c4:	600b      	str	r3, [r1, #0]
}
 80018c6:	bf00      	nop
 80018c8:	3714      	adds	r7, #20
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	08002ee4 	.word	0x08002ee4

080018d8 <LL_DMA_SetMemoryIncMode>:
{
 80018d8:	b480      	push	{r7}
 80018da:	b085      	sub	sp, #20
 80018dc:	af00      	add	r7, sp, #0
 80018de:	60f8      	str	r0, [r7, #12]
 80018e0:	60b9      	str	r1, [r7, #8]
 80018e2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 80018e4:	4a0d      	ldr	r2, [pc, #52]	; (800191c <LL_DMA_SetMemoryIncMode+0x44>)
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	4413      	add	r3, r2
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	461a      	mov	r2, r3
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	4413      	add	r3, r2
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80018f8:	4908      	ldr	r1, [pc, #32]	; (800191c <LL_DMA_SetMemoryIncMode+0x44>)
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	440b      	add	r3, r1
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	4619      	mov	r1, r3
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	440b      	add	r3, r1
 8001906:	4619      	mov	r1, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	4313      	orrs	r3, r2
 800190c:	600b      	str	r3, [r1, #0]
}
 800190e:	bf00      	nop
 8001910:	3714      	adds	r7, #20
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	08002ee4 	.word	0x08002ee4

08001920 <LL_DMA_SetPeriphSize>:
{
 8001920:	b480      	push	{r7}
 8001922:	b085      	sub	sp, #20
 8001924:	af00      	add	r7, sp, #0
 8001926:	60f8      	str	r0, [r7, #12]
 8001928:	60b9      	str	r1, [r7, #8]
 800192a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 800192c:	4a0d      	ldr	r2, [pc, #52]	; (8001964 <LL_DMA_SetPeriphSize+0x44>)
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	4413      	add	r3, r2
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	461a      	mov	r2, r3
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	4413      	add	r3, r2
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8001940:	4908      	ldr	r1, [pc, #32]	; (8001964 <LL_DMA_SetPeriphSize+0x44>)
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	440b      	add	r3, r1
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	4619      	mov	r1, r3
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	440b      	add	r3, r1
 800194e:	4619      	mov	r1, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	4313      	orrs	r3, r2
 8001954:	600b      	str	r3, [r1, #0]
}
 8001956:	bf00      	nop
 8001958:	3714      	adds	r7, #20
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	08002ee4 	.word	0x08002ee4

08001968 <LL_DMA_SetMemorySize>:
{
 8001968:	b480      	push	{r7}
 800196a:	b085      	sub	sp, #20
 800196c:	af00      	add	r7, sp, #0
 800196e:	60f8      	str	r0, [r7, #12]
 8001970:	60b9      	str	r1, [r7, #8]
 8001972:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 8001974:	4a0d      	ldr	r2, [pc, #52]	; (80019ac <LL_DMA_SetMemorySize+0x44>)
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	4413      	add	r3, r2
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	461a      	mov	r2, r3
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	4413      	add	r3, r2
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 8001988:	4908      	ldr	r1, [pc, #32]	; (80019ac <LL_DMA_SetMemorySize+0x44>)
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	440b      	add	r3, r1
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	4619      	mov	r1, r3
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	440b      	add	r3, r1
 8001996:	4619      	mov	r1, r3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	4313      	orrs	r3, r2
 800199c:	600b      	str	r3, [r1, #0]
}
 800199e:	bf00      	nop
 80019a0:	3714      	adds	r7, #20
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	08002ee4 	.word	0x08002ee4

080019b0 <LL_DMA_SetStreamPriorityLevel>:
{
 80019b0:	b480      	push	{r7}
 80019b2:	b085      	sub	sp, #20
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	60b9      	str	r1, [r7, #8]
 80019ba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 80019bc:	4a0d      	ldr	r2, [pc, #52]	; (80019f4 <LL_DMA_SetStreamPriorityLevel+0x44>)
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	4413      	add	r3, r2
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	461a      	mov	r2, r3
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	4413      	add	r3, r2
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80019d0:	4908      	ldr	r1, [pc, #32]	; (80019f4 <LL_DMA_SetStreamPriorityLevel+0x44>)
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	440b      	add	r3, r1
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	4619      	mov	r1, r3
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	440b      	add	r3, r1
 80019de:	4619      	mov	r1, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	4313      	orrs	r3, r2
 80019e4:	600b      	str	r3, [r1, #0]
}
 80019e6:	bf00      	nop
 80019e8:	3714      	adds	r7, #20
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	08002ee4 	.word	0x08002ee4

080019f8 <LL_DMA_SetChannelSelection>:
{
 80019f8:	b480      	push	{r7}
 80019fa:	b085      	sub	sp, #20
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	60b9      	str	r1, [r7, #8]
 8001a02:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 8001a04:	4a0d      	ldr	r2, [pc, #52]	; (8001a3c <LL_DMA_SetChannelSelection+0x44>)
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	4413      	add	r3, r2
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	4413      	add	r3, r2
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8001a18:	4908      	ldr	r1, [pc, #32]	; (8001a3c <LL_DMA_SetChannelSelection+0x44>)
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	440b      	add	r3, r1
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	4619      	mov	r1, r3
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	440b      	add	r3, r1
 8001a26:	4619      	mov	r1, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	600b      	str	r3, [r1, #0]
}
 8001a2e:	bf00      	nop
 8001a30:	3714      	adds	r7, #20
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	08002ee4 	.word	0x08002ee4

08001a40 <LL_DMA_SetMemoryBurstxfer>:
{
 8001a40:	b480      	push	{r7}
 8001a42:	b085      	sub	sp, #20
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	60f8      	str	r0, [r7, #12]
 8001a48:	60b9      	str	r1, [r7, #8]
 8001a4a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MBURST, Mburst);
 8001a4c:	4a0d      	ldr	r2, [pc, #52]	; (8001a84 <LL_DMA_SetMemoryBurstxfer+0x44>)
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	4413      	add	r3, r2
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	461a      	mov	r2, r3
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	4413      	add	r3, r2
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f023 72c0 	bic.w	r2, r3, #25165824	; 0x1800000
 8001a60:	4908      	ldr	r1, [pc, #32]	; (8001a84 <LL_DMA_SetMemoryBurstxfer+0x44>)
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	440b      	add	r3, r1
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	4619      	mov	r1, r3
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	440b      	add	r3, r1
 8001a6e:	4619      	mov	r1, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	4313      	orrs	r3, r2
 8001a74:	600b      	str	r3, [r1, #0]
}
 8001a76:	bf00      	nop
 8001a78:	3714      	adds	r7, #20
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	08002ee4 	.word	0x08002ee4

08001a88 <LL_DMA_SetPeriphBurstxfer>:
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	60b9      	str	r1, [r7, #8]
 8001a92:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PBURST, Pburst);
 8001a94:	4a0d      	ldr	r2, [pc, #52]	; (8001acc <LL_DMA_SetPeriphBurstxfer+0x44>)
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	4413      	add	r3, r2
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f423 02c0 	bic.w	r2, r3, #6291456	; 0x600000
 8001aa8:	4908      	ldr	r1, [pc, #32]	; (8001acc <LL_DMA_SetPeriphBurstxfer+0x44>)
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	440b      	add	r3, r1
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	440b      	add	r3, r1
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	4313      	orrs	r3, r2
 8001abc:	600b      	str	r3, [r1, #0]
}
 8001abe:	bf00      	nop
 8001ac0:	3714      	adds	r7, #20
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	08002ee4 	.word	0x08002ee4

08001ad0 <LL_DMA_EnableFifoMode>:
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 8001ada:	4a0c      	ldr	r2, [pc, #48]	; (8001b0c <LL_DMA_EnableFifoMode+0x3c>)
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	4413      	add	r3, r2
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	4413      	add	r3, r2
 8001ae8:	695b      	ldr	r3, [r3, #20]
 8001aea:	4908      	ldr	r1, [pc, #32]	; (8001b0c <LL_DMA_EnableFifoMode+0x3c>)
 8001aec:	683a      	ldr	r2, [r7, #0]
 8001aee:	440a      	add	r2, r1
 8001af0:	7812      	ldrb	r2, [r2, #0]
 8001af2:	4611      	mov	r1, r2
 8001af4:	687a      	ldr	r2, [r7, #4]
 8001af6:	440a      	add	r2, r1
 8001af8:	f043 0304 	orr.w	r3, r3, #4
 8001afc:	6153      	str	r3, [r2, #20]
}
 8001afe:	bf00      	nop
 8001b00:	370c      	adds	r7, #12
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	08002ee4 	.word	0x08002ee4

08001b10 <LL_DMA_SetFIFOThreshold>:
{
 8001b10:	b480      	push	{r7}
 8001b12:	b085      	sub	sp, #20
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	60f8      	str	r0, [r7, #12]
 8001b18:	60b9      	str	r1, [r7, #8]
 8001b1a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_FTH, Threshold);
 8001b1c:	4a0d      	ldr	r2, [pc, #52]	; (8001b54 <LL_DMA_SetFIFOThreshold+0x44>)
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	4413      	add	r3, r2
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	461a      	mov	r2, r3
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	4413      	add	r3, r2
 8001b2a:	695b      	ldr	r3, [r3, #20]
 8001b2c:	f023 0203 	bic.w	r2, r3, #3
 8001b30:	4908      	ldr	r1, [pc, #32]	; (8001b54 <LL_DMA_SetFIFOThreshold+0x44>)
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	440b      	add	r3, r1
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	4619      	mov	r1, r3
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	440b      	add	r3, r1
 8001b3e:	4619      	mov	r1, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	614b      	str	r3, [r1, #20]
}
 8001b46:	bf00      	nop
 8001b48:	3714      	adds	r7, #20
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	08002ee4 	.word	0x08002ee4

08001b58 <LL_DMA_EnableIT_HT>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_HT(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_HTIE);
 8001b62:	4a0c      	ldr	r2, [pc, #48]	; (8001b94 <LL_DMA_EnableIT_HT+0x3c>)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	4413      	add	r3, r2
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	4413      	add	r3, r2
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4908      	ldr	r1, [pc, #32]	; (8001b94 <LL_DMA_EnableIT_HT+0x3c>)
 8001b74:	683a      	ldr	r2, [r7, #0]
 8001b76:	440a      	add	r2, r1
 8001b78:	7812      	ldrb	r2, [r2, #0]
 8001b7a:	4611      	mov	r1, r2
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	440a      	add	r2, r1
 8001b80:	f043 0308 	orr.w	r3, r3, #8
 8001b84:	6013      	str	r3, [r2, #0]
}
 8001b86:	bf00      	nop
 8001b88:	370c      	adds	r7, #12
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	08002ee4 	.word	0x08002ee4

08001b98 <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TEIE);
 8001ba2:	4a0c      	ldr	r2, [pc, #48]	; (8001bd4 <LL_DMA_EnableIT_TE+0x3c>)
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	461a      	mov	r2, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	4413      	add	r3, r2
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4908      	ldr	r1, [pc, #32]	; (8001bd4 <LL_DMA_EnableIT_TE+0x3c>)
 8001bb4:	683a      	ldr	r2, [r7, #0]
 8001bb6:	440a      	add	r2, r1
 8001bb8:	7812      	ldrb	r2, [r2, #0]
 8001bba:	4611      	mov	r1, r2
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	440a      	add	r2, r1
 8001bc0:	f043 0304 	orr.w	r3, r3, #4
 8001bc4:	6013      	str	r3, [r2, #0]
}
 8001bc6:	bf00      	nop
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	08002ee4 	.word	0x08002ee4

08001bd8 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TCIE);
 8001be2:	4a0c      	ldr	r2, [pc, #48]	; (8001c14 <LL_DMA_EnableIT_TC+0x3c>)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	4413      	add	r3, r2
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	461a      	mov	r2, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	4413      	add	r3, r2
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4908      	ldr	r1, [pc, #32]	; (8001c14 <LL_DMA_EnableIT_TC+0x3c>)
 8001bf4:	683a      	ldr	r2, [r7, #0]
 8001bf6:	440a      	add	r2, r1
 8001bf8:	7812      	ldrb	r2, [r2, #0]
 8001bfa:	4611      	mov	r1, r2
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	440a      	add	r2, r1
 8001c00:	f043 0310 	orr.w	r3, r3, #16
 8001c04:	6013      	str	r3, [r2, #0]
}
 8001c06:	bf00      	nop
 8001c08:	370c      	adds	r7, #12
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	08002ee4 	.word	0x08002ee4

08001c18 <LL_DMA_EnableIT_DME>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_DME(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DMEIE);
 8001c22:	4a0c      	ldr	r2, [pc, #48]	; (8001c54 <LL_DMA_EnableIT_DME+0x3c>)
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	4413      	add	r3, r2
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	4413      	add	r3, r2
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4908      	ldr	r1, [pc, #32]	; (8001c54 <LL_DMA_EnableIT_DME+0x3c>)
 8001c34:	683a      	ldr	r2, [r7, #0]
 8001c36:	440a      	add	r2, r1
 8001c38:	7812      	ldrb	r2, [r2, #0]
 8001c3a:	4611      	mov	r1, r2
 8001c3c:	687a      	ldr	r2, [r7, #4]
 8001c3e:	440a      	add	r2, r1
 8001c40:	f043 0302 	orr.w	r3, r3, #2
 8001c44:	6013      	str	r3, [r2, #0]
}
 8001c46:	bf00      	nop
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	08002ee4 	.word	0x08002ee4

08001c58 <LL_DMA_EnableIT_FE>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_FE(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_FEIE);
 8001c62:	4a0c      	ldr	r2, [pc, #48]	; (8001c94 <LL_DMA_EnableIT_FE+0x3c>)
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	4413      	add	r3, r2
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	4413      	add	r3, r2
 8001c70:	695b      	ldr	r3, [r3, #20]
 8001c72:	4908      	ldr	r1, [pc, #32]	; (8001c94 <LL_DMA_EnableIT_FE+0x3c>)
 8001c74:	683a      	ldr	r2, [r7, #0]
 8001c76:	440a      	add	r2, r1
 8001c78:	7812      	ldrb	r2, [r2, #0]
 8001c7a:	4611      	mov	r1, r2
 8001c7c:	687a      	ldr	r2, [r7, #4]
 8001c7e:	440a      	add	r2, r1
 8001c80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c84:	6153      	str	r3, [r2, #20]
}
 8001c86:	bf00      	nop
 8001c88:	370c      	adds	r7, #12
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	08002ee4 	.word	0x08002ee4

08001c98 <LL_USART_Enable>:
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	60da      	str	r2, [r3, #12]
}
 8001cac:	bf00      	nop
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <LL_USART_EnableDirectionRx>:
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b089      	sub	sp, #36	; 0x24
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RE);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	330c      	adds	r3, #12
 8001cc4:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	e853 3f00 	ldrex	r3, [r3]
 8001ccc:	60bb      	str	r3, [r7, #8]
   return(result);
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	f043 0304 	orr.w	r3, r3, #4
 8001cd4:	61fb      	str	r3, [r7, #28]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	330c      	adds	r3, #12
 8001cda:	69fa      	ldr	r2, [r7, #28]
 8001cdc:	61ba      	str	r2, [r7, #24]
 8001cde:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ce0:	6979      	ldr	r1, [r7, #20]
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	e841 2300 	strex	r3, r2, [r1]
 8001ce8:	613b      	str	r3, [r7, #16]
   return(result);
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	bf14      	ite	ne
 8001cf0:	2301      	movne	r3, #1
 8001cf2:	2300      	moveq	r3, #0
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d000      	beq.n	8001cfc <LL_USART_EnableDirectionRx+0x44>
 8001cfa:	e7e1      	b.n	8001cc0 <LL_USART_EnableDirectionRx+0x8>
}
 8001cfc:	bf00      	nop
 8001cfe:	3724      	adds	r7, #36	; 0x24
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <LL_USART_EnableDirectionTx>:
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b089      	sub	sp, #36	; 0x24
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TE);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	330c      	adds	r3, #12
 8001d14:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	e853 3f00 	ldrex	r3, [r3]
 8001d1c:	60bb      	str	r3, [r7, #8]
   return(result);
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	f043 0308 	orr.w	r3, r3, #8
 8001d24:	61fb      	str	r3, [r7, #28]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	330c      	adds	r3, #12
 8001d2a:	69fa      	ldr	r2, [r7, #28]
 8001d2c:	61ba      	str	r2, [r7, #24]
 8001d2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d30:	6979      	ldr	r1, [r7, #20]
 8001d32:	69ba      	ldr	r2, [r7, #24]
 8001d34:	e841 2300 	strex	r3, r2, [r1]
 8001d38:	613b      	str	r3, [r7, #16]
   return(result);
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	bf14      	ite	ne
 8001d40:	2301      	movne	r3, #1
 8001d42:	2300      	moveq	r3, #0
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d000      	beq.n	8001d4c <LL_USART_EnableDirectionTx+0x44>
 8001d4a:	e7e1      	b.n	8001d10 <LL_USART_EnableDirectionTx+0x8>
}
 8001d4c:	bf00      	nop
 8001d4e:	3724      	adds	r7, #36	; 0x24
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr

08001d58 <LL_USART_ConfigAsyncMode>:
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	691b      	ldr	r3, [r3, #16]
 8001d64:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	695b      	ldr	r3, [r3, #20]
 8001d70:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	615a      	str	r2, [r3, #20]
}
 8001d78:	bf00      	nop
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <LL_USART_IsActiveFlag_TC>:
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d94:	2b40      	cmp	r3, #64	; 0x40
 8001d96:	bf0c      	ite	eq
 8001d98:	2301      	moveq	r3, #1
 8001d9a:	2300      	movne	r3, #0
 8001d9c:	b2db      	uxtb	r3, r3
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr

08001daa <LL_USART_IsActiveFlag_TXE>:
{
 8001daa:	b480      	push	{r7}
 8001dac:	b083      	sub	sp, #12
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dba:	2b80      	cmp	r3, #128	; 0x80
 8001dbc:	bf0c      	ite	eq
 8001dbe:	2301      	moveq	r3, #1
 8001dc0:	2300      	movne	r3, #0
 8001dc2:	b2db      	uxtb	r3, r3
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr

08001dd0 <LL_USART_EnableIT_IDLE>:
  * @rmtoll CR1          IDLEIE        LL_USART_EnableIT_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b089      	sub	sp, #36	; 0x24
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	330c      	adds	r3, #12
 8001ddc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	e853 3f00 	ldrex	r3, [r3]
 8001de4:	60bb      	str	r3, [r7, #8]
   return(result);
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	f043 0310 	orr.w	r3, r3, #16
 8001dec:	61fb      	str	r3, [r7, #28]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	330c      	adds	r3, #12
 8001df2:	69fa      	ldr	r2, [r7, #28]
 8001df4:	61ba      	str	r2, [r7, #24]
 8001df6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001df8:	6979      	ldr	r1, [r7, #20]
 8001dfa:	69ba      	ldr	r2, [r7, #24]
 8001dfc:	e841 2300 	strex	r3, r2, [r1]
 8001e00:	613b      	str	r3, [r7, #16]
   return(result);
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	bf14      	ite	ne
 8001e08:	2301      	movne	r3, #1
 8001e0a:	2300      	moveq	r3, #0
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d000      	beq.n	8001e14 <LL_USART_EnableIT_IDLE+0x44>
 8001e12:	e7e1      	b.n	8001dd8 <LL_USART_EnableIT_IDLE+0x8>
}
 8001e14:	bf00      	nop
 8001e16:	3724      	adds	r7, #36	; 0x24
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr

08001e20 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b089      	sub	sp, #36	; 0x24
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	330c      	adds	r3, #12
 8001e2c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	e853 3f00 	ldrex	r3, [r3]
 8001e34:	60bb      	str	r3, [r7, #8]
   return(result);
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	f043 0320 	orr.w	r3, r3, #32
 8001e3c:	61fb      	str	r3, [r7, #28]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	330c      	adds	r3, #12
 8001e42:	69fa      	ldr	r2, [r7, #28]
 8001e44:	61ba      	str	r2, [r7, #24]
 8001e46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e48:	6979      	ldr	r1, [r7, #20]
 8001e4a:	69ba      	ldr	r2, [r7, #24]
 8001e4c:	e841 2300 	strex	r3, r2, [r1]
 8001e50:	613b      	str	r3, [r7, #16]
   return(result);
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	bf14      	ite	ne
 8001e58:	2301      	movne	r3, #1
 8001e5a:	2300      	moveq	r3, #0
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d000      	beq.n	8001e64 <LL_USART_EnableIT_RXNE+0x44>
 8001e62:	e7e1      	b.n	8001e28 <LL_USART_EnableIT_RXNE+0x8>
}
 8001e64:	bf00      	nop
 8001e66:	3724      	adds	r7, #36	; 0x24
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr

08001e70 <LL_USART_EnableIT_PE>:
  * @rmtoll CR1          PEIE          LL_USART_EnableIT_PE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_PE(USART_TypeDef *USARTx)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b089      	sub	sp, #36	; 0x24
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_PEIE);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	330c      	adds	r3, #12
 8001e7c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	e853 3f00 	ldrex	r3, [r3]
 8001e84:	60bb      	str	r3, [r7, #8]
   return(result);
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e8c:	61fb      	str	r3, [r7, #28]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	330c      	adds	r3, #12
 8001e92:	69fa      	ldr	r2, [r7, #28]
 8001e94:	61ba      	str	r2, [r7, #24]
 8001e96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e98:	6979      	ldr	r1, [r7, #20]
 8001e9a:	69ba      	ldr	r2, [r7, #24]
 8001e9c:	e841 2300 	strex	r3, r2, [r1]
 8001ea0:	613b      	str	r3, [r7, #16]
   return(result);
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	bf14      	ite	ne
 8001ea8:	2301      	movne	r3, #1
 8001eaa:	2300      	moveq	r3, #0
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d000      	beq.n	8001eb4 <LL_USART_EnableIT_PE+0x44>
 8001eb2:	e7e1      	b.n	8001e78 <LL_USART_EnableIT_PE+0x8>
}
 8001eb4:	bf00      	nop
 8001eb6:	3724      	adds	r7, #36	; 0x24
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <LL_USART_EnableIT_ERROR>:
  * @rmtoll CR3          EIE           LL_USART_EnableIT_ERROR
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b089      	sub	sp, #36	; 0x24
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	3314      	adds	r3, #20
 8001ecc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	e853 3f00 	ldrex	r3, [r3]
 8001ed4:	60bb      	str	r3, [r7, #8]
   return(result);
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	f043 0301 	orr.w	r3, r3, #1
 8001edc:	61fb      	str	r3, [r7, #28]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	3314      	adds	r3, #20
 8001ee2:	69fa      	ldr	r2, [r7, #28]
 8001ee4:	61ba      	str	r2, [r7, #24]
 8001ee6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ee8:	6979      	ldr	r1, [r7, #20]
 8001eea:	69ba      	ldr	r2, [r7, #24]
 8001eec:	e841 2300 	strex	r3, r2, [r1]
 8001ef0:	613b      	str	r3, [r7, #16]
   return(result);
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	bf14      	ite	ne
 8001ef8:	2301      	movne	r3, #1
 8001efa:	2300      	moveq	r3, #0
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d000      	beq.n	8001f04 <LL_USART_EnableIT_ERROR+0x44>
 8001f02:	e7e1      	b.n	8001ec8 <LL_USART_EnableIT_ERROR+0x8>
}
 8001f04:	bf00      	nop
 8001f06:	3724      	adds	r7, #36	; 0x24
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr

08001f10 <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b089      	sub	sp, #36	; 0x24
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	3314      	adds	r3, #20
 8001f1c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	e853 3f00 	ldrex	r3, [r3]
 8001f24:	60bb      	str	r3, [r7, #8]
   return(result);
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f2c:	61fb      	str	r3, [r7, #28]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	3314      	adds	r3, #20
 8001f32:	69fa      	ldr	r2, [r7, #28]
 8001f34:	61ba      	str	r2, [r7, #24]
 8001f36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f38:	6979      	ldr	r1, [r7, #20]
 8001f3a:	69ba      	ldr	r2, [r7, #24]
 8001f3c:	e841 2300 	strex	r3, r2, [r1]
 8001f40:	613b      	str	r3, [r7, #16]
   return(result);
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	bf14      	ite	ne
 8001f48:	2301      	movne	r3, #1
 8001f4a:	2300      	moveq	r3, #0
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d000      	beq.n	8001f54 <LL_USART_EnableDMAReq_RX+0x44>
 8001f52:	e7e1      	b.n	8001f18 <LL_USART_EnableDMAReq_RX+0x8>
}
 8001f54:	bf00      	nop
 8001f56:	3724      	adds	r7, #36	; 0x24
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	460b      	mov	r3, r1
 8001f6a:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8001f6c:	78fa      	ldrb	r2, [r7, #3]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	605a      	str	r2, [r3, #4]
}
 8001f72:	bf00      	nop
 8001f74:	370c      	adds	r7, #12
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
	...

08001f80 <_ZN11UHAL_USART110initializeEm>:

#include "uhal_usart.hpp"
#include "cstring"


void UHAL_USART1::initialize(uint32_t baudRate) {
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b090      	sub	sp, #64	; 0x40
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]

    /* USER CODE BEGIN USART1_Init 0 */

    /* USER CODE END USART1_Init 0 */

    LL_USART_InitTypeDef USART_InitStruct = {0};
 8001f88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	601a      	str	r2, [r3, #0]
 8001f90:	605a      	str	r2, [r3, #4]
 8001f92:	609a      	str	r2, [r3, #8]
 8001f94:	60da      	str	r2, [r3, #12]
 8001f96:	611a      	str	r2, [r3, #16]
 8001f98:	615a      	str	r2, [r3, #20]
 8001f9a:	619a      	str	r2, [r3, #24]

    LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f9c:	f107 030c 	add.w	r3, r7, #12
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	601a      	str	r2, [r3, #0]
 8001fa4:	605a      	str	r2, [r3, #4]
 8001fa6:	609a      	str	r2, [r3, #8]
 8001fa8:	60da      	str	r2, [r3, #12]
 8001faa:	611a      	str	r2, [r3, #16]
 8001fac:	615a      	str	r2, [r3, #20]

    /* Peripheral clock enable */
    LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8001fae:	2010      	movs	r0, #16
 8001fb0:	f7ff fc0e 	bl	80017d0 <LL_APB2_GRP1_EnableClock>

    LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001fb4:	2002      	movs	r0, #2
 8001fb6:	f7ff fbf3 	bl	80017a0 <LL_AHB1_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6   ------> USART1_TX
    PB7   ------> USART1_RX
    */
    GPIO_InitStruct.Pin = LL_GPIO_PIN_6 | LL_GPIO_PIN_7;
 8001fba:	23c0      	movs	r3, #192	; 0xc0
 8001fbc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001fce:	2307      	movs	r3, #7
 8001fd0:	623b      	str	r3, [r7, #32]
    LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fd2:	f107 030c 	add.w	r3, r7, #12
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	4845      	ldr	r0, [pc, #276]	; (80020f0 <_ZN11UHAL_USART110initializeEm+0x170>)
 8001fda:	f000 fa52 	bl	8002482 <LL_GPIO_Init>




    LL_DMA_SetChannelSelection(DMA2, LL_DMA_STREAM_5, LL_DMA_CHANNEL_4);
 8001fde:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001fe2:	2105      	movs	r1, #5
 8001fe4:	4843      	ldr	r0, [pc, #268]	; (80020f4 <_ZN11UHAL_USART110initializeEm+0x174>)
 8001fe6:	f7ff fd07 	bl	80019f8 <LL_DMA_SetChannelSelection>

    LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_STREAM_5, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8001fea:	2200      	movs	r2, #0
 8001fec:	2105      	movs	r1, #5
 8001fee:	4841      	ldr	r0, [pc, #260]	; (80020f4 <_ZN11UHAL_USART110initializeEm+0x174>)
 8001ff0:	f7ff fc06 	bl	8001800 <LL_DMA_SetDataTransferDirection>

    LL_DMA_SetStreamPriorityLevel(DMA2, LL_DMA_STREAM_5, LL_DMA_PRIORITY_VERYHIGH);
 8001ff4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001ff8:	2105      	movs	r1, #5
 8001ffa:	483e      	ldr	r0, [pc, #248]	; (80020f4 <_ZN11UHAL_USART110initializeEm+0x174>)
 8001ffc:	f7ff fcd8 	bl	80019b0 <LL_DMA_SetStreamPriorityLevel>

    LL_DMA_SetMode(DMA2, LL_DMA_STREAM_5, LL_DMA_MODE_NORMAL);
 8002000:	2200      	movs	r2, #0
 8002002:	2105      	movs	r1, #5
 8002004:	483b      	ldr	r0, [pc, #236]	; (80020f4 <_ZN11UHAL_USART110initializeEm+0x174>)
 8002006:	f7ff fc1f 	bl	8001848 <LL_DMA_SetMode>

    LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_STREAM_5, LL_DMA_PERIPH_NOINCREMENT);
 800200a:	2200      	movs	r2, #0
 800200c:	2105      	movs	r1, #5
 800200e:	4839      	ldr	r0, [pc, #228]	; (80020f4 <_ZN11UHAL_USART110initializeEm+0x174>)
 8002010:	f7ff fc3e 	bl	8001890 <LL_DMA_SetPeriphIncMode>

    LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_STREAM_5, LL_DMA_MEMORY_INCREMENT);
 8002014:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002018:	2105      	movs	r1, #5
 800201a:	4836      	ldr	r0, [pc, #216]	; (80020f4 <_ZN11UHAL_USART110initializeEm+0x174>)
 800201c:	f7ff fc5c 	bl	80018d8 <LL_DMA_SetMemoryIncMode>

    LL_DMA_SetPeriphSize(DMA2, LL_DMA_STREAM_5, LL_DMA_PDATAALIGN_BYTE);
 8002020:	2200      	movs	r2, #0
 8002022:	2105      	movs	r1, #5
 8002024:	4833      	ldr	r0, [pc, #204]	; (80020f4 <_ZN11UHAL_USART110initializeEm+0x174>)
 8002026:	f7ff fc7b 	bl	8001920 <LL_DMA_SetPeriphSize>

    LL_DMA_SetMemorySize(DMA2, LL_DMA_STREAM_5, LL_DMA_MDATAALIGN_BYTE);
 800202a:	2200      	movs	r2, #0
 800202c:	2105      	movs	r1, #5
 800202e:	4831      	ldr	r0, [pc, #196]	; (80020f4 <_ZN11UHAL_USART110initializeEm+0x174>)
 8002030:	f7ff fc9a 	bl	8001968 <LL_DMA_SetMemorySize>

    LL_DMA_EnableFifoMode(DMA2, LL_DMA_STREAM_5);
 8002034:	2105      	movs	r1, #5
 8002036:	482f      	ldr	r0, [pc, #188]	; (80020f4 <_ZN11UHAL_USART110initializeEm+0x174>)
 8002038:	f7ff fd4a 	bl	8001ad0 <LL_DMA_EnableFifoMode>

    LL_DMA_SetFIFOThreshold(DMA2, LL_DMA_STREAM_5, LL_DMA_FIFOTHRESHOLD_1_4);
 800203c:	2200      	movs	r2, #0
 800203e:	2105      	movs	r1, #5
 8002040:	482c      	ldr	r0, [pc, #176]	; (80020f4 <_ZN11UHAL_USART110initializeEm+0x174>)
 8002042:	f7ff fd65 	bl	8001b10 <LL_DMA_SetFIFOThreshold>

   LL_DMA_SetMemoryBurstxfer(DMA2, LL_DMA_STREAM_5, LL_DMA_MBURST_SINGLE);
 8002046:	2200      	movs	r2, #0
 8002048:	2105      	movs	r1, #5
 800204a:	482a      	ldr	r0, [pc, #168]	; (80020f4 <_ZN11UHAL_USART110initializeEm+0x174>)
 800204c:	f7ff fcf8 	bl	8001a40 <LL_DMA_SetMemoryBurstxfer>

    LL_DMA_SetPeriphBurstxfer(DMA2, LL_DMA_STREAM_5, LL_DMA_PBURST_SINGLE);
 8002050:	2200      	movs	r2, #0
 8002052:	2105      	movs	r1, #5
 8002054:	4827      	ldr	r0, [pc, #156]	; (80020f4 <_ZN11UHAL_USART110initializeEm+0x174>)
 8002056:	f7ff fd17 	bl	8001a88 <LL_DMA_SetPeriphBurstxfer>

    LL_USART_EnableDMAReq_RX(thisInstance);
 800205a:	4827      	ldr	r0, [pc, #156]	; (80020f8 <_ZN11UHAL_USART110initializeEm+0x178>)
 800205c:	f7ff ff58 	bl	8001f10 <LL_USART_EnableDMAReq_RX>

    NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002060:	f7ff fb16 	bl	8001690 <__NVIC_GetPriorityGrouping>
 8002064:	4603      	mov	r3, r0
 8002066:	2200      	movs	r2, #0
 8002068:	2100      	movs	r1, #0
 800206a:	4618      	mov	r0, r3
 800206c:	f7ff fb66 	bl	800173c <NVIC_EncodePriority>
 8002070:	4603      	mov	r3, r0
 8002072:	4619      	mov	r1, r3
 8002074:	2025      	movs	r0, #37	; 0x25
 8002076:	f7ff fb37 	bl	80016e8 <__NVIC_SetPriority>
    NVIC_EnableIRQ(USART1_IRQn);
 800207a:	2025      	movs	r0, #37	; 0x25
 800207c:	f7ff fb16 	bl	80016ac <__NVIC_EnableIRQ>
                LL_DMA_ClearFlag_FE1(thisInstance);

            }       
            __SFI auto enableInterrupt()
            {
                LL_DMA_EnableIT_FE(thisInstance, thisStream);
 8002080:	2105      	movs	r1, #5
 8002082:	481c      	ldr	r0, [pc, #112]	; (80020f4 <_ZN11UHAL_USART110initializeEm+0x174>)
 8002084:	f7ff fde8 	bl	8001c58 <LL_DMA_EnableIT_FE>
            }
 8002088:	bf00      	nop
            {
                LL_DMA_ClearFlag_DME0(thisInstance);
            }       
            __SFI auto enableInterrupt()
            {
                LL_DMA_EnableIT_DME(thisInstance, thisStream);
 800208a:	2105      	movs	r1, #5
 800208c:	4819      	ldr	r0, [pc, #100]	; (80020f4 <_ZN11UHAL_USART110initializeEm+0x174>)
 800208e:	f7ff fdc3 	bl	8001c18 <LL_DMA_EnableIT_DME>
            }
 8002092:	bf00      	nop
               LL_DMA_EnableIT_HT(thisInstance, thisStream);
 8002094:	2105      	movs	r1, #5
 8002096:	4817      	ldr	r0, [pc, #92]	; (80020f4 <_ZN11UHAL_USART110initializeEm+0x174>)
 8002098:	f7ff fd5e 	bl	8001b58 <LL_DMA_EnableIT_HT>
            }
 800209c:	bf00      	nop
                LL_DMA_EnableIT_TC(thisInstance, thisStream);
 800209e:	2105      	movs	r1, #5
 80020a0:	4814      	ldr	r0, [pc, #80]	; (80020f4 <_ZN11UHAL_USART110initializeEm+0x174>)
 80020a2:	f7ff fd99 	bl	8001bd8 <LL_DMA_EnableIT_TC>
            }
 80020a6:	bf00      	nop
                LL_DMA_EnableIT_TE(thisInstance, thisStream);
 80020a8:	2105      	movs	r1, #5
 80020aa:	4812      	ldr	r0, [pc, #72]	; (80020f4 <_ZN11UHAL_USART110initializeEm+0x174>)
 80020ac:	f7ff fd74 	bl	8001b98 <LL_DMA_EnableIT_TE>
            }
 80020b0:	bf00      	nop
    UHAL_DMA2::DMA_USART1::flag_IT::TCIF::enableInterrupt();
    UHAL_DMA2::DMA_USART1::flag_IT::TEIF::enableInterrupt();



    USART_InitStruct.BaudRate = baudRate;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	627b      	str	r3, [r7, #36]	; 0x24
    USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_9B;
 80020b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020ba:	62bb      	str	r3, [r7, #40]	; 0x28
    USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80020bc:	2300      	movs	r3, #0
 80020be:	62fb      	str	r3, [r7, #44]	; 0x2c
    USART_InitStruct.Parity = LL_USART_PARITY_EVEN;
 80020c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020c4:	633b      	str	r3, [r7, #48]	; 0x30
    USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80020c6:	230c      	movs	r3, #12
 80020c8:	637b      	str	r3, [r7, #52]	; 0x34
    USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80020ca:	2300      	movs	r3, #0
 80020cc:	63bb      	str	r3, [r7, #56]	; 0x38
    USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80020ce:	2300      	movs	r3, #0
 80020d0:	63fb      	str	r3, [r7, #60]	; 0x3c
    LL_USART_Init(thisInstance, &USART_InitStruct);
 80020d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020d6:	4619      	mov	r1, r3
 80020d8:	4807      	ldr	r0, [pc, #28]	; (80020f8 <_ZN11UHAL_USART110initializeEm+0x178>)
 80020da:	f000 fde5 	bl	8002ca8 <LL_USART_Init>
    LL_USART_ConfigAsyncMode(thisInstance);
 80020de:	4806      	ldr	r0, [pc, #24]	; (80020f8 <_ZN11UHAL_USART110initializeEm+0x178>)
 80020e0:	f7ff fe3a 	bl	8001d58 <LL_USART_ConfigAsyncMode>

    UHAL_DMA2::DMA_USART1::initialize();
 80020e4:	f7ff fa34 	bl	8001550 <_ZN9UHAL_DMA210DMA_USART110initializeEv>
 //   LL_USART_Enable(USART6);

}
 80020e8:	bf00      	nop
 80020ea:	3740      	adds	r7, #64	; 0x40
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	40020400 	.word	0x40020400
 80020f4:	40026400 	.word	0x40026400
 80020f8:	40011000 	.word	0x40011000

080020fc <_ZN11UHAL_USART14sendEh>:


void UHAL_USART1::send(const UHAL_USART1::data_T data) {
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	4603      	mov	r3, r0
 8002104:	71fb      	strb	r3, [r7, #7]
    using namespace UHAL_USART1::flag_IT;
    enable();
 8002106:	f000 f86d 	bl	80021e4 <_ZN11UHAL_USART16enableEv>
    enableTransmitter();
 800210a:	f000 f875 	bl	80021f8 <_ZN11UHAL_USART117enableTransmitterEv>
{
	return UHAL_ERROR::DEPRECATED;
}
auto UHAL_USART1::flag_IT::TXE::isSet()
{
	return LL_USART_IsActiveFlag_TXE(thisInstance);
 800210e:	4811      	ldr	r0, [pc, #68]	; (8002154 <_ZN11UHAL_USART14sendEh+0x58>)
 8002110:	f7ff fe4b 	bl	8001daa <LL_USART_IsActiveFlag_TXE>
 8002114:	4603      	mov	r3, r0
 8002116:	bf00      	nop
            waitUntil(TXE::isSet());
 8002118:	2b00      	cmp	r3, #0
 800211a:	bf0c      	ite	eq
 800211c:	2301      	moveq	r3, #1
 800211e:	2300      	movne	r3, #0
 8002120:	b2db      	uxtb	r3, r3
 8002122:	2b00      	cmp	r3, #0
 8002124:	d000      	beq.n	8002128 <_ZN11UHAL_USART14sendEh+0x2c>
 8002126:	e7f2      	b.n	800210e <_ZN11UHAL_USART14sendEh+0x12>
    transmitData(data);
 8002128:	79fb      	ldrb	r3, [r7, #7]
 800212a:	4618      	mov	r0, r3
 800212c:	f000 f86e 	bl	800220c <_ZN11UHAL_USART112transmitDataEh>
	return LL_USART_IsActiveFlag_TC(thisInstance);
 8002130:	4808      	ldr	r0, [pc, #32]	; (8002154 <_ZN11UHAL_USART14sendEh+0x58>)
 8002132:	f7ff fe27 	bl	8001d84 <LL_USART_IsActiveFlag_TC>
 8002136:	4603      	mov	r3, r0
 8002138:	bf00      	nop
            waitUntil(TC::isSet());
 800213a:	2b00      	cmp	r3, #0
 800213c:	bf0c      	ite	eq
 800213e:	2301      	moveq	r3, #1
 8002140:	2300      	movne	r3, #0
 8002142:	b2db      	uxtb	r3, r3
 8002144:	2b00      	cmp	r3, #0
 8002146:	d000      	beq.n	800214a <_ZN11UHAL_USART14sendEh+0x4e>
 8002148:	e7f2      	b.n	8002130 <_ZN11UHAL_USART14sendEh+0x34>

}
 800214a:	bf00      	nop
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	40011000 	.word	0x40011000

08002158 <_ZN11UHAL_USART120interruptReceiveInitEv>:
    enable();
    enableTransmitter();
    enableInterruptHandle();
}

void UHAL_USART1::interruptReceiveInit() {
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
				LL_USART_EnableIT_ERROR(thisInstance);
 800215c:	480d      	ldr	r0, [pc, #52]	; (8002194 <_ZN11UHAL_USART120interruptReceiveInitEv+0x3c>)
 800215e:	f7ff feaf 	bl	8001ec0 <LL_USART_EnableIT_ERROR>
			}
 8002162:	bf00      	nop
				LL_USART_EnableIT_RXNE(thisInstance);
 8002164:	480b      	ldr	r0, [pc, #44]	; (8002194 <_ZN11UHAL_USART120interruptReceiveInitEv+0x3c>)
 8002166:	f7ff fe5b 	bl	8001e20 <LL_USART_EnableIT_RXNE>
			}
 800216a:	bf00      	nop
				LL_USART_EnableIT_PE(thisInstance);
 800216c:	4809      	ldr	r0, [pc, #36]	; (8002194 <_ZN11UHAL_USART120interruptReceiveInitEv+0x3c>)
 800216e:	f7ff fe7f 	bl	8001e70 <LL_USART_EnableIT_PE>
			}
 8002172:	bf00      	nop
				LL_USART_EnableIT_IDLE(thisInstance);
 8002174:	4807      	ldr	r0, [pc, #28]	; (8002194 <_ZN11UHAL_USART120interruptReceiveInitEv+0x3c>)
 8002176:	f7ff fe2b 	bl	8001dd0 <LL_USART_EnableIT_IDLE>
			}
 800217a:	bf00      	nop
				LL_USART_EnableIT_ERROR(thisInstance);
 800217c:	4805      	ldr	r0, [pc, #20]	; (8002194 <_ZN11UHAL_USART120interruptReceiveInitEv+0x3c>)
 800217e:	f7ff fe9f 	bl	8001ec0 <LL_USART_EnableIT_ERROR>
			}
 8002182:	bf00      	nop
    FE::enableIT();
    ORE::enableIT();
    PE::enableIT();
    IDLE::enableIT();
    NF::enableIT();
    enableReceiver();
 8002184:	f000 f86e 	bl	8002264 <_ZN11UHAL_USART114enableReceiverEv>
    enableInterruptHandle(0,0);
 8002188:	2100      	movs	r1, #0
 800218a:	2000      	movs	r0, #0
 800218c:	f000 f84e 	bl	800222c <_ZN11UHAL_USART121enableInterruptHandleEhh>
}
 8002190:	bf00      	nop
 8002192:	bd80      	pop	{r7, pc}
 8002194:	40011000 	.word	0x40011000

08002198 <_ZN11UHAL_USART110developing8fristRunEjt>:

void UHAL_USART1::developing::fristRun(uintptr_t addressBuffer, uint16_t numberOfData) {
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	460b      	mov	r3, r1
 80021a2:	807b      	strh	r3, [r7, #2]

    initialize(115200);
 80021a4:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 80021a8:	f7ff feea 	bl	8001f80 <_ZN11UHAL_USART110initializeEm>
    enableTransmitter();
 80021ac:	f000 f824 	bl	80021f8 <_ZN11UHAL_USART117enableTransmitterEv>
   enableReceiver();
 80021b0:	f000 f858 	bl	8002264 <_ZN11UHAL_USART114enableReceiverEv>
   UHAL_DMA2::DMA_USART1::setPeripheralADDress(reinterpret_cast<uintptr_t>(&thisInstance->DR));
 80021b4:	4b0a      	ldr	r3, [pc, #40]	; (80021e0 <_ZN11UHAL_USART110developing8fristRunEjt+0x48>)
 80021b6:	3304      	adds	r3, #4
 80021b8:	4618      	mov	r0, r3
 80021ba:	f7ff f9b9 	bl	8001530 <_ZN9UHAL_DMA210DMA_USART120setPeripheralADDressEj>
   UHAL_DMA2::DMA_USART1::setBufferAddress(addressBuffer);
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f7ff f98a 	bl	80014d8 <_ZN9UHAL_DMA210DMA_USART116setBufferAddressEj>
    UHAL_DMA2::DMA_USART1::setNumberOfDataTransfer(numberOfData);
 80021c4:	887b      	ldrh	r3, [r7, #2]
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7ff f9a0 	bl	800150c <_ZN9UHAL_DMA210DMA_USART123setNumberOfDataTransferEt>
   UHAL_DMA2::DMA_USART1::enable();
 80021cc:	f7ff f994 	bl	80014f8 <_ZN9UHAL_DMA210DMA_USART16enableEv>
    interruptReceiveInit();
 80021d0:	f7ff ffc2 	bl	8002158 <_ZN11UHAL_USART120interruptReceiveInitEv>
    enable();
 80021d4:	f000 f806 	bl	80021e4 <_ZN11UHAL_USART16enableEv>
}
 80021d8:	bf00      	nop
 80021da:	3708      	adds	r7, #8
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	40011000 	.word	0x40011000

080021e4 <_ZN11UHAL_USART16enableEv>:
void UHAL_USART1::enablePerihClock() {
    LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART6);
}


void UHAL_USART1::enable() {
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0
    if constexpr (systemDebug == debug_T::debugOn) {
        auto posAssert = LL_APB2_GRP1_IsEnabledClock(
                LL_APB2_GRP1_PERIPH_USART6);
        assert_param(posAssert);
    }
    LL_USART_Enable(thisInstance);
 80021e8:	4802      	ldr	r0, [pc, #8]	; (80021f4 <_ZN11UHAL_USART16enableEv+0x10>)
 80021ea:	f7ff fd55 	bl	8001c98 <LL_USART_Enable>
}
 80021ee:	bf00      	nop
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	40011000 	.word	0x40011000

080021f8 <_ZN11UHAL_USART117enableTransmitterEv>:

void UHAL_USART1::enableTransmitter() {
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
    LL_USART_EnableDirectionTx(thisInstance);
 80021fc:	4802      	ldr	r0, [pc, #8]	; (8002208 <_ZN11UHAL_USART117enableTransmitterEv+0x10>)
 80021fe:	f7ff fd83 	bl	8001d08 <LL_USART_EnableDirectionTx>
}
 8002202:	bf00      	nop
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	40011000 	.word	0x40011000

0800220c <_ZN11UHAL_USART112transmitDataEh>:

void UHAL_USART1::transmitData(const data_T data) {
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	4603      	mov	r3, r0
 8002214:	71fb      	strb	r3, [r7, #7]
    LL_USART_TransmitData8(thisInstance, data);
 8002216:	79fb      	ldrb	r3, [r7, #7]
 8002218:	4619      	mov	r1, r3
 800221a:	4803      	ldr	r0, [pc, #12]	; (8002228 <_ZN11UHAL_USART112transmitDataEh+0x1c>)
 800221c:	f7ff fea0 	bl	8001f60 <LL_USART_TransmitData8>
}
 8002220:	bf00      	nop
 8002222:	3708      	adds	r7, #8
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	40011000 	.word	0x40011000

0800222c <_ZN11UHAL_USART121enableInterruptHandleEhh>:
void UHAL_USART1::disable() {
    LL_USART_Disable(thisInstance);
}

void UHAL_USART1::enableInterruptHandle(const uint8_t PreemptPriority,
                                        const uint8_t SubPriority) {
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	4603      	mov	r3, r0
 8002234:	460a      	mov	r2, r1
 8002236:	71fb      	strb	r3, [r7, #7]
 8002238:	4613      	mov	r3, r2
 800223a:	71bb      	strb	r3, [r7, #6]
    NVIC_SetPriority(USART1_IRQn,
 800223c:	f7ff fa28 	bl	8001690 <__NVIC_GetPriorityGrouping>
 8002240:	79fb      	ldrb	r3, [r7, #7]
 8002242:	79ba      	ldrb	r2, [r7, #6]
 8002244:	4619      	mov	r1, r3
 8002246:	f7ff fa79 	bl	800173c <NVIC_EncodePriority>
 800224a:	4603      	mov	r3, r0
 800224c:	4619      	mov	r1, r3
 800224e:	2025      	movs	r0, #37	; 0x25
 8002250:	f7ff fa4a 	bl	80016e8 <__NVIC_SetPriority>
                     NVIC_EncodePriority(NVIC_GetPriorityGrouping(), PreemptPriority,
                                         SubPriority));
    NVIC_EnableIRQ(USART1_IRQn);
 8002254:	2025      	movs	r0, #37	; 0x25
 8002256:	f7ff fa29 	bl	80016ac <__NVIC_EnableIRQ>
}
 800225a:	bf00      	nop
 800225c:	3708      	adds	r7, #8
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
	...

08002264 <_ZN11UHAL_USART114enableReceiverEv>:

void UHAL_USART1::enableReceiver()
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
    LL_USART_EnableDirectionRx(thisInstance);
 8002268:	4802      	ldr	r0, [pc, #8]	; (8002274 <_ZN11UHAL_USART114enableReceiverEv+0x10>)
 800226a:	f7ff fd25 	bl	8001cb8 <LL_USART_EnableDirectionRx>
}
 800226e:	bf00      	nop
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	40011000 	.word	0x40011000

08002278 <LL_GPIO_SetPinMode>:
{
 8002278:	b480      	push	{r7}
 800227a:	b089      	sub	sp, #36	; 0x24
 800227c:	af00      	add	r7, sp, #0
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	60b9      	str	r1, [r7, #8]
 8002282:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	fa93 f3a3 	rbit	r3, r3
 8002292:	613b      	str	r3, [r7, #16]
  return result;
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	fab3 f383 	clz	r3, r3
 800229a:	b2db      	uxtb	r3, r3
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	2103      	movs	r1, #3
 80022a0:	fa01 f303 	lsl.w	r3, r1, r3
 80022a4:	43db      	mvns	r3, r3
 80022a6:	401a      	ands	r2, r3
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	fa93 f3a3 	rbit	r3, r3
 80022b2:	61bb      	str	r3, [r7, #24]
  return result;
 80022b4:	69bb      	ldr	r3, [r7, #24]
 80022b6:	fab3 f383 	clz	r3, r3
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	005b      	lsls	r3, r3, #1
 80022be:	6879      	ldr	r1, [r7, #4]
 80022c0:	fa01 f303 	lsl.w	r3, r1, r3
 80022c4:	431a      	orrs	r2, r3
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	601a      	str	r2, [r3, #0]
}
 80022ca:	bf00      	nop
 80022cc:	3724      	adds	r7, #36	; 0x24
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr

080022d6 <LL_GPIO_SetPinOutputType>:
{
 80022d6:	b480      	push	{r7}
 80022d8:	b085      	sub	sp, #20
 80022da:	af00      	add	r7, sp, #0
 80022dc:	60f8      	str	r0, [r7, #12]
 80022de:	60b9      	str	r1, [r7, #8]
 80022e0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	685a      	ldr	r2, [r3, #4]
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	43db      	mvns	r3, r3
 80022ea:	401a      	ands	r2, r3
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	6879      	ldr	r1, [r7, #4]
 80022f0:	fb01 f303 	mul.w	r3, r1, r3
 80022f4:	431a      	orrs	r2, r3
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	605a      	str	r2, [r3, #4]
}
 80022fa:	bf00      	nop
 80022fc:	3714      	adds	r7, #20
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr

08002306 <LL_GPIO_SetPinSpeed>:
{
 8002306:	b480      	push	{r7}
 8002308:	b089      	sub	sp, #36	; 0x24
 800230a:	af00      	add	r7, sp, #0
 800230c:	60f8      	str	r0, [r7, #12]
 800230e:	60b9      	str	r1, [r7, #8]
 8002310:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	689a      	ldr	r2, [r3, #8]
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	fa93 f3a3 	rbit	r3, r3
 8002320:	613b      	str	r3, [r7, #16]
  return result;
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	fab3 f383 	clz	r3, r3
 8002328:	b2db      	uxtb	r3, r3
 800232a:	005b      	lsls	r3, r3, #1
 800232c:	2103      	movs	r1, #3
 800232e:	fa01 f303 	lsl.w	r3, r1, r3
 8002332:	43db      	mvns	r3, r3
 8002334:	401a      	ands	r2, r3
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	fa93 f3a3 	rbit	r3, r3
 8002340:	61bb      	str	r3, [r7, #24]
  return result;
 8002342:	69bb      	ldr	r3, [r7, #24]
 8002344:	fab3 f383 	clz	r3, r3
 8002348:	b2db      	uxtb	r3, r3
 800234a:	005b      	lsls	r3, r3, #1
 800234c:	6879      	ldr	r1, [r7, #4]
 800234e:	fa01 f303 	lsl.w	r3, r1, r3
 8002352:	431a      	orrs	r2, r3
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	609a      	str	r2, [r3, #8]
}
 8002358:	bf00      	nop
 800235a:	3724      	adds	r7, #36	; 0x24
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr

08002364 <LL_GPIO_SetPinPull>:
{
 8002364:	b480      	push	{r7}
 8002366:	b089      	sub	sp, #36	; 0x24
 8002368:	af00      	add	r7, sp, #0
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	60b9      	str	r1, [r7, #8]
 800236e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	68da      	ldr	r2, [r3, #12]
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	fa93 f3a3 	rbit	r3, r3
 800237e:	613b      	str	r3, [r7, #16]
  return result;
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	fab3 f383 	clz	r3, r3
 8002386:	b2db      	uxtb	r3, r3
 8002388:	005b      	lsls	r3, r3, #1
 800238a:	2103      	movs	r1, #3
 800238c:	fa01 f303 	lsl.w	r3, r1, r3
 8002390:	43db      	mvns	r3, r3
 8002392:	401a      	ands	r2, r3
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	fa93 f3a3 	rbit	r3, r3
 800239e:	61bb      	str	r3, [r7, #24]
  return result;
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	fab3 f383 	clz	r3, r3
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	6879      	ldr	r1, [r7, #4]
 80023ac:	fa01 f303 	lsl.w	r3, r1, r3
 80023b0:	431a      	orrs	r2, r3
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	60da      	str	r2, [r3, #12]
}
 80023b6:	bf00      	nop
 80023b8:	3724      	adds	r7, #36	; 0x24
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr

080023c2 <LL_GPIO_SetAFPin_0_7>:
{
 80023c2:	b480      	push	{r7}
 80023c4:	b089      	sub	sp, #36	; 0x24
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	60f8      	str	r0, [r7, #12]
 80023ca:	60b9      	str	r1, [r7, #8]
 80023cc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	6a1a      	ldr	r2, [r3, #32]
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	fa93 f3a3 	rbit	r3, r3
 80023dc:	613b      	str	r3, [r7, #16]
  return result;
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	fab3 f383 	clz	r3, r3
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	210f      	movs	r1, #15
 80023ea:	fa01 f303 	lsl.w	r3, r1, r3
 80023ee:	43db      	mvns	r3, r3
 80023f0:	401a      	ands	r2, r3
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	fa93 f3a3 	rbit	r3, r3
 80023fc:	61bb      	str	r3, [r7, #24]
  return result;
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	fab3 f383 	clz	r3, r3
 8002404:	b2db      	uxtb	r3, r3
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	6879      	ldr	r1, [r7, #4]
 800240a:	fa01 f303 	lsl.w	r3, r1, r3
 800240e:	431a      	orrs	r2, r3
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	621a      	str	r2, [r3, #32]
}
 8002414:	bf00      	nop
 8002416:	3724      	adds	r7, #36	; 0x24
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr

08002420 <LL_GPIO_SetAFPin_8_15>:
{
 8002420:	b480      	push	{r7}
 8002422:	b089      	sub	sp, #36	; 0x24
 8002424:	af00      	add	r7, sp, #0
 8002426:	60f8      	str	r0, [r7, #12]
 8002428:	60b9      	str	r1, [r7, #8]
 800242a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	0a1b      	lsrs	r3, r3, #8
 8002434:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	fa93 f3a3 	rbit	r3, r3
 800243c:	613b      	str	r3, [r7, #16]
  return result;
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	fab3 f383 	clz	r3, r3
 8002444:	b2db      	uxtb	r3, r3
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	210f      	movs	r1, #15
 800244a:	fa01 f303 	lsl.w	r3, r1, r3
 800244e:	43db      	mvns	r3, r3
 8002450:	401a      	ands	r2, r3
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	0a1b      	lsrs	r3, r3, #8
 8002456:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	fa93 f3a3 	rbit	r3, r3
 800245e:	61bb      	str	r3, [r7, #24]
  return result;
 8002460:	69bb      	ldr	r3, [r7, #24]
 8002462:	fab3 f383 	clz	r3, r3
 8002466:	b2db      	uxtb	r3, r3
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	6879      	ldr	r1, [r7, #4]
 800246c:	fa01 f303 	lsl.w	r3, r1, r3
 8002470:	431a      	orrs	r2, r3
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002476:	bf00      	nop
 8002478:	3724      	adds	r7, #36	; 0x24
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr

08002482 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002482:	b580      	push	{r7, lr}
 8002484:	b088      	sub	sp, #32
 8002486:	af00      	add	r7, sp, #0
 8002488:	6078      	str	r0, [r7, #4]
 800248a:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 800248c:	2300      	movs	r3, #0
 800248e:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8002490:	2300      	movs	r3, #0
 8002492:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	fa93 f3a3 	rbit	r3, r3
 80024a0:	613b      	str	r3, [r7, #16]
  return result;
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	fab3 f383 	clz	r3, r3
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80024ac:	e050      	b.n	8002550 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	2101      	movs	r1, #1
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	fa01 f303 	lsl.w	r3, r1, r3
 80024ba:	4013      	ands	r3, r2
 80024bc:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 80024be:	69bb      	ldr	r3, [r7, #24]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d042      	beq.n	800254a <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d003      	beq.n	80024d4 <LL_GPIO_Init+0x52>
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d10d      	bne.n	80024f0 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	461a      	mov	r2, r3
 80024da:	69b9      	ldr	r1, [r7, #24]
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f7ff ff12 	bl	8002306 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	461a      	mov	r2, r3
 80024e8:	69b9      	ldr	r1, [r7, #24]
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f7ff fef3 	bl	80022d6 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	691b      	ldr	r3, [r3, #16]
 80024f4:	461a      	mov	r2, r3
 80024f6:	69b9      	ldr	r1, [r7, #24]
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	f7ff ff33 	bl	8002364 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	2b02      	cmp	r3, #2
 8002504:	d11a      	bne.n	800253c <LL_GPIO_Init+0xba>
 8002506:	69bb      	ldr	r3, [r7, #24]
 8002508:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	fa93 f3a3 	rbit	r3, r3
 8002510:	60bb      	str	r3, [r7, #8]
  return result;
 8002512:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8002514:	fab3 f383 	clz	r3, r3
 8002518:	b2db      	uxtb	r3, r3
 800251a:	2b07      	cmp	r3, #7
 800251c:	d807      	bhi.n	800252e <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	695b      	ldr	r3, [r3, #20]
 8002522:	461a      	mov	r2, r3
 8002524:	69b9      	ldr	r1, [r7, #24]
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f7ff ff4b 	bl	80023c2 <LL_GPIO_SetAFPin_0_7>
 800252c:	e006      	b.n	800253c <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	695b      	ldr	r3, [r3, #20]
 8002532:	461a      	mov	r2, r3
 8002534:	69b9      	ldr	r1, [r7, #24]
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f7ff ff72 	bl	8002420 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	461a      	mov	r2, r3
 8002542:	69b9      	ldr	r1, [r7, #24]
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f7ff fe97 	bl	8002278 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	3301      	adds	r3, #1
 800254e:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	fa22 f303 	lsr.w	r3, r2, r3
 800255a:	2b00      	cmp	r3, #0
 800255c:	d1a7      	bne.n	80024ae <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 800255e:	2300      	movs	r3, #0
}
 8002560:	4618      	mov	r0, r3
 8002562:	3720      	adds	r7, #32
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}

08002568 <LL_RCC_GetSysClkSource>:
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800256c:	4b04      	ldr	r3, [pc, #16]	; (8002580 <LL_RCC_GetSysClkSource+0x18>)
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	f003 030c 	and.w	r3, r3, #12
}
 8002574:	4618      	mov	r0, r3
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	40023800 	.word	0x40023800

08002584 <LL_RCC_GetAHBPrescaler>:
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002588:	4b04      	ldr	r3, [pc, #16]	; (800259c <LL_RCC_GetAHBPrescaler+0x18>)
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002590:	4618      	mov	r0, r3
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	40023800 	.word	0x40023800

080025a0 <LL_RCC_GetAPB1Prescaler>:
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80025a4:	4b04      	ldr	r3, [pc, #16]	; (80025b8 <LL_RCC_GetAPB1Prescaler+0x18>)
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	40023800 	.word	0x40023800

080025bc <LL_RCC_GetAPB2Prescaler>:
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80025c0:	4b04      	ldr	r3, [pc, #16]	; (80025d4 <LL_RCC_GetAPB2Prescaler+0x18>)
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	40023800 	.word	0x40023800

080025d8 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80025dc:	4b04      	ldr	r3, [pc, #16]	; (80025f0 <LL_RCC_PLL_GetMainSource+0x18>)
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	40023800 	.word	0x40023800

080025f4 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80025f8:	4b04      	ldr	r3, [pc, #16]	; (800260c <LL_RCC_PLL_GetN+0x18>)
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	099b      	lsrs	r3, r3, #6
 80025fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8002602:	4618      	mov	r0, r3
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr
 800260c:	40023800 	.word	0x40023800

08002610 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8002610:	b480      	push	{r7}
 8002612:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8002614:	4b04      	ldr	r3, [pc, #16]	; (8002628 <LL_RCC_PLL_GetP+0x18>)
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 800261c:	4618      	mov	r0, r3
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	40023800 	.word	0x40023800

0800262c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800262c:	b480      	push	{r7}
 800262e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002630:	4b04      	ldr	r3, [pc, #16]	; (8002644 <LL_RCC_PLL_GetDivider+0x18>)
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8002638:	4618      	mov	r0, r3
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	40023800 	.word	0x40023800

08002648 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8002650:	f000 f820 	bl	8002694 <RCC_GetSystemClockFreq>
 8002654:	4602      	mov	r2, r0
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4618      	mov	r0, r3
 8002660:	f000 f840 	bl	80026e4 <RCC_GetHCLKClockFreq>
 8002664:	4602      	mov	r2, r0
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	4618      	mov	r0, r3
 8002670:	f000 f84e 	bl	8002710 <RCC_GetPCLK1ClockFreq>
 8002674:	4602      	mov	r2, r0
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	4618      	mov	r0, r3
 8002680:	f000 f85a 	bl	8002738 <RCC_GetPCLK2ClockFreq>
 8002684:	4602      	mov	r2, r0
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	60da      	str	r2, [r3, #12]
}
 800268a:	bf00      	nop
 800268c:	3708      	adds	r7, #8
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
	...

08002694 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800269a:	2300      	movs	r3, #0
 800269c:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800269e:	f7ff ff63 	bl	8002568 <LL_RCC_GetSysClkSource>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b08      	cmp	r3, #8
 80026a6:	d00c      	beq.n	80026c2 <RCC_GetSystemClockFreq+0x2e>
 80026a8:	2b08      	cmp	r3, #8
 80026aa:	d80f      	bhi.n	80026cc <RCC_GetSystemClockFreq+0x38>
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d002      	beq.n	80026b6 <RCC_GetSystemClockFreq+0x22>
 80026b0:	2b04      	cmp	r3, #4
 80026b2:	d003      	beq.n	80026bc <RCC_GetSystemClockFreq+0x28>
 80026b4:	e00a      	b.n	80026cc <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80026b6:	4b09      	ldr	r3, [pc, #36]	; (80026dc <RCC_GetSystemClockFreq+0x48>)
 80026b8:	607b      	str	r3, [r7, #4]
      break;
 80026ba:	e00a      	b.n	80026d2 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80026bc:	4b08      	ldr	r3, [pc, #32]	; (80026e0 <RCC_GetSystemClockFreq+0x4c>)
 80026be:	607b      	str	r3, [r7, #4]
      break;
 80026c0:	e007      	b.n	80026d2 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 80026c2:	2008      	movs	r0, #8
 80026c4:	f000 f84c 	bl	8002760 <RCC_PLL_GetFreqDomain_SYS>
 80026c8:	6078      	str	r0, [r7, #4]
      break;
 80026ca:	e002      	b.n	80026d2 <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 80026cc:	4b03      	ldr	r3, [pc, #12]	; (80026dc <RCC_GetSystemClockFreq+0x48>)
 80026ce:	607b      	str	r3, [r7, #4]
      break;
 80026d0:	bf00      	nop
  }

  return frequency;
 80026d2:	687b      	ldr	r3, [r7, #4]
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3708      	adds	r7, #8
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	00f42400 	.word	0x00f42400
 80026e0:	007a1200 	.word	0x007a1200

080026e4 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80026ec:	f7ff ff4a 	bl	8002584 <LL_RCC_GetAHBPrescaler>
 80026f0:	4603      	mov	r3, r0
 80026f2:	091b      	lsrs	r3, r3, #4
 80026f4:	f003 030f 	and.w	r3, r3, #15
 80026f8:	4a04      	ldr	r2, [pc, #16]	; (800270c <RCC_GetHCLKClockFreq+0x28>)
 80026fa:	5cd3      	ldrb	r3, [r2, r3]
 80026fc:	461a      	mov	r2, r3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	40d3      	lsrs	r3, r2
}
 8002702:	4618      	mov	r0, r3
 8002704:	3708      	adds	r7, #8
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	08002ec4 	.word	0x08002ec4

08002710 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8002718:	f7ff ff42 	bl	80025a0 <LL_RCC_GetAPB1Prescaler>
 800271c:	4603      	mov	r3, r0
 800271e:	0a9b      	lsrs	r3, r3, #10
 8002720:	4a04      	ldr	r2, [pc, #16]	; (8002734 <RCC_GetPCLK1ClockFreq+0x24>)
 8002722:	5cd3      	ldrb	r3, [r2, r3]
 8002724:	461a      	mov	r2, r3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	40d3      	lsrs	r3, r2
}
 800272a:	4618      	mov	r0, r3
 800272c:	3708      	adds	r7, #8
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	08002ed4 	.word	0x08002ed4

08002738 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b082      	sub	sp, #8
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8002740:	f7ff ff3c 	bl	80025bc <LL_RCC_GetAPB2Prescaler>
 8002744:	4603      	mov	r3, r0
 8002746:	0b5b      	lsrs	r3, r3, #13
 8002748:	4a04      	ldr	r2, [pc, #16]	; (800275c <RCC_GetPCLK2ClockFreq+0x24>)
 800274a:	5cd3      	ldrb	r3, [r2, r3]
 800274c:	461a      	mov	r2, r3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	40d3      	lsrs	r3, r2
}
 8002752:	4618      	mov	r0, r3
 8002754:	3708      	adds	r7, #8
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	08002ed4 	.word	0x08002ed4

08002760 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8002760:	b590      	push	{r4, r7, lr}
 8002762:	b087      	sub	sp, #28
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8002768:	2300      	movs	r3, #0
 800276a:	617b      	str	r3, [r7, #20]
 800276c:	2300      	movs	r3, #0
 800276e:	60fb      	str	r3, [r7, #12]
 8002770:	2300      	movs	r3, #0
 8002772:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8002774:	f7ff ff30 	bl	80025d8 <LL_RCC_PLL_GetMainSource>
 8002778:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d004      	beq.n	800278a <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002786:	d003      	beq.n	8002790 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8002788:	e005      	b.n	8002796 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800278a:	4b12      	ldr	r3, [pc, #72]	; (80027d4 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800278c:	617b      	str	r3, [r7, #20]
      break;
 800278e:	e005      	b.n	800279c <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8002790:	4b11      	ldr	r3, [pc, #68]	; (80027d8 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8002792:	617b      	str	r3, [r7, #20]
      break;
 8002794:	e002      	b.n	800279c <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8002796:	4b0f      	ldr	r3, [pc, #60]	; (80027d4 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8002798:	617b      	str	r3, [r7, #20]
      break;
 800279a:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2b08      	cmp	r3, #8
 80027a0:	d113      	bne.n	80027ca <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80027a2:	f7ff ff43 	bl	800262c <LL_RCC_PLL_GetDivider>
 80027a6:	4602      	mov	r2, r0
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	fbb3 f4f2 	udiv	r4, r3, r2
 80027ae:	f7ff ff21 	bl	80025f4 <LL_RCC_PLL_GetN>
 80027b2:	4603      	mov	r3, r0
 80027b4:	fb03 f404 	mul.w	r4, r3, r4
 80027b8:	f7ff ff2a 	bl	8002610 <LL_RCC_PLL_GetP>
 80027bc:	4603      	mov	r3, r0
 80027be:	0c1b      	lsrs	r3, r3, #16
 80027c0:	3301      	adds	r3, #1
 80027c2:	005b      	lsls	r3, r3, #1
 80027c4:	fbb4 f3f3 	udiv	r3, r4, r3
 80027c8:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 80027ca:	693b      	ldr	r3, [r7, #16]
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	371c      	adds	r7, #28
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd90      	pop	{r4, r7, pc}
 80027d4:	00f42400 	.word	0x00f42400
 80027d8:	007a1200 	.word	0x007a1200

080027dc <LL_USART_IsEnabled>:
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027f0:	bf0c      	ite	eq
 80027f2:	2301      	moveq	r3, #1
 80027f4:	2300      	movne	r3, #0
 80027f6:	b2db      	uxtb	r3, r3
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	370c      	adds	r7, #12
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr

08002804 <LL_USART_SetStopBitsLength>:
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	691b      	ldr	r3, [r3, #16]
 8002812:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	431a      	orrs	r2, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	611a      	str	r2, [r3, #16]
}
 800281e:	bf00      	nop
 8002820:	370c      	adds	r7, #12
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr

0800282a <LL_USART_SetHWFlowCtrl>:
{
 800282a:	b480      	push	{r7}
 800282c:	b083      	sub	sp, #12
 800282e:	af00      	add	r7, sp, #0
 8002830:	6078      	str	r0, [r7, #4]
 8002832:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	695b      	ldr	r3, [r3, #20]
 8002838:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	431a      	orrs	r2, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	615a      	str	r2, [r3, #20]
}
 8002844:	bf00      	nop
 8002846:	370c      	adds	r7, #12
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr

08002850 <LL_USART_SetBaudRate>:
{
 8002850:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002854:	b0c0      	sub	sp, #256	; 0x100
 8002856:	af00      	add	r7, sp, #0
 8002858:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800285c:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8002860:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8002864:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8002868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800286c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002870:	f040 810c 	bne.w	8002a8c <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8002874:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002878:	2200      	movs	r2, #0
 800287a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800287e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002882:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002886:	4622      	mov	r2, r4
 8002888:	462b      	mov	r3, r5
 800288a:	1891      	adds	r1, r2, r2
 800288c:	6639      	str	r1, [r7, #96]	; 0x60
 800288e:	415b      	adcs	r3, r3
 8002890:	667b      	str	r3, [r7, #100]	; 0x64
 8002892:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002896:	4621      	mov	r1, r4
 8002898:	eb12 0801 	adds.w	r8, r2, r1
 800289c:	4629      	mov	r1, r5
 800289e:	eb43 0901 	adc.w	r9, r3, r1
 80028a2:	f04f 0200 	mov.w	r2, #0
 80028a6:	f04f 0300 	mov.w	r3, #0
 80028aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80028ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80028b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80028b6:	4690      	mov	r8, r2
 80028b8:	4699      	mov	r9, r3
 80028ba:	4623      	mov	r3, r4
 80028bc:	eb18 0303 	adds.w	r3, r8, r3
 80028c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80028c4:	462b      	mov	r3, r5
 80028c6:	eb49 0303 	adc.w	r3, r9, r3
 80028ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80028ce:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80028d2:	2200      	movs	r2, #0
 80028d4:	469a      	mov	sl, r3
 80028d6:	4693      	mov	fp, r2
 80028d8:	eb1a 030a 	adds.w	r3, sl, sl
 80028dc:	65bb      	str	r3, [r7, #88]	; 0x58
 80028de:	eb4b 030b 	adc.w	r3, fp, fp
 80028e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80028e4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80028e8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80028ec:	f7fd fc6c 	bl	80001c8 <__aeabi_uldivmod>
 80028f0:	4602      	mov	r2, r0
 80028f2:	460b      	mov	r3, r1
 80028f4:	4b64      	ldr	r3, [pc, #400]	; (8002a88 <LL_USART_SetBaudRate+0x238>)
 80028f6:	fba3 2302 	umull	r2, r3, r3, r2
 80028fa:	095b      	lsrs	r3, r3, #5
 80028fc:	b29b      	uxth	r3, r3
 80028fe:	011b      	lsls	r3, r3, #4
 8002900:	b29c      	uxth	r4, r3
 8002902:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002906:	2200      	movs	r2, #0
 8002908:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800290c:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002910:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8002914:	4642      	mov	r2, r8
 8002916:	464b      	mov	r3, r9
 8002918:	1891      	adds	r1, r2, r2
 800291a:	6539      	str	r1, [r7, #80]	; 0x50
 800291c:	415b      	adcs	r3, r3
 800291e:	657b      	str	r3, [r7, #84]	; 0x54
 8002920:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002924:	4641      	mov	r1, r8
 8002926:	1851      	adds	r1, r2, r1
 8002928:	64b9      	str	r1, [r7, #72]	; 0x48
 800292a:	4649      	mov	r1, r9
 800292c:	414b      	adcs	r3, r1
 800292e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002930:	f04f 0200 	mov.w	r2, #0
 8002934:	f04f 0300 	mov.w	r3, #0
 8002938:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	; 0x48
 800293c:	4659      	mov	r1, fp
 800293e:	00cb      	lsls	r3, r1, #3
 8002940:	4651      	mov	r1, sl
 8002942:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002946:	4651      	mov	r1, sl
 8002948:	00ca      	lsls	r2, r1, #3
 800294a:	4610      	mov	r0, r2
 800294c:	4619      	mov	r1, r3
 800294e:	4603      	mov	r3, r0
 8002950:	4642      	mov	r2, r8
 8002952:	189b      	adds	r3, r3, r2
 8002954:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002958:	464b      	mov	r3, r9
 800295a:	460a      	mov	r2, r1
 800295c:	eb42 0303 	adc.w	r3, r2, r3
 8002960:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002964:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002968:	2200      	movs	r2, #0
 800296a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800296e:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8002972:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8002976:	460b      	mov	r3, r1
 8002978:	18db      	adds	r3, r3, r3
 800297a:	643b      	str	r3, [r7, #64]	; 0x40
 800297c:	4613      	mov	r3, r2
 800297e:	eb42 0303 	adc.w	r3, r2, r3
 8002982:	647b      	str	r3, [r7, #68]	; 0x44
 8002984:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002988:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800298c:	f7fd fc1c 	bl	80001c8 <__aeabi_uldivmod>
 8002990:	4602      	mov	r2, r0
 8002992:	460b      	mov	r3, r1
 8002994:	4611      	mov	r1, r2
 8002996:	4b3c      	ldr	r3, [pc, #240]	; (8002a88 <LL_USART_SetBaudRate+0x238>)
 8002998:	fba3 2301 	umull	r2, r3, r3, r1
 800299c:	095b      	lsrs	r3, r3, #5
 800299e:	2264      	movs	r2, #100	; 0x64
 80029a0:	fb02 f303 	mul.w	r3, r2, r3
 80029a4:	1acb      	subs	r3, r1, r3
 80029a6:	00db      	lsls	r3, r3, #3
 80029a8:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80029ac:	4b36      	ldr	r3, [pc, #216]	; (8002a88 <LL_USART_SetBaudRate+0x238>)
 80029ae:	fba3 2302 	umull	r2, r3, r3, r2
 80029b2:	095b      	lsrs	r3, r3, #5
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	005b      	lsls	r3, r3, #1
 80029b8:	b29b      	uxth	r3, r3
 80029ba:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80029be:	b29b      	uxth	r3, r3
 80029c0:	4423      	add	r3, r4
 80029c2:	b29c      	uxth	r4, r3
 80029c4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80029c8:	2200      	movs	r2, #0
 80029ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80029ce:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80029d2:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 80029d6:	4642      	mov	r2, r8
 80029d8:	464b      	mov	r3, r9
 80029da:	1891      	adds	r1, r2, r2
 80029dc:	63b9      	str	r1, [r7, #56]	; 0x38
 80029de:	415b      	adcs	r3, r3
 80029e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029e2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80029e6:	4641      	mov	r1, r8
 80029e8:	1851      	adds	r1, r2, r1
 80029ea:	6339      	str	r1, [r7, #48]	; 0x30
 80029ec:	4649      	mov	r1, r9
 80029ee:	414b      	adcs	r3, r1
 80029f0:	637b      	str	r3, [r7, #52]	; 0x34
 80029f2:	f04f 0200 	mov.w	r2, #0
 80029f6:	f04f 0300 	mov.w	r3, #0
 80029fa:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80029fe:	4659      	mov	r1, fp
 8002a00:	00cb      	lsls	r3, r1, #3
 8002a02:	4651      	mov	r1, sl
 8002a04:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a08:	4651      	mov	r1, sl
 8002a0a:	00ca      	lsls	r2, r1, #3
 8002a0c:	4610      	mov	r0, r2
 8002a0e:	4619      	mov	r1, r3
 8002a10:	4603      	mov	r3, r0
 8002a12:	4642      	mov	r2, r8
 8002a14:	189b      	adds	r3, r3, r2
 8002a16:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002a1a:	464b      	mov	r3, r9
 8002a1c:	460a      	mov	r2, r1
 8002a1e:	eb42 0303 	adc.w	r3, r2, r3
 8002a22:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002a26:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002a30:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8002a34:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8002a38:	460b      	mov	r3, r1
 8002a3a:	18db      	adds	r3, r3, r3
 8002a3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a3e:	4613      	mov	r3, r2
 8002a40:	eb42 0303 	adc.w	r3, r2, r3
 8002a44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a46:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002a4a:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8002a4e:	f7fd fbbb 	bl	80001c8 <__aeabi_uldivmod>
 8002a52:	4602      	mov	r2, r0
 8002a54:	460b      	mov	r3, r1
 8002a56:	4b0c      	ldr	r3, [pc, #48]	; (8002a88 <LL_USART_SetBaudRate+0x238>)
 8002a58:	fba3 1302 	umull	r1, r3, r3, r2
 8002a5c:	095b      	lsrs	r3, r3, #5
 8002a5e:	2164      	movs	r1, #100	; 0x64
 8002a60:	fb01 f303 	mul.w	r3, r1, r3
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	00db      	lsls	r3, r3, #3
 8002a68:	3332      	adds	r3, #50	; 0x32
 8002a6a:	4a07      	ldr	r2, [pc, #28]	; (8002a88 <LL_USART_SetBaudRate+0x238>)
 8002a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a70:	095b      	lsrs	r3, r3, #5
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	f003 0307 	and.w	r3, r3, #7
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	4423      	add	r3, r4
 8002a7c:	b29b      	uxth	r3, r3
 8002a7e:	461a      	mov	r2, r3
 8002a80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a84:	609a      	str	r2, [r3, #8]
}
 8002a86:	e107      	b.n	8002c98 <LL_USART_SetBaudRate+0x448>
 8002a88:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002a8c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002a90:	2200      	movs	r2, #0
 8002a92:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002a96:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002a9a:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 8002a9e:	4642      	mov	r2, r8
 8002aa0:	464b      	mov	r3, r9
 8002aa2:	1891      	adds	r1, r2, r2
 8002aa4:	6239      	str	r1, [r7, #32]
 8002aa6:	415b      	adcs	r3, r3
 8002aa8:	627b      	str	r3, [r7, #36]	; 0x24
 8002aaa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002aae:	4641      	mov	r1, r8
 8002ab0:	1854      	adds	r4, r2, r1
 8002ab2:	4649      	mov	r1, r9
 8002ab4:	eb43 0501 	adc.w	r5, r3, r1
 8002ab8:	f04f 0200 	mov.w	r2, #0
 8002abc:	f04f 0300 	mov.w	r3, #0
 8002ac0:	00eb      	lsls	r3, r5, #3
 8002ac2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ac6:	00e2      	lsls	r2, r4, #3
 8002ac8:	4614      	mov	r4, r2
 8002aca:	461d      	mov	r5, r3
 8002acc:	4643      	mov	r3, r8
 8002ace:	18e3      	adds	r3, r4, r3
 8002ad0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002ad4:	464b      	mov	r3, r9
 8002ad6:	eb45 0303 	adc.w	r3, r5, r3
 8002ada:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8002ade:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002ae8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002aec:	f04f 0200 	mov.w	r2, #0
 8002af0:	f04f 0300 	mov.w	r3, #0
 8002af4:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8002af8:	4629      	mov	r1, r5
 8002afa:	008b      	lsls	r3, r1, #2
 8002afc:	4621      	mov	r1, r4
 8002afe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b02:	4621      	mov	r1, r4
 8002b04:	008a      	lsls	r2, r1, #2
 8002b06:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8002b0a:	f7fd fb5d 	bl	80001c8 <__aeabi_uldivmod>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	460b      	mov	r3, r1
 8002b12:	4b64      	ldr	r3, [pc, #400]	; (8002ca4 <LL_USART_SetBaudRate+0x454>)
 8002b14:	fba3 2302 	umull	r2, r3, r3, r2
 8002b18:	095b      	lsrs	r3, r3, #5
 8002b1a:	b29b      	uxth	r3, r3
 8002b1c:	011b      	lsls	r3, r3, #4
 8002b1e:	b29c      	uxth	r4, r3
 8002b20:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002b24:	2200      	movs	r2, #0
 8002b26:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002b2a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002b2e:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 8002b32:	4642      	mov	r2, r8
 8002b34:	464b      	mov	r3, r9
 8002b36:	1891      	adds	r1, r2, r2
 8002b38:	61b9      	str	r1, [r7, #24]
 8002b3a:	415b      	adcs	r3, r3
 8002b3c:	61fb      	str	r3, [r7, #28]
 8002b3e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b42:	4641      	mov	r1, r8
 8002b44:	1851      	adds	r1, r2, r1
 8002b46:	6139      	str	r1, [r7, #16]
 8002b48:	4649      	mov	r1, r9
 8002b4a:	414b      	adcs	r3, r1
 8002b4c:	617b      	str	r3, [r7, #20]
 8002b4e:	f04f 0200 	mov.w	r2, #0
 8002b52:	f04f 0300 	mov.w	r3, #0
 8002b56:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b5a:	4659      	mov	r1, fp
 8002b5c:	00cb      	lsls	r3, r1, #3
 8002b5e:	4651      	mov	r1, sl
 8002b60:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b64:	4651      	mov	r1, sl
 8002b66:	00ca      	lsls	r2, r1, #3
 8002b68:	4610      	mov	r0, r2
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	4642      	mov	r2, r8
 8002b70:	189b      	adds	r3, r3, r2
 8002b72:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002b76:	464b      	mov	r3, r9
 8002b78:	460a      	mov	r2, r1
 8002b7a:	eb42 0303 	adc.w	r3, r2, r3
 8002b7e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002b82:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002b86:	2200      	movs	r2, #0
 8002b88:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002b8c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002b90:	f04f 0200 	mov.w	r2, #0
 8002b94:	f04f 0300 	mov.w	r3, #0
 8002b98:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 8002b9c:	4649      	mov	r1, r9
 8002b9e:	008b      	lsls	r3, r1, #2
 8002ba0:	4641      	mov	r1, r8
 8002ba2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ba6:	4641      	mov	r1, r8
 8002ba8:	008a      	lsls	r2, r1, #2
 8002baa:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8002bae:	f7fd fb0b 	bl	80001c8 <__aeabi_uldivmod>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	460b      	mov	r3, r1
 8002bb6:	4b3b      	ldr	r3, [pc, #236]	; (8002ca4 <LL_USART_SetBaudRate+0x454>)
 8002bb8:	fba3 1302 	umull	r1, r3, r3, r2
 8002bbc:	095b      	lsrs	r3, r3, #5
 8002bbe:	2164      	movs	r1, #100	; 0x64
 8002bc0:	fb01 f303 	mul.w	r3, r1, r3
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	011b      	lsls	r3, r3, #4
 8002bc8:	3332      	adds	r3, #50	; 0x32
 8002bca:	4a36      	ldr	r2, [pc, #216]	; (8002ca4 <LL_USART_SetBaudRate+0x454>)
 8002bcc:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd0:	095b      	lsrs	r3, r3, #5
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	4423      	add	r3, r4
 8002bdc:	b29c      	uxth	r4, r3
 8002bde:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002be2:	2200      	movs	r2, #0
 8002be4:	67bb      	str	r3, [r7, #120]	; 0x78
 8002be6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002be8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002bec:	4642      	mov	r2, r8
 8002bee:	464b      	mov	r3, r9
 8002bf0:	1891      	adds	r1, r2, r2
 8002bf2:	60b9      	str	r1, [r7, #8]
 8002bf4:	415b      	adcs	r3, r3
 8002bf6:	60fb      	str	r3, [r7, #12]
 8002bf8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002bfc:	4641      	mov	r1, r8
 8002bfe:	1851      	adds	r1, r2, r1
 8002c00:	6039      	str	r1, [r7, #0]
 8002c02:	4649      	mov	r1, r9
 8002c04:	414b      	adcs	r3, r1
 8002c06:	607b      	str	r3, [r7, #4]
 8002c08:	f04f 0200 	mov.w	r2, #0
 8002c0c:	f04f 0300 	mov.w	r3, #0
 8002c10:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002c14:	4659      	mov	r1, fp
 8002c16:	00cb      	lsls	r3, r1, #3
 8002c18:	4651      	mov	r1, sl
 8002c1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c1e:	4651      	mov	r1, sl
 8002c20:	00ca      	lsls	r2, r1, #3
 8002c22:	4610      	mov	r0, r2
 8002c24:	4619      	mov	r1, r3
 8002c26:	4603      	mov	r3, r0
 8002c28:	4642      	mov	r2, r8
 8002c2a:	189b      	adds	r3, r3, r2
 8002c2c:	673b      	str	r3, [r7, #112]	; 0x70
 8002c2e:	464b      	mov	r3, r9
 8002c30:	460a      	mov	r2, r1
 8002c32:	eb42 0303 	adc.w	r3, r2, r3
 8002c36:	677b      	str	r3, [r7, #116]	; 0x74
 8002c38:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002c40:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002c42:	f04f 0200 	mov.w	r2, #0
 8002c46:	f04f 0300 	mov.w	r3, #0
 8002c4a:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 8002c4e:	4649      	mov	r1, r9
 8002c50:	008b      	lsls	r3, r1, #2
 8002c52:	4641      	mov	r1, r8
 8002c54:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c58:	4641      	mov	r1, r8
 8002c5a:	008a      	lsls	r2, r1, #2
 8002c5c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8002c60:	f7fd fab2 	bl	80001c8 <__aeabi_uldivmod>
 8002c64:	4602      	mov	r2, r0
 8002c66:	460b      	mov	r3, r1
 8002c68:	4b0e      	ldr	r3, [pc, #56]	; (8002ca4 <LL_USART_SetBaudRate+0x454>)
 8002c6a:	fba3 1302 	umull	r1, r3, r3, r2
 8002c6e:	095b      	lsrs	r3, r3, #5
 8002c70:	2164      	movs	r1, #100	; 0x64
 8002c72:	fb01 f303 	mul.w	r3, r1, r3
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	011b      	lsls	r3, r3, #4
 8002c7a:	3332      	adds	r3, #50	; 0x32
 8002c7c:	4a09      	ldr	r2, [pc, #36]	; (8002ca4 <LL_USART_SetBaudRate+0x454>)
 8002c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c82:	095b      	lsrs	r3, r3, #5
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	f003 030f 	and.w	r3, r3, #15
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	4423      	add	r3, r4
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	461a      	mov	r2, r3
 8002c92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c96:	609a      	str	r2, [r3, #8]
}
 8002c98:	bf00      	nop
 8002c9a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ca4:	51eb851f 	.word	0x51eb851f

08002ca8 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b088      	sub	sp, #32
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f7ff fd8e 	bl	80027dc <LL_USART_IsEnabled>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d15e      	bne.n	8002d84 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002cce:	f023 030c 	bic.w	r3, r3, #12
 8002cd2:	683a      	ldr	r2, [r7, #0]
 8002cd4:	6851      	ldr	r1, [r2, #4]
 8002cd6:	683a      	ldr	r2, [r7, #0]
 8002cd8:	68d2      	ldr	r2, [r2, #12]
 8002cda:	4311      	orrs	r1, r2
 8002cdc:	683a      	ldr	r2, [r7, #0]
 8002cde:	6912      	ldr	r2, [r2, #16]
 8002ce0:	4311      	orrs	r1, r2
 8002ce2:	683a      	ldr	r2, [r7, #0]
 8002ce4:	6992      	ldr	r2, [r2, #24]
 8002ce6:	430a      	orrs	r2, r1
 8002ce8:	431a      	orrs	r2, r3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f7ff fd85 	bl	8002804 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	695b      	ldr	r3, [r3, #20]
 8002cfe:	4619      	mov	r1, r3
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f7ff fd92 	bl	800282a <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8002d06:	f107 0308 	add.w	r3, r7, #8
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f7ff fc9c 	bl	8002648 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	4a1f      	ldr	r2, [pc, #124]	; (8002d90 <LL_USART_Init+0xe8>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d102      	bne.n	8002d1e <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	61bb      	str	r3, [r7, #24]
 8002d1c:	e021      	b.n	8002d62 <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a1c      	ldr	r2, [pc, #112]	; (8002d94 <LL_USART_Init+0xec>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d102      	bne.n	8002d2c <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	61bb      	str	r3, [r7, #24]
 8002d2a:	e01a      	b.n	8002d62 <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	4a1a      	ldr	r2, [pc, #104]	; (8002d98 <LL_USART_Init+0xf0>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d102      	bne.n	8002d3a <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	61bb      	str	r3, [r7, #24]
 8002d38:	e013      	b.n	8002d62 <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4a17      	ldr	r2, [pc, #92]	; (8002d9c <LL_USART_Init+0xf4>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d102      	bne.n	8002d48 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	61bb      	str	r3, [r7, #24]
 8002d46:	e00c      	b.n	8002d62 <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	4a15      	ldr	r2, [pc, #84]	; (8002da0 <LL_USART_Init+0xf8>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d102      	bne.n	8002d56 <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	61bb      	str	r3, [r7, #24]
 8002d54:	e005      	b.n	8002d62 <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a12      	ldr	r2, [pc, #72]	; (8002da4 <LL_USART_Init+0xfc>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d101      	bne.n	8002d62 <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002d62:	69bb      	ldr	r3, [r7, #24]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d00d      	beq.n	8002d84 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d009      	beq.n	8002d84 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 8002d70:	2300      	movs	r3, #0
 8002d72:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	699a      	ldr	r2, [r3, #24]
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	69b9      	ldr	r1, [r7, #24]
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f7ff fd66 	bl	8002850 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002d84:	7ffb      	ldrb	r3, [r7, #31]
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3720      	adds	r7, #32
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	40011000 	.word	0x40011000
 8002d94:	40004400 	.word	0x40004400
 8002d98:	40004800 	.word	0x40004800
 8002d9c:	40011400 	.word	0x40011400
 8002da0:	40004c00 	.word	0x40004c00
 8002da4:	40005000 	.word	0x40005000

08002da8 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dba:	4a07      	ldr	r2, [pc, #28]	; (8002dd8 <LL_InitTick+0x30>)
 8002dbc:	3b01      	subs	r3, #1
 8002dbe:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8002dc0:	4b05      	ldr	r3, [pc, #20]	; (8002dd8 <LL_InitTick+0x30>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002dc6:	4b04      	ldr	r3, [pc, #16]	; (8002dd8 <LL_InitTick+0x30>)
 8002dc8:	2205      	movs	r2, #5
 8002dca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8002dcc:	bf00      	nop
 8002dce:	370c      	adds	r7, #12
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr
 8002dd8:	e000e010 	.word	0xe000e010

08002ddc <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b082      	sub	sp, #8
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8002de4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f7ff ffdd 	bl	8002da8 <LL_InitTick>
}
 8002dee:	bf00      	nop
 8002df0:	3708      	adds	r7, #8
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
	...

08002df8 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b085      	sub	sp, #20
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8002e00:	4b0f      	ldr	r3, [pc, #60]	; (8002e40 <LL_mDelay+0x48>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8002e06:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if(Delay < LL_MAX_DELAY)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e0e:	d00c      	beq.n	8002e2a <LL_mDelay+0x32>
  {
    Delay++;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	3301      	adds	r3, #1
 8002e14:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8002e16:	e008      	b.n	8002e2a <LL_mDelay+0x32>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8002e18:	4b09      	ldr	r3, [pc, #36]	; (8002e40 <LL_mDelay+0x48>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d002      	beq.n	8002e2a <LL_mDelay+0x32>
    {
      Delay--;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	3b01      	subs	r3, #1
 8002e28:	607b      	str	r3, [r7, #4]
  while (Delay)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d1f3      	bne.n	8002e18 <LL_mDelay+0x20>
    }
  }
}
 8002e30:	bf00      	nop
 8002e32:	bf00      	nop
 8002e34:	3714      	adds	r7, #20
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr
 8002e3e:	bf00      	nop
 8002e40:	e000e010 	.word	0xe000e010

08002e44 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002e4c:	4a04      	ldr	r2, [pc, #16]	; (8002e60 <LL_SetSystemCoreClock+0x1c>)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6013      	str	r3, [r2, #0]
}
 8002e52:	bf00      	nop
 8002e54:	370c      	adds	r7, #12
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr
 8002e5e:	bf00      	nop
 8002e60:	20000000 	.word	0x20000000

08002e64 <__libc_init_array>:
 8002e64:	b570      	push	{r4, r5, r6, lr}
 8002e66:	4d0d      	ldr	r5, [pc, #52]	; (8002e9c <__libc_init_array+0x38>)
 8002e68:	4c0d      	ldr	r4, [pc, #52]	; (8002ea0 <__libc_init_array+0x3c>)
 8002e6a:	1b64      	subs	r4, r4, r5
 8002e6c:	10a4      	asrs	r4, r4, #2
 8002e6e:	2600      	movs	r6, #0
 8002e70:	42a6      	cmp	r6, r4
 8002e72:	d109      	bne.n	8002e88 <__libc_init_array+0x24>
 8002e74:	4d0b      	ldr	r5, [pc, #44]	; (8002ea4 <__libc_init_array+0x40>)
 8002e76:	4c0c      	ldr	r4, [pc, #48]	; (8002ea8 <__libc_init_array+0x44>)
 8002e78:	f000 f818 	bl	8002eac <_init>
 8002e7c:	1b64      	subs	r4, r4, r5
 8002e7e:	10a4      	asrs	r4, r4, #2
 8002e80:	2600      	movs	r6, #0
 8002e82:	42a6      	cmp	r6, r4
 8002e84:	d105      	bne.n	8002e92 <__libc_init_array+0x2e>
 8002e86:	bd70      	pop	{r4, r5, r6, pc}
 8002e88:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e8c:	4798      	blx	r3
 8002e8e:	3601      	adds	r6, #1
 8002e90:	e7ee      	b.n	8002e70 <__libc_init_array+0xc>
 8002e92:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e96:	4798      	blx	r3
 8002e98:	3601      	adds	r6, #1
 8002e9a:	e7f2      	b.n	8002e82 <__libc_init_array+0x1e>
 8002e9c:	08002ef4 	.word	0x08002ef4
 8002ea0:	08002ef4 	.word	0x08002ef4
 8002ea4:	08002ef4 	.word	0x08002ef4
 8002ea8:	08002efc 	.word	0x08002efc

08002eac <_init>:
 8002eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eae:	bf00      	nop
 8002eb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002eb2:	bc08      	pop	{r3}
 8002eb4:	469e      	mov	lr, r3
 8002eb6:	4770      	bx	lr

08002eb8 <_fini>:
 8002eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eba:	bf00      	nop
 8002ebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ebe:	bc08      	pop	{r3}
 8002ec0:	469e      	mov	lr, r3
 8002ec2:	4770      	bx	lr
