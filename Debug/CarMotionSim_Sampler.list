
CarMotionSim_Sampler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004400  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  08004590  08004590  00014590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046d0  080046d0  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  080046d0  080046d0  000146d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080046d8  080046d8  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080046d8  080046d8  000146d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  080046e0  080046e0  000146e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080046e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          000000a0  20000068  20000068  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000108  20000108  00020068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003ebd4  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000045b6  00000000  00000000  0005ec6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ce8  00000000  00000000  00063228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000bf0  00000000  00000000  00063f10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008f5b  00000000  00000000  00064b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00019f80  00000000  00000000  0006da5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000879db  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004eb4  00000000  00000000  00087a30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004578 	.word	0x08004578

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08004578 	.word	0x08004578

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000578:	b480      	push	{r7}
 800057a:	b085      	sub	sp, #20
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000580:	4b08      	ldr	r3, [pc, #32]	; (80005a4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000582:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000584:	4907      	ldr	r1, [pc, #28]	; (80005a4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	4313      	orrs	r3, r2
 800058a:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800058c:	4b05      	ldr	r3, [pc, #20]	; (80005a4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800058e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	4013      	ands	r3, r2
 8000594:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000596:	68fb      	ldr	r3, [r7, #12]
}
 8000598:	bf00      	nop
 800059a:	3714      	adds	r7, #20
 800059c:	46bd      	mov	sp, r7
 800059e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a2:	4770      	bx	lr
 80005a4:	40023800 	.word	0x40023800

080005a8 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80005a8:	b480      	push	{r7}
 80005aa:	b083      	sub	sp, #12
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
 80005b0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80005b2:	683b      	ldr	r3, [r7, #0]
 80005b4:	041a      	lsls	r2, r3, #16
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	619a      	str	r2, [r3, #24]
}
 80005ba:	bf00      	nop
 80005bc:	370c      	adds	r7, #12
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
	...

080005c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b086      	sub	sp, #24
 80005cc:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ce:	463b      	mov	r3, r7
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	605a      	str	r2, [r3, #4]
 80005d6:	609a      	str	r2, [r3, #8]
 80005d8:	60da      	str	r2, [r3, #12]
 80005da:	611a      	str	r2, [r3, #16]
 80005dc:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 80005de:	2080      	movs	r0, #128	; 0x80
 80005e0:	f7ff ffca 	bl	8000578 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80005e4:	2004      	movs	r0, #4
 80005e6:	f7ff ffc7 	bl	8000578 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LCD_RS_Pin|LCD_ENABLE_Pin|LCD_D4_Pin|LCD_D5_Pin
 80005ea:	213f      	movs	r1, #63	; 0x3f
 80005ec:	480a      	ldr	r0, [pc, #40]	; (8000618 <MX_GPIO_Init+0x50>)
 80005ee:	f7ff ffdb 	bl	80005a8 <LL_GPIO_ResetOutputPin>
                          |LCD_D6_Pin|LCD_D7_Pin);

  /**/
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_ENABLE_Pin|LCD_D4_Pin|LCD_D5_Pin
 80005f2:	233f      	movs	r3, #63	; 0x3f
 80005f4:	603b      	str	r3, [r7, #0]
                          |LCD_D6_Pin|LCD_D7_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80005f6:	2301      	movs	r3, #1
 80005f8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80005fa:	2302      	movs	r3, #2
 80005fc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80005fe:	2300      	movs	r3, #0
 8000600:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000602:	2300      	movs	r3, #0
 8000604:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000606:	463b      	mov	r3, r7
 8000608:	4619      	mov	r1, r3
 800060a:	4803      	ldr	r0, [pc, #12]	; (8000618 <MX_GPIO_Init+0x50>)
 800060c:	f002 fd2d 	bl	800306a <LL_GPIO_Init>

}
 8000610:	bf00      	nop
 8000612:	3718      	adds	r7, #24
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	40020800 	.word	0x40020800

0800061c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800061c:	b480      	push	{r7}
 800061e:	b085      	sub	sp, #20
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	f003 0307 	and.w	r3, r3, #7
 800062a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800062c:	4b0c      	ldr	r3, [pc, #48]	; (8000660 <__NVIC_SetPriorityGrouping+0x44>)
 800062e:	68db      	ldr	r3, [r3, #12]
 8000630:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000632:	68ba      	ldr	r2, [r7, #8]
 8000634:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000638:	4013      	ands	r3, r2
 800063a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000640:	68bb      	ldr	r3, [r7, #8]
 8000642:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000644:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000648:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800064c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800064e:	4a04      	ldr	r2, [pc, #16]	; (8000660 <__NVIC_SetPriorityGrouping+0x44>)
 8000650:	68bb      	ldr	r3, [r7, #8]
 8000652:	60d3      	str	r3, [r2, #12]
}
 8000654:	bf00      	nop
 8000656:	3714      	adds	r7, #20
 8000658:	46bd      	mov	sp, r7
 800065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065e:	4770      	bx	lr
 8000660:	e000ed00 	.word	0xe000ed00

08000664 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8000664:	b480      	push	{r7}
 8000666:	b083      	sub	sp, #12
 8000668:	af00      	add	r7, sp, #0
 800066a:	4603      	mov	r3, r0
 800066c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800066e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000672:	2b00      	cmp	r3, #0
 8000674:	db0c      	blt.n	8000690 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000676:	79fb      	ldrb	r3, [r7, #7]
 8000678:	f003 021f 	and.w	r2, r3, #31
 800067c:	4907      	ldr	r1, [pc, #28]	; (800069c <__NVIC_ClearPendingIRQ+0x38>)
 800067e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000682:	095b      	lsrs	r3, r3, #5
 8000684:	2001      	movs	r0, #1
 8000686:	fa00 f202 	lsl.w	r2, r0, r2
 800068a:	3360      	adds	r3, #96	; 0x60
 800068c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000690:	bf00      	nop
 8000692:	370c      	adds	r7, #12
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr
 800069c:	e000e100 	.word	0xe000e100

080006a0 <LL_RCC_HSE_EnableBypass>:
  * @brief  Enable HSE external oscillator (HSE Bypass)
  * @rmtoll CR           HSEBYP        LL_RCC_HSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableBypass(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 80006a4:	4b05      	ldr	r3, [pc, #20]	; (80006bc <LL_RCC_HSE_EnableBypass+0x1c>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a04      	ldr	r2, [pc, #16]	; (80006bc <LL_RCC_HSE_EnableBypass+0x1c>)
 80006aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80006ae:	6013      	str	r3, [r2, #0]
}
 80006b0:	bf00      	nop
 80006b2:	46bd      	mov	sp, r7
 80006b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop
 80006bc:	40023800 	.word	0x40023800

080006c0 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80006c4:	4b05      	ldr	r3, [pc, #20]	; (80006dc <LL_RCC_HSE_Enable+0x1c>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a04      	ldr	r2, [pc, #16]	; (80006dc <LL_RCC_HSE_Enable+0x1c>)
 80006ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80006ce:	6013      	str	r3, [r2, #0]
}
 80006d0:	bf00      	nop
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	40023800 	.word	0x40023800

080006e0 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 80006e4:	4b07      	ldr	r3, [pc, #28]	; (8000704 <LL_RCC_HSE_IsReady+0x24>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80006f0:	bf0c      	ite	eq
 80006f2:	2301      	moveq	r3, #1
 80006f4:	2300      	movne	r3, #0
 80006f6:	b2db      	uxtb	r3, r3
}
 80006f8:	4618      	mov	r0, r3
 80006fa:	46bd      	mov	sp, r7
 80006fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop
 8000704:	40023800 	.word	0x40023800

08000708 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000708:	b480      	push	{r7}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000710:	4b06      	ldr	r3, [pc, #24]	; (800072c <LL_RCC_SetSysClkSource+0x24>)
 8000712:	689b      	ldr	r3, [r3, #8]
 8000714:	f023 0203 	bic.w	r2, r3, #3
 8000718:	4904      	ldr	r1, [pc, #16]	; (800072c <LL_RCC_SetSysClkSource+0x24>)
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	4313      	orrs	r3, r2
 800071e:	608b      	str	r3, [r1, #8]
}
 8000720:	bf00      	nop
 8000722:	370c      	adds	r7, #12
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr
 800072c:	40023800 	.word	0x40023800

08000730 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000734:	4b04      	ldr	r3, [pc, #16]	; (8000748 <LL_RCC_GetSysClkSource+0x18>)
 8000736:	689b      	ldr	r3, [r3, #8]
 8000738:	f003 030c 	and.w	r3, r3, #12
}
 800073c:	4618      	mov	r0, r3
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	40023800 	.word	0x40023800

0800074c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800074c:	b480      	push	{r7}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000754:	4b06      	ldr	r3, [pc, #24]	; (8000770 <LL_RCC_SetAHBPrescaler+0x24>)
 8000756:	689b      	ldr	r3, [r3, #8]
 8000758:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800075c:	4904      	ldr	r1, [pc, #16]	; (8000770 <LL_RCC_SetAHBPrescaler+0x24>)
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	4313      	orrs	r3, r2
 8000762:	608b      	str	r3, [r1, #8]
}
 8000764:	bf00      	nop
 8000766:	370c      	adds	r7, #12
 8000768:	46bd      	mov	sp, r7
 800076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076e:	4770      	bx	lr
 8000770:	40023800 	.word	0x40023800

08000774 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000774:	b480      	push	{r7}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800077c:	4b06      	ldr	r3, [pc, #24]	; (8000798 <LL_RCC_SetAPB1Prescaler+0x24>)
 800077e:	689b      	ldr	r3, [r3, #8]
 8000780:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000784:	4904      	ldr	r1, [pc, #16]	; (8000798 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	4313      	orrs	r3, r2
 800078a:	608b      	str	r3, [r1, #8]
}
 800078c:	bf00      	nop
 800078e:	370c      	adds	r7, #12
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr
 8000798:	40023800 	.word	0x40023800

0800079c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800079c:	b480      	push	{r7}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80007a4:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <LL_RCC_SetAPB2Prescaler+0x24>)
 80007a6:	689b      	ldr	r3, [r3, #8]
 80007a8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80007ac:	4904      	ldr	r1, [pc, #16]	; (80007c0 <LL_RCC_SetAPB2Prescaler+0x24>)
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	4313      	orrs	r3, r2
 80007b2:	608b      	str	r3, [r1, #8]
}
 80007b4:	bf00      	nop
 80007b6:	370c      	adds	r7, #12
 80007b8:	46bd      	mov	sp, r7
 80007ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007be:	4770      	bx	lr
 80007c0:	40023800 	.word	0x40023800

080007c4 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80007c8:	4b05      	ldr	r3, [pc, #20]	; (80007e0 <LL_RCC_PLL_Enable+0x1c>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4a04      	ldr	r2, [pc, #16]	; (80007e0 <LL_RCC_PLL_Enable+0x1c>)
 80007ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80007d2:	6013      	str	r3, [r2, #0]
}
 80007d4:	bf00      	nop
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	40023800 	.word	0x40023800

080007e4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80007e8:	4b07      	ldr	r3, [pc, #28]	; (8000808 <LL_RCC_PLL_IsReady+0x24>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80007f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80007f4:	bf0c      	ite	eq
 80007f6:	2301      	moveq	r3, #1
 80007f8:	2300      	movne	r3, #0
 80007fa:	b2db      	uxtb	r3, r3
}
 80007fc:	4618      	mov	r0, r3
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	40023800 	.word	0x40023800

0800080c <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 800080c:	b480      	push	{r7}
 800080e:	b085      	sub	sp, #20
 8000810:	af00      	add	r7, sp, #0
 8000812:	60f8      	str	r0, [r7, #12]
 8000814:	60b9      	str	r1, [r7, #8]
 8000816:	607a      	str	r2, [r7, #4]
 8000818:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 800081a:	4b0d      	ldr	r3, [pc, #52]	; (8000850 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800081c:	685a      	ldr	r2, [r3, #4]
 800081e:	4b0d      	ldr	r3, [pc, #52]	; (8000854 <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 8000820:	4013      	ands	r3, r2
 8000822:	68f9      	ldr	r1, [r7, #12]
 8000824:	68ba      	ldr	r2, [r7, #8]
 8000826:	4311      	orrs	r1, r2
 8000828:	687a      	ldr	r2, [r7, #4]
 800082a:	0192      	lsls	r2, r2, #6
 800082c:	430a      	orrs	r2, r1
 800082e:	4908      	ldr	r1, [pc, #32]	; (8000850 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000830:	4313      	orrs	r3, r2
 8000832:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8000834:	4b06      	ldr	r3, [pc, #24]	; (8000850 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000836:	685b      	ldr	r3, [r3, #4]
 8000838:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800083c:	4904      	ldr	r1, [pc, #16]	; (8000850 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	4313      	orrs	r3, r2
 8000842:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 8000844:	bf00      	nop
 8000846:	3714      	adds	r7, #20
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr
 8000850:	40023800 	.word	0x40023800
 8000854:	ffbf8000 	.word	0xffbf8000

08000858 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000858:	b480      	push	{r7}
 800085a:	b085      	sub	sp, #20
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000860:	4b08      	ldr	r3, [pc, #32]	; (8000884 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000862:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000864:	4907      	ldr	r1, [pc, #28]	; (8000884 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	4313      	orrs	r3, r2
 800086a:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800086c:	4b05      	ldr	r3, [pc, #20]	; (8000884 <LL_APB1_GRP1_EnableClock+0x2c>)
 800086e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	4013      	ands	r3, r2
 8000874:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000876:	68fb      	ldr	r3, [r7, #12]
}
 8000878:	bf00      	nop
 800087a:	3714      	adds	r7, #20
 800087c:	46bd      	mov	sp, r7
 800087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000882:	4770      	bx	lr
 8000884:	40023800 	.word	0x40023800

08000888 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000888:	b480      	push	{r7}
 800088a:	b085      	sub	sp, #20
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000890:	4b08      	ldr	r3, [pc, #32]	; (80008b4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000892:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000894:	4907      	ldr	r1, [pc, #28]	; (80008b4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	4313      	orrs	r3, r2
 800089a:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800089c:	4b05      	ldr	r3, [pc, #20]	; (80008b4 <LL_APB2_GRP1_EnableClock+0x2c>)
 800089e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	4013      	ands	r3, r2
 80008a4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008a6:	68fb      	ldr	r3, [r7, #12]
}
 80008a8:	bf00      	nop
 80008aa:	3714      	adds	r7, #20
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr
 80008b4:	40023800 	.word	0x40023800

080008b8 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80008c0:	4b06      	ldr	r3, [pc, #24]	; (80008dc <LL_FLASH_SetLatency+0x24>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	f023 0207 	bic.w	r2, r3, #7
 80008c8:	4904      	ldr	r1, [pc, #16]	; (80008dc <LL_FLASH_SetLatency+0x24>)
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	4313      	orrs	r3, r2
 80008ce:	600b      	str	r3, [r1, #0]
}
 80008d0:	bf00      	nop
 80008d2:	370c      	adds	r7, #12
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr
 80008dc:	40023c00 	.word	0x40023c00

080008e0 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80008e4:	4b04      	ldr	r3, [pc, #16]	; (80008f8 <LL_FLASH_GetLatency+0x18>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	f003 0307 	and.w	r3, r3, #7
}
 80008ec:	4618      	mov	r0, r3
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	40023c00 	.word	0x40023c00

080008fc <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8000904:	4b06      	ldr	r3, [pc, #24]	; (8000920 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800090c:	4904      	ldr	r1, [pc, #16]	; (8000920 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	4313      	orrs	r3, r2
 8000912:	600b      	str	r3, [r1, #0]
}
 8000914:	bf00      	nop
 8000916:	370c      	adds	r7, #12
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr
 8000920:	40007000 	.word	0x40007000

08000924 <LL_DMA_IsActiveFlag_HT0>:
  * @rmtoll LISR  HTIF0    LL_DMA_IsActiveFlag_HT0
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT0(DMA_TypeDef *DMAx)
{
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->LISR ,DMA_LISR_HTIF0)==(DMA_LISR_HTIF0));
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	f003 0310 	and.w	r3, r3, #16
 8000934:	2b10      	cmp	r3, #16
 8000936:	bf0c      	ite	eq
 8000938:	2301      	moveq	r3, #1
 800093a:	2300      	movne	r3, #0
 800093c:	b2db      	uxtb	r3, r3
}
 800093e:	4618      	mov	r0, r3
 8000940:	370c      	adds	r7, #12
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr

0800094a <LL_DMA_IsActiveFlag_TC0>:
  * @rmtoll LISR  TCIF0    LL_DMA_IsActiveFlag_TC0
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC0(DMA_TypeDef *DMAx)
{
 800094a:	b480      	push	{r7}
 800094c:	b083      	sub	sp, #12
 800094e:	af00      	add	r7, sp, #0
 8000950:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->LISR ,DMA_LISR_TCIF0)==(DMA_LISR_TCIF0));
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	f003 0320 	and.w	r3, r3, #32
 800095a:	2b20      	cmp	r3, #32
 800095c:	bf0c      	ite	eq
 800095e:	2301      	moveq	r3, #1
 8000960:	2300      	movne	r3, #0
 8000962:	b2db      	uxtb	r3, r3
}
 8000964:	4618      	mov	r0, r3
 8000966:	370c      	adds	r7, #12
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr

08000970 <LL_DMA_IsActiveFlag_TE0>:
  * @rmtoll LISR  TEIF0    LL_DMA_IsActiveFlag_TE0
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TE0(DMA_TypeDef *DMAx)
{
 8000970:	b480      	push	{r7}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->LISR ,DMA_LISR_TEIF0)==(DMA_LISR_TEIF0));
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	f003 0308 	and.w	r3, r3, #8
 8000980:	2b08      	cmp	r3, #8
 8000982:	bf0c      	ite	eq
 8000984:	2301      	moveq	r3, #1
 8000986:	2300      	movne	r3, #0
 8000988:	b2db      	uxtb	r3, r3
}
 800098a:	4618      	mov	r0, r3
 800098c:	370c      	adds	r7, #12
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr

08000996 <LL_DMA_IsActiveFlag_DME0>:
  * @rmtoll LISR  DMEIF0    LL_DMA_IsActiveFlag_DME0
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_DME0(DMA_TypeDef *DMAx)
{
 8000996:	b480      	push	{r7}
 8000998:	b083      	sub	sp, #12
 800099a:	af00      	add	r7, sp, #0
 800099c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->LISR ,DMA_LISR_DMEIF0)==(DMA_LISR_DMEIF0));
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	f003 0304 	and.w	r3, r3, #4
 80009a6:	2b04      	cmp	r3, #4
 80009a8:	bf0c      	ite	eq
 80009aa:	2301      	moveq	r3, #1
 80009ac:	2300      	movne	r3, #0
 80009ae:	b2db      	uxtb	r3, r3
}
 80009b0:	4618      	mov	r0, r3
 80009b2:	370c      	adds	r7, #12
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr

080009bc <LL_DMA_IsActiveFlag_FE0>:
  * @rmtoll LISR  FEIF0    LL_DMA_IsActiveFlag_FE0
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_FE0(DMA_TypeDef *DMAx)
{
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->LISR ,DMA_LISR_FEIF0)==(DMA_LISR_FEIF0));
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	f003 0301 	and.w	r3, r3, #1
 80009cc:	2b01      	cmp	r3, #1
 80009ce:	bf0c      	ite	eq
 80009d0:	2301      	moveq	r3, #1
 80009d2:	2300      	movne	r3, #0
 80009d4:	b2db      	uxtb	r3, r3
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	370c      	adds	r7, #12
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr

080009e2 <LL_DMA_ClearFlag_HT0>:
  * @rmtoll LIFCR  CHTIF0    LL_DMA_ClearFlag_HT0
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_HT0(DMA_TypeDef *DMAx)
{
 80009e2:	b480      	push	{r7}
 80009e4:	b083      	sub	sp, #12
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CHTIF0);
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	2210      	movs	r2, #16
 80009ee:	609a      	str	r2, [r3, #8]
}
 80009f0:	bf00      	nop
 80009f2:	370c      	adds	r7, #12
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr

080009fc <LL_DMA_ClearFlag_TC0>:
  * @rmtoll LIFCR  CTCIF0    LL_DMA_ClearFlag_TC0
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC0(DMA_TypeDef *DMAx)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CTCIF0);
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	2220      	movs	r2, #32
 8000a08:	609a      	str	r2, [r3, #8]
}
 8000a0a:	bf00      	nop
 8000a0c:	370c      	adds	r7, #12
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr

08000a16 <LL_DMA_ClearFlag_TE0>:
  * @rmtoll LIFCR  CTEIF0    LL_DMA_ClearFlag_TE0
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TE0(DMA_TypeDef *DMAx)
{
 8000a16:	b480      	push	{r7}
 8000a18:	b083      	sub	sp, #12
 8000a1a:	af00      	add	r7, sp, #0
 8000a1c:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CTEIF0);
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	2208      	movs	r2, #8
 8000a22:	609a      	str	r2, [r3, #8]
}
 8000a24:	bf00      	nop
 8000a26:	370c      	adds	r7, #12
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr

08000a30 <LL_DMA_ClearFlag_DME0>:
  * @rmtoll LIFCR  CDMEIF0    LL_DMA_ClearFlag_DME0
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_DME0(DMA_TypeDef *DMAx)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CDMEIF0);
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	2204      	movs	r2, #4
 8000a3c:	609a      	str	r2, [r3, #8]
}
 8000a3e:	bf00      	nop
 8000a40:	370c      	adds	r7, #12
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr

08000a4a <LL_DMA_ClearFlag_FE0>:
  * @rmtoll LIFCR  CFEIF0    LL_DMA_ClearFlag_FE0
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_FE0(DMA_TypeDef *DMAx)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	b083      	sub	sp, #12
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CFEIF0);
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	2201      	movs	r2, #1
 8000a56:	609a      	str	r2, [r3, #8]
}
 8000a58:	bf00      	nop
 8000a5a:	370c      	adds	r7, #12
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr

08000a64 <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b083      	sub	sp, #12
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	f003 0320 	and.w	r3, r3, #32
 8000a74:	2b20      	cmp	r3, #32
 8000a76:	bf0c      	ite	eq
 8000a78:	2301      	moveq	r3, #1
 8000a7a:	2300      	movne	r3, #0
 8000a7c:	b2db      	uxtb	r3, r3
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	370c      	adds	r7, #12
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr

08000a8a <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 8000a8a:	b480      	push	{r7}
 8000a8c:	b083      	sub	sp, #12
 8000a8e:	af00      	add	r7, sp, #0
 8000a90:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a9a:	2b80      	cmp	r3, #128	; 0x80
 8000a9c:	bf0c      	ite	eq
 8000a9e:	2301      	moveq	r3, #1
 8000aa0:	2300      	movne	r3, #0
 8000aa2:	b2db      	uxtb	r3, r3
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	370c      	adds	r7, #12
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr

08000ab0 <LL_USART_ClearFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_USART_ClearFlag_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_RXNE(USART_TypeDef *USARTx)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_RXNE));
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	f06f 0220 	mvn.w	r2, #32
 8000abe:	601a      	str	r2, [r3, #0]
}
 8000ac0:	bf00      	nop
 8000ac2:	370c      	adds	r7, #12
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr

08000acc <_ZNSt11char_traitsIcE6lengthEPKc>:
#endif
	return __builtin_memcmp(__s1, __s2, __n);
      }

      static _GLIBCXX17_CONSTEXPR size_t
      length(const char_type* __s)
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b084      	sub	sp, #16
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	60fb      	str	r3, [r7, #12]
      return __builtin_is_constant_evaluated();
 8000ad8:	2300      	movs	r3, #0
      {
#if __cplusplus >= 201703L
	if (__constant_string_p(__s))
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d004      	beq.n	8000ae8 <_ZNSt11char_traitsIcE6lengthEPKc+0x1c>
	  return __gnu_cxx::char_traits<char_type>::length(__s);
 8000ade:	6878      	ldr	r0, [r7, #4]
 8000ae0:	f000 fa41 	bl	8000f66 <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	e004      	b.n	8000af2 <_ZNSt11char_traitsIcE6lengthEPKc+0x26>
#endif
	return __builtin_strlen(__s);
 8000ae8:	6878      	ldr	r0, [r7, #4]
 8000aea:	f7ff fbc1 	bl	8000270 <strlen>
 8000aee:	4603      	mov	r3, r0
 8000af0:	bf00      	nop
      }
 8000af2:	4618      	mov	r0, r3
 8000af4:	3710      	adds	r7, #16
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
	...

08000afc <_ZNSt7__cxx119to_stringEm>:
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, 4 * sizeof(long),
					   "%ld", __val); }

  inline string
  to_string(unsigned long __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf,
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b084      	sub	sp, #16
 8000b00:	af02      	add	r7, sp, #8
 8000b02:	6078      	str	r0, [r7, #4]
 8000b04:	6039      	str	r1, [r7, #0]
					   4 * sizeof(unsigned long),
					   "%lu", __val); }
 8000b06:	6878      	ldr	r0, [r7, #4]
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	9300      	str	r3, [sp, #0]
 8000b0c:	4b04      	ldr	r3, [pc, #16]	; (8000b20 <_ZNSt7__cxx119to_stringEm+0x24>)
 8000b0e:	2210      	movs	r2, #16
 8000b10:	4904      	ldr	r1, [pc, #16]	; (8000b24 <_ZNSt7__cxx119to_stringEm+0x28>)
 8000b12:	f000 fa48 	bl	8000fa6 <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>
 8000b16:	6878      	ldr	r0, [r7, #4]
 8000b18:	3708      	adds	r7, #8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	08004590 	.word	0x08004590
 8000b24:	08003f05 	.word	0x08003f05

08000b28 <LL_ADC_IsActiveFlag_EOCS>:
  * @rmtoll SR       EOC            LL_ADC_IsActiveFlag_EOCS
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOCS(ADC_TypeDef *ADCx)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_EOCS) == (LL_ADC_FLAG_EOCS));
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	f003 0302 	and.w	r3, r3, #2
 8000b38:	2b02      	cmp	r3, #2
 8000b3a:	bf0c      	ite	eq
 8000b3c:	2301      	moveq	r3, #1
 8000b3e:	2300      	movne	r3, #0
 8000b40:	b2db      	uxtb	r3, r3
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	370c      	adds	r7, #12
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr

08000b4e <LL_ADC_IsActiveFlag_OVR>:
  * @rmtoll SR       OVR            LL_ADC_IsActiveFlag_OVR
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_OVR(ADC_TypeDef *ADCx)
{
 8000b4e:	b480      	push	{r7}
 8000b50:	b083      	sub	sp, #12
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_OVR) == (LL_ADC_FLAG_OVR));
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	f003 0320 	and.w	r3, r3, #32
 8000b5e:	2b20      	cmp	r3, #32
 8000b60:	bf0c      	ite	eq
 8000b62:	2301      	moveq	r3, #1
 8000b64:	2300      	movne	r3, #0
 8000b66:	b2db      	uxtb	r3, r3
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	370c      	adds	r7, #12
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr

08000b74 <LL_ADC_ClearFlag_EOCS>:
  * @rmtoll SR       EOC            LL_ADC_ClearFlag_EOCS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_EOCS(ADC_TypeDef *ADCx)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	f06f 0202 	mvn.w	r2, #2
 8000b82:	601a      	str	r2, [r3, #0]
}
 8000b84:	bf00      	nop
 8000b86:	370c      	adds	r7, #12
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr

08000b90 <main>:
 * @brief  The application entry point.
 * @retval int
 */
const char *myName = "TranHoangAnh";
int main()
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000b94:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000b98:	f7ff fe76 	bl	8000888 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000b9c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000ba0:	f7ff fe5a 	bl	8000858 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ba4:	2007      	movs	r0, #7
 8000ba6:	f7ff fd39 	bl	800061c <__NVIC_SetPriorityGrouping>

  SystemClock_Config();
 8000baa:	f000 f923 	bl	8000df4 <_Z18SystemClock_Configv>
  MX_GPIO_Init();
 8000bae:	f7ff fd0b 	bl	80005c8 <MX_GPIO_Init>


  UHAL_USART6::developing::fristRun(reinterpret_cast<uintptr_t>(&usartBuffer), 9);
 8000bb2:	4b11      	ldr	r3, [pc, #68]	; (8000bf8 <main+0x68>)
 8000bb4:	2109      	movs	r1, #9
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f001 ffba 	bl	8002b30 <_ZN11UHAL_USART610developing8fristRunEjt>

    

  // UHAL_TIM5_PWM::developing::firstRun();

  UHAL_DMA2::DMA_ADC1::initialize2();
 8000bbc:	f001 fad8 	bl	8002170 <_ZN9UHAL_DMA28DMA_ADC111initialize2Ev>
  UHAL_DMA2::DMA_ADC1::enableInterrupt();
 8000bc0:	f001 fb1a 	bl	80021f8 <_ZN9UHAL_DMA28DMA_ADC115enableInterruptEv>
  UHAL_ADC::initialize2();
 8000bc4:	f001 f83a 	bl	8001c3c <_ZN8UHAL_ADC11initialize2Ev>
  UHAL_DMA2::DMA_ADC1::enableInterrupt();
 8000bc8:	f001 fb16 	bl	80021f8 <_ZN9UHAL_DMA28DMA_ADC115enableInterruptEv>
  UHAL_ADC::enableInterrupt();
 8000bcc:	f001 f80e 	bl	8001bec <_ZN8UHAL_ADC15enableInterruptEv>
  UHAL_DMA2::DMA_ADC1::setBufferAddress(reinterpret_cast<uintptr_t>(&adcBuffer));
 8000bd0:	4b0a      	ldr	r3, [pc, #40]	; (8000bfc <main+0x6c>)
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f001 fabc 	bl	8002150 <_ZN9UHAL_DMA28DMA_ADC116setBufferAddressEj>
  UHAL_DMA2::DMA_ADC1::setPeripheralADDress(reinterpret_cast<uintptr_t>(&ADC1->DR));
 8000bd8:	4809      	ldr	r0, [pc, #36]	; (8000c00 <main+0x70>)
 8000bda:	f001 fafd 	bl	80021d8 <_ZN9UHAL_DMA28DMA_ADC120setPeripheralADDressEj>
  UHAL_DMA2::DMA_ADC1::setNumberOfDataTransfer(2);
 8000bde:	2002      	movs	r0, #2
 8000be0:	f001 fae8 	bl	80021b4 <_ZN9UHAL_DMA28DMA_ADC123setNumberOfDataTransferEt>
  UHAL_DMA2::DMA_ADC1::enable();
 8000be4:	f001 fadc 	bl	80021a0 <_ZN9UHAL_DMA28DMA_ADC16enableEv>
  UHAL_ADC::enable();
 8000be8:	f000 ffea 	bl	8001bc0 <_ZN8UHAL_ADC6enableEv>

  UHAL_ADC::startConversion();
 8000bec:	f001 f81c 	bl	8001c28 <_ZN8UHAL_ADC15startConversionEv>
  while (true)
  {

    UHAL_ADC::startConversion();
 8000bf0:	f001 f81a 	bl	8001c28 <_ZN8UHAL_ADC15startConversionEv>
 8000bf4:	e7fc      	b.n	8000bf0 <main+0x60>
 8000bf6:	bf00      	nop
 8000bf8:	200000a8 	.word	0x200000a8
 8000bfc:	200000b8 	.word	0x200000b8
 8000c00:	4001204c 	.word	0x4001204c

08000c04 <USART6_IRQHandler>:
}

extern "C"
{
  void USART6_IRQHandler(void)
  {
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
{
	return UHAL_ERROR::DEPRECATED;
}
auto UHAL_USART6::flag_IT::TXE::isSet()
{
	return LL_USART_IsActiveFlag_TXE(thisInstance);
 8000c0a:	4817      	ldr	r0, [pc, #92]	; (8000c68 <USART6_IRQHandler+0x64>)
 8000c0c:	f7ff ff3d 	bl	8000a8a <LL_USART_IsActiveFlag_TXE>
 8000c10:	4603      	mov	r3, r0
 8000c12:	bf00      	nop
    using namespace UHAL_USART6;
    using namespace UHAL_USART6::flag_IT;

    if (TXE::isSet())
 8000c14:	2b00      	cmp	r3, #0
				return LL_USART_IsActiveFlag_RXNE(thisInstance);
 8000c16:	4814      	ldr	r0, [pc, #80]	; (8000c68 <USART6_IRQHandler+0x64>)
 8000c18:	f7ff ff24 	bl	8000a64 <LL_USART_IsActiveFlag_RXNE>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	bf00      	nop
    {

    }

    if (RXNE::isSet())
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	bf14      	ite	ne
 8000c24:	2301      	movne	r3, #1
 8000c26:	2300      	moveq	r3, #0
 8000c28:	b2db      	uxtb	r3, r3
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d015      	beq.n	8000c5a <USART6_IRQHandler+0x56>
    {
    	usartRXNE++;
 8000c2e:	4b0f      	ldr	r3, [pc, #60]	; (8000c6c <USART6_IRQHandler+0x68>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	3301      	adds	r3, #1
 8000c34:	4a0d      	ldr	r2, [pc, #52]	; (8000c6c <USART6_IRQHandler+0x68>)
 8000c36:	6013      	str	r3, [r2, #0]
 8000c38:	480b      	ldr	r0, [pc, #44]	; (8000c68 <USART6_IRQHandler+0x64>)
 8000c3a:	f7ff ff13 	bl	8000a64 <LL_USART_IsActiveFlag_RXNE>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	bf00      	nop
					auto posAssert = isSet();
 8000c42:	607b      	str	r3, [r7, #4]
					assert_param(posAssert);
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d103      	bne.n	8000c52 <USART6_IRQHandler+0x4e>
 8000c4a:	2166      	movs	r1, #102	; 0x66
 8000c4c:	4808      	ldr	r0, [pc, #32]	; (8000c70 <USART6_IRQHandler+0x6c>)
 8000c4e:	f000 f92b 	bl	8000ea8 <assert_failed>
				LL_USART_ClearFlag_RXNE(thisInstance);
 8000c52:	4805      	ldr	r0, [pc, #20]	; (8000c68 <USART6_IRQHandler+0x64>)
 8000c54:	f7ff ff2c 	bl	8000ab0 <LL_USART_ClearFlag_RXNE>
			}
 8000c58:	bf00      	nop
    	RXNE::clear();
    }
    NVIC_ClearPendingIRQ(UHAL_USART6::thisIRQn);
 8000c5a:	2047      	movs	r0, #71	; 0x47
 8000c5c:	f7ff fd02 	bl	8000664 <__NVIC_ClearPendingIRQ>
  }
 8000c60:	bf00      	nop
 8000c62:	3708      	adds	r7, #8
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	40011400 	.word	0x40011400
 8000c6c:	200000a4 	.word	0x200000a4
 8000c70:	080045a4 	.word	0x080045a4

08000c74 <DMA2_Stream0_IRQHandler>:

  void DMA2_Stream0_IRQHandler()
  {
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
    dmaInterrupt++;
 8000c78:	4b39      	ldr	r3, [pc, #228]	; (8000d60 <DMA2_Stream0_IRQHandler+0xec>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	3301      	adds	r3, #1
 8000c7e:	4a38      	ldr	r2, [pc, #224]	; (8000d60 <DMA2_Stream0_IRQHandler+0xec>)
 8000c80:	6013      	str	r3, [r2, #0]
          namespace DMEIF // Direct mode error
          {
           
            __SFI auto isSet()
            {
               return LL_DMA_IsActiveFlag_DME0(thisInstance);
 8000c82:	4838      	ldr	r0, [pc, #224]	; (8000d64 <DMA2_Stream0_IRQHandler+0xf0>)
 8000c84:	f7ff fe87 	bl	8000996 <LL_DMA_IsActiveFlag_DME0>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	bf00      	nop

    if (UHAL_DMA2::DMA_ADC1::flag_IT::DMEIF::isSet())
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	bf14      	ite	ne
 8000c90:	2301      	movne	r3, #1
 8000c92:	2300      	moveq	r3, #0
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d008      	beq.n	8000cac <DMA2_Stream0_IRQHandler+0x38>
    {
      dmaDirectModeERROR++;
 8000c9a:	4b33      	ldr	r3, [pc, #204]	; (8000d68 <DMA2_Stream0_IRQHandler+0xf4>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	4a31      	ldr	r2, [pc, #196]	; (8000d68 <DMA2_Stream0_IRQHandler+0xf4>)
 8000ca2:	6013      	str	r3, [r2, #0]
            }
            __SFI auto clear()  
            {
                LL_DMA_ClearFlag_DME0(thisInstance);
 8000ca4:	482f      	ldr	r0, [pc, #188]	; (8000d64 <DMA2_Stream0_IRQHandler+0xf0>)
 8000ca6:	f7ff fec3 	bl	8000a30 <LL_DMA_ClearFlag_DME0>
            }       
 8000caa:	bf00      	nop
               return LL_DMA_IsActiveFlag_HT0(thisInstance);
 8000cac:	482d      	ldr	r0, [pc, #180]	; (8000d64 <DMA2_Stream0_IRQHandler+0xf0>)
 8000cae:	f7ff fe39 	bl	8000924 <LL_DMA_IsActiveFlag_HT0>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	bf00      	nop
      UHAL_DMA2::DMA_ADC1::flag_IT::DMEIF::clear();
    }
    if (UHAL_DMA2::DMA_ADC1::flag_IT::HTIF::isSet())
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	bf14      	ite	ne
 8000cba:	2301      	movne	r3, #1
 8000cbc:	2300      	moveq	r3, #0
 8000cbe:	b2db      	uxtb	r3, r3
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d008      	beq.n	8000cd6 <DMA2_Stream0_IRQHandler+0x62>
    {
      dmaHalfTrans++;
 8000cc4:	4b29      	ldr	r3, [pc, #164]	; (8000d6c <DMA2_Stream0_IRQHandler+0xf8>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	3301      	adds	r3, #1
 8000cca:	4a28      	ldr	r2, [pc, #160]	; (8000d6c <DMA2_Stream0_IRQHandler+0xf8>)
 8000ccc:	6013      	str	r3, [r2, #0]
               LL_DMA_ClearFlag_HT0(thisInstance);
 8000cce:	4825      	ldr	r0, [pc, #148]	; (8000d64 <DMA2_Stream0_IRQHandler+0xf0>)
 8000cd0:	f7ff fe87 	bl	80009e2 <LL_DMA_ClearFlag_HT0>
            }         
 8000cd4:	bf00      	nop
               return LL_DMA_IsActiveFlag_TC0(thisInstance);
 8000cd6:	4823      	ldr	r0, [pc, #140]	; (8000d64 <DMA2_Stream0_IRQHandler+0xf0>)
 8000cd8:	f7ff fe37 	bl	800094a <LL_DMA_IsActiveFlag_TC0>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	bf00      	nop
      UHAL_DMA2::DMA_ADC1::flag_IT::HTIF::clear();
    }
    if (UHAL_DMA2::DMA_ADC1::flag_IT::TCIF::isSet())
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	bf14      	ite	ne
 8000ce4:	2301      	movne	r3, #1
 8000ce6:	2300      	moveq	r3, #0
 8000ce8:	b2db      	uxtb	r3, r3
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d008      	beq.n	8000d00 <DMA2_Stream0_IRQHandler+0x8c>
    {
      dmaCompTrans++;
 8000cee:	4b20      	ldr	r3, [pc, #128]	; (8000d70 <DMA2_Stream0_IRQHandler+0xfc>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	4a1e      	ldr	r2, [pc, #120]	; (8000d70 <DMA2_Stream0_IRQHandler+0xfc>)
 8000cf6:	6013      	str	r3, [r2, #0]
                LL_DMA_ClearFlag_TC0(thisInstance);
 8000cf8:	481a      	ldr	r0, [pc, #104]	; (8000d64 <DMA2_Stream0_IRQHandler+0xf0>)
 8000cfa:	f7ff fe7f 	bl	80009fc <LL_DMA_ClearFlag_TC0>
            }       
 8000cfe:	bf00      	nop
               return LL_DMA_IsActiveFlag_TE0(thisInstance);
 8000d00:	4818      	ldr	r0, [pc, #96]	; (8000d64 <DMA2_Stream0_IRQHandler+0xf0>)
 8000d02:	f7ff fe35 	bl	8000970 <LL_DMA_IsActiveFlag_TE0>
 8000d06:	4603      	mov	r3, r0
 8000d08:	bf00      	nop
      UHAL_DMA2::DMA_ADC1::flag_IT::TCIF::clear();
    }
    if (UHAL_DMA2::DMA_ADC1::flag_IT::TEIF::isSet())
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	bf14      	ite	ne
 8000d0e:	2301      	movne	r3, #1
 8000d10:	2300      	moveq	r3, #0
 8000d12:	b2db      	uxtb	r3, r3
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d008      	beq.n	8000d2a <DMA2_Stream0_IRQHandler+0xb6>
    {
      dmaTransError++;
 8000d18:	4b16      	ldr	r3, [pc, #88]	; (8000d74 <DMA2_Stream0_IRQHandler+0x100>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	3301      	adds	r3, #1
 8000d1e:	4a15      	ldr	r2, [pc, #84]	; (8000d74 <DMA2_Stream0_IRQHandler+0x100>)
 8000d20:	6013      	str	r3, [r2, #0]
                LL_DMA_ClearFlag_TE0(thisInstance);
 8000d22:	4810      	ldr	r0, [pc, #64]	; (8000d64 <DMA2_Stream0_IRQHandler+0xf0>)
 8000d24:	f7ff fe77 	bl	8000a16 <LL_DMA_ClearFlag_TE0>
            }       
 8000d28:	bf00      	nop
               return LL_DMA_IsActiveFlag_FE0(thisInstance);
 8000d2a:	480e      	ldr	r0, [pc, #56]	; (8000d64 <DMA2_Stream0_IRQHandler+0xf0>)
 8000d2c:	f7ff fe46 	bl	80009bc <LL_DMA_IsActiveFlag_FE0>
 8000d30:	4603      	mov	r3, r0
 8000d32:	bf00      	nop
      UHAL_DMA2::DMA_ADC1::flag_IT::TEIF::clear();
    }
    if (UHAL_DMA2::DMA_ADC1::flag_IT::FEIF::isSet())
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	bf14      	ite	ne
 8000d38:	2301      	movne	r3, #1
 8000d3a:	2300      	moveq	r3, #0
 8000d3c:	b2db      	uxtb	r3, r3
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d008      	beq.n	8000d54 <DMA2_Stream0_IRQHandler+0xe0>
    {
      dmaFifoOverUnder++;
 8000d42:	4b0d      	ldr	r3, [pc, #52]	; (8000d78 <DMA2_Stream0_IRQHandler+0x104>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	3301      	adds	r3, #1
 8000d48:	4a0b      	ldr	r2, [pc, #44]	; (8000d78 <DMA2_Stream0_IRQHandler+0x104>)
 8000d4a:	6013      	str	r3, [r2, #0]
                LL_DMA_ClearFlag_FE0(thisInstance);
 8000d4c:	4805      	ldr	r0, [pc, #20]	; (8000d64 <DMA2_Stream0_IRQHandler+0xf0>)
 8000d4e:	f7ff fe7c 	bl	8000a4a <LL_DMA_ClearFlag_FE0>
            }       
 8000d52:	bf00      	nop
      UHAL_DMA2::DMA_ADC1::flag_IT::FEIF::clear();
    }
    NVIC_ClearPendingIRQ(DMA2_Stream0_IRQn);
 8000d54:	2038      	movs	r0, #56	; 0x38
 8000d56:	f7ff fc85 	bl	8000664 <__NVIC_ClearPendingIRQ>
  }
 8000d5a:	bf00      	nop
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	2000008c 	.word	0x2000008c
 8000d64:	40026400 	.word	0x40026400
 8000d68:	200000a0 	.word	0x200000a0
 8000d6c:	20000090 	.word	0x20000090
 8000d70:	20000094 	.word	0x20000094
 8000d74:	20000098 	.word	0x20000098
 8000d78:	2000009c 	.word	0x2000009c

08000d7c <DMA2_Stream1_IRQHandler>:

  void DMA2_Stream1_IRQHandler()
  {
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0

    NVIC_ClearPendingIRQ(DMA2_Stream1_IRQn);
 8000d80:	2039      	movs	r0, #57	; 0x39
 8000d82:	f7ff fc6f 	bl	8000664 <__NVIC_ClearPendingIRQ>
  }
 8000d86:	bf00      	nop
 8000d88:	bd80      	pop	{r7, pc}
	...

08000d8c <ADC_IRQHandler>:

  void ADC_IRQHandler()
  {
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
    	/*This bit is set by hardware at the end of the conversion of a regular group of channels. It is
    cleared by software or by reading the ADC_DR register.*/
        namespace EOC   /// @brief End of conversion of regular group
        {
            __SFI auto isSet() {
              return  LL_ADC_IsActiveFlag_EOCS(thisInstance);
 8000d90:	4815      	ldr	r0, [pc, #84]	; (8000de8 <ADC_IRQHandler+0x5c>)
 8000d92:	f7ff fec9 	bl	8000b28 <LL_ADC_IsActiveFlag_EOCS>
 8000d96:	4603      	mov	r3, r0
 8000d98:	bf00      	nop

    /// compt
    if (UHAL_ADC::flag_IT::EOC::isSet())
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	bf14      	ite	ne
 8000d9e:	2301      	movne	r3, #1
 8000da0:	2300      	moveq	r3, #0
 8000da2:	b2db      	uxtb	r3, r3
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d008      	beq.n	8000dba <ADC_IRQHandler+0x2e>
    {
      adcComp++;
 8000da8:	4b10      	ldr	r3, [pc, #64]	; (8000dec <ADC_IRQHandler+0x60>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	3301      	adds	r3, #1
 8000dae:	4a0f      	ldr	r2, [pc, #60]	; (8000dec <ADC_IRQHandler+0x60>)
 8000db0:	6013      	str	r3, [r2, #0]
            }

            __SFI auto clear() {
                LL_ADC_ClearFlag_EOCS(thisInstance);
 8000db2:	480d      	ldr	r0, [pc, #52]	; (8000de8 <ADC_IRQHandler+0x5c>)
 8000db4:	f7ff fede 	bl	8000b74 <LL_ADC_ClearFlag_EOCS>
            }
 8000db8:	bf00      	nop
            [[deprecated("this flag no pending")]] __SFI auto clearPendingBit();
        }
        namespace OVR   /// @brief Overrun error
        {
            __SFI auto isSet() {
               return LL_ADC_IsActiveFlag_OVR(thisInstance);
 8000dba:	480b      	ldr	r0, [pc, #44]	; (8000de8 <ADC_IRQHandler+0x5c>)
 8000dbc:	f7ff fec7 	bl	8000b4e <LL_ADC_IsActiveFlag_OVR>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	bf00      	nop
      UHAL_ADC::flag_IT::EOC::clear();
    }
    /// Overrun Handle
    if (UHAL_ADC::flag_IT::OVR::isSet())
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	bf14      	ite	ne
 8000dc8:	2301      	movne	r3, #1
 8000dca:	2300      	moveq	r3, #0
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d004      	beq.n	8000ddc <ADC_IRQHandler+0x50>
    {
      adcOverrun++;
 8000dd2:	4b07      	ldr	r3, [pc, #28]	; (8000df0 <ADC_IRQHandler+0x64>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	3301      	adds	r3, #1
 8000dd8:	4a05      	ldr	r2, [pc, #20]	; (8000df0 <ADC_IRQHandler+0x64>)
 8000dda:	6013      	str	r3, [r2, #0]
      // todo implement this recover for overrun.
      //  UHAL_ADC::recoverAdcFormOverrun(reinterpret_cast<uintptr_t>(&adcBuffer[0]));
    }
    NVIC_ClearPendingIRQ(ADC_IRQn);
 8000ddc:	2012      	movs	r0, #18
 8000dde:	f7ff fc41 	bl	8000664 <__NVIC_ClearPendingIRQ>
  }
 8000de2:	bf00      	nop
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	40012000 	.word	0x40012000
 8000dec:	20000088 	.word	0x20000088
 8000df0:	20000084 	.word	0x20000084

08000df4 <_Z18SystemClock_Configv>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_5);
 8000df8:	2005      	movs	r0, #5
 8000dfa:	f7ff fd5d 	bl	80008b8 <LL_FLASH_SetLatency>
  while (LL_FLASH_GetLatency() != LL_FLASH_LATENCY_5)
 8000dfe:	f7ff fd6f 	bl	80008e0 <LL_FLASH_GetLatency>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b05      	cmp	r3, #5
 8000e06:	bf14      	ite	ne
 8000e08:	2301      	movne	r3, #1
 8000e0a:	2300      	moveq	r3, #0
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d000      	beq.n	8000e14 <_Z18SystemClock_Configv+0x20>
 8000e12:	e7f4      	b.n	8000dfe <_Z18SystemClock_Configv+0xa>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8000e14:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000e18:	f7ff fd70 	bl	80008fc <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSE_EnableBypass();
 8000e1c:	f7ff fc40 	bl	80006a0 <LL_RCC_HSE_EnableBypass>
  LL_RCC_HSE_Enable();
 8000e20:	f7ff fc4e 	bl	80006c0 <LL_RCC_HSE_Enable>

  /* Wait till HSE is ready */
  while (LL_RCC_HSE_IsReady() != 1)
 8000e24:	f7ff fc5c 	bl	80006e0 <LL_RCC_HSE_IsReady>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b01      	cmp	r3, #1
 8000e2c:	bf14      	ite	ne
 8000e2e:	2301      	movne	r3, #1
 8000e30:	2300      	moveq	r3, #0
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d000      	beq.n	8000e3a <_Z18SystemClock_Configv+0x46>
 8000e38:	e7f4      	b.n	8000e24 <_Z18SystemClock_Configv+0x30>
  {
  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_4, 168, LL_RCC_PLLP_DIV_2);
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	22a8      	movs	r2, #168	; 0xa8
 8000e3e:	2104      	movs	r1, #4
 8000e40:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000e44:	f7ff fce2 	bl	800080c <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8000e48:	f7ff fcbc 	bl	80007c4 <LL_RCC_PLL_Enable>

  /* Wait till PLL is ready */
  while (LL_RCC_PLL_IsReady() != 1)
 8000e4c:	f7ff fcca 	bl	80007e4 <LL_RCC_PLL_IsReady>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b01      	cmp	r3, #1
 8000e54:	bf14      	ite	ne
 8000e56:	2301      	movne	r3, #1
 8000e58:	2300      	moveq	r3, #0
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d000      	beq.n	8000e62 <_Z18SystemClock_Configv+0x6e>
 8000e60:	e7f4      	b.n	8000e4c <_Z18SystemClock_Configv+0x58>
  {
  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000e62:	2000      	movs	r0, #0
 8000e64:	f7ff fc72 	bl	800074c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_4);
 8000e68:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8000e6c:	f7ff fc82 	bl	8000774 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
 8000e70:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000e74:	f7ff fc92 	bl	800079c <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000e78:	2002      	movs	r0, #2
 8000e7a:	f7ff fc45 	bl	8000708 <LL_RCC_SetSysClkSource>

  /* Wait till System clock is ready */
  while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000e7e:	f7ff fc57 	bl	8000730 <LL_RCC_GetSysClkSource>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b08      	cmp	r3, #8
 8000e86:	bf14      	ite	ne
 8000e88:	2301      	movne	r3, #1
 8000e8a:	2300      	moveq	r3, #0
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d000      	beq.n	8000e94 <_Z18SystemClock_Configv+0xa0>
 8000e92:	e7f4      	b.n	8000e7e <_Z18SystemClock_Configv+0x8a>
  {
  }
  LL_Init1msTick(168000000);
 8000e94:	4803      	ldr	r0, [pc, #12]	; (8000ea4 <_Z18SystemClock_Configv+0xb0>)
 8000e96:	f002 fcf9 	bl	800388c <LL_Init1msTick>
  LL_SetSystemCoreClock(168000000);
 8000e9a:	4802      	ldr	r0, [pc, #8]	; (8000ea4 <_Z18SystemClock_Configv+0xb0>)
 8000e9c:	f002 fd04 	bl	80038a8 <LL_SetSystemCoreClock>
}
 8000ea0:	bf00      	nop
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	0a037a00 	.word	0x0a037a00

08000ea8 <assert_failed>:
 * @param  file: pointer to the source file name
 * @param  line: assert_param error line source number
 * @retval None
 */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b09c      	sub	sp, #112	; 0x70
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
  //	void *str = file;
  std::string _file = reinterpret_cast<const char *>(file);
 8000eb2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f002 fd06 	bl	80038c8 <_ZNSaIcEC1Ev>
 8000ebc:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8000ec0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000ec4:	6879      	ldr	r1, [r7, #4]
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f000 f8a5 	bl	8001016 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8000ecc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f002 fcfa 	bl	80038ca <_ZNSaIcED1Ev>
  std::string _line = std::to_string(line);
 8000ed6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eda:	6839      	ldr	r1, [r7, #0]
 8000edc:	4618      	mov	r0, r3
 8000ede:	f7ff fe0d 	bl	8000afc <_ZNSt7__cxx119to_stringEm>
  std::string msg = _line + _file + '\n';
 8000ee2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000ee6:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8000eea:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f000 f8b7 	bl	8001062 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_SA_>
 8000ef4:	f107 030c 	add.w	r3, r7, #12
 8000ef8:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8000efc:	220a      	movs	r2, #10
 8000efe:	4618      	mov	r0, r3
 8000f00:	f000 f8c2 	bl	8001088 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S5_>
 8000f04:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f002 fdb5 	bl	8003a78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  UHAL_USART6::send(msg);
 8000f0e:	f107 030c 	add.w	r3, r7, #12
 8000f12:	4618      	mov	r0, r3
 8000f14:	f001 fd98 	bl	8002a48 <_ZN11UHAL_USART64sendERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
  std::string msg = _line + _file + '\n';
 8000f18:	f107 030c 	add.w	r3, r7, #12
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f002 fdab 	bl	8003a78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  std::string _line = std::to_string(line);
 8000f22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f26:	4618      	mov	r0, r3
 8000f28:	f002 fda6 	bl	8003a78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  std::string _file = reinterpret_cast<const char *>(file);
 8000f2c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000f30:	4618      	mov	r0, r3
 8000f32:	f002 fda1 	bl	8003a78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 8000f36:	bf00      	nop
 8000f38:	3770      	adds	r7, #112	; 0x70
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <_ZN9__gnu_cxx11char_traitsIcE2eqERKcS3_>:
      eq(const char_type& __c1, const char_type& __c2)
 8000f3e:	b480      	push	{r7}
 8000f40:	b083      	sub	sp, #12
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	6078      	str	r0, [r7, #4]
 8000f46:	6039      	str	r1, [r7, #0]
      { return __c1 == __c2; }
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	781a      	ldrb	r2, [r3, #0]
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	bf0c      	ite	eq
 8000f54:	2301      	moveq	r3, #1
 8000f56:	2300      	movne	r3, #0
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	370c      	adds	r7, #12
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr

08000f66 <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc>:
    char_traits<_CharT>::
 8000f66:	b580      	push	{r7, lr}
 8000f68:	b084      	sub	sp, #16
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	6078      	str	r0, [r7, #4]
      std::size_t __i = 0;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	60fb      	str	r3, [r7, #12]
      while (!eq(__p[__i], char_type()))
 8000f72:	687a      	ldr	r2, [r7, #4]
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	4413      	add	r3, r2
 8000f78:	2200      	movs	r2, #0
 8000f7a:	72fa      	strb	r2, [r7, #11]
 8000f7c:	f107 020b 	add.w	r2, r7, #11
 8000f80:	4611      	mov	r1, r2
 8000f82:	4618      	mov	r0, r3
 8000f84:	f7ff ffdb 	bl	8000f3e <_ZN9__gnu_cxx11char_traitsIcE2eqERKcS3_>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	f083 0301 	eor.w	r3, r3, #1
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d003      	beq.n	8000f9c <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc+0x36>
        ++__i;
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	3301      	adds	r3, #1
 8000f98:	60fb      	str	r3, [r7, #12]
      while (!eq(__p[__i], char_type()))
 8000f9a:	e7ea      	b.n	8000f72 <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc+0xc>
      return __i;
 8000f9c:	68fb      	ldr	r3, [r7, #12]
    }
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3710      	adds	r7, #16
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>:
    }

  // Helper for the to_string / to_wstring functions.
  template<typename _String, typename _CharT = typename _String::value_type>
    _String
    __to_xstring(int (*__convf) (_CharT*, std::size_t, const _CharT*,
 8000fa6:	b408      	push	{r3}
 8000fa8:	b590      	push	{r4, r7, lr}
 8000faa:	b088      	sub	sp, #32
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	60f8      	str	r0, [r7, #12]
 8000fb0:	60b9      	str	r1, [r7, #8]
 8000fb2:	607a      	str	r2, [r7, #4]
				 __builtin_va_list), std::size_t __n,
		 const _CharT* __fmt, ...)
    {
      // XXX Eventually the result should be constructed in-place in
      // the __cxx11 string, likely with the help of internal hooks.
      _CharT* __s = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	3307      	adds	r3, #7
 8000fb8:	08db      	lsrs	r3, r3, #3
 8000fba:	00db      	lsls	r3, r3, #3
 8000fbc:	ebad 0d03 	sub.w	sp, sp, r3
 8000fc0:	466b      	mov	r3, sp
 8000fc2:	3307      	adds	r3, #7
 8000fc4:	08db      	lsrs	r3, r3, #3
 8000fc6:	00db      	lsls	r3, r3, #3
 8000fc8:	61fb      	str	r3, [r7, #28]
							  * __n));

      __builtin_va_list __args;
      __builtin_va_start(__args, __fmt);
 8000fca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fce:	613b      	str	r3, [r7, #16]

      const int __len = __convf(__s, __n, __fmt, __args);
 8000fd0:	68bc      	ldr	r4, [r7, #8]
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000fd6:	6879      	ldr	r1, [r7, #4]
 8000fd8:	69f8      	ldr	r0, [r7, #28]
 8000fda:	47a0      	blx	r4
 8000fdc:	61b8      	str	r0, [r7, #24]

      __builtin_va_end(__args);

      return _String(__s, __s + __len);
 8000fde:	69bb      	ldr	r3, [r7, #24]
 8000fe0:	69fa      	ldr	r2, [r7, #28]
 8000fe2:	18d4      	adds	r4, r2, r3
 8000fe4:	f107 0314 	add.w	r3, r7, #20
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f002 fc6d 	bl	80038c8 <_ZNSaIcEC1Ev>
 8000fee:	f107 0314 	add.w	r3, r7, #20
 8000ff2:	4622      	mov	r2, r4
 8000ff4:	69f9      	ldr	r1, [r7, #28]
 8000ff6:	68f8      	ldr	r0, [r7, #12]
 8000ff8:	f000 f860 	bl	80010bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPcvEET_S7_RKS3_>
 8000ffc:	f107 0314 	add.w	r3, r7, #20
 8001000:	4618      	mov	r0, r3
 8001002:	f002 fc62 	bl	80038ca <_ZNSaIcED1Ev>
 8001006:	bf00      	nop
    }
 8001008:	68f8      	ldr	r0, [r7, #12]
 800100a:	3720      	adds	r7, #32
 800100c:	46bd      	mov	sp, r7
 800100e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001012:	b001      	add	sp, #4
 8001014:	4770      	bx	lr

08001016 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>:
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
 8001016:	b590      	push	{r4, r7, lr}
 8001018:	b085      	sub	sp, #20
 800101a:	af00      	add	r7, sp, #0
 800101c:	60f8      	str	r0, [r7, #12]
 800101e:	60b9      	str	r1, [r7, #8]
 8001020:	607a      	str	r2, [r7, #4]
      : _M_dataplus(_M_local_data(), __a)
 8001022:	68fc      	ldr	r4, [r7, #12]
 8001024:	68f8      	ldr	r0, [r7, #12]
 8001026:	f002 fc62 	bl	80038ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 800102a:	4603      	mov	r3, r0
 800102c:	687a      	ldr	r2, [r7, #4]
 800102e:	4619      	mov	r1, r3
 8001030:	4620      	mov	r0, r4
 8001032:	f002 fd9f 	bl	8003b74 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>
      { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d006      	beq.n	800104a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0x34>
 800103c:	68b8      	ldr	r0, [r7, #8]
 800103e:	f7ff fd45 	bl	8000acc <_ZNSt11char_traitsIcE6lengthEPKc>
 8001042:	4602      	mov	r2, r0
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	4413      	add	r3, r2
 8001048:	e001      	b.n	800104e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0x38>
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	3b01      	subs	r3, #1
 800104e:	461a      	mov	r2, r3
 8001050:	68b9      	ldr	r1, [r7, #8]
 8001052:	68f8      	ldr	r0, [r7, #12]
 8001054:	f000 f84d 	bl	80010f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_>
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	4618      	mov	r0, r3
 800105c:	3714      	adds	r7, #20
 800105e:	46bd      	mov	sp, r7
 8001060:	bd90      	pop	{r4, r7, pc}

08001062 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_SA_>:
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 8001062:	b580      	push	{r7, lr}
 8001064:	b084      	sub	sp, #16
 8001066:	af00      	add	r7, sp, #0
 8001068:	60f8      	str	r0, [r7, #12]
 800106a:	60b9      	str	r1, [r7, #8]
 800106c:	607a      	str	r2, [r7, #4]
      basic_string<_CharT, _Traits, _Alloc> __str(__lhs);
 800106e:	68b9      	ldr	r1, [r7, #8]
 8001070:	68f8      	ldr	r0, [r7, #12]
 8001072:	f002 fd81 	bl	8003b78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
      __str.append(__rhs);
 8001076:	6879      	ldr	r1, [r7, #4]
 8001078:	68f8      	ldr	r0, [r7, #12]
 800107a:	f002 fd75 	bl	8003b68 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>
      return __str;
 800107e:	bf00      	nop
    }
 8001080:	68f8      	ldr	r0, [r7, #12]
 8001082:	3710      	adds	r7, #16
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}

08001088 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S5_>:
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	60f8      	str	r0, [r7, #12]
 8001090:	60b9      	str	r1, [r7, #8]
 8001092:	4613      	mov	r3, r2
 8001094:	71fb      	strb	r3, [r7, #7]
    { return std::move(__lhs.append(1, __rhs)); }
 8001096:	79fb      	ldrb	r3, [r7, #7]
 8001098:	461a      	mov	r2, r3
 800109a:	2101      	movs	r1, #1
 800109c:	68b8      	ldr	r0, [r7, #8]
 800109e:	f002 fd37 	bl	8003b10 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEjc>
 80010a2:	4603      	mov	r3, r0
 80010a4:	4618      	mov	r0, r3
 80010a6:	f000 f833 	bl	8001110 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 80010aa:	4603      	mov	r3, r0
 80010ac:	4619      	mov	r1, r3
 80010ae:	68f8      	ldr	r0, [r7, #12]
 80010b0:	f002 fcc8 	bl	8003a44 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 80010b4:	68f8      	ldr	r0, [r7, #12]
 80010b6:	3710      	adds	r7, #16
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}

080010bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPcvEET_S7_RKS3_>:
        basic_string(_InputIterator __beg, _InputIterator __end,
 80010bc:	b590      	push	{r4, r7, lr}
 80010be:	b085      	sub	sp, #20
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	60f8      	str	r0, [r7, #12]
 80010c4:	60b9      	str	r1, [r7, #8]
 80010c6:	607a      	str	r2, [r7, #4]
 80010c8:	603b      	str	r3, [r7, #0]
	: _M_dataplus(_M_local_data(), __a)
 80010ca:	68fc      	ldr	r4, [r7, #12]
 80010cc:	68f8      	ldr	r0, [r7, #12]
 80010ce:	f002 fc0e 	bl	80038ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 80010d2:	4603      	mov	r3, r0
 80010d4:	683a      	ldr	r2, [r7, #0]
 80010d6:	4619      	mov	r1, r3
 80010d8:	4620      	mov	r0, r4
 80010da:	f002 fd4b 	bl	8003b74 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>
	{ _M_construct(__beg, __end); }
 80010de:	687a      	ldr	r2, [r7, #4]
 80010e0:	68b9      	ldr	r1, [r7, #8]
 80010e2:	68f8      	ldr	r0, [r7, #12]
 80010e4:	f000 f81f 	bl	8001126 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_>
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	4618      	mov	r0, r3
 80010ec:	3714      	adds	r7, #20
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd90      	pop	{r4, r7, pc}

080010f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_>:
        _M_construct(_InIterator __beg, _InIterator __end)
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b084      	sub	sp, #16
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	60f8      	str	r0, [r7, #12]
 80010fa:	60b9      	str	r1, [r7, #8]
 80010fc:	607a      	str	r2, [r7, #4]
	  _M_construct_aux(__beg, __end, _Integral());
 80010fe:	687a      	ldr	r2, [r7, #4]
 8001100:	68b9      	ldr	r1, [r7, #8]
 8001102:	68f8      	ldr	r0, [r7, #12]
 8001104:	f000 f81e 	bl	8001144 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPKcEEvT_S8_St12__false_type>
        }
 8001108:	bf00      	nop
 800110a:	3710      	adds	r7, #16
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}

08001110 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	4618      	mov	r0, r3
 800111c:	370c      	adds	r7, #12
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr

08001126 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_>:
        _M_construct(_InIterator __beg, _InIterator __end)
 8001126:	b580      	push	{r7, lr}
 8001128:	b084      	sub	sp, #16
 800112a:	af00      	add	r7, sp, #0
 800112c:	60f8      	str	r0, [r7, #12]
 800112e:	60b9      	str	r1, [r7, #8]
 8001130:	607a      	str	r2, [r7, #4]
	  _M_construct_aux(__beg, __end, _Integral());
 8001132:	687a      	ldr	r2, [r7, #4]
 8001134:	68b9      	ldr	r1, [r7, #8]
 8001136:	68f8      	ldr	r0, [r7, #12]
 8001138:	f000 f815 	bl	8001166 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPcEEvT_S7_St12__false_type>
        }
 800113c:	bf00      	nop
 800113e:	3710      	adds	r7, #16
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}

08001144 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPKcEEvT_S8_St12__false_type>:
        _M_construct_aux(_InIterator __beg, _InIterator __end,
 8001144:	b590      	push	{r4, r7, lr}
 8001146:	b087      	sub	sp, #28
 8001148:	af00      	add	r7, sp, #0
 800114a:	60f8      	str	r0, [r7, #12]
 800114c:	60b9      	str	r1, [r7, #8]
 800114e:	607a      	str	r2, [r7, #4]
 8001150:	703b      	strb	r3, [r7, #0]
          _M_construct(__beg, __end, _Tag());
 8001152:	4623      	mov	r3, r4
 8001154:	687a      	ldr	r2, [r7, #4]
 8001156:	68b9      	ldr	r1, [r7, #8]
 8001158:	68f8      	ldr	r0, [r7, #12]
 800115a:	f000 f829 	bl	80011b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
	}
 800115e:	bf00      	nop
 8001160:	371c      	adds	r7, #28
 8001162:	46bd      	mov	sp, r7
 8001164:	bd90      	pop	{r4, r7, pc}

08001166 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPcEEvT_S7_St12__false_type>:
        _M_construct_aux(_InIterator __beg, _InIterator __end,
 8001166:	b590      	push	{r4, r7, lr}
 8001168:	b087      	sub	sp, #28
 800116a:	af00      	add	r7, sp, #0
 800116c:	60f8      	str	r0, [r7, #12]
 800116e:	60b9      	str	r1, [r7, #8]
 8001170:	607a      	str	r2, [r7, #4]
 8001172:	703b      	strb	r3, [r7, #0]
          _M_construct(__beg, __end, _Tag());
 8001174:	4623      	mov	r3, r4
 8001176:	687a      	ldr	r2, [r7, #4]
 8001178:	68b9      	ldr	r1, [r7, #8]
 800117a:	68f8      	ldr	r0, [r7, #12]
 800117c:	f000 f874 	bl	8001268 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
	}
 8001180:	bf00      	nop
 8001182:	371c      	adds	r7, #28
 8001184:	46bd      	mov	sp, r7
 8001186:	bd90      	pop	{r4, r7, pc}

08001188 <_ZSt8distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 8001188:	b5b0      	push	{r4, r5, r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 8001192:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8001194:	1d3b      	adds	r3, r7, #4
 8001196:	4618      	mov	r0, r3
 8001198:	f000 f8be 	bl	8001318 <_ZSt19__iterator_categoryIPKcENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__distance(__first, __last,
 800119c:	462a      	mov	r2, r5
 800119e:	6839      	ldr	r1, [r7, #0]
 80011a0:	4620      	mov	r0, r4
 80011a2:	f000 f8c3 	bl	800132c <_ZSt10__distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>
 80011a6:	4603      	mov	r3, r0
    }
 80011a8:	4618      	mov	r0, r3
 80011aa:	3708      	adds	r7, #8
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bdb0      	pop	{r4, r5, r7, pc}

080011b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
      void
      basic_string<_CharT, _Traits, _Alloc>::
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b086      	sub	sp, #24
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	60f8      	str	r0, [r7, #12]
 80011b8:	60b9      	str	r1, [r7, #8]
 80011ba:	607a      	str	r2, [r7, #4]
 80011bc:	703b      	strb	r3, [r7, #0]
      _M_construct(_InIterator __beg, _InIterator __end,
		   std::forward_iterator_tag)
      {
	// NB: Not required, but considered best practice.
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
 80011be:	68b8      	ldr	r0, [r7, #8]
 80011c0:	f000 f89a 	bl	80012f8 <_ZN9__gnu_cxx17__is_null_pointerIKcEEbPT_>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d005      	beq.n	80011d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x26>
 80011ca:	68ba      	ldr	r2, [r7, #8]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	429a      	cmp	r2, r3
 80011d0:	d001      	beq.n	80011d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x26>
 80011d2:	2301      	movs	r3, #1
 80011d4:	e000      	b.n	80011d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x28>
 80011d6:	2300      	movs	r3, #0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d002      	beq.n	80011e2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x32>
	  std::__throw_logic_error(__N("basic_string::"
 80011dc:	4817      	ldr	r0, [pc, #92]	; (800123c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x8c>)
 80011de:	f002 fb78 	bl	80038d2 <_ZSt19__throw_logic_errorPKc>
				       "_M_construct null not valid"));

	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 80011e2:	6879      	ldr	r1, [r7, #4]
 80011e4:	68b8      	ldr	r0, [r7, #8]
 80011e6:	f7ff ffcf 	bl	8001188 <_ZSt8distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_>
 80011ea:	4603      	mov	r3, r0
 80011ec:	617b      	str	r3, [r7, #20]

	if (__dnew > size_type(_S_local_capacity))
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	2b0f      	cmp	r3, #15
 80011f2:	d910      	bls.n	8001216 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x66>
	  {
	    _M_data(_M_create(__dnew, size_type(0)));
 80011f4:	f107 0314 	add.w	r3, r7, #20
 80011f8:	2200      	movs	r2, #0
 80011fa:	4619      	mov	r1, r3
 80011fc:	68f8      	ldr	r0, [r7, #12]
 80011fe:	f002 fb7f 	bl	8003900 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8001202:	4603      	mov	r3, r0
 8001204:	4619      	mov	r1, r3
 8001206:	68f8      	ldr	r0, [r7, #12]
 8001208:	f002 fb6d 	bl	80038e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_capacity(__dnew);
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	4619      	mov	r1, r3
 8001210:	68f8      	ldr	r0, [r7, #12]
 8001212:	f002 fb6e 	bl	80038f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>
	  }

	// Check for out_of_range and length_error exceptions.
	__try
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
 8001216:	68f8      	ldr	r0, [r7, #12]
 8001218:	f002 fb67 	bl	80038ea <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 800121c:	4603      	mov	r3, r0
 800121e:	687a      	ldr	r2, [r7, #4]
 8001220:	68b9      	ldr	r1, [r7, #8]
 8001222:	4618      	mov	r0, r3
 8001224:	f002 fbcd 	bl	80039c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
	  {
	    _M_dispose();
	    __throw_exception_again;
	  }

	_M_set_length(__dnew);
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	4619      	mov	r1, r3
 800122c:	68f8      	ldr	r0, [r7, #12]
 800122e:	f002 fb62 	bl	80038f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
      }
 8001232:	bf00      	nop
 8001234:	3718      	adds	r7, #24
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	080045dc 	.word	0x080045dc

08001240 <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>:
    distance(_InputIterator __first, _InputIterator __last)
 8001240:	b5b0      	push	{r4, r5, r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	6039      	str	r1, [r7, #0]
      return std::__distance(__first, __last,
 800124a:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 800124c:	1d3b      	adds	r3, r7, #4
 800124e:	4618      	mov	r0, r3
 8001250:	f000 f88b 	bl	800136a <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
      return std::__distance(__first, __last,
 8001254:	462a      	mov	r2, r5
 8001256:	6839      	ldr	r1, [r7, #0]
 8001258:	4620      	mov	r0, r4
 800125a:	f000 f890 	bl	800137e <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>
 800125e:	4603      	mov	r3, r0
    }
 8001260:	4618      	mov	r0, r3
 8001262:	3708      	adds	r7, #8
 8001264:	46bd      	mov	sp, r7
 8001266:	bdb0      	pop	{r4, r5, r7, pc}

08001268 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
      basic_string<_CharT, _Traits, _Alloc>::
 8001268:	b580      	push	{r7, lr}
 800126a:	b086      	sub	sp, #24
 800126c:	af00      	add	r7, sp, #0
 800126e:	60f8      	str	r0, [r7, #12]
 8001270:	60b9      	str	r1, [r7, #8]
 8001272:	607a      	str	r2, [r7, #4]
 8001274:	703b      	strb	r3, [r7, #0]
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
 8001276:	68b8      	ldr	r0, [r7, #8]
 8001278:	f000 f867 	bl	800134a <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d005      	beq.n	800128e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x26>
 8001282:	68ba      	ldr	r2, [r7, #8]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	429a      	cmp	r2, r3
 8001288:	d001      	beq.n	800128e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x26>
 800128a:	2301      	movs	r3, #1
 800128c:	e000      	b.n	8001290 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x28>
 800128e:	2300      	movs	r3, #0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d002      	beq.n	800129a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x32>
	  std::__throw_logic_error(__N("basic_string::"
 8001294:	4817      	ldr	r0, [pc, #92]	; (80012f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x8c>)
 8001296:	f002 fb1c 	bl	80038d2 <_ZSt19__throw_logic_errorPKc>
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 800129a:	6879      	ldr	r1, [r7, #4]
 800129c:	68b8      	ldr	r0, [r7, #8]
 800129e:	f7ff ffcf 	bl	8001240 <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>
 80012a2:	4603      	mov	r3, r0
 80012a4:	617b      	str	r3, [r7, #20]
	if (__dnew > size_type(_S_local_capacity))
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	2b0f      	cmp	r3, #15
 80012aa:	d910      	bls.n	80012ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x66>
	    _M_data(_M_create(__dnew, size_type(0)));
 80012ac:	f107 0314 	add.w	r3, r7, #20
 80012b0:	2200      	movs	r2, #0
 80012b2:	4619      	mov	r1, r3
 80012b4:	68f8      	ldr	r0, [r7, #12]
 80012b6:	f002 fb23 	bl	8003900 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80012ba:	4603      	mov	r3, r0
 80012bc:	4619      	mov	r1, r3
 80012be:	68f8      	ldr	r0, [r7, #12]
 80012c0:	f002 fb11 	bl	80038e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_capacity(__dnew);
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	4619      	mov	r1, r3
 80012c8:	68f8      	ldr	r0, [r7, #12]
 80012ca:	f002 fb12 	bl	80038f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
 80012ce:	68f8      	ldr	r0, [r7, #12]
 80012d0:	f002 fb0b 	bl	80038ea <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 80012d4:	4603      	mov	r3, r0
 80012d6:	687a      	ldr	r2, [r7, #4]
 80012d8:	68b9      	ldr	r1, [r7, #8]
 80012da:	4618      	mov	r0, r3
 80012dc:	f002 fb6c 	bl	80039b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
	_M_set_length(__dnew);
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	4619      	mov	r1, r3
 80012e4:	68f8      	ldr	r0, [r7, #12]
 80012e6:	f002 fb06 	bl	80038f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
      }
 80012ea:	bf00      	nop
 80012ec:	3718      	adds	r7, #24
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	080045dc 	.word	0x080045dc

080012f8 <_ZN9__gnu_cxx17__is_null_pointerIKcEEbPT_>:


  // For use in string and vstring.
  template<typename _Type>
    inline bool
    __is_null_pointer(_Type* __ptr)
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
    { return __ptr == 0; }
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2b00      	cmp	r3, #0
 8001304:	bf0c      	ite	eq
 8001306:	2301      	moveq	r3, #1
 8001308:	2300      	movne	r3, #0
 800130a:	b2db      	uxtb	r3, r3
 800130c:	4618      	mov	r0, r3
 800130e:	370c      	adds	r7, #12
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <_ZSt19__iterator_categoryIPKcENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8001320:	4618      	mov	r0, r3
 8001322:	370c      	adds	r7, #12
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr

0800132c <_ZSt10__distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800132c:	b480      	push	{r7}
 800132e:	b085      	sub	sp, #20
 8001330:	af00      	add	r7, sp, #0
 8001332:	60f8      	str	r0, [r7, #12]
 8001334:	60b9      	str	r1, [r7, #8]
 8001336:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8001338:	68ba      	ldr	r2, [r7, #8]
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	1ad3      	subs	r3, r2, r3
    }
 800133e:	4618      	mov	r0, r3
 8001340:	3714      	adds	r7, #20
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr

0800134a <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>:
    __is_null_pointer(_Type* __ptr)
 800134a:	b480      	push	{r7}
 800134c:	b083      	sub	sp, #12
 800134e:	af00      	add	r7, sp, #0
 8001350:	6078      	str	r0, [r7, #4]
    { return __ptr == 0; }
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2b00      	cmp	r3, #0
 8001356:	bf0c      	ite	eq
 8001358:	2301      	moveq	r3, #1
 800135a:	2300      	movne	r3, #0
 800135c:	b2db      	uxtb	r3, r3
 800135e:	4618      	mov	r0, r3
 8001360:	370c      	adds	r7, #12
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr

0800136a <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
    __iterator_category(const _Iter&)
 800136a:	b480      	push	{r7}
 800136c:	b083      	sub	sp, #12
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8001372:	4618      	mov	r0, r3
 8001374:	370c      	adds	r7, #12
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr

0800137e <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800137e:	b480      	push	{r7}
 8001380:	b085      	sub	sp, #20
 8001382:	af00      	add	r7, sp, #0
 8001384:	60f8      	str	r0, [r7, #12]
 8001386:	60b9      	str	r1, [r7, #8]
 8001388:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 800138a:	68ba      	ldr	r2, [r7, #8]
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	1ad3      	subs	r3, r2, r3
    }
 8001390:	4618      	mov	r0, r3
 8001392:	3714      	adds	r7, #20
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr

0800139c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013a0:	e7fe      	b.n	80013a0 <NMI_Handler+0x4>

080013a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013a2:	b480      	push	{r7}
 80013a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013a6:	e7fe      	b.n	80013a6 <HardFault_Handler+0x4>

080013a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013ac:	e7fe      	b.n	80013ac <MemManage_Handler+0x4>

080013ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ae:	b480      	push	{r7}
 80013b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013b2:	e7fe      	b.n	80013b2 <BusFault_Handler+0x4>

080013b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013b8:	e7fe      	b.n	80013b8 <UsageFault_Handler+0x4>

080013ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013ba:	b480      	push	{r7}
 80013bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013be:	bf00      	nop
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr

080013c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013cc:	bf00      	nop
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr

080013d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013d6:	b480      	push	{r7}
 80013d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013da:	bf00      	nop
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr

080013e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013e8:	bf00      	nop
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr

080013f2 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80013f2:	b480      	push	{r7}
 80013f4:	af00      	add	r7, sp, #0

  /* USER CODE END UART4_IRQn 0 */
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80013f6:	bf00      	nop
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
	return 1;
 8001404:	2301      	movs	r3, #1
}
 8001406:	4618      	mov	r0, r3
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr

08001410 <_kill>:

int _kill(int pid, int sig)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800141a:	f002 fbdf 	bl	8003bdc <__errno>
 800141e:	4603      	mov	r3, r0
 8001420:	2216      	movs	r2, #22
 8001422:	601a      	str	r2, [r3, #0]
	return -1;
 8001424:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001428:	4618      	mov	r0, r3
 800142a:	3708      	adds	r7, #8
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}

08001430 <_exit>:

void _exit (int status)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001438:	f04f 31ff 	mov.w	r1, #4294967295
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	f7ff ffe7 	bl	8001410 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001442:	e7fe      	b.n	8001442 <_exit+0x12>

08001444 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b086      	sub	sp, #24
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800144c:	4a14      	ldr	r2, [pc, #80]	; (80014a0 <_sbrk+0x5c>)
 800144e:	4b15      	ldr	r3, [pc, #84]	; (80014a4 <_sbrk+0x60>)
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001458:	4b13      	ldr	r3, [pc, #76]	; (80014a8 <_sbrk+0x64>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d102      	bne.n	8001466 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001460:	4b11      	ldr	r3, [pc, #68]	; (80014a8 <_sbrk+0x64>)
 8001462:	4a12      	ldr	r2, [pc, #72]	; (80014ac <_sbrk+0x68>)
 8001464:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001466:	4b10      	ldr	r3, [pc, #64]	; (80014a8 <_sbrk+0x64>)
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4413      	add	r3, r2
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	429a      	cmp	r2, r3
 8001472:	d207      	bcs.n	8001484 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001474:	f002 fbb2 	bl	8003bdc <__errno>
 8001478:	4603      	mov	r3, r0
 800147a:	220c      	movs	r2, #12
 800147c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800147e:	f04f 33ff 	mov.w	r3, #4294967295
 8001482:	e009      	b.n	8001498 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001484:	4b08      	ldr	r3, [pc, #32]	; (80014a8 <_sbrk+0x64>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800148a:	4b07      	ldr	r3, [pc, #28]	; (80014a8 <_sbrk+0x64>)
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4413      	add	r3, r2
 8001492:	4a05      	ldr	r2, [pc, #20]	; (80014a8 <_sbrk+0x64>)
 8001494:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001496:	68fb      	ldr	r3, [r7, #12]
}
 8001498:	4618      	mov	r0, r3
 800149a:	3718      	adds	r7, #24
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	20020000 	.word	0x20020000
 80014a4:	00000400 	.word	0x00000400
 80014a8:	200000d8 	.word	0x200000d8
 80014ac:	20000108 	.word	0x20000108

080014b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014b4:	4b06      	ldr	r3, [pc, #24]	; (80014d0 <SystemInit+0x20>)
 80014b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014ba:	4a05      	ldr	r2, [pc, #20]	; (80014d0 <SystemInit+0x20>)
 80014bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014c4:	bf00      	nop
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	e000ed00 	.word	0xe000ed00

080014d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80014d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800150c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014d8:	480d      	ldr	r0, [pc, #52]	; (8001510 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80014da:	490e      	ldr	r1, [pc, #56]	; (8001514 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014dc:	4a0e      	ldr	r2, [pc, #56]	; (8001518 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014e0:	e002      	b.n	80014e8 <LoopCopyDataInit>

080014e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014e6:	3304      	adds	r3, #4

080014e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014ec:	d3f9      	bcc.n	80014e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ee:	4a0b      	ldr	r2, [pc, #44]	; (800151c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80014f0:	4c0b      	ldr	r4, [pc, #44]	; (8001520 <LoopFillZerobss+0x26>)
  movs r3, #0
 80014f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014f4:	e001      	b.n	80014fa <LoopFillZerobss>

080014f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014f8:	3204      	adds	r2, #4

080014fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014fc:	d3fb      	bcc.n	80014f6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80014fe:	f7ff ffd7 	bl	80014b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001502:	f002 fb71 	bl	8003be8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001506:	f7ff fb43 	bl	8000b90 <main>
  bx  lr    
 800150a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800150c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001510:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001514:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001518:	080046e8 	.word	0x080046e8
  ldr r2, =_sbss
 800151c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001520:	20000108 	.word	0x20000108

08001524 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001524:	e7fe      	b.n	8001524 <CAN1_RX0_IRQHandler>
	...

08001528 <__NVIC_GetPriorityGrouping>:
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800152c:	4b04      	ldr	r3, [pc, #16]	; (8001540 <__NVIC_GetPriorityGrouping+0x18>)
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	0a1b      	lsrs	r3, r3, #8
 8001532:	f003 0307 	and.w	r3, r3, #7
}
 8001536:	4618      	mov	r0, r3
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr
 8001540:	e000ed00 	.word	0xe000ed00

08001544 <__NVIC_EnableIRQ>:
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	4603      	mov	r3, r0
 800154c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800154e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001552:	2b00      	cmp	r3, #0
 8001554:	db0b      	blt.n	800156e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001556:	79fb      	ldrb	r3, [r7, #7]
 8001558:	f003 021f 	and.w	r2, r3, #31
 800155c:	4907      	ldr	r1, [pc, #28]	; (800157c <__NVIC_EnableIRQ+0x38>)
 800155e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001562:	095b      	lsrs	r3, r3, #5
 8001564:	2001      	movs	r0, #1
 8001566:	fa00 f202 	lsl.w	r2, r0, r2
 800156a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800156e:	bf00      	nop
 8001570:	370c      	adds	r7, #12
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	e000e100 	.word	0xe000e100

08001580 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	4603      	mov	r3, r0
 8001588:	6039      	str	r1, [r7, #0]
 800158a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800158c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001590:	2b00      	cmp	r3, #0
 8001592:	db0a      	blt.n	80015aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	b2da      	uxtb	r2, r3
 8001598:	490c      	ldr	r1, [pc, #48]	; (80015cc <__NVIC_SetPriority+0x4c>)
 800159a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159e:	0112      	lsls	r2, r2, #4
 80015a0:	b2d2      	uxtb	r2, r2
 80015a2:	440b      	add	r3, r1
 80015a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015a8:	e00a      	b.n	80015c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	b2da      	uxtb	r2, r3
 80015ae:	4908      	ldr	r1, [pc, #32]	; (80015d0 <__NVIC_SetPriority+0x50>)
 80015b0:	79fb      	ldrb	r3, [r7, #7]
 80015b2:	f003 030f 	and.w	r3, r3, #15
 80015b6:	3b04      	subs	r3, #4
 80015b8:	0112      	lsls	r2, r2, #4
 80015ba:	b2d2      	uxtb	r2, r2
 80015bc:	440b      	add	r3, r1
 80015be:	761a      	strb	r2, [r3, #24]
}
 80015c0:	bf00      	nop
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr
 80015cc:	e000e100 	.word	0xe000e100
 80015d0:	e000ed00 	.word	0xe000ed00

080015d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b089      	sub	sp, #36	; 0x24
 80015d8:	af00      	add	r7, sp, #0
 80015da:	60f8      	str	r0, [r7, #12]
 80015dc:	60b9      	str	r1, [r7, #8]
 80015de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	f003 0307 	and.w	r3, r3, #7
 80015e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	f1c3 0307 	rsb	r3, r3, #7
 80015ee:	2b04      	cmp	r3, #4
 80015f0:	bf28      	it	cs
 80015f2:	2304      	movcs	r3, #4
 80015f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	3304      	adds	r3, #4
 80015fa:	2b06      	cmp	r3, #6
 80015fc:	d902      	bls.n	8001604 <NVIC_EncodePriority+0x30>
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	3b03      	subs	r3, #3
 8001602:	e000      	b.n	8001606 <NVIC_EncodePriority+0x32>
 8001604:	2300      	movs	r3, #0
 8001606:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001608:	2201      	movs	r2, #1
 800160a:	69bb      	ldr	r3, [r7, #24]
 800160c:	fa02 f303 	lsl.w	r3, r2, r3
 8001610:	1e5a      	subs	r2, r3, #1
 8001612:	68bb      	ldr	r3, [r7, #8]
 8001614:	401a      	ands	r2, r3
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800161a:	2101      	movs	r1, #1
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	fa01 f303 	lsl.w	r3, r1, r3
 8001622:	1e59      	subs	r1, r3, #1
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	400b      	ands	r3, r1
         );
 8001628:	4313      	orrs	r3, r2
}
 800162a:	4618      	mov	r0, r3
 800162c:	3724      	adds	r7, #36	; 0x24
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
	...

08001638 <LL_AHB1_GRP1_EnableClock>:
{
 8001638:	b480      	push	{r7}
 800163a:	b085      	sub	sp, #20
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001640:	4b08      	ldr	r3, [pc, #32]	; (8001664 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001642:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001644:	4907      	ldr	r1, [pc, #28]	; (8001664 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4313      	orrs	r3, r2
 800164a:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800164c:	4b05      	ldr	r3, [pc, #20]	; (8001664 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800164e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	4013      	ands	r3, r2
 8001654:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001656:	68fb      	ldr	r3, [r7, #12]
}
 8001658:	bf00      	nop
 800165a:	3714      	adds	r7, #20
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr
 8001664:	40023800 	.word	0x40023800

08001668 <LL_APB2_GRP1_EnableClock>:
{
 8001668:	b480      	push	{r7}
 800166a:	b085      	sub	sp, #20
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001670:	4b08      	ldr	r3, [pc, #32]	; (8001694 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001672:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001674:	4907      	ldr	r1, [pc, #28]	; (8001694 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4313      	orrs	r3, r2
 800167a:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800167c:	4b05      	ldr	r3, [pc, #20]	; (8001694 <LL_APB2_GRP1_EnableClock+0x2c>)
 800167e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	4013      	ands	r3, r2
 8001684:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001686:	68fb      	ldr	r3, [r7, #12]
}
 8001688:	bf00      	nop
 800168a:	3714      	adds	r7, #20
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr
 8001694:	40023800 	.word	0x40023800

08001698 <LL_DMA_SetDataTransferDirection>:
{
 8001698:	b480      	push	{r7}
 800169a:	b085      	sub	sp, #20
 800169c:	af00      	add	r7, sp, #0
 800169e:	60f8      	str	r0, [r7, #12]
 80016a0:	60b9      	str	r1, [r7, #8]
 80016a2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 80016a4:	4a0d      	ldr	r2, [pc, #52]	; (80016dc <LL_DMA_SetDataTransferDirection+0x44>)
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	4413      	add	r3, r2
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	461a      	mov	r2, r3
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	4413      	add	r3, r2
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80016b8:	4908      	ldr	r1, [pc, #32]	; (80016dc <LL_DMA_SetDataTransferDirection+0x44>)
 80016ba:	68bb      	ldr	r3, [r7, #8]
 80016bc:	440b      	add	r3, r1
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	4619      	mov	r1, r3
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	440b      	add	r3, r1
 80016c6:	4619      	mov	r1, r3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	4313      	orrs	r3, r2
 80016cc:	600b      	str	r3, [r1, #0]
}
 80016ce:	bf00      	nop
 80016d0:	3714      	adds	r7, #20
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	08004650 	.word	0x08004650

080016e0 <LL_DMA_SetMode>:
{
 80016e0:	b480      	push	{r7}
 80016e2:	b085      	sub	sp, #20
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	60f8      	str	r0, [r7, #12]
 80016e8:	60b9      	str	r1, [r7, #8]
 80016ea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 80016ec:	4a0d      	ldr	r2, [pc, #52]	; (8001724 <LL_DMA_SetMode+0x44>)
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	4413      	add	r3, r2
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	461a      	mov	r2, r3
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	4413      	add	r3, r2
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f423 7290 	bic.w	r2, r3, #288	; 0x120
 8001700:	4908      	ldr	r1, [pc, #32]	; (8001724 <LL_DMA_SetMode+0x44>)
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	440b      	add	r3, r1
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	4619      	mov	r1, r3
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	440b      	add	r3, r1
 800170e:	4619      	mov	r1, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	4313      	orrs	r3, r2
 8001714:	600b      	str	r3, [r1, #0]
}
 8001716:	bf00      	nop
 8001718:	3714      	adds	r7, #20
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	08004650 	.word	0x08004650

08001728 <LL_DMA_SetPeriphIncMode>:
{
 8001728:	b480      	push	{r7}
 800172a:	b085      	sub	sp, #20
 800172c:	af00      	add	r7, sp, #0
 800172e:	60f8      	str	r0, [r7, #12]
 8001730:	60b9      	str	r1, [r7, #8]
 8001732:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 8001734:	4a0d      	ldr	r2, [pc, #52]	; (800176c <LL_DMA_SetPeriphIncMode+0x44>)
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	4413      	add	r3, r2
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	461a      	mov	r2, r3
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	4413      	add	r3, r2
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001748:	4908      	ldr	r1, [pc, #32]	; (800176c <LL_DMA_SetPeriphIncMode+0x44>)
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	440b      	add	r3, r1
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	4619      	mov	r1, r3
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	440b      	add	r3, r1
 8001756:	4619      	mov	r1, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	4313      	orrs	r3, r2
 800175c:	600b      	str	r3, [r1, #0]
}
 800175e:	bf00      	nop
 8001760:	3714      	adds	r7, #20
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	08004650 	.word	0x08004650

08001770 <LL_DMA_SetMemoryIncMode>:
{
 8001770:	b480      	push	{r7}
 8001772:	b085      	sub	sp, #20
 8001774:	af00      	add	r7, sp, #0
 8001776:	60f8      	str	r0, [r7, #12]
 8001778:	60b9      	str	r1, [r7, #8]
 800177a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 800177c:	4a0d      	ldr	r2, [pc, #52]	; (80017b4 <LL_DMA_SetMemoryIncMode+0x44>)
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	4413      	add	r3, r2
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	461a      	mov	r2, r3
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	4413      	add	r3, r2
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001790:	4908      	ldr	r1, [pc, #32]	; (80017b4 <LL_DMA_SetMemoryIncMode+0x44>)
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	440b      	add	r3, r1
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	4619      	mov	r1, r3
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	440b      	add	r3, r1
 800179e:	4619      	mov	r1, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	600b      	str	r3, [r1, #0]
}
 80017a6:	bf00      	nop
 80017a8:	3714      	adds	r7, #20
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	08004650 	.word	0x08004650

080017b8 <LL_DMA_SetPeriphSize>:
{
 80017b8:	b480      	push	{r7}
 80017ba:	b085      	sub	sp, #20
 80017bc:	af00      	add	r7, sp, #0
 80017be:	60f8      	str	r0, [r7, #12]
 80017c0:	60b9      	str	r1, [r7, #8]
 80017c2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 80017c4:	4a0d      	ldr	r2, [pc, #52]	; (80017fc <LL_DMA_SetPeriphSize+0x44>)
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	4413      	add	r3, r2
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	461a      	mov	r2, r3
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	4413      	add	r3, r2
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80017d8:	4908      	ldr	r1, [pc, #32]	; (80017fc <LL_DMA_SetPeriphSize+0x44>)
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	440b      	add	r3, r1
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	4619      	mov	r1, r3
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	440b      	add	r3, r1
 80017e6:	4619      	mov	r1, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	4313      	orrs	r3, r2
 80017ec:	600b      	str	r3, [r1, #0]
}
 80017ee:	bf00      	nop
 80017f0:	3714      	adds	r7, #20
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	08004650 	.word	0x08004650

08001800 <LL_DMA_SetMemorySize>:
{
 8001800:	b480      	push	{r7}
 8001802:	b085      	sub	sp, #20
 8001804:	af00      	add	r7, sp, #0
 8001806:	60f8      	str	r0, [r7, #12]
 8001808:	60b9      	str	r1, [r7, #8]
 800180a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 800180c:	4a0d      	ldr	r2, [pc, #52]	; (8001844 <LL_DMA_SetMemorySize+0x44>)
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	4413      	add	r3, r2
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	461a      	mov	r2, r3
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	4413      	add	r3, r2
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 8001820:	4908      	ldr	r1, [pc, #32]	; (8001844 <LL_DMA_SetMemorySize+0x44>)
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	440b      	add	r3, r1
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	4619      	mov	r1, r3
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	440b      	add	r3, r1
 800182e:	4619      	mov	r1, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	4313      	orrs	r3, r2
 8001834:	600b      	str	r3, [r1, #0]
}
 8001836:	bf00      	nop
 8001838:	3714      	adds	r7, #20
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	08004650 	.word	0x08004650

08001848 <LL_DMA_SetStreamPriorityLevel>:
{
 8001848:	b480      	push	{r7}
 800184a:	b085      	sub	sp, #20
 800184c:	af00      	add	r7, sp, #0
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	60b9      	str	r1, [r7, #8]
 8001852:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 8001854:	4a0d      	ldr	r2, [pc, #52]	; (800188c <LL_DMA_SetStreamPriorityLevel+0x44>)
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	4413      	add	r3, r2
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	461a      	mov	r2, r3
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	4413      	add	r3, r2
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001868:	4908      	ldr	r1, [pc, #32]	; (800188c <LL_DMA_SetStreamPriorityLevel+0x44>)
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	440b      	add	r3, r1
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	4619      	mov	r1, r3
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	440b      	add	r3, r1
 8001876:	4619      	mov	r1, r3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	4313      	orrs	r3, r2
 800187c:	600b      	str	r3, [r1, #0]
}
 800187e:	bf00      	nop
 8001880:	3714      	adds	r7, #20
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	08004650 	.word	0x08004650

08001890 <LL_DMA_SetChannelSelection>:
{
 8001890:	b480      	push	{r7}
 8001892:	b085      	sub	sp, #20
 8001894:	af00      	add	r7, sp, #0
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	60b9      	str	r1, [r7, #8]
 800189a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 800189c:	4a0d      	ldr	r2, [pc, #52]	; (80018d4 <LL_DMA_SetChannelSelection+0x44>)
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	4413      	add	r3, r2
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	461a      	mov	r2, r3
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	4413      	add	r3, r2
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80018b0:	4908      	ldr	r1, [pc, #32]	; (80018d4 <LL_DMA_SetChannelSelection+0x44>)
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	440b      	add	r3, r1
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	4619      	mov	r1, r3
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	440b      	add	r3, r1
 80018be:	4619      	mov	r1, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	4313      	orrs	r3, r2
 80018c4:	600b      	str	r3, [r1, #0]
}
 80018c6:	bf00      	nop
 80018c8:	3714      	adds	r7, #20
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	08004650 	.word	0x08004650

080018d8 <LL_DMA_SetMemoryBurstxfer>:
{
 80018d8:	b480      	push	{r7}
 80018da:	b085      	sub	sp, #20
 80018dc:	af00      	add	r7, sp, #0
 80018de:	60f8      	str	r0, [r7, #12]
 80018e0:	60b9      	str	r1, [r7, #8]
 80018e2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MBURST, Mburst);
 80018e4:	4a0d      	ldr	r2, [pc, #52]	; (800191c <LL_DMA_SetMemoryBurstxfer+0x44>)
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	4413      	add	r3, r2
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	461a      	mov	r2, r3
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	4413      	add	r3, r2
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f023 72c0 	bic.w	r2, r3, #25165824	; 0x1800000
 80018f8:	4908      	ldr	r1, [pc, #32]	; (800191c <LL_DMA_SetMemoryBurstxfer+0x44>)
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	440b      	add	r3, r1
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	4619      	mov	r1, r3
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	440b      	add	r3, r1
 8001906:	4619      	mov	r1, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	4313      	orrs	r3, r2
 800190c:	600b      	str	r3, [r1, #0]
}
 800190e:	bf00      	nop
 8001910:	3714      	adds	r7, #20
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	08004650 	.word	0x08004650

08001920 <LL_DMA_SetPeriphBurstxfer>:
{
 8001920:	b480      	push	{r7}
 8001922:	b085      	sub	sp, #20
 8001924:	af00      	add	r7, sp, #0
 8001926:	60f8      	str	r0, [r7, #12]
 8001928:	60b9      	str	r1, [r7, #8]
 800192a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PBURST, Pburst);
 800192c:	4a0d      	ldr	r2, [pc, #52]	; (8001964 <LL_DMA_SetPeriphBurstxfer+0x44>)
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	4413      	add	r3, r2
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	461a      	mov	r2, r3
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	4413      	add	r3, r2
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f423 02c0 	bic.w	r2, r3, #6291456	; 0x600000
 8001940:	4908      	ldr	r1, [pc, #32]	; (8001964 <LL_DMA_SetPeriphBurstxfer+0x44>)
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	440b      	add	r3, r1
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	4619      	mov	r1, r3
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	440b      	add	r3, r1
 800194e:	4619      	mov	r1, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	4313      	orrs	r3, r2
 8001954:	600b      	str	r3, [r1, #0]
}
 8001956:	bf00      	nop
 8001958:	3714      	adds	r7, #20
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	08004650 	.word	0x08004650

08001968 <LL_DMA_EnableFifoMode>:
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 8001972:	4a0c      	ldr	r2, [pc, #48]	; (80019a4 <LL_DMA_EnableFifoMode+0x3c>)
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	4413      	add	r3, r2
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	461a      	mov	r2, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	4413      	add	r3, r2
 8001980:	695b      	ldr	r3, [r3, #20]
 8001982:	4908      	ldr	r1, [pc, #32]	; (80019a4 <LL_DMA_EnableFifoMode+0x3c>)
 8001984:	683a      	ldr	r2, [r7, #0]
 8001986:	440a      	add	r2, r1
 8001988:	7812      	ldrb	r2, [r2, #0]
 800198a:	4611      	mov	r1, r2
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	440a      	add	r2, r1
 8001990:	f043 0304 	orr.w	r3, r3, #4
 8001994:	6153      	str	r3, [r2, #20]
}
 8001996:	bf00      	nop
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	08004650 	.word	0x08004650

080019a8 <LL_DMA_SetFIFOThreshold>:
{
 80019a8:	b480      	push	{r7}
 80019aa:	b085      	sub	sp, #20
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	60f8      	str	r0, [r7, #12]
 80019b0:	60b9      	str	r1, [r7, #8]
 80019b2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_FTH, Threshold);
 80019b4:	4a0d      	ldr	r2, [pc, #52]	; (80019ec <LL_DMA_SetFIFOThreshold+0x44>)
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	4413      	add	r3, r2
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	461a      	mov	r2, r3
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	4413      	add	r3, r2
 80019c2:	695b      	ldr	r3, [r3, #20]
 80019c4:	f023 0203 	bic.w	r2, r3, #3
 80019c8:	4908      	ldr	r1, [pc, #32]	; (80019ec <LL_DMA_SetFIFOThreshold+0x44>)
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	440b      	add	r3, r1
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	4619      	mov	r1, r3
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	440b      	add	r3, r1
 80019d6:	4619      	mov	r1, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	4313      	orrs	r3, r2
 80019dc:	614b      	str	r3, [r1, #20]
}
 80019de:	bf00      	nop
 80019e0:	3714      	adds	r7, #20
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	08004650 	.word	0x08004650

080019f0 <LL_ADC_REG_SetSequencerRanks>:
{
 80019f0:	b480      	push	{r7}
 80019f2:	b089      	sub	sp, #36	; 0x24
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	60f8      	str	r0, [r7, #12]
 80019f8:	60b9      	str	r1, [r7, #8]
 80019fa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	332c      	adds	r3, #44	; 0x2c
 8001a00:	4619      	mov	r1, r3
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a08:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001a0c:	61ba      	str	r2, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a0e:	69ba      	ldr	r2, [r7, #24]
 8001a10:	fa92 f2a2 	rbit	r2, r2
 8001a14:	617a      	str	r2, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001a16:	697a      	ldr	r2, [r7, #20]
 8001a18:	fab2 f282 	clz	r2, r2
 8001a1c:	b2d2      	uxtb	r2, r2
 8001a1e:	40d3      	lsrs	r3, r2
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	440b      	add	r3, r1
 8001a24:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(*preg,
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	f003 031f 	and.w	r3, r3, #31
 8001a30:	211f      	movs	r1, #31
 8001a32:	fa01 f303 	lsl.w	r3, r1, r3
 8001a36:	43db      	mvns	r3, r3
 8001a38:	401a      	ands	r2, r3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	f003 011f 	and.w	r1, r3, #31
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	f003 031f 	and.w	r3, r3, #31
 8001a46:	fa01 f303 	lsl.w	r3, r1, r3
 8001a4a:	431a      	orrs	r2, r3
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	601a      	str	r2, [r3, #0]
}
 8001a50:	bf00      	nop
 8001a52:	3724      	adds	r7, #36	; 0x24
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr

08001a5c <LL_ADC_REG_SetFlagEndOfConversion>:
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR2, ADC_CR2_EOCS, EocSelection);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	431a      	orrs	r2, r3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	609a      	str	r2, [r3, #8]
}
 8001a76:	bf00      	nop
 8001a78:	370c      	adds	r7, #12
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr

08001a82 <LL_ADC_SetChannelSamplingTime>:
{
 8001a82:	b480      	push	{r7}
 8001a84:	b08d      	sub	sp, #52	; 0x34
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	60f8      	str	r0, [r7, #12]
 8001a8a:	60b9      	str	r1, [r7, #8]
 8001a8c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	330c      	adds	r3, #12
 8001a92:	4619      	mov	r1, r3
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a9a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a9e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	fa92 f2a2 	rbit	r2, r2
 8001aa6:	617a      	str	r2, [r7, #20]
  return result;
 8001aa8:	697a      	ldr	r2, [r7, #20]
 8001aaa:	fab2 f282 	clz	r2, r2
 8001aae:	b2d2      	uxtb	r2, r2
 8001ab0:	40d3      	lsrs	r3, r2
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	440b      	add	r3, r1
 8001ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(*preg,
 8001ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8001ac2:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 8001ac6:	6239      	str	r1, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac8:	6a39      	ldr	r1, [r7, #32]
 8001aca:	fa91 f1a1 	rbit	r1, r1
 8001ace:	61f9      	str	r1, [r7, #28]
  return result;
 8001ad0:	69f9      	ldr	r1, [r7, #28]
 8001ad2:	fab1 f181 	clz	r1, r1
 8001ad6:	b2c9      	uxtb	r1, r1
 8001ad8:	40cb      	lsrs	r3, r1
 8001ada:	2107      	movs	r1, #7
 8001adc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae0:	43db      	mvns	r3, r3
 8001ae2:	401a      	ands	r2, r3
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8001aea:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 8001aee:	62b9      	str	r1, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001af2:	fa91 f1a1 	rbit	r1, r1
 8001af6:	6279      	str	r1, [r7, #36]	; 0x24
  return result;
 8001af8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001afa:	fab1 f181 	clz	r1, r1
 8001afe:	b2c9      	uxtb	r1, r1
 8001b00:	40cb      	lsrs	r3, r1
 8001b02:	6879      	ldr	r1, [r7, #4]
 8001b04:	fa01 f303 	lsl.w	r3, r1, r3
 8001b08:	431a      	orrs	r2, r3
 8001b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b0c:	601a      	str	r2, [r3, #0]
}
 8001b0e:	bf00      	nop
 8001b10:	3734      	adds	r7, #52	; 0x34
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr

08001b1a <LL_ADC_Enable>:
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	b083      	sub	sp, #12
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	f043 0201 	orr.w	r2, r3, #1
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	609a      	str	r2, [r3, #8]
}
 8001b2e:	bf00      	nop
 8001b30:	370c      	adds	r7, #12
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr

08001b3a <LL_ADC_IsEnabled>:
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	b083      	sub	sp, #12
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	f003 0301 	and.w	r3, r3, #1
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	bf0c      	ite	eq
 8001b4e:	2301      	moveq	r3, #1
 8001b50:	2300      	movne	r3, #0
 8001b52:	b2db      	uxtb	r3, r3
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	370c      	adds	r7, #12
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr

08001b60 <LL_ADC_REG_StartConversionSWStart>:
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_SWSTART);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	609a      	str	r2, [r3, #8]
}
 8001b74:	bf00      	nop
 8001b76:	370c      	adds	r7, #12
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr

08001b80 <LL_ADC_EnableIT_EOCS>:
  * @rmtoll CR1      EOCIE          LL_ADC_EnableIT_EOCS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_EOCS(ADC_TypeDef *ADCx)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f043 0220 	orr.w	r2, r3, #32
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	605a      	str	r2, [r3, #4]
}
 8001b94:	bf00      	nop
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <LL_ADC_EnableIT_OVR>:
  * @rmtoll CR1      OVRIE          LL_ADC_EnableIT_OVR
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_OVR(ADC_TypeDef *ADCx)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR1, LL_ADC_IT_OVR);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	605a      	str	r2, [r3, #4]
}
 8001bb4:	bf00      	nop
 8001bb6:	370c      	adds	r7, #12
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr

08001bc0 <_ZN8UHAL_ADC6enableEv>:
  *         ADC internal analog stabilization is required before performing a
  *         ADC conversion start.
  *         Refer to device datasheet, parameter tSTAB.
**/

void UHAL_ADC::enable() {
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
   LL_ADC_Enable(thisInstance);
 8001bc4:	4808      	ldr	r0, [pc, #32]	; (8001be8 <_ZN8UHAL_ADC6enableEv+0x28>)
 8001bc6:	f7ff ffa8 	bl	8001b1a <LL_ADC_Enable>
    waitUntil(LL_ADC_IsEnabled(ADC1));
 8001bca:	4807      	ldr	r0, [pc, #28]	; (8001be8 <_ZN8UHAL_ADC6enableEv+0x28>)
 8001bcc:	f7ff ffb5 	bl	8001b3a <LL_ADC_IsEnabled>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	bf0c      	ite	eq
 8001bd6:	2301      	moveq	r3, #1
 8001bd8:	2300      	movne	r3, #0
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d000      	beq.n	8001be2 <_ZN8UHAL_ADC6enableEv+0x22>
 8001be0:	e7f3      	b.n	8001bca <_ZN8UHAL_ADC6enableEv+0xa>
}
 8001be2:	bf00      	nop
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	40012000 	.word	0x40012000

08001bec <_ZN8UHAL_ADC15enableInterruptEv>:

void UHAL_ADC::disable() {
    LL_ADC_Disable(thisInstance);
}

void UHAL_ADC::enableInterrupt() {
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
            __SFI auto clear() {
                LL_ADC_ClearFlag_EOCS(thisInstance);
            }

            __SFI auto enableInterrupt() {
                LL_ADC_EnableIT_EOCS(thisInstance);
 8001bf0:	480c      	ldr	r0, [pc, #48]	; (8001c24 <_ZN8UHAL_ADC15enableInterruptEv+0x38>)
 8001bf2:	f7ff ffc5 	bl	8001b80 <LL_ADC_EnableIT_EOCS>
            }
 8001bf6:	bf00      	nop
            __SFI auto clear() {
                LL_ADC_ClearFlag_OVR(thisInstance);
            }

            __SFI auto enableInterrupt() {
                LL_ADC_EnableIT_OVR(thisInstance);
 8001bf8:	480a      	ldr	r0, [pc, #40]	; (8001c24 <_ZN8UHAL_ADC15enableInterruptEv+0x38>)
 8001bfa:	f7ff ffd1 	bl	8001ba0 <LL_ADC_EnableIT_OVR>
            }
 8001bfe:	bf00      	nop

	flag_IT::EOC::enableInterrupt();
	flag_IT::OVR::enableInterrupt();
    NVIC_SetPriority(ADC_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001c00:	f7ff fc92 	bl	8001528 <__NVIC_GetPriorityGrouping>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2200      	movs	r2, #0
 8001c08:	2100      	movs	r1, #0
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7ff fce2 	bl	80015d4 <NVIC_EncodePriority>
 8001c10:	4603      	mov	r3, r0
 8001c12:	4619      	mov	r1, r3
 8001c14:	2012      	movs	r0, #18
 8001c16:	f7ff fcb3 	bl	8001580 <__NVIC_SetPriority>
    NVIC_EnableIRQ(ADC_IRQn);
 8001c1a:	2012      	movs	r0, #18
 8001c1c:	f7ff fc92 	bl	8001544 <__NVIC_EnableIRQ>
}
 8001c20:	bf00      	nop
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	40012000 	.word	0x40012000

08001c28 <_ZN8UHAL_ADC15startConversionEv>:
void UHAL_ADC::off() {
    LL_ADC_Disable(thisInstance);
}


void UHAL_ADC::startConversion() {
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
    LL_ADC_REG_StartConversionSWStart(thisInstance);
 8001c2c:	4802      	ldr	r0, [pc, #8]	; (8001c38 <_ZN8UHAL_ADC15startConversionEv+0x10>)
 8001c2e:	f7ff ff97 	bl	8001b60 <LL_ADC_REG_StartConversionSWStart>
}
 8001c32:	bf00      	nop
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	40012000 	.word	0x40012000

08001c3c <_ZN8UHAL_ADC11initialize2Ev>:

UHAL_ADC::thisADC_T UHAL_ADC::readAdcConversionRegister() {
    return LL_ADC_REG_ReadConversionData12(thisInstance);
}
void UHAL_ADC::initialize2()
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b092      	sub	sp, #72	; 0x48
 8001c40:	af00      	add	r7, sp, #0

	  /* USER CODE BEGIN ADC1_Init 0 */

	  /* USER CODE END ADC1_Init 0 */

	  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8001c42:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001c46:	2200      	movs	r2, #0
 8001c48:	601a      	str	r2, [r3, #0]
 8001c4a:	605a      	str	r2, [r3, #4]
 8001c4c:	609a      	str	r2, [r3, #8]
	  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8001c4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c52:	2200      	movs	r2, #0
 8001c54:	601a      	str	r2, [r3, #0]
 8001c56:	605a      	str	r2, [r3, #4]
 8001c58:	609a      	str	r2, [r3, #8]
 8001c5a:	60da      	str	r2, [r3, #12]
 8001c5c:	611a      	str	r2, [r3, #16]
	  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8001c5e:	f107 0318 	add.w	r3, r7, #24
 8001c62:	2200      	movs	r2, #0
 8001c64:	601a      	str	r2, [r3, #0]
 8001c66:	605a      	str	r2, [r3, #4]
 8001c68:	609a      	str	r2, [r3, #8]
 8001c6a:	60da      	str	r2, [r3, #12]

	  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c6c:	463b      	mov	r3, r7
 8001c6e:	2200      	movs	r2, #0
 8001c70:	601a      	str	r2, [r3, #0]
 8001c72:	605a      	str	r2, [r3, #4]
 8001c74:	609a      	str	r2, [r3, #8]
 8001c76:	60da      	str	r2, [r3, #12]
 8001c78:	611a      	str	r2, [r3, #16]
 8001c7a:	615a      	str	r2, [r3, #20]

	  /* Peripheral clock enable */
	  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 8001c7c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001c80:	f7ff fcf2 	bl	8001668 <LL_APB2_GRP1_EnableClock>

	  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001c84:	2001      	movs	r0, #1
 8001c86:	f7ff fcd7 	bl	8001638 <LL_AHB1_GRP1_EnableClock>
	  /**ADC1 GPIO Configuration
	  PA2   ------> ADC1_IN2
	  PA3   ------> ADC1_IN3
	  */
	  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 8001c8a:	230c      	movs	r3, #12
 8001c8c:	603b      	str	r3, [r7, #0]
	  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001c92:	2300      	movs	r3, #0
 8001c94:	613b      	str	r3, [r7, #16]
	  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c96:	463b      	mov	r3, r7
 8001c98:	4619      	mov	r1, r3
 8001c9a:	484d      	ldr	r0, [pc, #308]	; (8001dd0 <_ZN8UHAL_ADC11initialize2Ev+0x194>)
 8001c9c:	f001 f9e5 	bl	800306a <LL_GPIO_Init>

	  /* ADC1 DMA Init */

	  /* ADC1 Init */
	  LL_DMA_SetChannelSelection(DMA2, LL_DMA_STREAM_0, LL_DMA_CHANNEL_0);
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	2100      	movs	r1, #0
 8001ca4:	484b      	ldr	r0, [pc, #300]	; (8001dd4 <_ZN8UHAL_ADC11initialize2Ev+0x198>)
 8001ca6:	f7ff fdf3 	bl	8001890 <LL_DMA_SetChannelSelection>

	  LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_STREAM_0, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8001caa:	2200      	movs	r2, #0
 8001cac:	2100      	movs	r1, #0
 8001cae:	4849      	ldr	r0, [pc, #292]	; (8001dd4 <_ZN8UHAL_ADC11initialize2Ev+0x198>)
 8001cb0:	f7ff fcf2 	bl	8001698 <LL_DMA_SetDataTransferDirection>

	  LL_DMA_SetStreamPriorityLevel(DMA2, LL_DMA_STREAM_0, LL_DMA_PRIORITY_VERYHIGH);
 8001cb4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001cb8:	2100      	movs	r1, #0
 8001cba:	4846      	ldr	r0, [pc, #280]	; (8001dd4 <_ZN8UHAL_ADC11initialize2Ev+0x198>)
 8001cbc:	f7ff fdc4 	bl	8001848 <LL_DMA_SetStreamPriorityLevel>

	  LL_DMA_SetMode(DMA2, LL_DMA_STREAM_0, LL_DMA_MODE_CIRCULAR);
 8001cc0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cc4:	2100      	movs	r1, #0
 8001cc6:	4843      	ldr	r0, [pc, #268]	; (8001dd4 <_ZN8UHAL_ADC11initialize2Ev+0x198>)
 8001cc8:	f7ff fd0a 	bl	80016e0 <LL_DMA_SetMode>

	  LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_STREAM_0, LL_DMA_PERIPH_NOINCREMENT);
 8001ccc:	2200      	movs	r2, #0
 8001cce:	2100      	movs	r1, #0
 8001cd0:	4840      	ldr	r0, [pc, #256]	; (8001dd4 <_ZN8UHAL_ADC11initialize2Ev+0x198>)
 8001cd2:	f7ff fd29 	bl	8001728 <LL_DMA_SetPeriphIncMode>

	  LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_STREAM_0, LL_DMA_MEMORY_INCREMENT);
 8001cd6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cda:	2100      	movs	r1, #0
 8001cdc:	483d      	ldr	r0, [pc, #244]	; (8001dd4 <_ZN8UHAL_ADC11initialize2Ev+0x198>)
 8001cde:	f7ff fd47 	bl	8001770 <LL_DMA_SetMemoryIncMode>

	  LL_DMA_SetPeriphSize(DMA2, LL_DMA_STREAM_0, LL_DMA_PDATAALIGN_HALFWORD);
 8001ce2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ce6:	2100      	movs	r1, #0
 8001ce8:	483a      	ldr	r0, [pc, #232]	; (8001dd4 <_ZN8UHAL_ADC11initialize2Ev+0x198>)
 8001cea:	f7ff fd65 	bl	80017b8 <LL_DMA_SetPeriphSize>

	  LL_DMA_SetMemorySize(DMA2, LL_DMA_STREAM_0, LL_DMA_MDATAALIGN_HALFWORD);
 8001cee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cf2:	2100      	movs	r1, #0
 8001cf4:	4837      	ldr	r0, [pc, #220]	; (8001dd4 <_ZN8UHAL_ADC11initialize2Ev+0x198>)
 8001cf6:	f7ff fd83 	bl	8001800 <LL_DMA_SetMemorySize>

	  LL_DMA_EnableFifoMode(DMA2, LL_DMA_STREAM_0);
 8001cfa:	2100      	movs	r1, #0
 8001cfc:	4835      	ldr	r0, [pc, #212]	; (8001dd4 <_ZN8UHAL_ADC11initialize2Ev+0x198>)
 8001cfe:	f7ff fe33 	bl	8001968 <LL_DMA_EnableFifoMode>

	  LL_DMA_SetFIFOThreshold(DMA2, LL_DMA_STREAM_0, LL_DMA_FIFOTHRESHOLD_1_4);
 8001d02:	2200      	movs	r2, #0
 8001d04:	2100      	movs	r1, #0
 8001d06:	4833      	ldr	r0, [pc, #204]	; (8001dd4 <_ZN8UHAL_ADC11initialize2Ev+0x198>)
 8001d08:	f7ff fe4e 	bl	80019a8 <LL_DMA_SetFIFOThreshold>

	  LL_DMA_SetMemoryBurstxfer(DMA2, LL_DMA_STREAM_0, LL_DMA_MBURST_SINGLE);
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	2100      	movs	r1, #0
 8001d10:	4830      	ldr	r0, [pc, #192]	; (8001dd4 <_ZN8UHAL_ADC11initialize2Ev+0x198>)
 8001d12:	f7ff fde1 	bl	80018d8 <LL_DMA_SetMemoryBurstxfer>

	 LL_DMA_SetPeriphBurstxfer(DMA2, LL_DMA_STREAM_0, LL_DMA_PBURST_SINGLE);
 8001d16:	2200      	movs	r2, #0
 8001d18:	2100      	movs	r1, #0
 8001d1a:	482e      	ldr	r0, [pc, #184]	; (8001dd4 <_ZN8UHAL_ADC11initialize2Ev+0x198>)
 8001d1c:	f7ff fe00 	bl	8001920 <LL_DMA_SetPeriphBurstxfer>

	  /* ADC1 interrupt Init */
	  NVIC_SetPriority(ADC_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 1));
 8001d20:	f7ff fc02 	bl	8001528 <__NVIC_GetPriorityGrouping>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2201      	movs	r2, #1
 8001d28:	2101      	movs	r1, #1
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7ff fc52 	bl	80015d4 <NVIC_EncodePriority>
 8001d30:	4603      	mov	r3, r0
 8001d32:	4619      	mov	r1, r3
 8001d34:	2012      	movs	r0, #18
 8001d36:	f7ff fc23 	bl	8001580 <__NVIC_SetPriority>
	  NVIC_EnableIRQ(ADC_IRQn);
 8001d3a:	2012      	movs	r0, #18
 8001d3c:	f7ff fc02 	bl	8001544 <__NVIC_EnableIRQ>
	  /* USER CODE BEGIN ADC1_Init 1 */

	  /* USER CODE END ADC1_Init 1 */
	  /** Common config
	  */
	  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8001d40:	2300      	movs	r3, #0
 8001d42:	63fb      	str	r3, [r7, #60]	; 0x3c
	  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8001d44:	2300      	movs	r3, #0
 8001d46:	643b      	str	r3, [r7, #64]	; 0x40
	  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 8001d48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d4c:	647b      	str	r3, [r7, #68]	; 0x44
	  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8001d4e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001d52:	4619      	mov	r1, r3
 8001d54:	4820      	ldr	r0, [pc, #128]	; (8001dd8 <_ZN8UHAL_ADC11initialize2Ev+0x19c>)
 8001d56:	f001 f815 	bl	8002d84 <LL_ADC_Init>
	  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	62bb      	str	r3, [r7, #40]	; 0x28
	  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_2RANKS;
 8001d5e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001d62:	62fb      	str	r3, [r7, #44]	; 0x2c
	  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8001d64:	2300      	movs	r3, #0
 8001d66:	633b      	str	r3, [r7, #48]	; 0x30
	  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_CONTINUOUS;
 8001d68:	2302      	movs	r3, #2
 8001d6a:	637b      	str	r3, [r7, #52]	; 0x34
	  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 8001d6c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d70:	63bb      	str	r3, [r7, #56]	; 0x38
	  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8001d72:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d76:	4619      	mov	r1, r3
 8001d78:	4817      	ldr	r0, [pc, #92]	; (8001dd8 <_ZN8UHAL_ADC11initialize2Ev+0x19c>)
 8001d7a:	f001 f82f 	bl	8002ddc <LL_ADC_REG_Init>
	  LL_ADC_REG_SetFlagEndOfConversion(ADC1, LL_ADC_REG_FLAG_EOC_SEQUENCE_CONV);
 8001d7e:	2100      	movs	r1, #0
 8001d80:	4815      	ldr	r0, [pc, #84]	; (8001dd8 <_ZN8UHAL_ADC11initialize2Ev+0x19c>)
 8001d82:	f7ff fe6b 	bl	8001a5c <LL_ADC_REG_SetFlagEndOfConversion>
	  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_SYNC_PCLK_DIV2;
 8001d86:	2300      	movs	r3, #0
 8001d88:	61bb      	str	r3, [r7, #24]
	  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	61fb      	str	r3, [r7, #28]
	  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8001d8e:	f107 0318 	add.w	r3, r7, #24
 8001d92:	4619      	mov	r1, r3
 8001d94:	4811      	ldr	r0, [pc, #68]	; (8001ddc <_ZN8UHAL_ADC11initialize2Ev+0x1a0>)
 8001d96:	f000 ffad 	bl	8002cf4 <LL_ADC_CommonInit>
	  /** Configure Regular Channel
	  */
	  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_2);
 8001d9a:	4a11      	ldr	r2, [pc, #68]	; (8001de0 <_ZN8UHAL_ADC11initialize2Ev+0x1a4>)
 8001d9c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001da0:	480d      	ldr	r0, [pc, #52]	; (8001dd8 <_ZN8UHAL_ADC11initialize2Ev+0x19c>)
 8001da2:	f7ff fe25 	bl	80019f0 <LL_ADC_REG_SetSequencerRanks>
	  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_2, LL_ADC_SAMPLINGTIME_3CYCLES);
 8001da6:	2200      	movs	r2, #0
 8001da8:	490d      	ldr	r1, [pc, #52]	; (8001de0 <_ZN8UHAL_ADC11initialize2Ev+0x1a4>)
 8001daa:	480b      	ldr	r0, [pc, #44]	; (8001dd8 <_ZN8UHAL_ADC11initialize2Ev+0x19c>)
 8001dac:	f7ff fe69 	bl	8001a82 <LL_ADC_SetChannelSamplingTime>
	  /** Configure Regular Channel
	  */
	  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_3);
 8001db0:	4a0c      	ldr	r2, [pc, #48]	; (8001de4 <_ZN8UHAL_ADC11initialize2Ev+0x1a8>)
 8001db2:	f240 2105 	movw	r1, #517	; 0x205
 8001db6:	4808      	ldr	r0, [pc, #32]	; (8001dd8 <_ZN8UHAL_ADC11initialize2Ev+0x19c>)
 8001db8:	f7ff fe1a 	bl	80019f0 <LL_ADC_REG_SetSequencerRanks>
	  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_3, LL_ADC_SAMPLINGTIME_3CYCLES);
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	4909      	ldr	r1, [pc, #36]	; (8001de4 <_ZN8UHAL_ADC11initialize2Ev+0x1a8>)
 8001dc0:	4805      	ldr	r0, [pc, #20]	; (8001dd8 <_ZN8UHAL_ADC11initialize2Ev+0x19c>)
 8001dc2:	f7ff fe5e 	bl	8001a82 <LL_ADC_SetChannelSamplingTime>
	  /* USER CODE BEGIN ADC1_Init 2 */

	  /* USER CODE END ADC1_Init 2 */
}
 8001dc6:	bf00      	nop
 8001dc8:	3748      	adds	r7, #72	; 0x48
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	40020000 	.word	0x40020000
 8001dd4:	40026400 	.word	0x40026400
 8001dd8:	40012000 	.word	0x40012000
 8001ddc:	40012300 	.word	0x40012300
 8001de0:	02600002 	.word	0x02600002
 8001de4:	02900003 	.word	0x02900003

08001de8 <__NVIC_GetPriorityGrouping>:
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dec:	4b04      	ldr	r3, [pc, #16]	; (8001e00 <__NVIC_GetPriorityGrouping+0x18>)
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	0a1b      	lsrs	r3, r3, #8
 8001df2:	f003 0307 	and.w	r3, r3, #7
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr
 8001e00:	e000ed00 	.word	0xe000ed00

08001e04 <__NVIC_EnableIRQ>:
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	db0b      	blt.n	8001e2e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e16:	79fb      	ldrb	r3, [r7, #7]
 8001e18:	f003 021f 	and.w	r2, r3, #31
 8001e1c:	4907      	ldr	r1, [pc, #28]	; (8001e3c <__NVIC_EnableIRQ+0x38>)
 8001e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e22:	095b      	lsrs	r3, r3, #5
 8001e24:	2001      	movs	r0, #1
 8001e26:	fa00 f202 	lsl.w	r2, r0, r2
 8001e2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001e2e:	bf00      	nop
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	e000e100 	.word	0xe000e100

08001e40 <__NVIC_SetPriority>:
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	4603      	mov	r3, r0
 8001e48:	6039      	str	r1, [r7, #0]
 8001e4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	db0a      	blt.n	8001e6a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	b2da      	uxtb	r2, r3
 8001e58:	490c      	ldr	r1, [pc, #48]	; (8001e8c <__NVIC_SetPriority+0x4c>)
 8001e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e5e:	0112      	lsls	r2, r2, #4
 8001e60:	b2d2      	uxtb	r2, r2
 8001e62:	440b      	add	r3, r1
 8001e64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001e68:	e00a      	b.n	8001e80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	b2da      	uxtb	r2, r3
 8001e6e:	4908      	ldr	r1, [pc, #32]	; (8001e90 <__NVIC_SetPriority+0x50>)
 8001e70:	79fb      	ldrb	r3, [r7, #7]
 8001e72:	f003 030f 	and.w	r3, r3, #15
 8001e76:	3b04      	subs	r3, #4
 8001e78:	0112      	lsls	r2, r2, #4
 8001e7a:	b2d2      	uxtb	r2, r2
 8001e7c:	440b      	add	r3, r1
 8001e7e:	761a      	strb	r2, [r3, #24]
}
 8001e80:	bf00      	nop
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr
 8001e8c:	e000e100 	.word	0xe000e100
 8001e90:	e000ed00 	.word	0xe000ed00

08001e94 <NVIC_EncodePriority>:
{
 8001e94:	b480      	push	{r7}
 8001e96:	b089      	sub	sp, #36	; 0x24
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	60f8      	str	r0, [r7, #12]
 8001e9c:	60b9      	str	r1, [r7, #8]
 8001e9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	f003 0307 	and.w	r3, r3, #7
 8001ea6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	f1c3 0307 	rsb	r3, r3, #7
 8001eae:	2b04      	cmp	r3, #4
 8001eb0:	bf28      	it	cs
 8001eb2:	2304      	movcs	r3, #4
 8001eb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	3304      	adds	r3, #4
 8001eba:	2b06      	cmp	r3, #6
 8001ebc:	d902      	bls.n	8001ec4 <NVIC_EncodePriority+0x30>
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	3b03      	subs	r3, #3
 8001ec2:	e000      	b.n	8001ec6 <NVIC_EncodePriority+0x32>
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ec8:	2201      	movs	r2, #1
 8001eca:	69bb      	ldr	r3, [r7, #24]
 8001ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed0:	1e5a      	subs	r2, r3, #1
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	401a      	ands	r2, r3
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001eda:	2101      	movs	r1, #1
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee2:	1e59      	subs	r1, r3, #1
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	400b      	ands	r3, r1
         );
 8001ee8:	4313      	orrs	r3, r2
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3724      	adds	r7, #36	; 0x24
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
	...

08001ef8 <LL_DMA_EnableStream>:
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8001f02:	4a0c      	ldr	r2, [pc, #48]	; (8001f34 <LL_DMA_EnableStream+0x3c>)
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	4413      	add	r3, r2
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	4413      	add	r3, r2
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4908      	ldr	r1, [pc, #32]	; (8001f34 <LL_DMA_EnableStream+0x3c>)
 8001f14:	683a      	ldr	r2, [r7, #0]
 8001f16:	440a      	add	r2, r1
 8001f18:	7812      	ldrb	r2, [r2, #0]
 8001f1a:	4611      	mov	r1, r2
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	440a      	add	r2, r1
 8001f20:	f043 0301 	orr.w	r3, r3, #1
 8001f24:	6013      	str	r3, [r2, #0]
}
 8001f26:	bf00      	nop
 8001f28:	370c      	adds	r7, #12
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	08004658 	.word	0x08004658

08001f38 <LL_DMA_SetDataLength>:
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b085      	sub	sp, #20
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	60f8      	str	r0, [r7, #12]
 8001f40:	60b9      	str	r1, [r7, #8]
 8001f42:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 8001f44:	4a0d      	ldr	r2, [pc, #52]	; (8001f7c <LL_DMA_SetDataLength+0x44>)
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	4413      	add	r3, r2
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	4413      	add	r3, r2
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	0c1b      	lsrs	r3, r3, #16
 8001f56:	041b      	lsls	r3, r3, #16
 8001f58:	4908      	ldr	r1, [pc, #32]	; (8001f7c <LL_DMA_SetDataLength+0x44>)
 8001f5a:	68ba      	ldr	r2, [r7, #8]
 8001f5c:	440a      	add	r2, r1
 8001f5e:	7812      	ldrb	r2, [r2, #0]
 8001f60:	4611      	mov	r1, r2
 8001f62:	68fa      	ldr	r2, [r7, #12]
 8001f64:	440a      	add	r2, r1
 8001f66:	4611      	mov	r1, r2
 8001f68:	687a      	ldr	r2, [r7, #4]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	604b      	str	r3, [r1, #4]
}
 8001f6e:	bf00      	nop
 8001f70:	3714      	adds	r7, #20
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	08004658 	.word	0x08004658

08001f80 <LL_DMA_SetMemoryAddress>:
{
 8001f80:	b480      	push	{r7}
 8001f82:	b085      	sub	sp, #20
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	60f8      	str	r0, [r7, #12]
 8001f88:	60b9      	str	r1, [r7, #8]
 8001f8a:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, MemoryAddress);
 8001f8c:	4a07      	ldr	r2, [pc, #28]	; (8001fac <LL_DMA_SetMemoryAddress+0x2c>)
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	4413      	add	r3, r2
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	461a      	mov	r2, r3
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	4413      	add	r3, r2
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	60d3      	str	r3, [r2, #12]
}
 8001fa0:	bf00      	nop
 8001fa2:	3714      	adds	r7, #20
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr
 8001fac:	08004658 	.word	0x08004658

08001fb0 <LL_DMA_SetPeriphAddress>:
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b085      	sub	sp, #20
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	60f8      	str	r0, [r7, #12]
 8001fb8:	60b9      	str	r1, [r7, #8]
 8001fba:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, PeriphAddress);
 8001fbc:	4a07      	ldr	r2, [pc, #28]	; (8001fdc <LL_DMA_SetPeriphAddress+0x2c>)
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	4413      	add	r3, r2
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	4413      	add	r3, r2
 8001fca:	461a      	mov	r2, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6093      	str	r3, [r2, #8]
}
 8001fd0:	bf00      	nop
 8001fd2:	3714      	adds	r7, #20
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr
 8001fdc:	08004658 	.word	0x08004658

08001fe0 <LL_DMA_EnableIT_HT>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_HT(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_HTIE);
 8001fea:	4a0c      	ldr	r2, [pc, #48]	; (800201c <LL_DMA_EnableIT_HT+0x3c>)
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	4413      	add	r3, r2
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4908      	ldr	r1, [pc, #32]	; (800201c <LL_DMA_EnableIT_HT+0x3c>)
 8001ffc:	683a      	ldr	r2, [r7, #0]
 8001ffe:	440a      	add	r2, r1
 8002000:	7812      	ldrb	r2, [r2, #0]
 8002002:	4611      	mov	r1, r2
 8002004:	687a      	ldr	r2, [r7, #4]
 8002006:	440a      	add	r2, r1
 8002008:	f043 0308 	orr.w	r3, r3, #8
 800200c:	6013      	str	r3, [r2, #0]
}
 800200e:	bf00      	nop
 8002010:	370c      	adds	r7, #12
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	08004658 	.word	0x08004658

08002020 <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TEIE);
 800202a:	4a0c      	ldr	r2, [pc, #48]	; (800205c <LL_DMA_EnableIT_TE+0x3c>)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	4413      	add	r3, r2
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	461a      	mov	r2, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	4413      	add	r3, r2
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4908      	ldr	r1, [pc, #32]	; (800205c <LL_DMA_EnableIT_TE+0x3c>)
 800203c:	683a      	ldr	r2, [r7, #0]
 800203e:	440a      	add	r2, r1
 8002040:	7812      	ldrb	r2, [r2, #0]
 8002042:	4611      	mov	r1, r2
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	440a      	add	r2, r1
 8002048:	f043 0304 	orr.w	r3, r3, #4
 800204c:	6013      	str	r3, [r2, #0]
}
 800204e:	bf00      	nop
 8002050:	370c      	adds	r7, #12
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	08004658 	.word	0x08004658

08002060 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TCIE);
 800206a:	4a0c      	ldr	r2, [pc, #48]	; (800209c <LL_DMA_EnableIT_TC+0x3c>)
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	4413      	add	r3, r2
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	461a      	mov	r2, r3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	4413      	add	r3, r2
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4908      	ldr	r1, [pc, #32]	; (800209c <LL_DMA_EnableIT_TC+0x3c>)
 800207c:	683a      	ldr	r2, [r7, #0]
 800207e:	440a      	add	r2, r1
 8002080:	7812      	ldrb	r2, [r2, #0]
 8002082:	4611      	mov	r1, r2
 8002084:	687a      	ldr	r2, [r7, #4]
 8002086:	440a      	add	r2, r1
 8002088:	f043 0310 	orr.w	r3, r3, #16
 800208c:	6013      	str	r3, [r2, #0]
}
 800208e:	bf00      	nop
 8002090:	370c      	adds	r7, #12
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	08004658 	.word	0x08004658

080020a0 <LL_DMA_EnableIT_DME>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_DME(DMA_TypeDef *DMAx, uint32_t Stream)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DMEIE);
 80020aa:	4a0c      	ldr	r2, [pc, #48]	; (80020dc <LL_DMA_EnableIT_DME+0x3c>)
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	4413      	add	r3, r2
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	461a      	mov	r2, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	4413      	add	r3, r2
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4908      	ldr	r1, [pc, #32]	; (80020dc <LL_DMA_EnableIT_DME+0x3c>)
 80020bc:	683a      	ldr	r2, [r7, #0]
 80020be:	440a      	add	r2, r1
 80020c0:	7812      	ldrb	r2, [r2, #0]
 80020c2:	4611      	mov	r1, r2
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	440a      	add	r2, r1
 80020c8:	f043 0302 	orr.w	r3, r3, #2
 80020cc:	6013      	str	r3, [r2, #0]
}
 80020ce:	bf00      	nop
 80020d0:	370c      	adds	r7, #12
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	08004658 	.word	0x08004658

080020e0 <LL_DMA_EnableIT_FE>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_FE(DMA_TypeDef *DMAx, uint32_t Stream)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
 80020e8:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_FEIE);
 80020ea:	4a0c      	ldr	r2, [pc, #48]	; (800211c <LL_DMA_EnableIT_FE+0x3c>)
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	4413      	add	r3, r2
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	461a      	mov	r2, r3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	4413      	add	r3, r2
 80020f8:	695b      	ldr	r3, [r3, #20]
 80020fa:	4908      	ldr	r1, [pc, #32]	; (800211c <LL_DMA_EnableIT_FE+0x3c>)
 80020fc:	683a      	ldr	r2, [r7, #0]
 80020fe:	440a      	add	r2, r1
 8002100:	7812      	ldrb	r2, [r2, #0]
 8002102:	4611      	mov	r1, r2
 8002104:	687a      	ldr	r2, [r7, #4]
 8002106:	440a      	add	r2, r1
 8002108:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800210c:	6153      	str	r3, [r2, #20]
}
 800210e:	bf00      	nop
 8002110:	370c      	adds	r7, #12
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	08004658 	.word	0x08004658

08002120 <LL_AHB1_GRP1_EnableClock>:
{
 8002120:	b480      	push	{r7}
 8002122:	b085      	sub	sp, #20
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002128:	4b08      	ldr	r3, [pc, #32]	; (800214c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800212a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800212c:	4907      	ldr	r1, [pc, #28]	; (800214c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4313      	orrs	r3, r2
 8002132:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002134:	4b05      	ldr	r3, [pc, #20]	; (800214c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002136:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	4013      	ands	r3, r2
 800213c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800213e:	68fb      	ldr	r3, [r7, #12]
}
 8002140:	bf00      	nop
 8002142:	3714      	adds	r7, #20
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr
 800214c:	40023800 	.word	0x40023800

08002150 <_ZN9UHAL_DMA28DMA_ADC116setBufferAddressEj>:

// DMA2 ADC1
void UHAL_DMA2::DMA_ADC1::enablePerihClock() {
    LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA2);
}
void UHAL_DMA2::DMA_ADC1::setBufferAddress(uintptr_t bufferAddress) {
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
    LL_DMA_SetMemoryAddress(thisInstance, thisStream, bufferAddress);
 8002158:	687a      	ldr	r2, [r7, #4]
 800215a:	2100      	movs	r1, #0
 800215c:	4803      	ldr	r0, [pc, #12]	; (800216c <_ZN9UHAL_DMA28DMA_ADC116setBufferAddressEj+0x1c>)
 800215e:	f7ff ff0f 	bl	8001f80 <LL_DMA_SetMemoryAddress>
}
 8002162:	bf00      	nop
 8002164:	3708      	adds	r7, #8
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	40026400 	.word	0x40026400

08002170 <_ZN9UHAL_DMA28DMA_ADC111initialize2Ev>:

void UHAL_DMA2::DMA_ADC1::initialize2()
{
 8002170:	b580      	push	{r7, lr}
 8002172:	af00      	add	r7, sp, #0
	
	  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA2);
 8002174:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8002178:	f7ff ffd2 	bl	8002120 <LL_AHB1_GRP1_EnableClock>

	  NVIC_SetPriority(thisIRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800217c:	f7ff fe34 	bl	8001de8 <__NVIC_GetPriorityGrouping>
 8002180:	4603      	mov	r3, r0
 8002182:	2200      	movs	r2, #0
 8002184:	2100      	movs	r1, #0
 8002186:	4618      	mov	r0, r3
 8002188:	f7ff fe84 	bl	8001e94 <NVIC_EncodePriority>
 800218c:	4603      	mov	r3, r0
 800218e:	4619      	mov	r1, r3
 8002190:	2038      	movs	r0, #56	; 0x38
 8002192:	f7ff fe55 	bl	8001e40 <__NVIC_SetPriority>
	  NVIC_EnableIRQ(thisIRQn);
 8002196:	2038      	movs	r0, #56	; 0x38
 8002198:	f7ff fe34 	bl	8001e04 <__NVIC_EnableIRQ>
	
}
 800219c:	bf00      	nop
 800219e:	bd80      	pop	{r7, pc}

080021a0 <_ZN9UHAL_DMA28DMA_ADC16enableEv>:

void UHAL_DMA2::DMA_ADC1::enable() {
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
    LL_DMA_EnableStream(thisInstance, thisStream);
 80021a4:	2100      	movs	r1, #0
 80021a6:	4802      	ldr	r0, [pc, #8]	; (80021b0 <_ZN9UHAL_DMA28DMA_ADC16enableEv+0x10>)
 80021a8:	f7ff fea6 	bl	8001ef8 <LL_DMA_EnableStream>
}
 80021ac:	bf00      	nop
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	40026400 	.word	0x40026400

080021b4 <_ZN9UHAL_DMA28DMA_ADC123setNumberOfDataTransferEt>:

void UHAL_DMA2::DMA_ADC1::setNumberOfDataTransfer(uint16_t numb) {
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	4603      	mov	r3, r0
 80021bc:	80fb      	strh	r3, [r7, #6]
    LL_DMA_SetDataLength(thisInstance, thisStream, numb);
 80021be:	88fb      	ldrh	r3, [r7, #6]
 80021c0:	461a      	mov	r2, r3
 80021c2:	2100      	movs	r1, #0
 80021c4:	4803      	ldr	r0, [pc, #12]	; (80021d4 <_ZN9UHAL_DMA28DMA_ADC123setNumberOfDataTransferEt+0x20>)
 80021c6:	f7ff feb7 	bl	8001f38 <LL_DMA_SetDataLength>
}
 80021ca:	bf00      	nop
 80021cc:	3708      	adds	r7, #8
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	40026400 	.word	0x40026400

080021d8 <_ZN9UHAL_DMA28DMA_ADC120setPeripheralADDressEj>:

void UHAL_DMA2::DMA_ADC1::setPeripheralADDress(const uintptr_t address) {
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
    LL_DMA_SetPeriphAddress(thisInstance, thisStream, address);
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	2100      	movs	r1, #0
 80021e4:	4803      	ldr	r0, [pc, #12]	; (80021f4 <_ZN9UHAL_DMA28DMA_ADC120setPeripheralADDressEj+0x1c>)
 80021e6:	f7ff fee3 	bl	8001fb0 <LL_DMA_SetPeriphAddress>
}
 80021ea:	bf00      	nop
 80021ec:	3708      	adds	r7, #8
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	40026400 	.word	0x40026400

080021f8 <_ZN9UHAL_DMA28DMA_ADC115enableInterruptEv>:

void UHAL_DMA2::DMA_ADC1::enableInterrupt()
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
            {
                LL_DMA_ClearFlag_DME0(thisInstance);
            }       
            __SFI auto enableInterrupt()
            {
                LL_DMA_EnableIT_DME(thisInstance, thisStream);
 80021fc:	2100      	movs	r1, #0
 80021fe:	480d      	ldr	r0, [pc, #52]	; (8002234 <_ZN9UHAL_DMA28DMA_ADC115enableInterruptEv+0x3c>)
 8002200:	f7ff ff4e 	bl	80020a0 <LL_DMA_EnableIT_DME>
            }
 8002204:	bf00      	nop
                LL_DMA_EnableIT_FE(thisInstance, thisStream);
 8002206:	2100      	movs	r1, #0
 8002208:	480a      	ldr	r0, [pc, #40]	; (8002234 <_ZN9UHAL_DMA28DMA_ADC115enableInterruptEv+0x3c>)
 800220a:	f7ff ff69 	bl	80020e0 <LL_DMA_EnableIT_FE>
            }
 800220e:	bf00      	nop
               LL_DMA_EnableIT_HT(thisInstance, thisStream);
 8002210:	2100      	movs	r1, #0
 8002212:	4808      	ldr	r0, [pc, #32]	; (8002234 <_ZN9UHAL_DMA28DMA_ADC115enableInterruptEv+0x3c>)
 8002214:	f7ff fee4 	bl	8001fe0 <LL_DMA_EnableIT_HT>
            }
 8002218:	bf00      	nop
                LL_DMA_EnableIT_TC(thisInstance, thisStream);
 800221a:	2100      	movs	r1, #0
 800221c:	4805      	ldr	r0, [pc, #20]	; (8002234 <_ZN9UHAL_DMA28DMA_ADC115enableInterruptEv+0x3c>)
 800221e:	f7ff ff1f 	bl	8002060 <LL_DMA_EnableIT_TC>
            }
 8002222:	bf00      	nop
                LL_DMA_EnableIT_TE(thisInstance, thisStream);
 8002224:	2100      	movs	r1, #0
 8002226:	4803      	ldr	r0, [pc, #12]	; (8002234 <_ZN9UHAL_DMA28DMA_ADC115enableInterruptEv+0x3c>)
 8002228:	f7ff fefa 	bl	8002020 <LL_DMA_EnableIT_TE>
            }
 800222c:	bf00      	nop
    flag_IT::DMEIF::enableInterrupt();
    flag_IT::FEIF::enableInterrupt();
    flag_IT::HTIF::enableInterrupt();
    flag_IT::TCIF::enableInterrupt();
    flag_IT::TEIF::enableInterrupt();
}
 800222e:	bf00      	nop
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	40026400 	.word	0x40026400

08002238 <_ZN9UHAL_DMA210DMA_USART616setBufferAddressEj>:
// DMA2 USART6

void UHAL_DMA2::DMA_USART6::enablePerihClock() {
    LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA2);
}
void UHAL_DMA2::DMA_USART6::setBufferAddress(uintptr_t bufferAddress) {
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
    LL_DMA_SetMemoryAddress(thisInstance, thisStream, bufferAddress);
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	2101      	movs	r1, #1
 8002244:	4803      	ldr	r0, [pc, #12]	; (8002254 <_ZN9UHAL_DMA210DMA_USART616setBufferAddressEj+0x1c>)
 8002246:	f7ff fe9b 	bl	8001f80 <LL_DMA_SetMemoryAddress>
}
 800224a:	bf00      	nop
 800224c:	3708      	adds	r7, #8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	40026400 	.word	0x40026400

08002258 <_ZN9UHAL_DMA210DMA_USART623setNumberOfDataTransferEt>:

void UHAL_DMA2::DMA_USART6::enable() {
    LL_DMA_EnableStream(thisInstance, thisStream);
}

void UHAL_DMA2::DMA_USART6::setNumberOfDataTransfer(uint16_t numb) {
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	4603      	mov	r3, r0
 8002260:	80fb      	strh	r3, [r7, #6]
    LL_DMA_SetDataLength(thisInstance, thisStream, numb);
 8002262:	88fb      	ldrh	r3, [r7, #6]
 8002264:	461a      	mov	r2, r3
 8002266:	2101      	movs	r1, #1
 8002268:	4803      	ldr	r0, [pc, #12]	; (8002278 <_ZN9UHAL_DMA210DMA_USART623setNumberOfDataTransferEt+0x20>)
 800226a:	f7ff fe65 	bl	8001f38 <LL_DMA_SetDataLength>
}
 800226e:	bf00      	nop
 8002270:	3708      	adds	r7, #8
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	40026400 	.word	0x40026400

0800227c <_ZN9UHAL_DMA210DMA_USART620setPeripheralADDressEj>:

void UHAL_DMA2::DMA_USART6::setPeripheralADDress(const uintptr_t address) {
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
    LL_DMA_SetPeriphAddress(thisInstance, thisStream, address);
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	2101      	movs	r1, #1
 8002288:	4803      	ldr	r0, [pc, #12]	; (8002298 <_ZN9UHAL_DMA210DMA_USART620setPeripheralADDressEj+0x1c>)
 800228a:	f7ff fe91 	bl	8001fb0 <LL_DMA_SetPeriphAddress>
}
 800228e:	bf00      	nop
 8002290:	3708      	adds	r7, #8
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	40026400 	.word	0x40026400

0800229c <_ZN9UHAL_DMA210DMA_USART610initializeEv>:
    flag_IT::HTIF::enableInterrupt();
    flag_IT::TCIF::enableInterrupt();
    flag_IT::TEIF::enableInterrupt();
}

void UHAL_DMA2::DMA_USART6::initialize() {
 800229c:	b580      	push	{r7, lr}
 800229e:	af00      	add	r7, sp, #0
    LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA2);
 80022a0:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80022a4:	f7ff ff3c 	bl	8002120 <LL_AHB1_GRP1_EnableClock>
    NVIC_SetPriority(thisIRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80022a8:	f7ff fd9e 	bl	8001de8 <__NVIC_GetPriorityGrouping>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2200      	movs	r2, #0
 80022b0:	2100      	movs	r1, #0
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7ff fdee 	bl	8001e94 <NVIC_EncodePriority>
 80022b8:	4603      	mov	r3, r0
 80022ba:	4619      	mov	r1, r3
 80022bc:	2039      	movs	r0, #57	; 0x39
 80022be:	f7ff fdbf 	bl	8001e40 <__NVIC_SetPriority>
    NVIC_EnableIRQ(thisIRQn);
 80022c2:	2039      	movs	r0, #57	; 0x39
 80022c4:	f7ff fd9e 	bl	8001e04 <__NVIC_EnableIRQ>
 80022c8:	bf00      	nop
 80022ca:	bd80      	pop	{r7, pc}

080022cc <_ZNSt14_Function_baseC1Ev>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2200      	movs	r2, #0
 80022d8:	609a      	str	r2, [r3, #8]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4618      	mov	r0, r3
 80022de:	370c      	adds	r7, #12
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <_ZNSt14_Function_baseD1Ev>:

    ~_Function_base()
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d005      	beq.n	8002304 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	6879      	ldr	r1, [r7, #4]
 8002300:	2203      	movs	r2, #3
 8002302:	4798      	blx	r3
    }
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	4618      	mov	r0, r3
 8002308:	3708      	adds	r7, #8
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}

0800230e <_ZNSt8functionIFvvEEC1Ev>:

      /**
       *  @brief Default construct creates an empty function call wrapper.
       *  @post @c !(bool)*this
       */
      function() noexcept
 800230e:	b580      	push	{r7, lr}
 8002310:	b082      	sub	sp, #8
 8002312:	af00      	add	r7, sp, #0
 8002314:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4618      	mov	r0, r3
 800231a:	f7ff ffd7 	bl	80022cc <_ZNSt14_Function_baseC1Ev>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4618      	mov	r0, r3
 8002322:	3708      	adds	r7, #8
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}

08002328 <_ZNSt8functionIFvvEED1Ev>:
    class function<_Res(_ArgTypes...)>
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	4618      	mov	r0, r3
 8002334:	f7ff ffd8 	bl	80022e8 <_ZNSt14_Function_baseD1Ev>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	4618      	mov	r0, r3
 800233c:	3708      	adds	r7, #8
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
	...

08002344 <_Z41__static_initialization_and_destruction_0ii>:
#define CARMOTIONSIM_SAMPLER_UHAL_INTERRUPT_HANDLER_HPP

#include <functional>
#include "main_cpp.hpp"

std::function<void(void)> interruptCallback;
 8002344:	b580      	push	{r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
 800234c:	6039      	str	r1, [r7, #0]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2b01      	cmp	r3, #1
 8002352:	d107      	bne.n	8002364 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800235a:	4293      	cmp	r3, r2
 800235c:	d102      	bne.n	8002364 <_Z41__static_initialization_and_destruction_0ii+0x20>
 800235e:	4809      	ldr	r0, [pc, #36]	; (8002384 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8002360:	f7ff ffd5 	bl	800230e <_ZNSt8functionIFvvEEC1Ev>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d107      	bne.n	800237a <_Z41__static_initialization_and_destruction_0ii+0x36>
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002370:	4293      	cmp	r3, r2
 8002372:	d102      	bne.n	800237a <_Z41__static_initialization_and_destruction_0ii+0x36>
 8002374:	4803      	ldr	r0, [pc, #12]	; (8002384 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8002376:	f7ff ffd7 	bl	8002328 <_ZNSt8functionIFvvEED1Ev>
 800237a:	bf00      	nop
 800237c:	3708      	adds	r7, #8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	200000dc 	.word	0x200000dc

08002388 <_GLOBAL__sub_I_interruptCallback>:
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0
 800238c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002390:	2001      	movs	r0, #1
 8002392:	f7ff ffd7 	bl	8002344 <_Z41__static_initialization_and_destruction_0ii>
 8002396:	bd80      	pop	{r7, pc}

08002398 <_GLOBAL__sub_D_interruptCallback>:
 8002398:	b580      	push	{r7, lr}
 800239a:	af00      	add	r7, sp, #0
 800239c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80023a0:	2000      	movs	r0, #0
 80023a2:	f7ff ffcf 	bl	8002344 <_Z41__static_initialization_and_destruction_0ii>
 80023a6:	bd80      	pop	{r7, pc}

080023a8 <__NVIC_GetPriorityGrouping>:
{
 80023a8:	b480      	push	{r7}
 80023aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023ac:	4b04      	ldr	r3, [pc, #16]	; (80023c0 <__NVIC_GetPriorityGrouping+0x18>)
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	0a1b      	lsrs	r3, r3, #8
 80023b2:	f003 0307 	and.w	r3, r3, #7
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr
 80023c0:	e000ed00 	.word	0xe000ed00

080023c4 <__NVIC_EnableIRQ>:
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	4603      	mov	r3, r0
 80023cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	db0b      	blt.n	80023ee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023d6:	79fb      	ldrb	r3, [r7, #7]
 80023d8:	f003 021f 	and.w	r2, r3, #31
 80023dc:	4907      	ldr	r1, [pc, #28]	; (80023fc <__NVIC_EnableIRQ+0x38>)
 80023de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e2:	095b      	lsrs	r3, r3, #5
 80023e4:	2001      	movs	r0, #1
 80023e6:	fa00 f202 	lsl.w	r2, r0, r2
 80023ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80023ee:	bf00      	nop
 80023f0:	370c      	adds	r7, #12
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop
 80023fc:	e000e100 	.word	0xe000e100

08002400 <__NVIC_SetPriority>:
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	4603      	mov	r3, r0
 8002408:	6039      	str	r1, [r7, #0]
 800240a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800240c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002410:	2b00      	cmp	r3, #0
 8002412:	db0a      	blt.n	800242a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	b2da      	uxtb	r2, r3
 8002418:	490c      	ldr	r1, [pc, #48]	; (800244c <__NVIC_SetPriority+0x4c>)
 800241a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800241e:	0112      	lsls	r2, r2, #4
 8002420:	b2d2      	uxtb	r2, r2
 8002422:	440b      	add	r3, r1
 8002424:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002428:	e00a      	b.n	8002440 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	b2da      	uxtb	r2, r3
 800242e:	4908      	ldr	r1, [pc, #32]	; (8002450 <__NVIC_SetPriority+0x50>)
 8002430:	79fb      	ldrb	r3, [r7, #7]
 8002432:	f003 030f 	and.w	r3, r3, #15
 8002436:	3b04      	subs	r3, #4
 8002438:	0112      	lsls	r2, r2, #4
 800243a:	b2d2      	uxtb	r2, r2
 800243c:	440b      	add	r3, r1
 800243e:	761a      	strb	r2, [r3, #24]
}
 8002440:	bf00      	nop
 8002442:	370c      	adds	r7, #12
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr
 800244c:	e000e100 	.word	0xe000e100
 8002450:	e000ed00 	.word	0xe000ed00

08002454 <NVIC_EncodePriority>:
{
 8002454:	b480      	push	{r7}
 8002456:	b089      	sub	sp, #36	; 0x24
 8002458:	af00      	add	r7, sp, #0
 800245a:	60f8      	str	r0, [r7, #12]
 800245c:	60b9      	str	r1, [r7, #8]
 800245e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	f003 0307 	and.w	r3, r3, #7
 8002466:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	f1c3 0307 	rsb	r3, r3, #7
 800246e:	2b04      	cmp	r3, #4
 8002470:	bf28      	it	cs
 8002472:	2304      	movcs	r3, #4
 8002474:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	3304      	adds	r3, #4
 800247a:	2b06      	cmp	r3, #6
 800247c:	d902      	bls.n	8002484 <NVIC_EncodePriority+0x30>
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	3b03      	subs	r3, #3
 8002482:	e000      	b.n	8002486 <NVIC_EncodePriority+0x32>
 8002484:	2300      	movs	r3, #0
 8002486:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002488:	2201      	movs	r2, #1
 800248a:	69bb      	ldr	r3, [r7, #24]
 800248c:	fa02 f303 	lsl.w	r3, r2, r3
 8002490:	1e5a      	subs	r2, r3, #1
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	401a      	ands	r2, r3
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800249a:	2101      	movs	r1, #1
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	fa01 f303 	lsl.w	r3, r1, r3
 80024a2:	1e59      	subs	r1, r3, #1
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	400b      	ands	r3, r1
         );
 80024a8:	4313      	orrs	r3, r2
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3724      	adds	r7, #36	; 0x24
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
	...

080024b8 <LL_AHB1_GRP1_EnableClock>:
{
 80024b8:	b480      	push	{r7}
 80024ba:	b085      	sub	sp, #20
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80024c0:	4b08      	ldr	r3, [pc, #32]	; (80024e4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80024c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024c4:	4907      	ldr	r1, [pc, #28]	; (80024e4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80024cc:	4b05      	ldr	r3, [pc, #20]	; (80024e4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80024ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	4013      	ands	r3, r2
 80024d4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80024d6:	68fb      	ldr	r3, [r7, #12]
}
 80024d8:	bf00      	nop
 80024da:	3714      	adds	r7, #20
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr
 80024e4:	40023800 	.word	0x40023800

080024e8 <LL_APB2_GRP1_EnableClock>:
{
 80024e8:	b480      	push	{r7}
 80024ea:	b085      	sub	sp, #20
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80024f0:	4b08      	ldr	r3, [pc, #32]	; (8002514 <LL_APB2_GRP1_EnableClock+0x2c>)
 80024f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80024f4:	4907      	ldr	r1, [pc, #28]	; (8002514 <LL_APB2_GRP1_EnableClock+0x2c>)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80024fc:	4b05      	ldr	r3, [pc, #20]	; (8002514 <LL_APB2_GRP1_EnableClock+0x2c>)
 80024fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	4013      	ands	r3, r2
 8002504:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002506:	68fb      	ldr	r3, [r7, #12]
}
 8002508:	bf00      	nop
 800250a:	3714      	adds	r7, #20
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr
 8002514:	40023800 	.word	0x40023800

08002518 <LL_APB2_GRP1_IsEnabledClock>:
  *
  *         (*) value not defined in all devices.
  * @retval State of Periphs (1 or 0).
*/
__STATIC_INLINE uint32_t LL_APB2_GRP1_IsEnabledClock(uint32_t Periphs)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(RCC->APB2ENR, Periphs) == Periphs);
 8002520:	4b07      	ldr	r3, [pc, #28]	; (8002540 <LL_APB2_GRP1_IsEnabledClock+0x28>)
 8002522:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	4013      	ands	r3, r2
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	429a      	cmp	r2, r3
 800252c:	bf0c      	ite	eq
 800252e:	2301      	moveq	r3, #1
 8002530:	2300      	movne	r3, #0
 8002532:	b2db      	uxtb	r3, r3
}
 8002534:	4618      	mov	r0, r3
 8002536:	370c      	adds	r7, #12
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr
 8002540:	40023800 	.word	0x40023800

08002544 <LL_DMA_SetDataTransferDirection>:
{
 8002544:	b480      	push	{r7}
 8002546:	b085      	sub	sp, #20
 8002548:	af00      	add	r7, sp, #0
 800254a:	60f8      	str	r0, [r7, #12]
 800254c:	60b9      	str	r1, [r7, #8]
 800254e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 8002550:	4a0d      	ldr	r2, [pc, #52]	; (8002588 <LL_DMA_SetDataTransferDirection+0x44>)
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	4413      	add	r3, r2
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	461a      	mov	r2, r3
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	4413      	add	r3, r2
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002564:	4908      	ldr	r1, [pc, #32]	; (8002588 <LL_DMA_SetDataTransferDirection+0x44>)
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	440b      	add	r3, r1
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	4619      	mov	r1, r3
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	440b      	add	r3, r1
 8002572:	4619      	mov	r1, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	4313      	orrs	r3, r2
 8002578:	600b      	str	r3, [r1, #0]
}
 800257a:	bf00      	nop
 800257c:	3714      	adds	r7, #20
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr
 8002586:	bf00      	nop
 8002588:	08004660 	.word	0x08004660

0800258c <LL_DMA_SetMode>:
{
 800258c:	b480      	push	{r7}
 800258e:	b085      	sub	sp, #20
 8002590:	af00      	add	r7, sp, #0
 8002592:	60f8      	str	r0, [r7, #12]
 8002594:	60b9      	str	r1, [r7, #8]
 8002596:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 8002598:	4a0d      	ldr	r2, [pc, #52]	; (80025d0 <LL_DMA_SetMode+0x44>)
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	4413      	add	r3, r2
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	461a      	mov	r2, r3
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	4413      	add	r3, r2
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f423 7290 	bic.w	r2, r3, #288	; 0x120
 80025ac:	4908      	ldr	r1, [pc, #32]	; (80025d0 <LL_DMA_SetMode+0x44>)
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	440b      	add	r3, r1
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	4619      	mov	r1, r3
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	440b      	add	r3, r1
 80025ba:	4619      	mov	r1, r3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	4313      	orrs	r3, r2
 80025c0:	600b      	str	r3, [r1, #0]
}
 80025c2:	bf00      	nop
 80025c4:	3714      	adds	r7, #20
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop
 80025d0:	08004660 	.word	0x08004660

080025d4 <LL_DMA_SetPeriphIncMode>:
{
 80025d4:	b480      	push	{r7}
 80025d6:	b085      	sub	sp, #20
 80025d8:	af00      	add	r7, sp, #0
 80025da:	60f8      	str	r0, [r7, #12]
 80025dc:	60b9      	str	r1, [r7, #8]
 80025de:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 80025e0:	4a0d      	ldr	r2, [pc, #52]	; (8002618 <LL_DMA_SetPeriphIncMode+0x44>)
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	4413      	add	r3, r2
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	461a      	mov	r2, r3
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	4413      	add	r3, r2
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80025f4:	4908      	ldr	r1, [pc, #32]	; (8002618 <LL_DMA_SetPeriphIncMode+0x44>)
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	440b      	add	r3, r1
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	4619      	mov	r1, r3
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	440b      	add	r3, r1
 8002602:	4619      	mov	r1, r3
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	4313      	orrs	r3, r2
 8002608:	600b      	str	r3, [r1, #0]
}
 800260a:	bf00      	nop
 800260c:	3714      	adds	r7, #20
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	08004660 	.word	0x08004660

0800261c <LL_DMA_SetMemoryIncMode>:
{
 800261c:	b480      	push	{r7}
 800261e:	b085      	sub	sp, #20
 8002620:	af00      	add	r7, sp, #0
 8002622:	60f8      	str	r0, [r7, #12]
 8002624:	60b9      	str	r1, [r7, #8]
 8002626:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 8002628:	4a0d      	ldr	r2, [pc, #52]	; (8002660 <LL_DMA_SetMemoryIncMode+0x44>)
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	4413      	add	r3, r2
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	461a      	mov	r2, r3
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	4413      	add	r3, r2
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800263c:	4908      	ldr	r1, [pc, #32]	; (8002660 <LL_DMA_SetMemoryIncMode+0x44>)
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	440b      	add	r3, r1
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	4619      	mov	r1, r3
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	440b      	add	r3, r1
 800264a:	4619      	mov	r1, r3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	4313      	orrs	r3, r2
 8002650:	600b      	str	r3, [r1, #0]
}
 8002652:	bf00      	nop
 8002654:	3714      	adds	r7, #20
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop
 8002660:	08004660 	.word	0x08004660

08002664 <LL_DMA_SetPeriphSize>:
{
 8002664:	b480      	push	{r7}
 8002666:	b085      	sub	sp, #20
 8002668:	af00      	add	r7, sp, #0
 800266a:	60f8      	str	r0, [r7, #12]
 800266c:	60b9      	str	r1, [r7, #8]
 800266e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 8002670:	4a0d      	ldr	r2, [pc, #52]	; (80026a8 <LL_DMA_SetPeriphSize+0x44>)
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	4413      	add	r3, r2
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	461a      	mov	r2, r3
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	4413      	add	r3, r2
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8002684:	4908      	ldr	r1, [pc, #32]	; (80026a8 <LL_DMA_SetPeriphSize+0x44>)
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	440b      	add	r3, r1
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	4619      	mov	r1, r3
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	440b      	add	r3, r1
 8002692:	4619      	mov	r1, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	4313      	orrs	r3, r2
 8002698:	600b      	str	r3, [r1, #0]
}
 800269a:	bf00      	nop
 800269c:	3714      	adds	r7, #20
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	08004660 	.word	0x08004660

080026ac <LL_DMA_SetMemorySize>:
{
 80026ac:	b480      	push	{r7}
 80026ae:	b085      	sub	sp, #20
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	60f8      	str	r0, [r7, #12]
 80026b4:	60b9      	str	r1, [r7, #8]
 80026b6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 80026b8:	4a0d      	ldr	r2, [pc, #52]	; (80026f0 <LL_DMA_SetMemorySize+0x44>)
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	4413      	add	r3, r2
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	461a      	mov	r2, r3
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	4413      	add	r3, r2
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 80026cc:	4908      	ldr	r1, [pc, #32]	; (80026f0 <LL_DMA_SetMemorySize+0x44>)
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	440b      	add	r3, r1
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	4619      	mov	r1, r3
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	440b      	add	r3, r1
 80026da:	4619      	mov	r1, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	4313      	orrs	r3, r2
 80026e0:	600b      	str	r3, [r1, #0]
}
 80026e2:	bf00      	nop
 80026e4:	3714      	adds	r7, #20
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	08004660 	.word	0x08004660

080026f4 <LL_DMA_SetStreamPriorityLevel>:
{
 80026f4:	b480      	push	{r7}
 80026f6:	b085      	sub	sp, #20
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	60b9      	str	r1, [r7, #8]
 80026fe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 8002700:	4a0d      	ldr	r2, [pc, #52]	; (8002738 <LL_DMA_SetStreamPriorityLevel+0x44>)
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	4413      	add	r3, r2
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	461a      	mov	r2, r3
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	4413      	add	r3, r2
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002714:	4908      	ldr	r1, [pc, #32]	; (8002738 <LL_DMA_SetStreamPriorityLevel+0x44>)
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	440b      	add	r3, r1
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	4619      	mov	r1, r3
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	440b      	add	r3, r1
 8002722:	4619      	mov	r1, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	4313      	orrs	r3, r2
 8002728:	600b      	str	r3, [r1, #0]
}
 800272a:	bf00      	nop
 800272c:	3714      	adds	r7, #20
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	08004660 	.word	0x08004660

0800273c <LL_DMA_SetChannelSelection>:
{
 800273c:	b480      	push	{r7}
 800273e:	b085      	sub	sp, #20
 8002740:	af00      	add	r7, sp, #0
 8002742:	60f8      	str	r0, [r7, #12]
 8002744:	60b9      	str	r1, [r7, #8]
 8002746:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 8002748:	4a0d      	ldr	r2, [pc, #52]	; (8002780 <LL_DMA_SetChannelSelection+0x44>)
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	4413      	add	r3, r2
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	461a      	mov	r2, r3
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	4413      	add	r3, r2
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800275c:	4908      	ldr	r1, [pc, #32]	; (8002780 <LL_DMA_SetChannelSelection+0x44>)
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	440b      	add	r3, r1
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	4619      	mov	r1, r3
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	440b      	add	r3, r1
 800276a:	4619      	mov	r1, r3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	4313      	orrs	r3, r2
 8002770:	600b      	str	r3, [r1, #0]
}
 8002772:	bf00      	nop
 8002774:	3714      	adds	r7, #20
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr
 800277e:	bf00      	nop
 8002780:	08004660 	.word	0x08004660

08002784 <LL_USART_Enable>:
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	60da      	str	r2, [r3, #12]
}
 8002798:	bf00      	nop
 800279a:	370c      	adds	r7, #12
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <LL_USART_EnableDirectionRx>:
{
 80027a4:	b480      	push	{r7}
 80027a6:	b089      	sub	sp, #36	; 0x24
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RE);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	330c      	adds	r3, #12
 80027b0:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	e853 3f00 	ldrex	r3, [r3]
 80027b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	f043 0304 	orr.w	r3, r3, #4
 80027c0:	61fb      	str	r3, [r7, #28]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	330c      	adds	r3, #12
 80027c6:	69fa      	ldr	r2, [r7, #28]
 80027c8:	61ba      	str	r2, [r7, #24]
 80027ca:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027cc:	6979      	ldr	r1, [r7, #20]
 80027ce:	69ba      	ldr	r2, [r7, #24]
 80027d0:	e841 2300 	strex	r3, r2, [r1]
 80027d4:	613b      	str	r3, [r7, #16]
   return(result);
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	bf14      	ite	ne
 80027dc:	2301      	movne	r3, #1
 80027de:	2300      	moveq	r3, #0
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d000      	beq.n	80027e8 <LL_USART_EnableDirectionRx+0x44>
 80027e6:	e7e1      	b.n	80027ac <LL_USART_EnableDirectionRx+0x8>
}
 80027e8:	bf00      	nop
 80027ea:	3724      	adds	r7, #36	; 0x24
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr

080027f4 <LL_USART_EnableDirectionTx>:
{
 80027f4:	b480      	push	{r7}
 80027f6:	b089      	sub	sp, #36	; 0x24
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TE);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	330c      	adds	r3, #12
 8002800:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	e853 3f00 	ldrex	r3, [r3]
 8002808:	60bb      	str	r3, [r7, #8]
   return(result);
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	f043 0308 	orr.w	r3, r3, #8
 8002810:	61fb      	str	r3, [r7, #28]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	330c      	adds	r3, #12
 8002816:	69fa      	ldr	r2, [r7, #28]
 8002818:	61ba      	str	r2, [r7, #24]
 800281a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800281c:	6979      	ldr	r1, [r7, #20]
 800281e:	69ba      	ldr	r2, [r7, #24]
 8002820:	e841 2300 	strex	r3, r2, [r1]
 8002824:	613b      	str	r3, [r7, #16]
   return(result);
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	2b00      	cmp	r3, #0
 800282a:	bf14      	ite	ne
 800282c:	2301      	movne	r3, #1
 800282e:	2300      	moveq	r3, #0
 8002830:	b2db      	uxtb	r3, r3
 8002832:	2b00      	cmp	r3, #0
 8002834:	d000      	beq.n	8002838 <LL_USART_EnableDirectionTx+0x44>
 8002836:	e7e1      	b.n	80027fc <LL_USART_EnableDirectionTx+0x8>
}
 8002838:	bf00      	nop
 800283a:	3724      	adds	r7, #36	; 0x24
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr

08002844 <LL_USART_ConfigAsyncMode>:
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	691b      	ldr	r3, [r3, #16]
 8002850:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	695b      	ldr	r3, [r3, #20]
 800285c:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	615a      	str	r2, [r3, #20]
}
 8002864:	bf00      	nop
 8002866:	370c      	adds	r7, #12
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr

08002870 <LL_USART_IsActiveFlag_TC>:
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002880:	2b40      	cmp	r3, #64	; 0x40
 8002882:	bf0c      	ite	eq
 8002884:	2301      	moveq	r3, #1
 8002886:	2300      	movne	r3, #0
 8002888:	b2db      	uxtb	r3, r3
}
 800288a:	4618      	mov	r0, r3
 800288c:	370c      	adds	r7, #12
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr

08002896 <LL_USART_IsActiveFlag_TXE>:
{
 8002896:	b480      	push	{r7}
 8002898:	b083      	sub	sp, #12
 800289a:	af00      	add	r7, sp, #0
 800289c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028a6:	2b80      	cmp	r3, #128	; 0x80
 80028a8:	bf0c      	ite	eq
 80028aa:	2301      	moveq	r3, #1
 80028ac:	2300      	movne	r3, #0
 80028ae:	b2db      	uxtb	r3, r3
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	370c      	adds	r7, #12
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr

080028bc <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 80028bc:	b480      	push	{r7}
 80028be:	b089      	sub	sp, #36	; 0x24
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	330c      	adds	r3, #12
 80028c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	e853 3f00 	ldrex	r3, [r3]
 80028d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	f043 0320 	orr.w	r3, r3, #32
 80028d8:	61fb      	str	r3, [r7, #28]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	330c      	adds	r3, #12
 80028de:	69fa      	ldr	r2, [r7, #28]
 80028e0:	61ba      	str	r2, [r7, #24]
 80028e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028e4:	6979      	ldr	r1, [r7, #20]
 80028e6:	69ba      	ldr	r2, [r7, #24]
 80028e8:	e841 2300 	strex	r3, r2, [r1]
 80028ec:	613b      	str	r3, [r7, #16]
   return(result);
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	bf14      	ite	ne
 80028f4:	2301      	movne	r3, #1
 80028f6:	2300      	moveq	r3, #0
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d000      	beq.n	8002900 <LL_USART_EnableIT_RXNE+0x44>
 80028fe:	e7e1      	b.n	80028c4 <LL_USART_EnableIT_RXNE+0x8>
}
 8002900:	bf00      	nop
 8002902:	3724      	adds	r7, #36	; 0x24
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr

0800290c <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	460b      	mov	r3, r1
 8002916:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8002918:	78fa      	ldrb	r2, [r7, #3]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	605a      	str	r2, [r3, #4]
}
 800291e:	bf00      	nop
 8002920:	370c      	adds	r7, #12
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr
	...

0800292c <_ZN11UHAL_USART610initializeEm>:

#include "uhal_usart.hpp"
#include "cstring"


void UHAL_USART6::initialize(uint32_t baudRate) {
 800292c:	b580      	push	{r7, lr}
 800292e:	b090      	sub	sp, #64	; 0x40
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]


    // DMA clock
    UHAL_DMA2::DMA_USART6::initialize();
 8002934:	f7ff fcb2 	bl	800229c <_ZN9UHAL_DMA210DMA_USART610initializeEv>


    LL_USART_InitTypeDef USART_InitStruct = {0};
 8002938:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800293c:	2200      	movs	r2, #0
 800293e:	601a      	str	r2, [r3, #0]
 8002940:	605a      	str	r2, [r3, #4]
 8002942:	609a      	str	r2, [r3, #8]
 8002944:	60da      	str	r2, [r3, #12]
 8002946:	611a      	str	r2, [r3, #16]
 8002948:	615a      	str	r2, [r3, #20]
 800294a:	619a      	str	r2, [r3, #24]

    LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800294c:	f107 030c 	add.w	r3, r7, #12
 8002950:	2200      	movs	r2, #0
 8002952:	601a      	str	r2, [r3, #0]
 8002954:	605a      	str	r2, [r3, #4]
 8002956:	609a      	str	r2, [r3, #8]
 8002958:	60da      	str	r2, [r3, #12]
 800295a:	611a      	str	r2, [r3, #16]
 800295c:	615a      	str	r2, [r3, #20]


    LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART6);
 800295e:	2020      	movs	r0, #32
 8002960:	f7ff fdc2 	bl	80024e8 <LL_APB2_GRP1_EnableClock>

    LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8002964:	2004      	movs	r0, #4
 8002966:	f7ff fda7 	bl	80024b8 <LL_AHB1_GRP1_EnableClock>


    GPIO_InitStruct.Pin = LL_GPIO_PIN_6 | LL_GPIO_PIN_7;
 800296a:	23c0      	movs	r3, #192	; 0xc0
 800296c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800296e:	2302      	movs	r3, #2
 8002970:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002972:	2303      	movs	r3, #3
 8002974:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002976:	2300      	movs	r3, #0
 8002978:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800297a:	2300      	movs	r3, #0
 800297c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 800297e:	2308      	movs	r3, #8
 8002980:	623b      	str	r3, [r7, #32]
    LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002982:	f107 030c 	add.w	r3, r7, #12
 8002986:	4619      	mov	r1, r3
 8002988:	482c      	ldr	r0, [pc, #176]	; (8002a3c <_ZN11UHAL_USART610initializeEm+0x110>)
 800298a:	f000 fb6e 	bl	800306a <LL_GPIO_Init>


    LL_DMA_SetChannelSelection(DMA2, LL_DMA_STREAM_1, LL_DMA_CHANNEL_5);
 800298e:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8002992:	2101      	movs	r1, #1
 8002994:	482a      	ldr	r0, [pc, #168]	; (8002a40 <_ZN11UHAL_USART610initializeEm+0x114>)
 8002996:	f7ff fed1 	bl	800273c <LL_DMA_SetChannelSelection>

    LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_STREAM_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 800299a:	2200      	movs	r2, #0
 800299c:	2101      	movs	r1, #1
 800299e:	4828      	ldr	r0, [pc, #160]	; (8002a40 <_ZN11UHAL_USART610initializeEm+0x114>)
 80029a0:	f7ff fdd0 	bl	8002544 <LL_DMA_SetDataTransferDirection>

    LL_DMA_SetStreamPriorityLevel(DMA2, LL_DMA_STREAM_1, LL_DMA_PRIORITY_VERYHIGH);
 80029a4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80029a8:	2101      	movs	r1, #1
 80029aa:	4825      	ldr	r0, [pc, #148]	; (8002a40 <_ZN11UHAL_USART610initializeEm+0x114>)
 80029ac:	f7ff fea2 	bl	80026f4 <LL_DMA_SetStreamPriorityLevel>

    LL_DMA_SetMode(DMA2, LL_DMA_STREAM_1, LL_DMA_MODE_NORMAL);
 80029b0:	2200      	movs	r2, #0
 80029b2:	2101      	movs	r1, #1
 80029b4:	4822      	ldr	r0, [pc, #136]	; (8002a40 <_ZN11UHAL_USART610initializeEm+0x114>)
 80029b6:	f7ff fde9 	bl	800258c <LL_DMA_SetMode>

    LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_STREAM_1, LL_DMA_PERIPH_NOINCREMENT);
 80029ba:	2200      	movs	r2, #0
 80029bc:	2101      	movs	r1, #1
 80029be:	4820      	ldr	r0, [pc, #128]	; (8002a40 <_ZN11UHAL_USART610initializeEm+0x114>)
 80029c0:	f7ff fe08 	bl	80025d4 <LL_DMA_SetPeriphIncMode>

    LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_STREAM_1, LL_DMA_MEMORY_INCREMENT);
 80029c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029c8:	2101      	movs	r1, #1
 80029ca:	481d      	ldr	r0, [pc, #116]	; (8002a40 <_ZN11UHAL_USART610initializeEm+0x114>)
 80029cc:	f7ff fe26 	bl	800261c <LL_DMA_SetMemoryIncMode>

    LL_DMA_SetPeriphSize(DMA2, LL_DMA_STREAM_1, LL_DMA_PDATAALIGN_BYTE);
 80029d0:	2200      	movs	r2, #0
 80029d2:	2101      	movs	r1, #1
 80029d4:	481a      	ldr	r0, [pc, #104]	; (8002a40 <_ZN11UHAL_USART610initializeEm+0x114>)
 80029d6:	f7ff fe45 	bl	8002664 <LL_DMA_SetPeriphSize>

    LL_DMA_SetMemorySize(DMA2, LL_DMA_STREAM_1, LL_DMA_MDATAALIGN_BYTE);
 80029da:	2200      	movs	r2, #0
 80029dc:	2101      	movs	r1, #1
 80029de:	4818      	ldr	r0, [pc, #96]	; (8002a40 <_ZN11UHAL_USART610initializeEm+0x114>)
 80029e0:	f7ff fe64 	bl	80026ac <LL_DMA_SetMemorySize>
    // LL_DMA_SetMemoryBurstxfer(DMA2, LL_DMA_STREAM_1, LL_DMA_MBURST_SINGLE);

    // LL_DMA_SetPeriphBurstxfer(DMA2, LL_DMA_STREAM_1, LL_DMA_PBURST_SINGLE);


    NVIC_SetPriority(USART6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 0, 0));
 80029e4:	f7ff fce0 	bl	80023a8 <__NVIC_GetPriorityGrouping>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2200      	movs	r2, #0
 80029ec:	2100      	movs	r1, #0
 80029ee:	4618      	mov	r0, r3
 80029f0:	f7ff fd30 	bl	8002454 <NVIC_EncodePriority>
 80029f4:	4603      	mov	r3, r0
 80029f6:	4619      	mov	r1, r3
 80029f8:	2047      	movs	r0, #71	; 0x47
 80029fa:	f7ff fd01 	bl	8002400 <__NVIC_SetPriority>
    NVIC_EnableIRQ(USART6_IRQn);
 80029fe:	2047      	movs	r0, #71	; 0x47
 8002a00:	f7ff fce0 	bl	80023c4 <__NVIC_EnableIRQ>


    USART_InitStruct.BaudRate = baudRate;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	627b      	str	r3, [r7, #36]	; 0x24
    USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	62bb      	str	r3, [r7, #40]	; 0x28
    USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    USART_InitStruct.Parity = LL_USART_PARITY_EVEN;
 8002a10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a14:	633b      	str	r3, [r7, #48]	; 0x30
    USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002a16:	230c      	movs	r3, #12
 8002a18:	637b      	str	r3, [r7, #52]	; 0x34
    USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	63bb      	str	r3, [r7, #56]	; 0x38
    USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	63fb      	str	r3, [r7, #60]	; 0x3c
    LL_USART_Init(USART6, &USART_InitStruct);
 8002a22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a26:	4619      	mov	r1, r3
 8002a28:	4806      	ldr	r0, [pc, #24]	; (8002a44 <_ZN11UHAL_USART610initializeEm+0x118>)
 8002a2a:	f000 fe95 	bl	8003758 <LL_USART_Init>
    LL_USART_ConfigAsyncMode(USART6);
 8002a2e:	4805      	ldr	r0, [pc, #20]	; (8002a44 <_ZN11UHAL_USART610initializeEm+0x118>)
 8002a30:	f7ff ff08 	bl	8002844 <LL_USART_ConfigAsyncMode>


//  LL_USART_EnableDMAReq_RX(thisInstance);
    //LL_USART_Enable(USART6);

}
 8002a34:	bf00      	nop
 8002a36:	3740      	adds	r7, #64	; 0x40
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	40020800 	.word	0x40020800
 8002a40:	40026400 	.word	0x40026400
 8002a44:	40011400 	.word	0x40011400

08002a48 <_ZN11UHAL_USART64sendERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
            waitUntil(TXE::isSet());

}


void UHAL_USART6::send(const std::string &str) {
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b086      	sub	sp, #24
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
    using namespace UHAL_USART6::flag_IT;
    enable();
 8002a50:	f000 f890 	bl	8002b74 <_ZN11UHAL_USART66enableEv>
    enableTransmitter();
 8002a54:	f000 f8a8 	bl	8002ba8 <_ZN11UHAL_USART617enableTransmitterEv>
{
	return UHAL_ERROR::DEPRECATED;
}
auto UHAL_USART6::flag_IT::TXE::isSet()
{
	return LL_USART_IsActiveFlag_TXE(thisInstance);
 8002a58:	4823      	ldr	r0, [pc, #140]	; (8002ae8 <_ZN11UHAL_USART64sendERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xa0>)
 8002a5a:	f7ff ff1c 	bl	8002896 <LL_USART_IsActiveFlag_TXE>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	bf00      	nop
            waitUntil(TXE::isSet());
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	bf0c      	ite	eq
 8002a66:	2301      	moveq	r3, #1
 8002a68:	2300      	movne	r3, #0
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d000      	beq.n	8002a72 <_ZN11UHAL_USART64sendERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2a>
 8002a70:	e7f2      	b.n	8002a58 <_ZN11UHAL_USART64sendERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x10>
    for (decltype(static_cast<std::string>(str))::value_type eachCharOfStr: str) {
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	617b      	str	r3, [r7, #20]
 8002a76:	6978      	ldr	r0, [r7, #20]
 8002a78:	f001 f804 	bl	8003a84 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5beginEv>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	60fb      	str	r3, [r7, #12]
 8002a80:	6978      	ldr	r0, [r7, #20]
 8002a82:	f001 f801 	bl	8003a88 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE3endEv>
 8002a86:	4603      	mov	r3, r0
 8002a88:	60bb      	str	r3, [r7, #8]
 8002a8a:	f107 0208 	add.w	r2, r7, #8
 8002a8e:	f107 030c 	add.w	r3, r7, #12
 8002a92:	4611      	mov	r1, r2
 8002a94:	4618      	mov	r0, r3
 8002a96:	f000 f8c7 	bl	8002c28 <_ZN9__gnu_cxxneIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKNS_17__normal_iteratorIT_T0_EESE_>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d01e      	beq.n	8002ade <_ZN11UHAL_USART64sendERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x96>
 8002aa0:	f107 030c 	add.w	r3, r7, #12
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f000 f8e7 	bl	8002c78 <_ZNK9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	74fb      	strb	r3, [r7, #19]
        transmitData(eachCharOfStr);
 8002ab0:	7cfb      	ldrb	r3, [r7, #19]
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f000 f882 	bl	8002bbc <_ZN11UHAL_USART612transmitDataEh>
	return LL_USART_IsActiveFlag_TC(thisInstance);
 8002ab8:	480b      	ldr	r0, [pc, #44]	; (8002ae8 <_ZN11UHAL_USART64sendERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xa0>)
 8002aba:	f7ff fed9 	bl	8002870 <LL_USART_IsActiveFlag_TC>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	bf00      	nop
                waitUntil(TC::isSet());
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	bf0c      	ite	eq
 8002ac6:	2301      	moveq	r3, #1
 8002ac8:	2300      	movne	r3, #0
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d000      	beq.n	8002ad2 <_ZN11UHAL_USART64sendERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x8a>
 8002ad0:	e7f2      	b.n	8002ab8 <_ZN11UHAL_USART64sendERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x70>
    for (decltype(static_cast<std::string>(str))::value_type eachCharOfStr: str) {
 8002ad2:	f107 030c 	add.w	r3, r7, #12
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f000 f8be 	bl	8002c58 <_ZN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv>
 8002adc:	e7d5      	b.n	8002a8a <_ZN11UHAL_USART64sendERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x42>
    }

}
 8002ade:	bf00      	nop
 8002ae0:	3718      	adds	r7, #24
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	40011400 	.word	0x40011400

08002aec <_ZN11UHAL_USART620interruptReceiveInitEv>:
    enable();
    enableTransmitter();
    enableInterruptHandle();
}

void UHAL_USART6::interruptReceiveInit() {
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af00      	add	r7, sp, #0
		return LL_APB2_GRP1_IsEnabledClock(LL_APB2_GRP1_PERIPH_USART6);
 8002af2:	2020      	movs	r0, #32
 8002af4:	f7ff fd10 	bl	8002518 <LL_APB2_GRP1_IsEnabledClock>
 8002af8:	4603      	mov	r3, r0
 8002afa:	bf00      	nop

    if constexpr(systemDebug == debug_T::debugOn) {
        auto posAssert = isPeripheralClKEnabled();
 8002afc:	607b      	str	r3, [r7, #4]
        assert_param(posAssert);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d103      	bne.n	8002b0c <_ZN11UHAL_USART620interruptReceiveInitEv+0x20>
 8002b04:	218d      	movs	r1, #141	; 0x8d
 8002b06:	4808      	ldr	r0, [pc, #32]	; (8002b28 <_ZN11UHAL_USART620interruptReceiveInitEv+0x3c>)
 8002b08:	f7fe f9ce 	bl	8000ea8 <assert_failed>
				LL_USART_EnableIT_RXNE(thisInstance);
 8002b0c:	4807      	ldr	r0, [pc, #28]	; (8002b2c <_ZN11UHAL_USART620interruptReceiveInitEv+0x40>)
 8002b0e:	f7ff fed5 	bl	80028bc <LL_USART_EnableIT_RXNE>
			}
 8002b12:	bf00      	nop
    }
    using namespace UHAL_USART6::flag_IT;
    RXNE::enableIT();
    //PE::enableIT();
    enableReceiver();
 8002b14:	f000 f87e 	bl	8002c14 <_ZN11UHAL_USART614enableReceiverEv>
    enableInterruptHandle();
 8002b18:	2100      	movs	r1, #0
 8002b1a:	2000      	movs	r0, #0
 8002b1c:	f000 f85e 	bl	8002bdc <_ZN11UHAL_USART621enableInterruptHandleEhh>
}
 8002b20:	bf00      	nop
 8002b22:	3708      	adds	r7, #8
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	08004608 	.word	0x08004608
 8002b2c:	40011400 	.word	0x40011400

08002b30 <_ZN11UHAL_USART610developing8fristRunEjt>:

void UHAL_USART6::developing::fristRun(uintptr_t addressBuffer, uint16_t numberOfData) {
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	460b      	mov	r3, r1
 8002b3a:	807b      	strh	r3, [r7, #2]

    initialize();
 8002b3c:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 8002b40:	f7ff fef4 	bl	800292c <_ZN11UHAL_USART610initializeEm>
    enableTransmitter();
 8002b44:	f000 f830 	bl	8002ba8 <_ZN11UHAL_USART617enableTransmitterEv>
    UHAL_DMA2::DMA_USART6::setPeripheralADDress(reinterpret_cast<uintptr_t>(&thisInstance->DR));
 8002b48:	4b09      	ldr	r3, [pc, #36]	; (8002b70 <_ZN11UHAL_USART610developing8fristRunEjt+0x40>)
 8002b4a:	3304      	adds	r3, #4
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7ff fb95 	bl	800227c <_ZN9UHAL_DMA210DMA_USART620setPeripheralADDressEj>
    UHAL_DMA2::DMA_USART6::setBufferAddress(addressBuffer);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f7ff fb70 	bl	8002238 <_ZN9UHAL_DMA210DMA_USART616setBufferAddressEj>
    UHAL_DMA2::DMA_USART6::setNumberOfDataTransfer(numberOfData);
 8002b58:	887b      	ldrh	r3, [r7, #2]
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f7ff fb7c 	bl	8002258 <_ZN9UHAL_DMA210DMA_USART623setNumberOfDataTransferEt>
    interruptReceiveInit();
 8002b60:	f7ff ffc4 	bl	8002aec <_ZN11UHAL_USART620interruptReceiveInitEv>
    enable();
 8002b64:	f000 f806 	bl	8002b74 <_ZN11UHAL_USART66enableEv>
}
 8002b68:	bf00      	nop
 8002b6a:	3708      	adds	r7, #8
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	40011400 	.word	0x40011400

08002b74 <_ZN11UHAL_USART66enableEv>:
void UHAL_USART6::enablePerihClock() {
    LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART6);
}


void UHAL_USART6::enable() {
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0

    if constexpr (systemDebug == debug_T::debugOn) {
        auto posAssert = LL_APB2_GRP1_IsEnabledClock(
 8002b7a:	2020      	movs	r0, #32
 8002b7c:	f7ff fccc 	bl	8002518 <LL_APB2_GRP1_IsEnabledClock>
 8002b80:	6078      	str	r0, [r7, #4]
                LL_APB2_GRP1_PERIPH_USART6);
        assert_param(posAssert);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d103      	bne.n	8002b90 <_ZN11UHAL_USART66enableEv+0x1c>
 8002b88:	21af      	movs	r1, #175	; 0xaf
 8002b8a:	4805      	ldr	r0, [pc, #20]	; (8002ba0 <_ZN11UHAL_USART66enableEv+0x2c>)
 8002b8c:	f7fe f98c 	bl	8000ea8 <assert_failed>
    }
    LL_USART_Enable(thisInstance);
 8002b90:	4804      	ldr	r0, [pc, #16]	; (8002ba4 <_ZN11UHAL_USART66enableEv+0x30>)
 8002b92:	f7ff fdf7 	bl	8002784 <LL_USART_Enable>
}
 8002b96:	bf00      	nop
 8002b98:	3708      	adds	r7, #8
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	08004608 	.word	0x08004608
 8002ba4:	40011400 	.word	0x40011400

08002ba8 <_ZN11UHAL_USART617enableTransmitterEv>:

void UHAL_USART6::enableTransmitter() {
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	af00      	add	r7, sp, #0
    LL_USART_EnableDirectionTx(thisInstance);
 8002bac:	4802      	ldr	r0, [pc, #8]	; (8002bb8 <_ZN11UHAL_USART617enableTransmitterEv+0x10>)
 8002bae:	f7ff fe21 	bl	80027f4 <LL_USART_EnableDirectionTx>
}
 8002bb2:	bf00      	nop
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	40011400 	.word	0x40011400

08002bbc <_ZN11UHAL_USART612transmitDataEh>:

void UHAL_USART6::transmitData(const data_T data) {
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b082      	sub	sp, #8
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	71fb      	strb	r3, [r7, #7]
    LL_USART_TransmitData8(thisInstance, data);
 8002bc6:	79fb      	ldrb	r3, [r7, #7]
 8002bc8:	4619      	mov	r1, r3
 8002bca:	4803      	ldr	r0, [pc, #12]	; (8002bd8 <_ZN11UHAL_USART612transmitDataEh+0x1c>)
 8002bcc:	f7ff fe9e 	bl	800290c <LL_USART_TransmitData8>
}
 8002bd0:	bf00      	nop
 8002bd2:	3708      	adds	r7, #8
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	40011400 	.word	0x40011400

08002bdc <_ZN11UHAL_USART621enableInterruptHandleEhh>:
void UHAL_USART6::disable() {
    LL_USART_Disable(thisInstance);
}

void UHAL_USART6::enableInterruptHandle(const uint8_t PreemptPriority,
                                        const uint8_t SubPriority) {
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	4603      	mov	r3, r0
 8002be4:	460a      	mov	r2, r1
 8002be6:	71fb      	strb	r3, [r7, #7]
 8002be8:	4613      	mov	r3, r2
 8002bea:	71bb      	strb	r3, [r7, #6]
    NVIC_SetPriority(USART6_IRQn,
 8002bec:	f7ff fbdc 	bl	80023a8 <__NVIC_GetPriorityGrouping>
 8002bf0:	79fb      	ldrb	r3, [r7, #7]
 8002bf2:	79ba      	ldrb	r2, [r7, #6]
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	f7ff fc2d 	bl	8002454 <NVIC_EncodePriority>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	2047      	movs	r0, #71	; 0x47
 8002c00:	f7ff fbfe 	bl	8002400 <__NVIC_SetPriority>
                     NVIC_EncodePriority(NVIC_GetPriorityGrouping(), PreemptPriority,
                                         SubPriority));
    NVIC_EnableIRQ(USART6_IRQn);
 8002c04:	2047      	movs	r0, #71	; 0x47
 8002c06:	f7ff fbdd 	bl	80023c4 <__NVIC_EnableIRQ>
}
 8002c0a:	bf00      	nop
 8002c0c:	3708      	adds	r7, #8
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
	...

08002c14 <_ZN11UHAL_USART614enableReceiverEv>:

void UHAL_USART6::enableReceiver()
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	af00      	add	r7, sp, #0
    LL_USART_EnableDirectionRx(thisInstance);
 8002c18:	4802      	ldr	r0, [pc, #8]	; (8002c24 <_ZN11UHAL_USART614enableReceiverEv+0x10>)
 8002c1a:	f7ff fdc3 	bl	80027a4 <LL_USART_EnableDirectionRx>
}
 8002c1e:	bf00      	nop
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	40011400 	.word	0x40011400

08002c28 <_ZN9__gnu_cxxneIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKNS_17__normal_iteratorIT_T0_EESE_>:
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8002c28:	b590      	push	{r4, r7, lr}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f000 f82c 	bl	8002c90 <_ZNK9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	681c      	ldr	r4, [r3, #0]
 8002c3c:	6838      	ldr	r0, [r7, #0]
 8002c3e:	f000 f827 	bl	8002c90 <_ZNK9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>
 8002c42:	4603      	mov	r3, r0
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	429c      	cmp	r4, r3
 8002c48:	bf14      	ite	ne
 8002c4a:	2301      	movne	r3, #1
 8002c4c:	2300      	moveq	r3, #0
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	4618      	mov	r0, r3
 8002c52:	370c      	adds	r7, #12
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd90      	pop	{r4, r7, pc}

08002c58 <_ZN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
	++_M_current;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	1c5a      	adds	r2, r3, #1
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	601a      	str	r2, [r3, #0]
	return *this;
 8002c6a:	687b      	ldr	r3, [r7, #4]
      }
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	370c      	adds	r7, #12
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr

08002c78 <_ZNK9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4618      	mov	r0, r3
 8002c86:	370c      	adds	r7, #12
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr

08002c90 <_ZNK9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	370c      	adds	r7, #12
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr

08002ca6 <LL_ADC_REG_SetSequencerLength>:
{
 8002ca6:	b480      	push	{r7}
 8002ca8:	b083      	sub	sp, #12
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
 8002cae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	431a      	orrs	r2, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002cc0:	bf00      	nop
 8002cc2:	370c      	adds	r7, #12
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr

08002ccc <LL_ADC_IsEnabled>:
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	f003 0301 	and.w	r3, r3, #1
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	bf0c      	ite	eq
 8002ce0:	2301      	moveq	r3, #1
 8002ce2:	2300      	movne	r3, #0
 8002ce4:	b2db      	uxtb	r3, r3
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	370c      	adds	r7, #12
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr
	...

08002cf4 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8002cf4:	b590      	push	{r4, r7, lr}
 8002cf6:	b085      	sub	sp, #20
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to  */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 8002d02:	481c      	ldr	r0, [pc, #112]	; (8002d74 <LL_ADC_CommonInit+0x80>)
 8002d04:	f7ff ffe2 	bl	8002ccc <LL_ADC_IsEnabled>
 8002d08:	4604      	mov	r4, r0
 8002d0a:	481b      	ldr	r0, [pc, #108]	; (8002d78 <LL_ADC_CommonInit+0x84>)
 8002d0c:	f7ff ffde 	bl	8002ccc <LL_ADC_IsEnabled>
 8002d10:	4603      	mov	r3, r0
 8002d12:	431c      	orrs	r4, r3
 8002d14:	4819      	ldr	r0, [pc, #100]	; (8002d7c <LL_ADC_CommonInit+0x88>)
 8002d16:	f7ff ffd9 	bl	8002ccc <LL_ADC_IsEnabled>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	4323      	orrs	r3, r4
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d120      	bne.n	8002d64 <LL_ADC_CommonInit+0x70>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d012      	beq.n	8002d50 <LL_ADC_CommonInit+0x5c>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	685a      	ldr	r2, [r3, #4]
 8002d2e:	4b14      	ldr	r3, [pc, #80]	; (8002d80 <LL_ADC_CommonInit+0x8c>)
 8002d30:	4013      	ands	r3, r2
 8002d32:	683a      	ldr	r2, [r7, #0]
 8002d34:	6811      	ldr	r1, [r2, #0]
 8002d36:	683a      	ldr	r2, [r7, #0]
 8002d38:	6852      	ldr	r2, [r2, #4]
 8002d3a:	4311      	orrs	r1, r2
 8002d3c:	683a      	ldr	r2, [r7, #0]
 8002d3e:	6892      	ldr	r2, [r2, #8]
 8002d40:	4311      	orrs	r1, r2
 8002d42:	683a      	ldr	r2, [r7, #0]
 8002d44:	68d2      	ldr	r2, [r2, #12]
 8002d46:	430a      	orrs	r2, r1
 8002d48:	431a      	orrs	r2, r3
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	605a      	str	r2, [r3, #4]
 8002d4e:	e00b      	b.n	8002d68 <LL_ADC_CommonInit+0x74>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	685a      	ldr	r2, [r3, #4]
 8002d54:	4b0a      	ldr	r3, [pc, #40]	; (8002d80 <LL_ADC_CommonInit+0x8c>)
 8002d56:	4013      	ands	r3, r2
 8002d58:	683a      	ldr	r2, [r7, #0]
 8002d5a:	6812      	ldr	r2, [r2, #0]
 8002d5c:	431a      	orrs	r2, r3
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	605a      	str	r2, [r3, #4]
 8002d62:	e001      	b.n	8002d68 <LL_ADC_CommonInit+0x74>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8002d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3714      	adds	r7, #20
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd90      	pop	{r4, r7, pc}
 8002d72:	bf00      	nop
 8002d74:	40012000 	.word	0x40012000
 8002d78:	40012100 	.word	0x40012100
 8002d7c:	40012200 	.word	0x40012200
 8002d80:	fffc10e0 	.word	0xfffc10e0

08002d84 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0UL)
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f7ff ff9a 	bl	8002ccc <LL_ADC_IsEnabled>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d117      	bne.n	8002dce <LL_ADC_Init+0x4a>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8002da6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002daa:	683a      	ldr	r2, [r7, #0]
 8002dac:	6811      	ldr	r1, [r2, #0]
 8002dae:	683a      	ldr	r2, [r7, #0]
 8002db0:	6892      	ldr	r2, [r2, #8]
 8002db2:	430a      	orrs	r2, r1
 8002db4:	431a      	orrs	r2, r3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	605a      	str	r2, [r3, #4]
              ,
                 ADC_InitStruct->Resolution
               | ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	431a      	orrs	r2, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	609a      	str	r2, [r3, #8]
 8002dcc:	e001      	b.n	8002dd2 <LL_ADC_Init+0x4e>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8002dd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3710      	adds	r7, #16
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}

08002ddc <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b084      	sub	sp, #16
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8002de6:	2300      	movs	r3, #0
 8002de8:	73fb      	strb	r3, [r7, #15]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0UL)
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f7ff ff6e 	bl	8002ccc <LL_ADC_IsEnabled>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d12b      	bne.n	8002e4e <LL_ADC_REG_Init+0x72>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 series, ADC trigger edge is set when starting      */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d009      	beq.n	8002e12 <LL_ADC_REG_Init+0x36>
    {
      MODIFY_REG(ADCx->CR1,
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	431a      	orrs	r2, r3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	605a      	str	r2, [r3, #4]
 8002e10:	e005      	b.n	8002e1e <LL_ADC_REG_Init+0x42>
                   ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	605a      	str	r2, [r3, #4]
                ,
                   LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	689a      	ldr	r2, [r3, #8]
 8002e22:	4b0e      	ldr	r3, [pc, #56]	; (8002e5c <LL_ADC_REG_Init+0x80>)
 8002e24:	4013      	ands	r3, r2
 8002e26:	683a      	ldr	r2, [r7, #0]
 8002e28:	6812      	ldr	r2, [r2, #0]
 8002e2a:	f002 6170 	and.w	r1, r2, #251658240	; 0xf000000
 8002e2e:	683a      	ldr	r2, [r7, #0]
 8002e30:	68d2      	ldr	r2, [r2, #12]
 8002e32:	4311      	orrs	r1, r2
 8002e34:	683a      	ldr	r2, [r7, #0]
 8002e36:	6912      	ldr	r2, [r2, #16]
 8002e38:	430a      	orrs	r2, r1
 8002e3a:	431a      	orrs	r2, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	4619      	mov	r1, r3
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f7ff ff2d 	bl	8002ca6 <LL_ADC_REG_SetSequencerLength>
 8002e4c:	e001      	b.n	8002e52 <LL_ADC_REG_Init+0x76>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8002e52:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3710      	adds	r7, #16
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	c0fffcfd 	.word	0xc0fffcfd

08002e60 <LL_GPIO_SetPinMode>:
{
 8002e60:	b480      	push	{r7}
 8002e62:	b089      	sub	sp, #36	; 0x24
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	60b9      	str	r1, [r7, #8]
 8002e6a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	fa93 f3a3 	rbit	r3, r3
 8002e7a:	613b      	str	r3, [r7, #16]
  return result;
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	fab3 f383 	clz	r3, r3
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	005b      	lsls	r3, r3, #1
 8002e86:	2103      	movs	r1, #3
 8002e88:	fa01 f303 	lsl.w	r3, r1, r3
 8002e8c:	43db      	mvns	r3, r3
 8002e8e:	401a      	ands	r2, r3
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	fa93 f3a3 	rbit	r3, r3
 8002e9a:	61bb      	str	r3, [r7, #24]
  return result;
 8002e9c:	69bb      	ldr	r3, [r7, #24]
 8002e9e:	fab3 f383 	clz	r3, r3
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	005b      	lsls	r3, r3, #1
 8002ea6:	6879      	ldr	r1, [r7, #4]
 8002ea8:	fa01 f303 	lsl.w	r3, r1, r3
 8002eac:	431a      	orrs	r2, r3
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	601a      	str	r2, [r3, #0]
}
 8002eb2:	bf00      	nop
 8002eb4:	3724      	adds	r7, #36	; 0x24
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr

08002ebe <LL_GPIO_SetPinOutputType>:
{
 8002ebe:	b480      	push	{r7}
 8002ec0:	b085      	sub	sp, #20
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	60f8      	str	r0, [r7, #12]
 8002ec6:	60b9      	str	r1, [r7, #8]
 8002ec8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	685a      	ldr	r2, [r3, #4]
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	43db      	mvns	r3, r3
 8002ed2:	401a      	ands	r2, r3
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	6879      	ldr	r1, [r7, #4]
 8002ed8:	fb01 f303 	mul.w	r3, r1, r3
 8002edc:	431a      	orrs	r2, r3
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	605a      	str	r2, [r3, #4]
}
 8002ee2:	bf00      	nop
 8002ee4:	3714      	adds	r7, #20
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr

08002eee <LL_GPIO_SetPinSpeed>:
{
 8002eee:	b480      	push	{r7}
 8002ef0:	b089      	sub	sp, #36	; 0x24
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	60f8      	str	r0, [r7, #12]
 8002ef6:	60b9      	str	r1, [r7, #8]
 8002ef8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	689a      	ldr	r2, [r3, #8]
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	fa93 f3a3 	rbit	r3, r3
 8002f08:	613b      	str	r3, [r7, #16]
  return result;
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	fab3 f383 	clz	r3, r3
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	005b      	lsls	r3, r3, #1
 8002f14:	2103      	movs	r1, #3
 8002f16:	fa01 f303 	lsl.w	r3, r1, r3
 8002f1a:	43db      	mvns	r3, r3
 8002f1c:	401a      	ands	r2, r3
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	fa93 f3a3 	rbit	r3, r3
 8002f28:	61bb      	str	r3, [r7, #24]
  return result;
 8002f2a:	69bb      	ldr	r3, [r7, #24]
 8002f2c:	fab3 f383 	clz	r3, r3
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	005b      	lsls	r3, r3, #1
 8002f34:	6879      	ldr	r1, [r7, #4]
 8002f36:	fa01 f303 	lsl.w	r3, r1, r3
 8002f3a:	431a      	orrs	r2, r3
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	609a      	str	r2, [r3, #8]
}
 8002f40:	bf00      	nop
 8002f42:	3724      	adds	r7, #36	; 0x24
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr

08002f4c <LL_GPIO_SetPinPull>:
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b089      	sub	sp, #36	; 0x24
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	60b9      	str	r1, [r7, #8]
 8002f56:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	68da      	ldr	r2, [r3, #12]
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	fa93 f3a3 	rbit	r3, r3
 8002f66:	613b      	str	r3, [r7, #16]
  return result;
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	fab3 f383 	clz	r3, r3
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	005b      	lsls	r3, r3, #1
 8002f72:	2103      	movs	r1, #3
 8002f74:	fa01 f303 	lsl.w	r3, r1, r3
 8002f78:	43db      	mvns	r3, r3
 8002f7a:	401a      	ands	r2, r3
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	fa93 f3a3 	rbit	r3, r3
 8002f86:	61bb      	str	r3, [r7, #24]
  return result;
 8002f88:	69bb      	ldr	r3, [r7, #24]
 8002f8a:	fab3 f383 	clz	r3, r3
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	005b      	lsls	r3, r3, #1
 8002f92:	6879      	ldr	r1, [r7, #4]
 8002f94:	fa01 f303 	lsl.w	r3, r1, r3
 8002f98:	431a      	orrs	r2, r3
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	60da      	str	r2, [r3, #12]
}
 8002f9e:	bf00      	nop
 8002fa0:	3724      	adds	r7, #36	; 0x24
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr

08002faa <LL_GPIO_SetAFPin_0_7>:
{
 8002faa:	b480      	push	{r7}
 8002fac:	b089      	sub	sp, #36	; 0x24
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	60f8      	str	r0, [r7, #12]
 8002fb2:	60b9      	str	r1, [r7, #8]
 8002fb4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6a1a      	ldr	r2, [r3, #32]
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	fa93 f3a3 	rbit	r3, r3
 8002fc4:	613b      	str	r3, [r7, #16]
  return result;
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	fab3 f383 	clz	r3, r3
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	210f      	movs	r1, #15
 8002fd2:	fa01 f303 	lsl.w	r3, r1, r3
 8002fd6:	43db      	mvns	r3, r3
 8002fd8:	401a      	ands	r2, r3
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	fa93 f3a3 	rbit	r3, r3
 8002fe4:	61bb      	str	r3, [r7, #24]
  return result;
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	fab3 f383 	clz	r3, r3
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	6879      	ldr	r1, [r7, #4]
 8002ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ff6:	431a      	orrs	r2, r3
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	621a      	str	r2, [r3, #32]
}
 8002ffc:	bf00      	nop
 8002ffe:	3724      	adds	r7, #36	; 0x24
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr

08003008 <LL_GPIO_SetAFPin_8_15>:
{
 8003008:	b480      	push	{r7}
 800300a:	b089      	sub	sp, #36	; 0x24
 800300c:	af00      	add	r7, sp, #0
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	60b9      	str	r1, [r7, #8]
 8003012:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	0a1b      	lsrs	r3, r3, #8
 800301c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	fa93 f3a3 	rbit	r3, r3
 8003024:	613b      	str	r3, [r7, #16]
  return result;
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	fab3 f383 	clz	r3, r3
 800302c:	b2db      	uxtb	r3, r3
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	210f      	movs	r1, #15
 8003032:	fa01 f303 	lsl.w	r3, r1, r3
 8003036:	43db      	mvns	r3, r3
 8003038:	401a      	ands	r2, r3
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	0a1b      	lsrs	r3, r3, #8
 800303e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	fa93 f3a3 	rbit	r3, r3
 8003046:	61bb      	str	r3, [r7, #24]
  return result;
 8003048:	69bb      	ldr	r3, [r7, #24]
 800304a:	fab3 f383 	clz	r3, r3
 800304e:	b2db      	uxtb	r3, r3
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	6879      	ldr	r1, [r7, #4]
 8003054:	fa01 f303 	lsl.w	r3, r1, r3
 8003058:	431a      	orrs	r2, r3
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800305e:	bf00      	nop
 8003060:	3724      	adds	r7, #36	; 0x24
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr

0800306a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800306a:	b580      	push	{r7, lr}
 800306c:	b088      	sub	sp, #32
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]
 8003072:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8003074:	2300      	movs	r3, #0
 8003076:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8003078:	2300      	movs	r3, #0
 800307a:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	fa93 f3a3 	rbit	r3, r3
 8003088:	613b      	str	r3, [r7, #16]
  return result;
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	fab3 f383 	clz	r3, r3
 8003090:	b2db      	uxtb	r3, r3
 8003092:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8003094:	e050      	b.n	8003138 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	2101      	movs	r1, #1
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	fa01 f303 	lsl.w	r3, r1, r3
 80030a2:	4013      	ands	r3, r2
 80030a4:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 80030a6:	69bb      	ldr	r3, [r7, #24]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d042      	beq.n	8003132 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d003      	beq.n	80030bc <LL_GPIO_Init+0x52>
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d10d      	bne.n	80030d8 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	461a      	mov	r2, r3
 80030c2:	69b9      	ldr	r1, [r7, #24]
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	f7ff ff12 	bl	8002eee <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	461a      	mov	r2, r3
 80030d0:	69b9      	ldr	r1, [r7, #24]
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f7ff fef3 	bl	8002ebe <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	691b      	ldr	r3, [r3, #16]
 80030dc:	461a      	mov	r2, r3
 80030de:	69b9      	ldr	r1, [r7, #24]
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	f7ff ff33 	bl	8002f4c <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d11a      	bne.n	8003124 <LL_GPIO_Init+0xba>
 80030ee:	69bb      	ldr	r3, [r7, #24]
 80030f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	fa93 f3a3 	rbit	r3, r3
 80030f8:	60bb      	str	r3, [r7, #8]
  return result;
 80030fa:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80030fc:	fab3 f383 	clz	r3, r3
 8003100:	b2db      	uxtb	r3, r3
 8003102:	2b07      	cmp	r3, #7
 8003104:	d807      	bhi.n	8003116 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	695b      	ldr	r3, [r3, #20]
 800310a:	461a      	mov	r2, r3
 800310c:	69b9      	ldr	r1, [r7, #24]
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f7ff ff4b 	bl	8002faa <LL_GPIO_SetAFPin_0_7>
 8003114:	e006      	b.n	8003124 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	695b      	ldr	r3, [r3, #20]
 800311a:	461a      	mov	r2, r3
 800311c:	69b9      	ldr	r1, [r7, #24]
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f7ff ff72 	bl	8003008 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	461a      	mov	r2, r3
 800312a:	69b9      	ldr	r1, [r7, #24]
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f7ff fe97 	bl	8002e60 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	3301      	adds	r3, #1
 8003136:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	fa22 f303 	lsr.w	r3, r2, r3
 8003142:	2b00      	cmp	r3, #0
 8003144:	d1a7      	bne.n	8003096 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8003146:	2300      	movs	r3, #0
}
 8003148:	4618      	mov	r0, r3
 800314a:	3720      	adds	r7, #32
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}

08003150 <LL_RCC_GetSysClkSource>:
{
 8003150:	b480      	push	{r7}
 8003152:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003154:	4b04      	ldr	r3, [pc, #16]	; (8003168 <LL_RCC_GetSysClkSource+0x18>)
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	f003 030c 	and.w	r3, r3, #12
}
 800315c:	4618      	mov	r0, r3
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr
 8003166:	bf00      	nop
 8003168:	40023800 	.word	0x40023800

0800316c <LL_RCC_GetAHBPrescaler>:
{
 800316c:	b480      	push	{r7}
 800316e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003170:	4b04      	ldr	r3, [pc, #16]	; (8003184 <LL_RCC_GetAHBPrescaler+0x18>)
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003178:	4618      	mov	r0, r3
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr
 8003182:	bf00      	nop
 8003184:	40023800 	.word	0x40023800

08003188 <LL_RCC_GetAPB1Prescaler>:
{
 8003188:	b480      	push	{r7}
 800318a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800318c:	4b04      	ldr	r3, [pc, #16]	; (80031a0 <LL_RCC_GetAPB1Prescaler+0x18>)
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8003194:	4618      	mov	r0, r3
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr
 800319e:	bf00      	nop
 80031a0:	40023800 	.word	0x40023800

080031a4 <LL_RCC_GetAPB2Prescaler>:
{
 80031a4:	b480      	push	{r7}
 80031a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80031a8:	4b04      	ldr	r3, [pc, #16]	; (80031bc <LL_RCC_GetAPB2Prescaler+0x18>)
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr
 80031ba:	bf00      	nop
 80031bc:	40023800 	.word	0x40023800

080031c0 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80031c0:	b480      	push	{r7}
 80031c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80031c4:	4b04      	ldr	r3, [pc, #16]	; (80031d8 <LL_RCC_PLL_GetMainSource+0x18>)
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr
 80031d6:	bf00      	nop
 80031d8:	40023800 	.word	0x40023800

080031dc <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80031dc:	b480      	push	{r7}
 80031de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80031e0:	4b04      	ldr	r3, [pc, #16]	; (80031f4 <LL_RCC_PLL_GetN+0x18>)
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	099b      	lsrs	r3, r3, #6
 80031e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr
 80031f4:	40023800 	.word	0x40023800

080031f8 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 80031f8:	b480      	push	{r7}
 80031fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 80031fc:	4b04      	ldr	r3, [pc, #16]	; (8003210 <LL_RCC_PLL_GetP+0x18>)
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8003204:	4618      	mov	r0, r3
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr
 800320e:	bf00      	nop
 8003210:	40023800 	.word	0x40023800

08003214 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003214:	b480      	push	{r7}
 8003216:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003218:	4b04      	ldr	r3, [pc, #16]	; (800322c <LL_RCC_PLL_GetDivider+0x18>)
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8003220:	4618      	mov	r0, r3
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr
 800322a:	bf00      	nop
 800322c:	40023800 	.word	0x40023800

08003230 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8003238:	f000 f820 	bl	800327c <RCC_GetSystemClockFreq>
 800323c:	4602      	mov	r2, r0
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4618      	mov	r0, r3
 8003248:	f000 f840 	bl	80032cc <RCC_GetHCLKClockFreq>
 800324c:	4602      	mov	r2, r0
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	4618      	mov	r0, r3
 8003258:	f000 f84e 	bl	80032f8 <RCC_GetPCLK1ClockFreq>
 800325c:	4602      	mov	r2, r0
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	4618      	mov	r0, r3
 8003268:	f000 f85a 	bl	8003320 <RCC_GetPCLK2ClockFreq>
 800326c:	4602      	mov	r2, r0
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	60da      	str	r2, [r3, #12]
}
 8003272:	bf00      	nop
 8003274:	3708      	adds	r7, #8
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
	...

0800327c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b082      	sub	sp, #8
 8003280:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8003282:	2300      	movs	r3, #0
 8003284:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8003286:	f7ff ff63 	bl	8003150 <LL_RCC_GetSysClkSource>
 800328a:	4603      	mov	r3, r0
 800328c:	2b08      	cmp	r3, #8
 800328e:	d00c      	beq.n	80032aa <RCC_GetSystemClockFreq+0x2e>
 8003290:	2b08      	cmp	r3, #8
 8003292:	d80f      	bhi.n	80032b4 <RCC_GetSystemClockFreq+0x38>
 8003294:	2b00      	cmp	r3, #0
 8003296:	d002      	beq.n	800329e <RCC_GetSystemClockFreq+0x22>
 8003298:	2b04      	cmp	r3, #4
 800329a:	d003      	beq.n	80032a4 <RCC_GetSystemClockFreq+0x28>
 800329c:	e00a      	b.n	80032b4 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800329e:	4b09      	ldr	r3, [pc, #36]	; (80032c4 <RCC_GetSystemClockFreq+0x48>)
 80032a0:	607b      	str	r3, [r7, #4]
      break;
 80032a2:	e00a      	b.n	80032ba <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80032a4:	4b08      	ldr	r3, [pc, #32]	; (80032c8 <RCC_GetSystemClockFreq+0x4c>)
 80032a6:	607b      	str	r3, [r7, #4]
      break;
 80032a8:	e007      	b.n	80032ba <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 80032aa:	2008      	movs	r0, #8
 80032ac:	f000 f84c 	bl	8003348 <RCC_PLL_GetFreqDomain_SYS>
 80032b0:	6078      	str	r0, [r7, #4]
      break;
 80032b2:	e002      	b.n	80032ba <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 80032b4:	4b03      	ldr	r3, [pc, #12]	; (80032c4 <RCC_GetSystemClockFreq+0x48>)
 80032b6:	607b      	str	r3, [r7, #4]
      break;
 80032b8:	bf00      	nop
  }

  return frequency;
 80032ba:	687b      	ldr	r3, [r7, #4]
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3708      	adds	r7, #8
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	00f42400 	.word	0x00f42400
 80032c8:	007a1200 	.word	0x007a1200

080032cc <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b082      	sub	sp, #8
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80032d4:	f7ff ff4a 	bl	800316c <LL_RCC_GetAHBPrescaler>
 80032d8:	4603      	mov	r3, r0
 80032da:	091b      	lsrs	r3, r3, #4
 80032dc:	f003 030f 	and.w	r3, r3, #15
 80032e0:	4a04      	ldr	r2, [pc, #16]	; (80032f4 <RCC_GetHCLKClockFreq+0x28>)
 80032e2:	5cd3      	ldrb	r3, [r2, r3]
 80032e4:	461a      	mov	r2, r3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	40d3      	lsrs	r3, r2
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3708      	adds	r7, #8
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	08004638 	.word	0x08004638

080032f8 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8003300:	f7ff ff42 	bl	8003188 <LL_RCC_GetAPB1Prescaler>
 8003304:	4603      	mov	r3, r0
 8003306:	0a9b      	lsrs	r3, r3, #10
 8003308:	4a04      	ldr	r2, [pc, #16]	; (800331c <RCC_GetPCLK1ClockFreq+0x24>)
 800330a:	5cd3      	ldrb	r3, [r2, r3]
 800330c:	461a      	mov	r2, r3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	40d3      	lsrs	r3, r2
}
 8003312:	4618      	mov	r0, r3
 8003314:	3708      	adds	r7, #8
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	08004648 	.word	0x08004648

08003320 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b082      	sub	sp, #8
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8003328:	f7ff ff3c 	bl	80031a4 <LL_RCC_GetAPB2Prescaler>
 800332c:	4603      	mov	r3, r0
 800332e:	0b5b      	lsrs	r3, r3, #13
 8003330:	4a04      	ldr	r2, [pc, #16]	; (8003344 <RCC_GetPCLK2ClockFreq+0x24>)
 8003332:	5cd3      	ldrb	r3, [r2, r3]
 8003334:	461a      	mov	r2, r3
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	40d3      	lsrs	r3, r2
}
 800333a:	4618      	mov	r0, r3
 800333c:	3708      	adds	r7, #8
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	08004648 	.word	0x08004648

08003348 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8003348:	b590      	push	{r4, r7, lr}
 800334a:	b087      	sub	sp, #28
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8003350:	2300      	movs	r3, #0
 8003352:	617b      	str	r3, [r7, #20]
 8003354:	2300      	movs	r3, #0
 8003356:	60fb      	str	r3, [r7, #12]
 8003358:	2300      	movs	r3, #0
 800335a:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800335c:	f7ff ff30 	bl	80031c0 <LL_RCC_PLL_GetMainSource>
 8003360:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d004      	beq.n	8003372 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800336e:	d003      	beq.n	8003378 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8003370:	e005      	b.n	800337e <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8003372:	4b12      	ldr	r3, [pc, #72]	; (80033bc <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8003374:	617b      	str	r3, [r7, #20]
      break;
 8003376:	e005      	b.n	8003384 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8003378:	4b11      	ldr	r3, [pc, #68]	; (80033c0 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 800337a:	617b      	str	r3, [r7, #20]
      break;
 800337c:	e002      	b.n	8003384 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 800337e:	4b0f      	ldr	r3, [pc, #60]	; (80033bc <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8003380:	617b      	str	r3, [r7, #20]
      break;
 8003382:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2b08      	cmp	r3, #8
 8003388:	d113      	bne.n	80033b2 <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800338a:	f7ff ff43 	bl	8003214 <LL_RCC_PLL_GetDivider>
 800338e:	4602      	mov	r2, r0
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	fbb3 f4f2 	udiv	r4, r3, r2
 8003396:	f7ff ff21 	bl	80031dc <LL_RCC_PLL_GetN>
 800339a:	4603      	mov	r3, r0
 800339c:	fb03 f404 	mul.w	r4, r3, r4
 80033a0:	f7ff ff2a 	bl	80031f8 <LL_RCC_PLL_GetP>
 80033a4:	4603      	mov	r3, r0
 80033a6:	0c1b      	lsrs	r3, r3, #16
 80033a8:	3301      	adds	r3, #1
 80033aa:	005b      	lsls	r3, r3, #1
 80033ac:	fbb4 f3f3 	udiv	r3, r4, r3
 80033b0:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 80033b2:	693b      	ldr	r3, [r7, #16]
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	371c      	adds	r7, #28
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd90      	pop	{r4, r7, pc}
 80033bc:	00f42400 	.word	0x00f42400
 80033c0:	007a1200 	.word	0x007a1200

080033c4 <LL_USART_IsEnabled>:
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033d8:	bf0c      	ite	eq
 80033da:	2301      	moveq	r3, #1
 80033dc:	2300      	movne	r3, #0
 80033de:	b2db      	uxtb	r3, r3
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	370c      	adds	r7, #12
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr

080033ec <LL_USART_SetStopBitsLength>:
{
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	691b      	ldr	r3, [r3, #16]
 80033fa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	431a      	orrs	r2, r3
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	611a      	str	r2, [r3, #16]
}
 8003406:	bf00      	nop
 8003408:	370c      	adds	r7, #12
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr

08003412 <LL_USART_SetHWFlowCtrl>:
{
 8003412:	b480      	push	{r7}
 8003414:	b083      	sub	sp, #12
 8003416:	af00      	add	r7, sp, #0
 8003418:	6078      	str	r0, [r7, #4]
 800341a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	695b      	ldr	r3, [r3, #20]
 8003420:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	431a      	orrs	r2, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	615a      	str	r2, [r3, #20]
}
 800342c:	bf00      	nop
 800342e:	370c      	adds	r7, #12
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr

08003438 <LL_USART_SetBaudRate>:
{
 8003438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800343c:	b09f      	sub	sp, #124	; 0x7c
 800343e:	af00      	add	r7, sp, #0
 8003440:	6778      	str	r0, [r7, #116]	; 0x74
 8003442:	6739      	str	r1, [r7, #112]	; 0x70
 8003444:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003446:	66bb      	str	r3, [r7, #104]	; 0x68
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8003448:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800344a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800344e:	f040 80bc 	bne.w	80035ca <LL_USART_SetBaudRate+0x192>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8003452:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003454:	461c      	mov	r4, r3
 8003456:	f04f 0500 	mov.w	r5, #0
 800345a:	4622      	mov	r2, r4
 800345c:	462b      	mov	r3, r5
 800345e:	eb12 0a02 	adds.w	sl, r2, r2
 8003462:	eb43 0b03 	adc.w	fp, r3, r3
 8003466:	4652      	mov	r2, sl
 8003468:	465b      	mov	r3, fp
 800346a:	1912      	adds	r2, r2, r4
 800346c:	eb45 0303 	adc.w	r3, r5, r3
 8003470:	f04f 0000 	mov.w	r0, #0
 8003474:	f04f 0100 	mov.w	r1, #0
 8003478:	00d9      	lsls	r1, r3, #3
 800347a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800347e:	00d0      	lsls	r0, r2, #3
 8003480:	4602      	mov	r2, r0
 8003482:	460b      	mov	r3, r1
 8003484:	1911      	adds	r1, r2, r4
 8003486:	6639      	str	r1, [r7, #96]	; 0x60
 8003488:	416b      	adcs	r3, r5
 800348a:	667b      	str	r3, [r7, #100]	; 0x64
 800348c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800348e:	461a      	mov	r2, r3
 8003490:	f04f 0300 	mov.w	r3, #0
 8003494:	1891      	adds	r1, r2, r2
 8003496:	6339      	str	r1, [r7, #48]	; 0x30
 8003498:	415b      	adcs	r3, r3
 800349a:	637b      	str	r3, [r7, #52]	; 0x34
 800349c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80034a0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80034a4:	f7fc feec 	bl	8000280 <__aeabi_uldivmod>
 80034a8:	4602      	mov	r2, r0
 80034aa:	460b      	mov	r3, r1
 80034ac:	4ba9      	ldr	r3, [pc, #676]	; (8003754 <LL_USART_SetBaudRate+0x31c>)
 80034ae:	fba3 2302 	umull	r2, r3, r3, r2
 80034b2:	095b      	lsrs	r3, r3, #5
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	011b      	lsls	r3, r3, #4
 80034b8:	b29e      	uxth	r6, r3
 80034ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80034bc:	461c      	mov	r4, r3
 80034be:	f04f 0500 	mov.w	r5, #0
 80034c2:	4622      	mov	r2, r4
 80034c4:	462b      	mov	r3, r5
 80034c6:	1891      	adds	r1, r2, r2
 80034c8:	62b9      	str	r1, [r7, #40]	; 0x28
 80034ca:	415b      	adcs	r3, r3
 80034cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80034d2:	1912      	adds	r2, r2, r4
 80034d4:	eb45 0303 	adc.w	r3, r5, r3
 80034d8:	f04f 0000 	mov.w	r0, #0
 80034dc:	f04f 0100 	mov.w	r1, #0
 80034e0:	00d9      	lsls	r1, r3, #3
 80034e2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80034e6:	00d0      	lsls	r0, r2, #3
 80034e8:	4602      	mov	r2, r0
 80034ea:	460b      	mov	r3, r1
 80034ec:	1911      	adds	r1, r2, r4
 80034ee:	65b9      	str	r1, [r7, #88]	; 0x58
 80034f0:	416b      	adcs	r3, r5
 80034f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80034f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80034f6:	461a      	mov	r2, r3
 80034f8:	f04f 0300 	mov.w	r3, #0
 80034fc:	1891      	adds	r1, r2, r2
 80034fe:	6239      	str	r1, [r7, #32]
 8003500:	415b      	adcs	r3, r3
 8003502:	627b      	str	r3, [r7, #36]	; 0x24
 8003504:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003508:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800350c:	f7fc feb8 	bl	8000280 <__aeabi_uldivmod>
 8003510:	4602      	mov	r2, r0
 8003512:	460b      	mov	r3, r1
 8003514:	4b8f      	ldr	r3, [pc, #572]	; (8003754 <LL_USART_SetBaudRate+0x31c>)
 8003516:	fba3 1302 	umull	r1, r3, r3, r2
 800351a:	095b      	lsrs	r3, r3, #5
 800351c:	2164      	movs	r1, #100	; 0x64
 800351e:	fb01 f303 	mul.w	r3, r1, r3
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	00db      	lsls	r3, r3, #3
 8003526:	3332      	adds	r3, #50	; 0x32
 8003528:	4a8a      	ldr	r2, [pc, #552]	; (8003754 <LL_USART_SetBaudRate+0x31c>)
 800352a:	fba2 2303 	umull	r2, r3, r2, r3
 800352e:	095b      	lsrs	r3, r3, #5
 8003530:	b29b      	uxth	r3, r3
 8003532:	005b      	lsls	r3, r3, #1
 8003534:	b29b      	uxth	r3, r3
 8003536:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800353a:	b29b      	uxth	r3, r3
 800353c:	4433      	add	r3, r6
 800353e:	b29e      	uxth	r6, r3
 8003540:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003542:	4618      	mov	r0, r3
 8003544:	f04f 0100 	mov.w	r1, #0
 8003548:	4602      	mov	r2, r0
 800354a:	460b      	mov	r3, r1
 800354c:	1894      	adds	r4, r2, r2
 800354e:	61bc      	str	r4, [r7, #24]
 8003550:	415b      	adcs	r3, r3
 8003552:	61fb      	str	r3, [r7, #28]
 8003554:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003558:	1812      	adds	r2, r2, r0
 800355a:	eb41 0303 	adc.w	r3, r1, r3
 800355e:	f04f 0400 	mov.w	r4, #0
 8003562:	f04f 0500 	mov.w	r5, #0
 8003566:	00dd      	lsls	r5, r3, #3
 8003568:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800356c:	00d4      	lsls	r4, r2, #3
 800356e:	4622      	mov	r2, r4
 8003570:	462b      	mov	r3, r5
 8003572:	1814      	adds	r4, r2, r0
 8003574:	653c      	str	r4, [r7, #80]	; 0x50
 8003576:	414b      	adcs	r3, r1
 8003578:	657b      	str	r3, [r7, #84]	; 0x54
 800357a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800357c:	461a      	mov	r2, r3
 800357e:	f04f 0300 	mov.w	r3, #0
 8003582:	1891      	adds	r1, r2, r2
 8003584:	6139      	str	r1, [r7, #16]
 8003586:	415b      	adcs	r3, r3
 8003588:	617b      	str	r3, [r7, #20]
 800358a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800358e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003592:	f7fc fe75 	bl	8000280 <__aeabi_uldivmod>
 8003596:	4602      	mov	r2, r0
 8003598:	460b      	mov	r3, r1
 800359a:	4b6e      	ldr	r3, [pc, #440]	; (8003754 <LL_USART_SetBaudRate+0x31c>)
 800359c:	fba3 1302 	umull	r1, r3, r3, r2
 80035a0:	095b      	lsrs	r3, r3, #5
 80035a2:	2164      	movs	r1, #100	; 0x64
 80035a4:	fb01 f303 	mul.w	r3, r1, r3
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	00db      	lsls	r3, r3, #3
 80035ac:	3332      	adds	r3, #50	; 0x32
 80035ae:	4a69      	ldr	r2, [pc, #420]	; (8003754 <LL_USART_SetBaudRate+0x31c>)
 80035b0:	fba2 2303 	umull	r2, r3, r2, r3
 80035b4:	095b      	lsrs	r3, r3, #5
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	f003 0307 	and.w	r3, r3, #7
 80035bc:	b29b      	uxth	r3, r3
 80035be:	4433      	add	r3, r6
 80035c0:	b29b      	uxth	r3, r3
 80035c2:	461a      	mov	r2, r3
 80035c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035c6:	609a      	str	r2, [r3, #8]
}
 80035c8:	e0be      	b.n	8003748 <LL_USART_SetBaudRate+0x310>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80035ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80035cc:	461c      	mov	r4, r3
 80035ce:	f04f 0500 	mov.w	r5, #0
 80035d2:	4622      	mov	r2, r4
 80035d4:	462b      	mov	r3, r5
 80035d6:	eb12 0802 	adds.w	r8, r2, r2
 80035da:	eb43 0903 	adc.w	r9, r3, r3
 80035de:	4642      	mov	r2, r8
 80035e0:	464b      	mov	r3, r9
 80035e2:	1912      	adds	r2, r2, r4
 80035e4:	eb45 0303 	adc.w	r3, r5, r3
 80035e8:	f04f 0000 	mov.w	r0, #0
 80035ec:	f04f 0100 	mov.w	r1, #0
 80035f0:	00d9      	lsls	r1, r3, #3
 80035f2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80035f6:	00d0      	lsls	r0, r2, #3
 80035f8:	4602      	mov	r2, r0
 80035fa:	460b      	mov	r3, r1
 80035fc:	1911      	adds	r1, r2, r4
 80035fe:	64b9      	str	r1, [r7, #72]	; 0x48
 8003600:	416b      	adcs	r3, r5
 8003602:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003604:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003606:	4618      	mov	r0, r3
 8003608:	f04f 0100 	mov.w	r1, #0
 800360c:	f04f 0200 	mov.w	r2, #0
 8003610:	f04f 0300 	mov.w	r3, #0
 8003614:	008b      	lsls	r3, r1, #2
 8003616:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800361a:	0082      	lsls	r2, r0, #2
 800361c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003620:	f7fc fe2e 	bl	8000280 <__aeabi_uldivmod>
 8003624:	4602      	mov	r2, r0
 8003626:	460b      	mov	r3, r1
 8003628:	4b4a      	ldr	r3, [pc, #296]	; (8003754 <LL_USART_SetBaudRate+0x31c>)
 800362a:	fba3 2302 	umull	r2, r3, r3, r2
 800362e:	095b      	lsrs	r3, r3, #5
 8003630:	b29b      	uxth	r3, r3
 8003632:	011b      	lsls	r3, r3, #4
 8003634:	b29e      	uxth	r6, r3
 8003636:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003638:	4618      	mov	r0, r3
 800363a:	f04f 0100 	mov.w	r1, #0
 800363e:	4602      	mov	r2, r0
 8003640:	460b      	mov	r3, r1
 8003642:	1894      	adds	r4, r2, r2
 8003644:	60bc      	str	r4, [r7, #8]
 8003646:	415b      	adcs	r3, r3
 8003648:	60fb      	str	r3, [r7, #12]
 800364a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800364e:	1812      	adds	r2, r2, r0
 8003650:	eb41 0303 	adc.w	r3, r1, r3
 8003654:	f04f 0400 	mov.w	r4, #0
 8003658:	f04f 0500 	mov.w	r5, #0
 800365c:	00dd      	lsls	r5, r3, #3
 800365e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003662:	00d4      	lsls	r4, r2, #3
 8003664:	4622      	mov	r2, r4
 8003666:	462b      	mov	r3, r5
 8003668:	1814      	adds	r4, r2, r0
 800366a:	643c      	str	r4, [r7, #64]	; 0x40
 800366c:	414b      	adcs	r3, r1
 800366e:	647b      	str	r3, [r7, #68]	; 0x44
 8003670:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003672:	4618      	mov	r0, r3
 8003674:	f04f 0100 	mov.w	r1, #0
 8003678:	f04f 0200 	mov.w	r2, #0
 800367c:	f04f 0300 	mov.w	r3, #0
 8003680:	008b      	lsls	r3, r1, #2
 8003682:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003686:	0082      	lsls	r2, r0, #2
 8003688:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800368c:	f7fc fdf8 	bl	8000280 <__aeabi_uldivmod>
 8003690:	4602      	mov	r2, r0
 8003692:	460b      	mov	r3, r1
 8003694:	4b2f      	ldr	r3, [pc, #188]	; (8003754 <LL_USART_SetBaudRate+0x31c>)
 8003696:	fba3 1302 	umull	r1, r3, r3, r2
 800369a:	095b      	lsrs	r3, r3, #5
 800369c:	2164      	movs	r1, #100	; 0x64
 800369e:	fb01 f303 	mul.w	r3, r1, r3
 80036a2:	1ad3      	subs	r3, r2, r3
 80036a4:	011b      	lsls	r3, r3, #4
 80036a6:	3332      	adds	r3, #50	; 0x32
 80036a8:	4a2a      	ldr	r2, [pc, #168]	; (8003754 <LL_USART_SetBaudRate+0x31c>)
 80036aa:	fba2 2303 	umull	r2, r3, r2, r3
 80036ae:	095b      	lsrs	r3, r3, #5
 80036b0:	b29b      	uxth	r3, r3
 80036b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	4433      	add	r3, r6
 80036ba:	b29e      	uxth	r6, r3
 80036bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80036be:	4618      	mov	r0, r3
 80036c0:	f04f 0100 	mov.w	r1, #0
 80036c4:	4602      	mov	r2, r0
 80036c6:	460b      	mov	r3, r1
 80036c8:	1894      	adds	r4, r2, r2
 80036ca:	603c      	str	r4, [r7, #0]
 80036cc:	415b      	adcs	r3, r3
 80036ce:	607b      	str	r3, [r7, #4]
 80036d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80036d4:	1812      	adds	r2, r2, r0
 80036d6:	eb41 0303 	adc.w	r3, r1, r3
 80036da:	f04f 0400 	mov.w	r4, #0
 80036de:	f04f 0500 	mov.w	r5, #0
 80036e2:	00dd      	lsls	r5, r3, #3
 80036e4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80036e8:	00d4      	lsls	r4, r2, #3
 80036ea:	4622      	mov	r2, r4
 80036ec:	462b      	mov	r3, r5
 80036ee:	1814      	adds	r4, r2, r0
 80036f0:	63bc      	str	r4, [r7, #56]	; 0x38
 80036f2:	414b      	adcs	r3, r1
 80036f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80036f8:	4618      	mov	r0, r3
 80036fa:	f04f 0100 	mov.w	r1, #0
 80036fe:	f04f 0200 	mov.w	r2, #0
 8003702:	f04f 0300 	mov.w	r3, #0
 8003706:	008b      	lsls	r3, r1, #2
 8003708:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800370c:	0082      	lsls	r2, r0, #2
 800370e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003712:	f7fc fdb5 	bl	8000280 <__aeabi_uldivmod>
 8003716:	4602      	mov	r2, r0
 8003718:	460b      	mov	r3, r1
 800371a:	4b0e      	ldr	r3, [pc, #56]	; (8003754 <LL_USART_SetBaudRate+0x31c>)
 800371c:	fba3 1302 	umull	r1, r3, r3, r2
 8003720:	095b      	lsrs	r3, r3, #5
 8003722:	2164      	movs	r1, #100	; 0x64
 8003724:	fb01 f303 	mul.w	r3, r1, r3
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	011b      	lsls	r3, r3, #4
 800372c:	3332      	adds	r3, #50	; 0x32
 800372e:	4a09      	ldr	r2, [pc, #36]	; (8003754 <LL_USART_SetBaudRate+0x31c>)
 8003730:	fba2 2303 	umull	r2, r3, r2, r3
 8003734:	095b      	lsrs	r3, r3, #5
 8003736:	b29b      	uxth	r3, r3
 8003738:	f003 030f 	and.w	r3, r3, #15
 800373c:	b29b      	uxth	r3, r3
 800373e:	4433      	add	r3, r6
 8003740:	b29b      	uxth	r3, r3
 8003742:	461a      	mov	r2, r3
 8003744:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003746:	609a      	str	r2, [r3, #8]
}
 8003748:	bf00      	nop
 800374a:	377c      	adds	r7, #124	; 0x7c
 800374c:	46bd      	mov	sp, r7
 800374e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003752:	bf00      	nop
 8003754:	51eb851f 	.word	0x51eb851f

08003758 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b088      	sub	sp, #32
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8003766:	2300      	movs	r3, #0
 8003768:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f7ff fe2a 	bl	80033c4 <LL_USART_IsEnabled>
 8003770:	4603      	mov	r3, r0
 8003772:	2b00      	cmp	r3, #0
 8003774:	d15e      	bne.n	8003834 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800377e:	f023 030c 	bic.w	r3, r3, #12
 8003782:	683a      	ldr	r2, [r7, #0]
 8003784:	6851      	ldr	r1, [r2, #4]
 8003786:	683a      	ldr	r2, [r7, #0]
 8003788:	68d2      	ldr	r2, [r2, #12]
 800378a:	4311      	orrs	r1, r2
 800378c:	683a      	ldr	r2, [r7, #0]
 800378e:	6912      	ldr	r2, [r2, #16]
 8003790:	4311      	orrs	r1, r2
 8003792:	683a      	ldr	r2, [r7, #0]
 8003794:	6992      	ldr	r2, [r2, #24]
 8003796:	430a      	orrs	r2, r1
 8003798:	431a      	orrs	r2, r3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	4619      	mov	r1, r3
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f7ff fe21 	bl	80033ec <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	695b      	ldr	r3, [r3, #20]
 80037ae:	4619      	mov	r1, r3
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f7ff fe2e 	bl	8003412 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80037b6:	f107 0308 	add.w	r3, r7, #8
 80037ba:	4618      	mov	r0, r3
 80037bc:	f7ff fd38 	bl	8003230 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	4a1f      	ldr	r2, [pc, #124]	; (8003840 <LL_USART_Init+0xe8>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d102      	bne.n	80037ce <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	61bb      	str	r3, [r7, #24]
 80037cc:	e021      	b.n	8003812 <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4a1c      	ldr	r2, [pc, #112]	; (8003844 <LL_USART_Init+0xec>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d102      	bne.n	80037dc <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	61bb      	str	r3, [r7, #24]
 80037da:	e01a      	b.n	8003812 <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	4a1a      	ldr	r2, [pc, #104]	; (8003848 <LL_USART_Init+0xf0>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d102      	bne.n	80037ea <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	61bb      	str	r3, [r7, #24]
 80037e8:	e013      	b.n	8003812 <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4a17      	ldr	r2, [pc, #92]	; (800384c <LL_USART_Init+0xf4>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d102      	bne.n	80037f8 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	61bb      	str	r3, [r7, #24]
 80037f6:	e00c      	b.n	8003812 <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	4a15      	ldr	r2, [pc, #84]	; (8003850 <LL_USART_Init+0xf8>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d102      	bne.n	8003806 <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	61bb      	str	r3, [r7, #24]
 8003804:	e005      	b.n	8003812 <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4a12      	ldr	r2, [pc, #72]	; (8003854 <LL_USART_Init+0xfc>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d101      	bne.n	8003812 <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8003812:	69bb      	ldr	r3, [r7, #24]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d00d      	beq.n	8003834 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d009      	beq.n	8003834 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 8003820:	2300      	movs	r3, #0
 8003822:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	699a      	ldr	r2, [r3, #24]
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	69b9      	ldr	r1, [r7, #24]
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f7ff fe02 	bl	8003438 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8003834:	7ffb      	ldrb	r3, [r7, #31]
}
 8003836:	4618      	mov	r0, r3
 8003838:	3720      	adds	r7, #32
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	40011000 	.word	0x40011000
 8003844:	40004400 	.word	0x40004400
 8003848:	40004800 	.word	0x40004800
 800384c:	40011400 	.word	0x40011400
 8003850:	40004c00 	.word	0x40004c00
 8003854:	40005000 	.word	0x40005000

08003858 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	fbb2 f3f3 	udiv	r3, r2, r3
 800386a:	4a07      	ldr	r2, [pc, #28]	; (8003888 <LL_InitTick+0x30>)
 800386c:	3b01      	subs	r3, #1
 800386e:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8003870:	4b05      	ldr	r3, [pc, #20]	; (8003888 <LL_InitTick+0x30>)
 8003872:	2200      	movs	r2, #0
 8003874:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003876:	4b04      	ldr	r3, [pc, #16]	; (8003888 <LL_InitTick+0x30>)
 8003878:	2205      	movs	r2, #5
 800387a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 800387c:	bf00      	nop
 800387e:	370c      	adds	r7, #12
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr
 8003888:	e000e010 	.word	0xe000e010

0800388c <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b082      	sub	sp, #8
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8003894:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f7ff ffdd 	bl	8003858 <LL_InitTick>
}
 800389e:	bf00      	nop
 80038a0:	3708      	adds	r7, #8
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
	...

080038a8 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b083      	sub	sp, #12
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80038b0:	4a04      	ldr	r2, [pc, #16]	; (80038c4 <LL_SetSystemCoreClock+0x1c>)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6013      	str	r3, [r2, #0]
}
 80038b6:	bf00      	nop
 80038b8:	370c      	adds	r7, #12
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr
 80038c2:	bf00      	nop
 80038c4:	20000000 	.word	0x20000000

080038c8 <_ZNSaIcEC1Ev>:
 80038c8:	4770      	bx	lr

080038ca <_ZNSaIcED1Ev>:
 80038ca:	4770      	bx	lr

080038cc <_ZSt17__throw_bad_allocv>:
 80038cc:	b508      	push	{r3, lr}
 80038ce:	f000 f97d 	bl	8003bcc <abort>

080038d2 <_ZSt19__throw_logic_errorPKc>:
 80038d2:	b508      	push	{r3, lr}
 80038d4:	f000 f97a 	bl	8003bcc <abort>

080038d8 <_ZSt20__throw_length_errorPKc>:
 80038d8:	b508      	push	{r3, lr}
 80038da:	f000 f977 	bl	8003bcc <abort>

080038de <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 80038de:	b10a      	cbz	r2, 80038e4 <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 80038e0:	f000 b9b6 	b.w	8003c50 <memcpy>
 80038e4:	4770      	bx	lr

080038e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>:
 80038e6:	6001      	str	r1, [r0, #0]
 80038e8:	4770      	bx	lr

080038ea <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>:
 80038ea:	6800      	ldr	r0, [r0, #0]
 80038ec:	4770      	bx	lr

080038ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>:
 80038ee:	3008      	adds	r0, #8
 80038f0:	4770      	bx	lr

080038f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>:
 80038f2:	6081      	str	r1, [r0, #8]
 80038f4:	4770      	bx	lr

080038f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>:
 80038f6:	6803      	ldr	r3, [r0, #0]
 80038f8:	6041      	str	r1, [r0, #4]
 80038fa:	2200      	movs	r2, #0
 80038fc:	545a      	strb	r2, [r3, r1]
 80038fe:	4770      	bx	lr

08003900 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8003900:	b508      	push	{r3, lr}
 8003902:	680b      	ldr	r3, [r1, #0]
 8003904:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003908:	d302      	bcc.n	8003910 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 800390a:	480d      	ldr	r0, [pc, #52]	; (8003940 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 800390c:	f7ff ffe4 	bl	80038d8 <_ZSt20__throw_length_errorPKc>
 8003910:	4293      	cmp	r3, r2
 8003912:	d90b      	bls.n	800392c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8003914:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8003918:	ea4f 0042 	mov.w	r0, r2, lsl #1
 800391c:	d206      	bcs.n	800392c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800391e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003922:	bf2a      	itet	cs
 8003924:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 8003928:	6008      	strcc	r0, [r1, #0]
 800392a:	600b      	strcs	r3, [r1, #0]
 800392c:	6808      	ldr	r0, [r1, #0]
 800392e:	3001      	adds	r0, #1
 8003930:	d501      	bpl.n	8003936 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 8003932:	f7ff ffcb 	bl	80038cc <_ZSt17__throw_bad_allocv>
 8003936:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800393a:	f000 b92e 	b.w	8003b9a <_Znwj>
 800393e:	bf00      	nop
 8003940:	08004668 	.word	0x08004668

08003944 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8003944:	f850 3b08 	ldr.w	r3, [r0], #8
 8003948:	4283      	cmp	r3, r0
 800394a:	d002      	beq.n	8003952 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 800394c:	4618      	mov	r0, r3
 800394e:	f000 b922 	b.w	8003b96 <_ZdlPv>
 8003952:	4770      	bx	lr

08003954 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 8003954:	6840      	ldr	r0, [r0, #4]
 8003956:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800395a:	3901      	subs	r1, #1
 800395c:	1a09      	subs	r1, r1, r0
 800395e:	4291      	cmp	r1, r2
 8003960:	b508      	push	{r3, lr}
 8003962:	d202      	bcs.n	800396a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 8003964:	4618      	mov	r0, r3
 8003966:	f7ff ffb7 	bl	80038d8 <_ZSt20__throw_length_errorPKc>
 800396a:	bd08      	pop	{r3, pc}

0800396c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 800396c:	2a01      	cmp	r2, #1
 800396e:	b510      	push	{r4, lr}
 8003970:	d102      	bne.n	8003978 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 8003972:	780a      	ldrb	r2, [r1, #0]
 8003974:	7002      	strb	r2, [r0, #0]
 8003976:	bd10      	pop	{r4, pc}
 8003978:	f7ff ffb1 	bl	80038de <_ZNSt11char_traitsIcE4copyEPcPKcj>
 800397c:	e7fb      	b.n	8003976 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

0800397e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 800397e:	2a01      	cmp	r2, #1
 8003980:	b430      	push	{r4, r5}
 8003982:	d103      	bne.n	800398c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 8003984:	780b      	ldrb	r3, [r1, #0]
 8003986:	7003      	strb	r3, [r0, #0]
 8003988:	bc30      	pop	{r4, r5}
 800398a:	4770      	bx	lr
 800398c:	2a00      	cmp	r2, #0
 800398e:	d0fb      	beq.n	8003988 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 8003990:	bc30      	pop	{r4, r5}
 8003992:	f000 b96b 	b.w	8003c6c <memmove>

08003996 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>:
 8003996:	460b      	mov	r3, r1
 8003998:	2b01      	cmp	r3, #1
 800399a:	b410      	push	{r4}
 800399c:	4611      	mov	r1, r2
 800399e:	4604      	mov	r4, r0
 80039a0:	d103      	bne.n	80039aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0x14>
 80039a2:	7022      	strb	r2, [r4, #0]
 80039a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80039a8:	4770      	bx	lr
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d0fa      	beq.n	80039a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0xe>
 80039ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80039b2:	461a      	mov	r2, r3
 80039b4:	f000 b974 	b.w	8003ca0 <memset>

080039b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 80039b8:	b508      	push	{r3, lr}
 80039ba:	1a52      	subs	r2, r2, r1
 80039bc:	f7ff ffd6 	bl	800396c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80039c0:	bd08      	pop	{r3, pc}

080039c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 80039c2:	b508      	push	{r3, lr}
 80039c4:	1a52      	subs	r2, r2, r1
 80039c6:	f7ff ffd1 	bl	800396c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80039ca:	bd08      	pop	{r3, pc}

080039cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 80039cc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80039d0:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80039d2:	461f      	mov	r7, r3
 80039d4:	6843      	ldr	r3, [r0, #4]
 80039d6:	eb01 0802 	add.w	r8, r1, r2
 80039da:	1ab2      	subs	r2, r6, r2
 80039dc:	441a      	add	r2, r3
 80039de:	eba3 0908 	sub.w	r9, r3, r8
 80039e2:	4603      	mov	r3, r0
 80039e4:	9201      	str	r2, [sp, #4]
 80039e6:	f853 2b08 	ldr.w	r2, [r3], #8
 80039ea:	429a      	cmp	r2, r3
 80039ec:	bf18      	it	ne
 80039ee:	6882      	ldrne	r2, [r0, #8]
 80039f0:	460d      	mov	r5, r1
 80039f2:	bf08      	it	eq
 80039f4:	220f      	moveq	r2, #15
 80039f6:	a901      	add	r1, sp, #4
 80039f8:	4604      	mov	r4, r0
 80039fa:	f7ff ff81 	bl	8003900 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80039fe:	4682      	mov	sl, r0
 8003a00:	b11d      	cbz	r5, 8003a0a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
 8003a02:	6821      	ldr	r1, [r4, #0]
 8003a04:	462a      	mov	r2, r5
 8003a06:	f7ff ffb1 	bl	800396c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8003a0a:	b137      	cbz	r7, 8003a1a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 8003a0c:	b12e      	cbz	r6, 8003a1a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 8003a0e:	4632      	mov	r2, r6
 8003a10:	4639      	mov	r1, r7
 8003a12:	eb0a 0005 	add.w	r0, sl, r5
 8003a16:	f7ff ffa9 	bl	800396c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8003a1a:	f1b9 0f00 	cmp.w	r9, #0
 8003a1e:	d007      	beq.n	8003a30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x64>
 8003a20:	6821      	ldr	r1, [r4, #0]
 8003a22:	4435      	add	r5, r6
 8003a24:	464a      	mov	r2, r9
 8003a26:	4441      	add	r1, r8
 8003a28:	eb0a 0005 	add.w	r0, sl, r5
 8003a2c:	f7ff ff9e 	bl	800396c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8003a30:	4620      	mov	r0, r4
 8003a32:	f7ff ff87 	bl	8003944 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8003a36:	9b01      	ldr	r3, [sp, #4]
 8003a38:	f8c4 a000 	str.w	sl, [r4]
 8003a3c:	60a3      	str	r3, [r4, #8]
 8003a3e:	b002      	add	sp, #8
 8003a40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003a44 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>:
 8003a44:	b570      	push	{r4, r5, r6, lr}
 8003a46:	4604      	mov	r4, r0
 8003a48:	460e      	mov	r6, r1
 8003a4a:	3008      	adds	r0, #8
 8003a4c:	6020      	str	r0, [r4, #0]
 8003a4e:	f856 3b08 	ldr.w	r3, [r6], #8
 8003a52:	429e      	cmp	r6, r3
 8003a54:	460d      	mov	r5, r1
 8003a56:	d10b      	bne.n	8003a70 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x2c>
 8003a58:	2210      	movs	r2, #16
 8003a5a:	4631      	mov	r1, r6
 8003a5c:	f7ff ff3f 	bl	80038de <_ZNSt11char_traitsIcE4copyEPcPKcj>
 8003a60:	686b      	ldr	r3, [r5, #4]
 8003a62:	6063      	str	r3, [r4, #4]
 8003a64:	2300      	movs	r3, #0
 8003a66:	602e      	str	r6, [r5, #0]
 8003a68:	606b      	str	r3, [r5, #4]
 8003a6a:	722b      	strb	r3, [r5, #8]
 8003a6c:	4620      	mov	r0, r4
 8003a6e:	bd70      	pop	{r4, r5, r6, pc}
 8003a70:	6023      	str	r3, [r4, #0]
 8003a72:	688b      	ldr	r3, [r1, #8]
 8003a74:	60a3      	str	r3, [r4, #8]
 8003a76:	e7f3      	b.n	8003a60 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x1c>

08003a78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8003a78:	b510      	push	{r4, lr}
 8003a7a:	4604      	mov	r4, r0
 8003a7c:	f7ff ff62 	bl	8003944 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8003a80:	4620      	mov	r0, r4
 8003a82:	bd10      	pop	{r4, pc}

08003a84 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5beginEv>:
 8003a84:	6800      	ldr	r0, [r0, #0]
 8003a86:	4770      	bx	lr

08003a88 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE3endEv>:
 8003a88:	e9d0 2000 	ldrd	r2, r0, [r0]
 8003a8c:	4410      	add	r0, r2
 8003a8e:	4770      	bx	lr

08003a90 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc>:
 8003a90:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8003a94:	4616      	mov	r6, r2
 8003a96:	461d      	mov	r5, r3
 8003a98:	4604      	mov	r4, r0
 8003a9a:	4b1c      	ldr	r3, [pc, #112]	; (8003b0c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x7c>)
 8003a9c:	462a      	mov	r2, r5
 8003a9e:	460f      	mov	r7, r1
 8003aa0:	4631      	mov	r1, r6
 8003aa2:	f7ff ff57 	bl	8003954 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 8003aa6:	4623      	mov	r3, r4
 8003aa8:	6862      	ldr	r2, [r4, #4]
 8003aaa:	f853 0b08 	ldr.w	r0, [r3], #8
 8003aae:	4298      	cmp	r0, r3
 8003ab0:	bf18      	it	ne
 8003ab2:	68a3      	ldrne	r3, [r4, #8]
 8003ab4:	eba5 0806 	sub.w	r8, r5, r6
 8003ab8:	4490      	add	r8, r2
 8003aba:	bf08      	it	eq
 8003abc:	230f      	moveq	r3, #15
 8003abe:	4543      	cmp	r3, r8
 8003ac0:	d31b      	bcc.n	8003afa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x6a>
 8003ac2:	19f3      	adds	r3, r6, r7
 8003ac4:	1ad2      	subs	r2, r2, r3
 8003ac6:	d006      	beq.n	8003ad6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x46>
 8003ac8:	42ae      	cmp	r6, r5
 8003aca:	d004      	beq.n	8003ad6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x46>
 8003acc:	4438      	add	r0, r7
 8003ace:	1981      	adds	r1, r0, r6
 8003ad0:	4428      	add	r0, r5
 8003ad2:	f7ff ff54 	bl	800397e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8003ad6:	b135      	cbz	r5, 8003ae6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x56>
 8003ad8:	6820      	ldr	r0, [r4, #0]
 8003ada:	f89d 2020 	ldrb.w	r2, [sp, #32]
 8003ade:	4629      	mov	r1, r5
 8003ae0:	4438      	add	r0, r7
 8003ae2:	f7ff ff58 	bl	8003996 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>
 8003ae6:	6823      	ldr	r3, [r4, #0]
 8003ae8:	f8c4 8004 	str.w	r8, [r4, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	4620      	mov	r0, r4
 8003af0:	f803 2008 	strb.w	r2, [r3, r8]
 8003af4:	b002      	add	sp, #8
 8003af6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003afa:	9500      	str	r5, [sp, #0]
 8003afc:	2300      	movs	r3, #0
 8003afe:	4632      	mov	r2, r6
 8003b00:	4639      	mov	r1, r7
 8003b02:	4620      	mov	r0, r4
 8003b04:	f7ff ff62 	bl	80039cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8003b08:	e7e5      	b.n	8003ad6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x46>
 8003b0a:	bf00      	nop
 8003b0c:	08004680 	.word	0x08004680

08003b10 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEjc>:
 8003b10:	b507      	push	{r0, r1, r2, lr}
 8003b12:	9200      	str	r2, [sp, #0]
 8003b14:	460b      	mov	r3, r1
 8003b16:	2200      	movs	r2, #0
 8003b18:	6841      	ldr	r1, [r0, #4]
 8003b1a:	f7ff ffb9 	bl	8003a90 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc>
 8003b1e:	b003      	add	sp, #12
 8003b20:	f85d fb04 	ldr.w	pc, [sp], #4

08003b24 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>:
 8003b24:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003b26:	4604      	mov	r4, r0
 8003b28:	4623      	mov	r3, r4
 8003b2a:	6840      	ldr	r0, [r0, #4]
 8003b2c:	f853 6b08 	ldr.w	r6, [r3], #8
 8003b30:	429e      	cmp	r6, r3
 8003b32:	bf18      	it	ne
 8003b34:	68a3      	ldrne	r3, [r4, #8]
 8003b36:	eb00 0502 	add.w	r5, r0, r2
 8003b3a:	bf08      	it	eq
 8003b3c:	230f      	moveq	r3, #15
 8003b3e:	429d      	cmp	r5, r3
 8003b40:	d80a      	bhi.n	8003b58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x34>
 8003b42:	b112      	cbz	r2, 8003b4a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>
 8003b44:	4430      	add	r0, r6
 8003b46:	f7ff ff11 	bl	800396c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8003b4a:	6823      	ldr	r3, [r4, #0]
 8003b4c:	6065      	str	r5, [r4, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	4620      	mov	r0, r4
 8003b52:	555a      	strb	r2, [r3, r5]
 8003b54:	b002      	add	sp, #8
 8003b56:	bd70      	pop	{r4, r5, r6, pc}
 8003b58:	9200      	str	r2, [sp, #0]
 8003b5a:	460b      	mov	r3, r1
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	4601      	mov	r1, r0
 8003b60:	4620      	mov	r0, r4
 8003b62:	f7ff ff33 	bl	80039cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8003b66:	e7f0      	b.n	8003b4a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>

08003b68 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>:
 8003b68:	b508      	push	{r3, lr}
 8003b6a:	e9d1 1200 	ldrd	r1, r2, [r1]
 8003b6e:	f7ff ffd9 	bl	8003b24 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 8003b72:	bd08      	pop	{r3, pc}

08003b74 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>:
 8003b74:	6001      	str	r1, [r0, #0]
 8003b76:	4770      	bx	lr

08003b78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 8003b78:	b538      	push	{r3, r4, r5, lr}
 8003b7a:	f100 0308 	add.w	r3, r0, #8
 8003b7e:	6003      	str	r3, [r0, #0]
 8003b80:	e9d1 5200 	ldrd	r5, r2, [r1]
 8003b84:	4604      	mov	r4, r0
 8003b86:	f04f 0300 	mov.w	r3, #0
 8003b8a:	442a      	add	r2, r5
 8003b8c:	4629      	mov	r1, r5
 8003b8e:	f7fd fb6b 	bl	8001268 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 8003b92:	4620      	mov	r0, r4
 8003b94:	bd38      	pop	{r3, r4, r5, pc}

08003b96 <_ZdlPv>:
 8003b96:	f000 b853 	b.w	8003c40 <free>

08003b9a <_Znwj>:
 8003b9a:	2801      	cmp	r0, #1
 8003b9c:	bf38      	it	cc
 8003b9e:	2001      	movcc	r0, #1
 8003ba0:	b510      	push	{r4, lr}
 8003ba2:	4604      	mov	r4, r0
 8003ba4:	4620      	mov	r0, r4
 8003ba6:	f000 f843 	bl	8003c30 <malloc>
 8003baa:	b930      	cbnz	r0, 8003bba <_Znwj+0x20>
 8003bac:	f000 f806 	bl	8003bbc <_ZSt15get_new_handlerv>
 8003bb0:	b908      	cbnz	r0, 8003bb6 <_Znwj+0x1c>
 8003bb2:	f000 f80b 	bl	8003bcc <abort>
 8003bb6:	4780      	blx	r0
 8003bb8:	e7f4      	b.n	8003ba4 <_Znwj+0xa>
 8003bba:	bd10      	pop	{r4, pc}

08003bbc <_ZSt15get_new_handlerv>:
 8003bbc:	4b02      	ldr	r3, [pc, #8]	; (8003bc8 <_ZSt15get_new_handlerv+0xc>)
 8003bbe:	6818      	ldr	r0, [r3, #0]
 8003bc0:	f3bf 8f5b 	dmb	ish
 8003bc4:	4770      	bx	lr
 8003bc6:	bf00      	nop
 8003bc8:	200000ec 	.word	0x200000ec

08003bcc <abort>:
 8003bcc:	b508      	push	{r3, lr}
 8003bce:	2006      	movs	r0, #6
 8003bd0:	f000 f950 	bl	8003e74 <raise>
 8003bd4:	2001      	movs	r0, #1
 8003bd6:	f7fd fc2b 	bl	8001430 <_exit>
	...

08003bdc <__errno>:
 8003bdc:	4b01      	ldr	r3, [pc, #4]	; (8003be4 <__errno+0x8>)
 8003bde:	6818      	ldr	r0, [r3, #0]
 8003be0:	4770      	bx	lr
 8003be2:	bf00      	nop
 8003be4:	20000004 	.word	0x20000004

08003be8 <__libc_init_array>:
 8003be8:	b570      	push	{r4, r5, r6, lr}
 8003bea:	4d0d      	ldr	r5, [pc, #52]	; (8003c20 <__libc_init_array+0x38>)
 8003bec:	4c0d      	ldr	r4, [pc, #52]	; (8003c24 <__libc_init_array+0x3c>)
 8003bee:	1b64      	subs	r4, r4, r5
 8003bf0:	10a4      	asrs	r4, r4, #2
 8003bf2:	2600      	movs	r6, #0
 8003bf4:	42a6      	cmp	r6, r4
 8003bf6:	d109      	bne.n	8003c0c <__libc_init_array+0x24>
 8003bf8:	4d0b      	ldr	r5, [pc, #44]	; (8003c28 <__libc_init_array+0x40>)
 8003bfa:	4c0c      	ldr	r4, [pc, #48]	; (8003c2c <__libc_init_array+0x44>)
 8003bfc:	f000 fcbc 	bl	8004578 <_init>
 8003c00:	1b64      	subs	r4, r4, r5
 8003c02:	10a4      	asrs	r4, r4, #2
 8003c04:	2600      	movs	r6, #0
 8003c06:	42a6      	cmp	r6, r4
 8003c08:	d105      	bne.n	8003c16 <__libc_init_array+0x2e>
 8003c0a:	bd70      	pop	{r4, r5, r6, pc}
 8003c0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c10:	4798      	blx	r3
 8003c12:	3601      	adds	r6, #1
 8003c14:	e7ee      	b.n	8003bf4 <__libc_init_array+0xc>
 8003c16:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c1a:	4798      	blx	r3
 8003c1c:	3601      	adds	r6, #1
 8003c1e:	e7f2      	b.n	8003c06 <__libc_init_array+0x1e>
 8003c20:	080046d8 	.word	0x080046d8
 8003c24:	080046d8 	.word	0x080046d8
 8003c28:	080046d8 	.word	0x080046d8
 8003c2c:	080046e0 	.word	0x080046e0

08003c30 <malloc>:
 8003c30:	4b02      	ldr	r3, [pc, #8]	; (8003c3c <malloc+0xc>)
 8003c32:	4601      	mov	r1, r0
 8003c34:	6818      	ldr	r0, [r3, #0]
 8003c36:	f000 b88b 	b.w	8003d50 <_malloc_r>
 8003c3a:	bf00      	nop
 8003c3c:	20000004 	.word	0x20000004

08003c40 <free>:
 8003c40:	4b02      	ldr	r3, [pc, #8]	; (8003c4c <free+0xc>)
 8003c42:	4601      	mov	r1, r0
 8003c44:	6818      	ldr	r0, [r3, #0]
 8003c46:	f000 b833 	b.w	8003cb0 <_free_r>
 8003c4a:	bf00      	nop
 8003c4c:	20000004 	.word	0x20000004

08003c50 <memcpy>:
 8003c50:	440a      	add	r2, r1
 8003c52:	4291      	cmp	r1, r2
 8003c54:	f100 33ff 	add.w	r3, r0, #4294967295
 8003c58:	d100      	bne.n	8003c5c <memcpy+0xc>
 8003c5a:	4770      	bx	lr
 8003c5c:	b510      	push	{r4, lr}
 8003c5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003c62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003c66:	4291      	cmp	r1, r2
 8003c68:	d1f9      	bne.n	8003c5e <memcpy+0xe>
 8003c6a:	bd10      	pop	{r4, pc}

08003c6c <memmove>:
 8003c6c:	4288      	cmp	r0, r1
 8003c6e:	b510      	push	{r4, lr}
 8003c70:	eb01 0402 	add.w	r4, r1, r2
 8003c74:	d902      	bls.n	8003c7c <memmove+0x10>
 8003c76:	4284      	cmp	r4, r0
 8003c78:	4623      	mov	r3, r4
 8003c7a:	d807      	bhi.n	8003c8c <memmove+0x20>
 8003c7c:	1e43      	subs	r3, r0, #1
 8003c7e:	42a1      	cmp	r1, r4
 8003c80:	d008      	beq.n	8003c94 <memmove+0x28>
 8003c82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003c86:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003c8a:	e7f8      	b.n	8003c7e <memmove+0x12>
 8003c8c:	4402      	add	r2, r0
 8003c8e:	4601      	mov	r1, r0
 8003c90:	428a      	cmp	r2, r1
 8003c92:	d100      	bne.n	8003c96 <memmove+0x2a>
 8003c94:	bd10      	pop	{r4, pc}
 8003c96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003c9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003c9e:	e7f7      	b.n	8003c90 <memmove+0x24>

08003ca0 <memset>:
 8003ca0:	4402      	add	r2, r0
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d100      	bne.n	8003caa <memset+0xa>
 8003ca8:	4770      	bx	lr
 8003caa:	f803 1b01 	strb.w	r1, [r3], #1
 8003cae:	e7f9      	b.n	8003ca4 <memset+0x4>

08003cb0 <_free_r>:
 8003cb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003cb2:	2900      	cmp	r1, #0
 8003cb4:	d048      	beq.n	8003d48 <_free_r+0x98>
 8003cb6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003cba:	9001      	str	r0, [sp, #4]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	f1a1 0404 	sub.w	r4, r1, #4
 8003cc2:	bfb8      	it	lt
 8003cc4:	18e4      	addlt	r4, r4, r3
 8003cc6:	f000 f92b 	bl	8003f20 <__malloc_lock>
 8003cca:	4a20      	ldr	r2, [pc, #128]	; (8003d4c <_free_r+0x9c>)
 8003ccc:	9801      	ldr	r0, [sp, #4]
 8003cce:	6813      	ldr	r3, [r2, #0]
 8003cd0:	4615      	mov	r5, r2
 8003cd2:	b933      	cbnz	r3, 8003ce2 <_free_r+0x32>
 8003cd4:	6063      	str	r3, [r4, #4]
 8003cd6:	6014      	str	r4, [r2, #0]
 8003cd8:	b003      	add	sp, #12
 8003cda:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003cde:	f000 b925 	b.w	8003f2c <__malloc_unlock>
 8003ce2:	42a3      	cmp	r3, r4
 8003ce4:	d90b      	bls.n	8003cfe <_free_r+0x4e>
 8003ce6:	6821      	ldr	r1, [r4, #0]
 8003ce8:	1862      	adds	r2, r4, r1
 8003cea:	4293      	cmp	r3, r2
 8003cec:	bf04      	itt	eq
 8003cee:	681a      	ldreq	r2, [r3, #0]
 8003cf0:	685b      	ldreq	r3, [r3, #4]
 8003cf2:	6063      	str	r3, [r4, #4]
 8003cf4:	bf04      	itt	eq
 8003cf6:	1852      	addeq	r2, r2, r1
 8003cf8:	6022      	streq	r2, [r4, #0]
 8003cfa:	602c      	str	r4, [r5, #0]
 8003cfc:	e7ec      	b.n	8003cd8 <_free_r+0x28>
 8003cfe:	461a      	mov	r2, r3
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	b10b      	cbz	r3, 8003d08 <_free_r+0x58>
 8003d04:	42a3      	cmp	r3, r4
 8003d06:	d9fa      	bls.n	8003cfe <_free_r+0x4e>
 8003d08:	6811      	ldr	r1, [r2, #0]
 8003d0a:	1855      	adds	r5, r2, r1
 8003d0c:	42a5      	cmp	r5, r4
 8003d0e:	d10b      	bne.n	8003d28 <_free_r+0x78>
 8003d10:	6824      	ldr	r4, [r4, #0]
 8003d12:	4421      	add	r1, r4
 8003d14:	1854      	adds	r4, r2, r1
 8003d16:	42a3      	cmp	r3, r4
 8003d18:	6011      	str	r1, [r2, #0]
 8003d1a:	d1dd      	bne.n	8003cd8 <_free_r+0x28>
 8003d1c:	681c      	ldr	r4, [r3, #0]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	6053      	str	r3, [r2, #4]
 8003d22:	4421      	add	r1, r4
 8003d24:	6011      	str	r1, [r2, #0]
 8003d26:	e7d7      	b.n	8003cd8 <_free_r+0x28>
 8003d28:	d902      	bls.n	8003d30 <_free_r+0x80>
 8003d2a:	230c      	movs	r3, #12
 8003d2c:	6003      	str	r3, [r0, #0]
 8003d2e:	e7d3      	b.n	8003cd8 <_free_r+0x28>
 8003d30:	6825      	ldr	r5, [r4, #0]
 8003d32:	1961      	adds	r1, r4, r5
 8003d34:	428b      	cmp	r3, r1
 8003d36:	bf04      	itt	eq
 8003d38:	6819      	ldreq	r1, [r3, #0]
 8003d3a:	685b      	ldreq	r3, [r3, #4]
 8003d3c:	6063      	str	r3, [r4, #4]
 8003d3e:	bf04      	itt	eq
 8003d40:	1949      	addeq	r1, r1, r5
 8003d42:	6021      	streq	r1, [r4, #0]
 8003d44:	6054      	str	r4, [r2, #4]
 8003d46:	e7c7      	b.n	8003cd8 <_free_r+0x28>
 8003d48:	b003      	add	sp, #12
 8003d4a:	bd30      	pop	{r4, r5, pc}
 8003d4c:	200000f0 	.word	0x200000f0

08003d50 <_malloc_r>:
 8003d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d52:	1ccd      	adds	r5, r1, #3
 8003d54:	f025 0503 	bic.w	r5, r5, #3
 8003d58:	3508      	adds	r5, #8
 8003d5a:	2d0c      	cmp	r5, #12
 8003d5c:	bf38      	it	cc
 8003d5e:	250c      	movcc	r5, #12
 8003d60:	2d00      	cmp	r5, #0
 8003d62:	4606      	mov	r6, r0
 8003d64:	db01      	blt.n	8003d6a <_malloc_r+0x1a>
 8003d66:	42a9      	cmp	r1, r5
 8003d68:	d903      	bls.n	8003d72 <_malloc_r+0x22>
 8003d6a:	230c      	movs	r3, #12
 8003d6c:	6033      	str	r3, [r6, #0]
 8003d6e:	2000      	movs	r0, #0
 8003d70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d72:	f000 f8d5 	bl	8003f20 <__malloc_lock>
 8003d76:	4921      	ldr	r1, [pc, #132]	; (8003dfc <_malloc_r+0xac>)
 8003d78:	680a      	ldr	r2, [r1, #0]
 8003d7a:	4614      	mov	r4, r2
 8003d7c:	b99c      	cbnz	r4, 8003da6 <_malloc_r+0x56>
 8003d7e:	4f20      	ldr	r7, [pc, #128]	; (8003e00 <_malloc_r+0xb0>)
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	b923      	cbnz	r3, 8003d8e <_malloc_r+0x3e>
 8003d84:	4621      	mov	r1, r4
 8003d86:	4630      	mov	r0, r6
 8003d88:	f000 f83c 	bl	8003e04 <_sbrk_r>
 8003d8c:	6038      	str	r0, [r7, #0]
 8003d8e:	4629      	mov	r1, r5
 8003d90:	4630      	mov	r0, r6
 8003d92:	f000 f837 	bl	8003e04 <_sbrk_r>
 8003d96:	1c43      	adds	r3, r0, #1
 8003d98:	d123      	bne.n	8003de2 <_malloc_r+0x92>
 8003d9a:	230c      	movs	r3, #12
 8003d9c:	6033      	str	r3, [r6, #0]
 8003d9e:	4630      	mov	r0, r6
 8003da0:	f000 f8c4 	bl	8003f2c <__malloc_unlock>
 8003da4:	e7e3      	b.n	8003d6e <_malloc_r+0x1e>
 8003da6:	6823      	ldr	r3, [r4, #0]
 8003da8:	1b5b      	subs	r3, r3, r5
 8003daa:	d417      	bmi.n	8003ddc <_malloc_r+0x8c>
 8003dac:	2b0b      	cmp	r3, #11
 8003dae:	d903      	bls.n	8003db8 <_malloc_r+0x68>
 8003db0:	6023      	str	r3, [r4, #0]
 8003db2:	441c      	add	r4, r3
 8003db4:	6025      	str	r5, [r4, #0]
 8003db6:	e004      	b.n	8003dc2 <_malloc_r+0x72>
 8003db8:	6863      	ldr	r3, [r4, #4]
 8003dba:	42a2      	cmp	r2, r4
 8003dbc:	bf0c      	ite	eq
 8003dbe:	600b      	streq	r3, [r1, #0]
 8003dc0:	6053      	strne	r3, [r2, #4]
 8003dc2:	4630      	mov	r0, r6
 8003dc4:	f000 f8b2 	bl	8003f2c <__malloc_unlock>
 8003dc8:	f104 000b 	add.w	r0, r4, #11
 8003dcc:	1d23      	adds	r3, r4, #4
 8003dce:	f020 0007 	bic.w	r0, r0, #7
 8003dd2:	1ac2      	subs	r2, r0, r3
 8003dd4:	d0cc      	beq.n	8003d70 <_malloc_r+0x20>
 8003dd6:	1a1b      	subs	r3, r3, r0
 8003dd8:	50a3      	str	r3, [r4, r2]
 8003dda:	e7c9      	b.n	8003d70 <_malloc_r+0x20>
 8003ddc:	4622      	mov	r2, r4
 8003dde:	6864      	ldr	r4, [r4, #4]
 8003de0:	e7cc      	b.n	8003d7c <_malloc_r+0x2c>
 8003de2:	1cc4      	adds	r4, r0, #3
 8003de4:	f024 0403 	bic.w	r4, r4, #3
 8003de8:	42a0      	cmp	r0, r4
 8003dea:	d0e3      	beq.n	8003db4 <_malloc_r+0x64>
 8003dec:	1a21      	subs	r1, r4, r0
 8003dee:	4630      	mov	r0, r6
 8003df0:	f000 f808 	bl	8003e04 <_sbrk_r>
 8003df4:	3001      	adds	r0, #1
 8003df6:	d1dd      	bne.n	8003db4 <_malloc_r+0x64>
 8003df8:	e7cf      	b.n	8003d9a <_malloc_r+0x4a>
 8003dfa:	bf00      	nop
 8003dfc:	200000f0 	.word	0x200000f0
 8003e00:	200000f4 	.word	0x200000f4

08003e04 <_sbrk_r>:
 8003e04:	b538      	push	{r3, r4, r5, lr}
 8003e06:	4d06      	ldr	r5, [pc, #24]	; (8003e20 <_sbrk_r+0x1c>)
 8003e08:	2300      	movs	r3, #0
 8003e0a:	4604      	mov	r4, r0
 8003e0c:	4608      	mov	r0, r1
 8003e0e:	602b      	str	r3, [r5, #0]
 8003e10:	f7fd fb18 	bl	8001444 <_sbrk>
 8003e14:	1c43      	adds	r3, r0, #1
 8003e16:	d102      	bne.n	8003e1e <_sbrk_r+0x1a>
 8003e18:	682b      	ldr	r3, [r5, #0]
 8003e1a:	b103      	cbz	r3, 8003e1e <_sbrk_r+0x1a>
 8003e1c:	6023      	str	r3, [r4, #0]
 8003e1e:	bd38      	pop	{r3, r4, r5, pc}
 8003e20:	200000f8 	.word	0x200000f8

08003e24 <_raise_r>:
 8003e24:	291f      	cmp	r1, #31
 8003e26:	b538      	push	{r3, r4, r5, lr}
 8003e28:	4604      	mov	r4, r0
 8003e2a:	460d      	mov	r5, r1
 8003e2c:	d904      	bls.n	8003e38 <_raise_r+0x14>
 8003e2e:	2316      	movs	r3, #22
 8003e30:	6003      	str	r3, [r0, #0]
 8003e32:	f04f 30ff 	mov.w	r0, #4294967295
 8003e36:	bd38      	pop	{r3, r4, r5, pc}
 8003e38:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003e3a:	b112      	cbz	r2, 8003e42 <_raise_r+0x1e>
 8003e3c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003e40:	b94b      	cbnz	r3, 8003e56 <_raise_r+0x32>
 8003e42:	4620      	mov	r0, r4
 8003e44:	f000 f830 	bl	8003ea8 <_getpid_r>
 8003e48:	462a      	mov	r2, r5
 8003e4a:	4601      	mov	r1, r0
 8003e4c:	4620      	mov	r0, r4
 8003e4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003e52:	f000 b817 	b.w	8003e84 <_kill_r>
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d00a      	beq.n	8003e70 <_raise_r+0x4c>
 8003e5a:	1c59      	adds	r1, r3, #1
 8003e5c:	d103      	bne.n	8003e66 <_raise_r+0x42>
 8003e5e:	2316      	movs	r3, #22
 8003e60:	6003      	str	r3, [r0, #0]
 8003e62:	2001      	movs	r0, #1
 8003e64:	e7e7      	b.n	8003e36 <_raise_r+0x12>
 8003e66:	2400      	movs	r4, #0
 8003e68:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8003e6c:	4628      	mov	r0, r5
 8003e6e:	4798      	blx	r3
 8003e70:	2000      	movs	r0, #0
 8003e72:	e7e0      	b.n	8003e36 <_raise_r+0x12>

08003e74 <raise>:
 8003e74:	4b02      	ldr	r3, [pc, #8]	; (8003e80 <raise+0xc>)
 8003e76:	4601      	mov	r1, r0
 8003e78:	6818      	ldr	r0, [r3, #0]
 8003e7a:	f7ff bfd3 	b.w	8003e24 <_raise_r>
 8003e7e:	bf00      	nop
 8003e80:	20000004 	.word	0x20000004

08003e84 <_kill_r>:
 8003e84:	b538      	push	{r3, r4, r5, lr}
 8003e86:	4d07      	ldr	r5, [pc, #28]	; (8003ea4 <_kill_r+0x20>)
 8003e88:	2300      	movs	r3, #0
 8003e8a:	4604      	mov	r4, r0
 8003e8c:	4608      	mov	r0, r1
 8003e8e:	4611      	mov	r1, r2
 8003e90:	602b      	str	r3, [r5, #0]
 8003e92:	f7fd fabd 	bl	8001410 <_kill>
 8003e96:	1c43      	adds	r3, r0, #1
 8003e98:	d102      	bne.n	8003ea0 <_kill_r+0x1c>
 8003e9a:	682b      	ldr	r3, [r5, #0]
 8003e9c:	b103      	cbz	r3, 8003ea0 <_kill_r+0x1c>
 8003e9e:	6023      	str	r3, [r4, #0]
 8003ea0:	bd38      	pop	{r3, r4, r5, pc}
 8003ea2:	bf00      	nop
 8003ea4:	200000f8 	.word	0x200000f8

08003ea8 <_getpid_r>:
 8003ea8:	f7fd baaa 	b.w	8001400 <_getpid>

08003eac <_vsniprintf_r>:
 8003eac:	b530      	push	{r4, r5, lr}
 8003eae:	1e14      	subs	r4, r2, #0
 8003eb0:	4605      	mov	r5, r0
 8003eb2:	b09b      	sub	sp, #108	; 0x6c
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	da05      	bge.n	8003ec4 <_vsniprintf_r+0x18>
 8003eb8:	238b      	movs	r3, #139	; 0x8b
 8003eba:	602b      	str	r3, [r5, #0]
 8003ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8003ec0:	b01b      	add	sp, #108	; 0x6c
 8003ec2:	bd30      	pop	{r4, r5, pc}
 8003ec4:	f44f 7302 	mov.w	r3, #520	; 0x208
 8003ec8:	f8ad 300c 	strh.w	r3, [sp, #12]
 8003ecc:	bf14      	ite	ne
 8003ece:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003ed2:	4623      	moveq	r3, r4
 8003ed4:	9302      	str	r3, [sp, #8]
 8003ed6:	9305      	str	r3, [sp, #20]
 8003ed8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003edc:	9100      	str	r1, [sp, #0]
 8003ede:	9104      	str	r1, [sp, #16]
 8003ee0:	f8ad 300e 	strh.w	r3, [sp, #14]
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003ee8:	4669      	mov	r1, sp
 8003eea:	4628      	mov	r0, r5
 8003eec:	f000 f880 	bl	8003ff0 <_svfiprintf_r>
 8003ef0:	1c43      	adds	r3, r0, #1
 8003ef2:	bfbc      	itt	lt
 8003ef4:	238b      	movlt	r3, #139	; 0x8b
 8003ef6:	602b      	strlt	r3, [r5, #0]
 8003ef8:	2c00      	cmp	r4, #0
 8003efa:	d0e1      	beq.n	8003ec0 <_vsniprintf_r+0x14>
 8003efc:	9b00      	ldr	r3, [sp, #0]
 8003efe:	2200      	movs	r2, #0
 8003f00:	701a      	strb	r2, [r3, #0]
 8003f02:	e7dd      	b.n	8003ec0 <_vsniprintf_r+0x14>

08003f04 <vsniprintf>:
 8003f04:	b507      	push	{r0, r1, r2, lr}
 8003f06:	9300      	str	r3, [sp, #0]
 8003f08:	4613      	mov	r3, r2
 8003f0a:	460a      	mov	r2, r1
 8003f0c:	4601      	mov	r1, r0
 8003f0e:	4803      	ldr	r0, [pc, #12]	; (8003f1c <vsniprintf+0x18>)
 8003f10:	6800      	ldr	r0, [r0, #0]
 8003f12:	f7ff ffcb 	bl	8003eac <_vsniprintf_r>
 8003f16:	b003      	add	sp, #12
 8003f18:	f85d fb04 	ldr.w	pc, [sp], #4
 8003f1c:	20000004 	.word	0x20000004

08003f20 <__malloc_lock>:
 8003f20:	4801      	ldr	r0, [pc, #4]	; (8003f28 <__malloc_lock+0x8>)
 8003f22:	f000 baf9 	b.w	8004518 <__retarget_lock_acquire_recursive>
 8003f26:	bf00      	nop
 8003f28:	20000100 	.word	0x20000100

08003f2c <__malloc_unlock>:
 8003f2c:	4801      	ldr	r0, [pc, #4]	; (8003f34 <__malloc_unlock+0x8>)
 8003f2e:	f000 baf4 	b.w	800451a <__retarget_lock_release_recursive>
 8003f32:	bf00      	nop
 8003f34:	20000100 	.word	0x20000100

08003f38 <__ssputs_r>:
 8003f38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f3c:	688e      	ldr	r6, [r1, #8]
 8003f3e:	429e      	cmp	r6, r3
 8003f40:	4682      	mov	sl, r0
 8003f42:	460c      	mov	r4, r1
 8003f44:	4690      	mov	r8, r2
 8003f46:	461f      	mov	r7, r3
 8003f48:	d838      	bhi.n	8003fbc <__ssputs_r+0x84>
 8003f4a:	898a      	ldrh	r2, [r1, #12]
 8003f4c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003f50:	d032      	beq.n	8003fb8 <__ssputs_r+0x80>
 8003f52:	6825      	ldr	r5, [r4, #0]
 8003f54:	6909      	ldr	r1, [r1, #16]
 8003f56:	eba5 0901 	sub.w	r9, r5, r1
 8003f5a:	6965      	ldr	r5, [r4, #20]
 8003f5c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003f60:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003f64:	3301      	adds	r3, #1
 8003f66:	444b      	add	r3, r9
 8003f68:	106d      	asrs	r5, r5, #1
 8003f6a:	429d      	cmp	r5, r3
 8003f6c:	bf38      	it	cc
 8003f6e:	461d      	movcc	r5, r3
 8003f70:	0553      	lsls	r3, r2, #21
 8003f72:	d531      	bpl.n	8003fd8 <__ssputs_r+0xa0>
 8003f74:	4629      	mov	r1, r5
 8003f76:	f7ff feeb 	bl	8003d50 <_malloc_r>
 8003f7a:	4606      	mov	r6, r0
 8003f7c:	b950      	cbnz	r0, 8003f94 <__ssputs_r+0x5c>
 8003f7e:	230c      	movs	r3, #12
 8003f80:	f8ca 3000 	str.w	r3, [sl]
 8003f84:	89a3      	ldrh	r3, [r4, #12]
 8003f86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f8a:	81a3      	strh	r3, [r4, #12]
 8003f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8003f90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f94:	6921      	ldr	r1, [r4, #16]
 8003f96:	464a      	mov	r2, r9
 8003f98:	f7ff fe5a 	bl	8003c50 <memcpy>
 8003f9c:	89a3      	ldrh	r3, [r4, #12]
 8003f9e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003fa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fa6:	81a3      	strh	r3, [r4, #12]
 8003fa8:	6126      	str	r6, [r4, #16]
 8003faa:	6165      	str	r5, [r4, #20]
 8003fac:	444e      	add	r6, r9
 8003fae:	eba5 0509 	sub.w	r5, r5, r9
 8003fb2:	6026      	str	r6, [r4, #0]
 8003fb4:	60a5      	str	r5, [r4, #8]
 8003fb6:	463e      	mov	r6, r7
 8003fb8:	42be      	cmp	r6, r7
 8003fba:	d900      	bls.n	8003fbe <__ssputs_r+0x86>
 8003fbc:	463e      	mov	r6, r7
 8003fbe:	4632      	mov	r2, r6
 8003fc0:	6820      	ldr	r0, [r4, #0]
 8003fc2:	4641      	mov	r1, r8
 8003fc4:	f7ff fe52 	bl	8003c6c <memmove>
 8003fc8:	68a3      	ldr	r3, [r4, #8]
 8003fca:	6822      	ldr	r2, [r4, #0]
 8003fcc:	1b9b      	subs	r3, r3, r6
 8003fce:	4432      	add	r2, r6
 8003fd0:	60a3      	str	r3, [r4, #8]
 8003fd2:	6022      	str	r2, [r4, #0]
 8003fd4:	2000      	movs	r0, #0
 8003fd6:	e7db      	b.n	8003f90 <__ssputs_r+0x58>
 8003fd8:	462a      	mov	r2, r5
 8003fda:	f000 fa9f 	bl	800451c <_realloc_r>
 8003fde:	4606      	mov	r6, r0
 8003fe0:	2800      	cmp	r0, #0
 8003fe2:	d1e1      	bne.n	8003fa8 <__ssputs_r+0x70>
 8003fe4:	6921      	ldr	r1, [r4, #16]
 8003fe6:	4650      	mov	r0, sl
 8003fe8:	f7ff fe62 	bl	8003cb0 <_free_r>
 8003fec:	e7c7      	b.n	8003f7e <__ssputs_r+0x46>
	...

08003ff0 <_svfiprintf_r>:
 8003ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ff4:	4698      	mov	r8, r3
 8003ff6:	898b      	ldrh	r3, [r1, #12]
 8003ff8:	061b      	lsls	r3, r3, #24
 8003ffa:	b09d      	sub	sp, #116	; 0x74
 8003ffc:	4607      	mov	r7, r0
 8003ffe:	460d      	mov	r5, r1
 8004000:	4614      	mov	r4, r2
 8004002:	d50e      	bpl.n	8004022 <_svfiprintf_r+0x32>
 8004004:	690b      	ldr	r3, [r1, #16]
 8004006:	b963      	cbnz	r3, 8004022 <_svfiprintf_r+0x32>
 8004008:	2140      	movs	r1, #64	; 0x40
 800400a:	f7ff fea1 	bl	8003d50 <_malloc_r>
 800400e:	6028      	str	r0, [r5, #0]
 8004010:	6128      	str	r0, [r5, #16]
 8004012:	b920      	cbnz	r0, 800401e <_svfiprintf_r+0x2e>
 8004014:	230c      	movs	r3, #12
 8004016:	603b      	str	r3, [r7, #0]
 8004018:	f04f 30ff 	mov.w	r0, #4294967295
 800401c:	e0d1      	b.n	80041c2 <_svfiprintf_r+0x1d2>
 800401e:	2340      	movs	r3, #64	; 0x40
 8004020:	616b      	str	r3, [r5, #20]
 8004022:	2300      	movs	r3, #0
 8004024:	9309      	str	r3, [sp, #36]	; 0x24
 8004026:	2320      	movs	r3, #32
 8004028:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800402c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004030:	2330      	movs	r3, #48	; 0x30
 8004032:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80041dc <_svfiprintf_r+0x1ec>
 8004036:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800403a:	f04f 0901 	mov.w	r9, #1
 800403e:	4623      	mov	r3, r4
 8004040:	469a      	mov	sl, r3
 8004042:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004046:	b10a      	cbz	r2, 800404c <_svfiprintf_r+0x5c>
 8004048:	2a25      	cmp	r2, #37	; 0x25
 800404a:	d1f9      	bne.n	8004040 <_svfiprintf_r+0x50>
 800404c:	ebba 0b04 	subs.w	fp, sl, r4
 8004050:	d00b      	beq.n	800406a <_svfiprintf_r+0x7a>
 8004052:	465b      	mov	r3, fp
 8004054:	4622      	mov	r2, r4
 8004056:	4629      	mov	r1, r5
 8004058:	4638      	mov	r0, r7
 800405a:	f7ff ff6d 	bl	8003f38 <__ssputs_r>
 800405e:	3001      	adds	r0, #1
 8004060:	f000 80aa 	beq.w	80041b8 <_svfiprintf_r+0x1c8>
 8004064:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004066:	445a      	add	r2, fp
 8004068:	9209      	str	r2, [sp, #36]	; 0x24
 800406a:	f89a 3000 	ldrb.w	r3, [sl]
 800406e:	2b00      	cmp	r3, #0
 8004070:	f000 80a2 	beq.w	80041b8 <_svfiprintf_r+0x1c8>
 8004074:	2300      	movs	r3, #0
 8004076:	f04f 32ff 	mov.w	r2, #4294967295
 800407a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800407e:	f10a 0a01 	add.w	sl, sl, #1
 8004082:	9304      	str	r3, [sp, #16]
 8004084:	9307      	str	r3, [sp, #28]
 8004086:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800408a:	931a      	str	r3, [sp, #104]	; 0x68
 800408c:	4654      	mov	r4, sl
 800408e:	2205      	movs	r2, #5
 8004090:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004094:	4851      	ldr	r0, [pc, #324]	; (80041dc <_svfiprintf_r+0x1ec>)
 8004096:	f7fc f89b 	bl	80001d0 <memchr>
 800409a:	9a04      	ldr	r2, [sp, #16]
 800409c:	b9d8      	cbnz	r0, 80040d6 <_svfiprintf_r+0xe6>
 800409e:	06d0      	lsls	r0, r2, #27
 80040a0:	bf44      	itt	mi
 80040a2:	2320      	movmi	r3, #32
 80040a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80040a8:	0711      	lsls	r1, r2, #28
 80040aa:	bf44      	itt	mi
 80040ac:	232b      	movmi	r3, #43	; 0x2b
 80040ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80040b2:	f89a 3000 	ldrb.w	r3, [sl]
 80040b6:	2b2a      	cmp	r3, #42	; 0x2a
 80040b8:	d015      	beq.n	80040e6 <_svfiprintf_r+0xf6>
 80040ba:	9a07      	ldr	r2, [sp, #28]
 80040bc:	4654      	mov	r4, sl
 80040be:	2000      	movs	r0, #0
 80040c0:	f04f 0c0a 	mov.w	ip, #10
 80040c4:	4621      	mov	r1, r4
 80040c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80040ca:	3b30      	subs	r3, #48	; 0x30
 80040cc:	2b09      	cmp	r3, #9
 80040ce:	d94e      	bls.n	800416e <_svfiprintf_r+0x17e>
 80040d0:	b1b0      	cbz	r0, 8004100 <_svfiprintf_r+0x110>
 80040d2:	9207      	str	r2, [sp, #28]
 80040d4:	e014      	b.n	8004100 <_svfiprintf_r+0x110>
 80040d6:	eba0 0308 	sub.w	r3, r0, r8
 80040da:	fa09 f303 	lsl.w	r3, r9, r3
 80040de:	4313      	orrs	r3, r2
 80040e0:	9304      	str	r3, [sp, #16]
 80040e2:	46a2      	mov	sl, r4
 80040e4:	e7d2      	b.n	800408c <_svfiprintf_r+0x9c>
 80040e6:	9b03      	ldr	r3, [sp, #12]
 80040e8:	1d19      	adds	r1, r3, #4
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	9103      	str	r1, [sp, #12]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	bfbb      	ittet	lt
 80040f2:	425b      	neglt	r3, r3
 80040f4:	f042 0202 	orrlt.w	r2, r2, #2
 80040f8:	9307      	strge	r3, [sp, #28]
 80040fa:	9307      	strlt	r3, [sp, #28]
 80040fc:	bfb8      	it	lt
 80040fe:	9204      	strlt	r2, [sp, #16]
 8004100:	7823      	ldrb	r3, [r4, #0]
 8004102:	2b2e      	cmp	r3, #46	; 0x2e
 8004104:	d10c      	bne.n	8004120 <_svfiprintf_r+0x130>
 8004106:	7863      	ldrb	r3, [r4, #1]
 8004108:	2b2a      	cmp	r3, #42	; 0x2a
 800410a:	d135      	bne.n	8004178 <_svfiprintf_r+0x188>
 800410c:	9b03      	ldr	r3, [sp, #12]
 800410e:	1d1a      	adds	r2, r3, #4
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	9203      	str	r2, [sp, #12]
 8004114:	2b00      	cmp	r3, #0
 8004116:	bfb8      	it	lt
 8004118:	f04f 33ff 	movlt.w	r3, #4294967295
 800411c:	3402      	adds	r4, #2
 800411e:	9305      	str	r3, [sp, #20]
 8004120:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80041ec <_svfiprintf_r+0x1fc>
 8004124:	7821      	ldrb	r1, [r4, #0]
 8004126:	2203      	movs	r2, #3
 8004128:	4650      	mov	r0, sl
 800412a:	f7fc f851 	bl	80001d0 <memchr>
 800412e:	b140      	cbz	r0, 8004142 <_svfiprintf_r+0x152>
 8004130:	2340      	movs	r3, #64	; 0x40
 8004132:	eba0 000a 	sub.w	r0, r0, sl
 8004136:	fa03 f000 	lsl.w	r0, r3, r0
 800413a:	9b04      	ldr	r3, [sp, #16]
 800413c:	4303      	orrs	r3, r0
 800413e:	3401      	adds	r4, #1
 8004140:	9304      	str	r3, [sp, #16]
 8004142:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004146:	4826      	ldr	r0, [pc, #152]	; (80041e0 <_svfiprintf_r+0x1f0>)
 8004148:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800414c:	2206      	movs	r2, #6
 800414e:	f7fc f83f 	bl	80001d0 <memchr>
 8004152:	2800      	cmp	r0, #0
 8004154:	d038      	beq.n	80041c8 <_svfiprintf_r+0x1d8>
 8004156:	4b23      	ldr	r3, [pc, #140]	; (80041e4 <_svfiprintf_r+0x1f4>)
 8004158:	bb1b      	cbnz	r3, 80041a2 <_svfiprintf_r+0x1b2>
 800415a:	9b03      	ldr	r3, [sp, #12]
 800415c:	3307      	adds	r3, #7
 800415e:	f023 0307 	bic.w	r3, r3, #7
 8004162:	3308      	adds	r3, #8
 8004164:	9303      	str	r3, [sp, #12]
 8004166:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004168:	4433      	add	r3, r6
 800416a:	9309      	str	r3, [sp, #36]	; 0x24
 800416c:	e767      	b.n	800403e <_svfiprintf_r+0x4e>
 800416e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004172:	460c      	mov	r4, r1
 8004174:	2001      	movs	r0, #1
 8004176:	e7a5      	b.n	80040c4 <_svfiprintf_r+0xd4>
 8004178:	2300      	movs	r3, #0
 800417a:	3401      	adds	r4, #1
 800417c:	9305      	str	r3, [sp, #20]
 800417e:	4619      	mov	r1, r3
 8004180:	f04f 0c0a 	mov.w	ip, #10
 8004184:	4620      	mov	r0, r4
 8004186:	f810 2b01 	ldrb.w	r2, [r0], #1
 800418a:	3a30      	subs	r2, #48	; 0x30
 800418c:	2a09      	cmp	r2, #9
 800418e:	d903      	bls.n	8004198 <_svfiprintf_r+0x1a8>
 8004190:	2b00      	cmp	r3, #0
 8004192:	d0c5      	beq.n	8004120 <_svfiprintf_r+0x130>
 8004194:	9105      	str	r1, [sp, #20]
 8004196:	e7c3      	b.n	8004120 <_svfiprintf_r+0x130>
 8004198:	fb0c 2101 	mla	r1, ip, r1, r2
 800419c:	4604      	mov	r4, r0
 800419e:	2301      	movs	r3, #1
 80041a0:	e7f0      	b.n	8004184 <_svfiprintf_r+0x194>
 80041a2:	ab03      	add	r3, sp, #12
 80041a4:	9300      	str	r3, [sp, #0]
 80041a6:	462a      	mov	r2, r5
 80041a8:	4b0f      	ldr	r3, [pc, #60]	; (80041e8 <_svfiprintf_r+0x1f8>)
 80041aa:	a904      	add	r1, sp, #16
 80041ac:	4638      	mov	r0, r7
 80041ae:	f3af 8000 	nop.w
 80041b2:	1c42      	adds	r2, r0, #1
 80041b4:	4606      	mov	r6, r0
 80041b6:	d1d6      	bne.n	8004166 <_svfiprintf_r+0x176>
 80041b8:	89ab      	ldrh	r3, [r5, #12]
 80041ba:	065b      	lsls	r3, r3, #25
 80041bc:	f53f af2c 	bmi.w	8004018 <_svfiprintf_r+0x28>
 80041c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80041c2:	b01d      	add	sp, #116	; 0x74
 80041c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041c8:	ab03      	add	r3, sp, #12
 80041ca:	9300      	str	r3, [sp, #0]
 80041cc:	462a      	mov	r2, r5
 80041ce:	4b06      	ldr	r3, [pc, #24]	; (80041e8 <_svfiprintf_r+0x1f8>)
 80041d0:	a904      	add	r1, sp, #16
 80041d2:	4638      	mov	r0, r7
 80041d4:	f000 f87a 	bl	80042cc <_printf_i>
 80041d8:	e7eb      	b.n	80041b2 <_svfiprintf_r+0x1c2>
 80041da:	bf00      	nop
 80041dc:	0800469d 	.word	0x0800469d
 80041e0:	080046a7 	.word	0x080046a7
 80041e4:	00000000 	.word	0x00000000
 80041e8:	08003f39 	.word	0x08003f39
 80041ec:	080046a3 	.word	0x080046a3

080041f0 <_printf_common>:
 80041f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041f4:	4616      	mov	r6, r2
 80041f6:	4699      	mov	r9, r3
 80041f8:	688a      	ldr	r2, [r1, #8]
 80041fa:	690b      	ldr	r3, [r1, #16]
 80041fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004200:	4293      	cmp	r3, r2
 8004202:	bfb8      	it	lt
 8004204:	4613      	movlt	r3, r2
 8004206:	6033      	str	r3, [r6, #0]
 8004208:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800420c:	4607      	mov	r7, r0
 800420e:	460c      	mov	r4, r1
 8004210:	b10a      	cbz	r2, 8004216 <_printf_common+0x26>
 8004212:	3301      	adds	r3, #1
 8004214:	6033      	str	r3, [r6, #0]
 8004216:	6823      	ldr	r3, [r4, #0]
 8004218:	0699      	lsls	r1, r3, #26
 800421a:	bf42      	ittt	mi
 800421c:	6833      	ldrmi	r3, [r6, #0]
 800421e:	3302      	addmi	r3, #2
 8004220:	6033      	strmi	r3, [r6, #0]
 8004222:	6825      	ldr	r5, [r4, #0]
 8004224:	f015 0506 	ands.w	r5, r5, #6
 8004228:	d106      	bne.n	8004238 <_printf_common+0x48>
 800422a:	f104 0a19 	add.w	sl, r4, #25
 800422e:	68e3      	ldr	r3, [r4, #12]
 8004230:	6832      	ldr	r2, [r6, #0]
 8004232:	1a9b      	subs	r3, r3, r2
 8004234:	42ab      	cmp	r3, r5
 8004236:	dc26      	bgt.n	8004286 <_printf_common+0x96>
 8004238:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800423c:	1e13      	subs	r3, r2, #0
 800423e:	6822      	ldr	r2, [r4, #0]
 8004240:	bf18      	it	ne
 8004242:	2301      	movne	r3, #1
 8004244:	0692      	lsls	r2, r2, #26
 8004246:	d42b      	bmi.n	80042a0 <_printf_common+0xb0>
 8004248:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800424c:	4649      	mov	r1, r9
 800424e:	4638      	mov	r0, r7
 8004250:	47c0      	blx	r8
 8004252:	3001      	adds	r0, #1
 8004254:	d01e      	beq.n	8004294 <_printf_common+0xa4>
 8004256:	6823      	ldr	r3, [r4, #0]
 8004258:	68e5      	ldr	r5, [r4, #12]
 800425a:	6832      	ldr	r2, [r6, #0]
 800425c:	f003 0306 	and.w	r3, r3, #6
 8004260:	2b04      	cmp	r3, #4
 8004262:	bf08      	it	eq
 8004264:	1aad      	subeq	r5, r5, r2
 8004266:	68a3      	ldr	r3, [r4, #8]
 8004268:	6922      	ldr	r2, [r4, #16]
 800426a:	bf0c      	ite	eq
 800426c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004270:	2500      	movne	r5, #0
 8004272:	4293      	cmp	r3, r2
 8004274:	bfc4      	itt	gt
 8004276:	1a9b      	subgt	r3, r3, r2
 8004278:	18ed      	addgt	r5, r5, r3
 800427a:	2600      	movs	r6, #0
 800427c:	341a      	adds	r4, #26
 800427e:	42b5      	cmp	r5, r6
 8004280:	d11a      	bne.n	80042b8 <_printf_common+0xc8>
 8004282:	2000      	movs	r0, #0
 8004284:	e008      	b.n	8004298 <_printf_common+0xa8>
 8004286:	2301      	movs	r3, #1
 8004288:	4652      	mov	r2, sl
 800428a:	4649      	mov	r1, r9
 800428c:	4638      	mov	r0, r7
 800428e:	47c0      	blx	r8
 8004290:	3001      	adds	r0, #1
 8004292:	d103      	bne.n	800429c <_printf_common+0xac>
 8004294:	f04f 30ff 	mov.w	r0, #4294967295
 8004298:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800429c:	3501      	adds	r5, #1
 800429e:	e7c6      	b.n	800422e <_printf_common+0x3e>
 80042a0:	18e1      	adds	r1, r4, r3
 80042a2:	1c5a      	adds	r2, r3, #1
 80042a4:	2030      	movs	r0, #48	; 0x30
 80042a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80042aa:	4422      	add	r2, r4
 80042ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80042b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80042b4:	3302      	adds	r3, #2
 80042b6:	e7c7      	b.n	8004248 <_printf_common+0x58>
 80042b8:	2301      	movs	r3, #1
 80042ba:	4622      	mov	r2, r4
 80042bc:	4649      	mov	r1, r9
 80042be:	4638      	mov	r0, r7
 80042c0:	47c0      	blx	r8
 80042c2:	3001      	adds	r0, #1
 80042c4:	d0e6      	beq.n	8004294 <_printf_common+0xa4>
 80042c6:	3601      	adds	r6, #1
 80042c8:	e7d9      	b.n	800427e <_printf_common+0x8e>
	...

080042cc <_printf_i>:
 80042cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80042d0:	460c      	mov	r4, r1
 80042d2:	4691      	mov	r9, r2
 80042d4:	7e27      	ldrb	r7, [r4, #24]
 80042d6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80042d8:	2f78      	cmp	r7, #120	; 0x78
 80042da:	4680      	mov	r8, r0
 80042dc:	469a      	mov	sl, r3
 80042de:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80042e2:	d807      	bhi.n	80042f4 <_printf_i+0x28>
 80042e4:	2f62      	cmp	r7, #98	; 0x62
 80042e6:	d80a      	bhi.n	80042fe <_printf_i+0x32>
 80042e8:	2f00      	cmp	r7, #0
 80042ea:	f000 80d8 	beq.w	800449e <_printf_i+0x1d2>
 80042ee:	2f58      	cmp	r7, #88	; 0x58
 80042f0:	f000 80a3 	beq.w	800443a <_printf_i+0x16e>
 80042f4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80042f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80042fc:	e03a      	b.n	8004374 <_printf_i+0xa8>
 80042fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004302:	2b15      	cmp	r3, #21
 8004304:	d8f6      	bhi.n	80042f4 <_printf_i+0x28>
 8004306:	a001      	add	r0, pc, #4	; (adr r0, 800430c <_printf_i+0x40>)
 8004308:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800430c:	08004365 	.word	0x08004365
 8004310:	08004379 	.word	0x08004379
 8004314:	080042f5 	.word	0x080042f5
 8004318:	080042f5 	.word	0x080042f5
 800431c:	080042f5 	.word	0x080042f5
 8004320:	080042f5 	.word	0x080042f5
 8004324:	08004379 	.word	0x08004379
 8004328:	080042f5 	.word	0x080042f5
 800432c:	080042f5 	.word	0x080042f5
 8004330:	080042f5 	.word	0x080042f5
 8004334:	080042f5 	.word	0x080042f5
 8004338:	08004485 	.word	0x08004485
 800433c:	080043a9 	.word	0x080043a9
 8004340:	08004467 	.word	0x08004467
 8004344:	080042f5 	.word	0x080042f5
 8004348:	080042f5 	.word	0x080042f5
 800434c:	080044a7 	.word	0x080044a7
 8004350:	080042f5 	.word	0x080042f5
 8004354:	080043a9 	.word	0x080043a9
 8004358:	080042f5 	.word	0x080042f5
 800435c:	080042f5 	.word	0x080042f5
 8004360:	0800446f 	.word	0x0800446f
 8004364:	680b      	ldr	r3, [r1, #0]
 8004366:	1d1a      	adds	r2, r3, #4
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	600a      	str	r2, [r1, #0]
 800436c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004370:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004374:	2301      	movs	r3, #1
 8004376:	e0a3      	b.n	80044c0 <_printf_i+0x1f4>
 8004378:	6825      	ldr	r5, [r4, #0]
 800437a:	6808      	ldr	r0, [r1, #0]
 800437c:	062e      	lsls	r6, r5, #24
 800437e:	f100 0304 	add.w	r3, r0, #4
 8004382:	d50a      	bpl.n	800439a <_printf_i+0xce>
 8004384:	6805      	ldr	r5, [r0, #0]
 8004386:	600b      	str	r3, [r1, #0]
 8004388:	2d00      	cmp	r5, #0
 800438a:	da03      	bge.n	8004394 <_printf_i+0xc8>
 800438c:	232d      	movs	r3, #45	; 0x2d
 800438e:	426d      	negs	r5, r5
 8004390:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004394:	485e      	ldr	r0, [pc, #376]	; (8004510 <_printf_i+0x244>)
 8004396:	230a      	movs	r3, #10
 8004398:	e019      	b.n	80043ce <_printf_i+0x102>
 800439a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800439e:	6805      	ldr	r5, [r0, #0]
 80043a0:	600b      	str	r3, [r1, #0]
 80043a2:	bf18      	it	ne
 80043a4:	b22d      	sxthne	r5, r5
 80043a6:	e7ef      	b.n	8004388 <_printf_i+0xbc>
 80043a8:	680b      	ldr	r3, [r1, #0]
 80043aa:	6825      	ldr	r5, [r4, #0]
 80043ac:	1d18      	adds	r0, r3, #4
 80043ae:	6008      	str	r0, [r1, #0]
 80043b0:	0628      	lsls	r0, r5, #24
 80043b2:	d501      	bpl.n	80043b8 <_printf_i+0xec>
 80043b4:	681d      	ldr	r5, [r3, #0]
 80043b6:	e002      	b.n	80043be <_printf_i+0xf2>
 80043b8:	0669      	lsls	r1, r5, #25
 80043ba:	d5fb      	bpl.n	80043b4 <_printf_i+0xe8>
 80043bc:	881d      	ldrh	r5, [r3, #0]
 80043be:	4854      	ldr	r0, [pc, #336]	; (8004510 <_printf_i+0x244>)
 80043c0:	2f6f      	cmp	r7, #111	; 0x6f
 80043c2:	bf0c      	ite	eq
 80043c4:	2308      	moveq	r3, #8
 80043c6:	230a      	movne	r3, #10
 80043c8:	2100      	movs	r1, #0
 80043ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80043ce:	6866      	ldr	r6, [r4, #4]
 80043d0:	60a6      	str	r6, [r4, #8]
 80043d2:	2e00      	cmp	r6, #0
 80043d4:	bfa2      	ittt	ge
 80043d6:	6821      	ldrge	r1, [r4, #0]
 80043d8:	f021 0104 	bicge.w	r1, r1, #4
 80043dc:	6021      	strge	r1, [r4, #0]
 80043de:	b90d      	cbnz	r5, 80043e4 <_printf_i+0x118>
 80043e0:	2e00      	cmp	r6, #0
 80043e2:	d04d      	beq.n	8004480 <_printf_i+0x1b4>
 80043e4:	4616      	mov	r6, r2
 80043e6:	fbb5 f1f3 	udiv	r1, r5, r3
 80043ea:	fb03 5711 	mls	r7, r3, r1, r5
 80043ee:	5dc7      	ldrb	r7, [r0, r7]
 80043f0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80043f4:	462f      	mov	r7, r5
 80043f6:	42bb      	cmp	r3, r7
 80043f8:	460d      	mov	r5, r1
 80043fa:	d9f4      	bls.n	80043e6 <_printf_i+0x11a>
 80043fc:	2b08      	cmp	r3, #8
 80043fe:	d10b      	bne.n	8004418 <_printf_i+0x14c>
 8004400:	6823      	ldr	r3, [r4, #0]
 8004402:	07df      	lsls	r7, r3, #31
 8004404:	d508      	bpl.n	8004418 <_printf_i+0x14c>
 8004406:	6923      	ldr	r3, [r4, #16]
 8004408:	6861      	ldr	r1, [r4, #4]
 800440a:	4299      	cmp	r1, r3
 800440c:	bfde      	ittt	le
 800440e:	2330      	movle	r3, #48	; 0x30
 8004410:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004414:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004418:	1b92      	subs	r2, r2, r6
 800441a:	6122      	str	r2, [r4, #16]
 800441c:	f8cd a000 	str.w	sl, [sp]
 8004420:	464b      	mov	r3, r9
 8004422:	aa03      	add	r2, sp, #12
 8004424:	4621      	mov	r1, r4
 8004426:	4640      	mov	r0, r8
 8004428:	f7ff fee2 	bl	80041f0 <_printf_common>
 800442c:	3001      	adds	r0, #1
 800442e:	d14c      	bne.n	80044ca <_printf_i+0x1fe>
 8004430:	f04f 30ff 	mov.w	r0, #4294967295
 8004434:	b004      	add	sp, #16
 8004436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800443a:	4835      	ldr	r0, [pc, #212]	; (8004510 <_printf_i+0x244>)
 800443c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004440:	6823      	ldr	r3, [r4, #0]
 8004442:	680e      	ldr	r6, [r1, #0]
 8004444:	061f      	lsls	r7, r3, #24
 8004446:	f856 5b04 	ldr.w	r5, [r6], #4
 800444a:	600e      	str	r6, [r1, #0]
 800444c:	d514      	bpl.n	8004478 <_printf_i+0x1ac>
 800444e:	07d9      	lsls	r1, r3, #31
 8004450:	bf44      	itt	mi
 8004452:	f043 0320 	orrmi.w	r3, r3, #32
 8004456:	6023      	strmi	r3, [r4, #0]
 8004458:	b91d      	cbnz	r5, 8004462 <_printf_i+0x196>
 800445a:	6823      	ldr	r3, [r4, #0]
 800445c:	f023 0320 	bic.w	r3, r3, #32
 8004460:	6023      	str	r3, [r4, #0]
 8004462:	2310      	movs	r3, #16
 8004464:	e7b0      	b.n	80043c8 <_printf_i+0xfc>
 8004466:	6823      	ldr	r3, [r4, #0]
 8004468:	f043 0320 	orr.w	r3, r3, #32
 800446c:	6023      	str	r3, [r4, #0]
 800446e:	2378      	movs	r3, #120	; 0x78
 8004470:	4828      	ldr	r0, [pc, #160]	; (8004514 <_printf_i+0x248>)
 8004472:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004476:	e7e3      	b.n	8004440 <_printf_i+0x174>
 8004478:	065e      	lsls	r6, r3, #25
 800447a:	bf48      	it	mi
 800447c:	b2ad      	uxthmi	r5, r5
 800447e:	e7e6      	b.n	800444e <_printf_i+0x182>
 8004480:	4616      	mov	r6, r2
 8004482:	e7bb      	b.n	80043fc <_printf_i+0x130>
 8004484:	680b      	ldr	r3, [r1, #0]
 8004486:	6826      	ldr	r6, [r4, #0]
 8004488:	6960      	ldr	r0, [r4, #20]
 800448a:	1d1d      	adds	r5, r3, #4
 800448c:	600d      	str	r5, [r1, #0]
 800448e:	0635      	lsls	r5, r6, #24
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	d501      	bpl.n	8004498 <_printf_i+0x1cc>
 8004494:	6018      	str	r0, [r3, #0]
 8004496:	e002      	b.n	800449e <_printf_i+0x1d2>
 8004498:	0671      	lsls	r1, r6, #25
 800449a:	d5fb      	bpl.n	8004494 <_printf_i+0x1c8>
 800449c:	8018      	strh	r0, [r3, #0]
 800449e:	2300      	movs	r3, #0
 80044a0:	6123      	str	r3, [r4, #16]
 80044a2:	4616      	mov	r6, r2
 80044a4:	e7ba      	b.n	800441c <_printf_i+0x150>
 80044a6:	680b      	ldr	r3, [r1, #0]
 80044a8:	1d1a      	adds	r2, r3, #4
 80044aa:	600a      	str	r2, [r1, #0]
 80044ac:	681e      	ldr	r6, [r3, #0]
 80044ae:	6862      	ldr	r2, [r4, #4]
 80044b0:	2100      	movs	r1, #0
 80044b2:	4630      	mov	r0, r6
 80044b4:	f7fb fe8c 	bl	80001d0 <memchr>
 80044b8:	b108      	cbz	r0, 80044be <_printf_i+0x1f2>
 80044ba:	1b80      	subs	r0, r0, r6
 80044bc:	6060      	str	r0, [r4, #4]
 80044be:	6863      	ldr	r3, [r4, #4]
 80044c0:	6123      	str	r3, [r4, #16]
 80044c2:	2300      	movs	r3, #0
 80044c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044c8:	e7a8      	b.n	800441c <_printf_i+0x150>
 80044ca:	6923      	ldr	r3, [r4, #16]
 80044cc:	4632      	mov	r2, r6
 80044ce:	4649      	mov	r1, r9
 80044d0:	4640      	mov	r0, r8
 80044d2:	47d0      	blx	sl
 80044d4:	3001      	adds	r0, #1
 80044d6:	d0ab      	beq.n	8004430 <_printf_i+0x164>
 80044d8:	6823      	ldr	r3, [r4, #0]
 80044da:	079b      	lsls	r3, r3, #30
 80044dc:	d413      	bmi.n	8004506 <_printf_i+0x23a>
 80044de:	68e0      	ldr	r0, [r4, #12]
 80044e0:	9b03      	ldr	r3, [sp, #12]
 80044e2:	4298      	cmp	r0, r3
 80044e4:	bfb8      	it	lt
 80044e6:	4618      	movlt	r0, r3
 80044e8:	e7a4      	b.n	8004434 <_printf_i+0x168>
 80044ea:	2301      	movs	r3, #1
 80044ec:	4632      	mov	r2, r6
 80044ee:	4649      	mov	r1, r9
 80044f0:	4640      	mov	r0, r8
 80044f2:	47d0      	blx	sl
 80044f4:	3001      	adds	r0, #1
 80044f6:	d09b      	beq.n	8004430 <_printf_i+0x164>
 80044f8:	3501      	adds	r5, #1
 80044fa:	68e3      	ldr	r3, [r4, #12]
 80044fc:	9903      	ldr	r1, [sp, #12]
 80044fe:	1a5b      	subs	r3, r3, r1
 8004500:	42ab      	cmp	r3, r5
 8004502:	dcf2      	bgt.n	80044ea <_printf_i+0x21e>
 8004504:	e7eb      	b.n	80044de <_printf_i+0x212>
 8004506:	2500      	movs	r5, #0
 8004508:	f104 0619 	add.w	r6, r4, #25
 800450c:	e7f5      	b.n	80044fa <_printf_i+0x22e>
 800450e:	bf00      	nop
 8004510:	080046ae 	.word	0x080046ae
 8004514:	080046bf 	.word	0x080046bf

08004518 <__retarget_lock_acquire_recursive>:
 8004518:	4770      	bx	lr

0800451a <__retarget_lock_release_recursive>:
 800451a:	4770      	bx	lr

0800451c <_realloc_r>:
 800451c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800451e:	4607      	mov	r7, r0
 8004520:	4614      	mov	r4, r2
 8004522:	460e      	mov	r6, r1
 8004524:	b921      	cbnz	r1, 8004530 <_realloc_r+0x14>
 8004526:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800452a:	4611      	mov	r1, r2
 800452c:	f7ff bc10 	b.w	8003d50 <_malloc_r>
 8004530:	b922      	cbnz	r2, 800453c <_realloc_r+0x20>
 8004532:	f7ff fbbd 	bl	8003cb0 <_free_r>
 8004536:	4625      	mov	r5, r4
 8004538:	4628      	mov	r0, r5
 800453a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800453c:	f000 f814 	bl	8004568 <_malloc_usable_size_r>
 8004540:	42a0      	cmp	r0, r4
 8004542:	d20f      	bcs.n	8004564 <_realloc_r+0x48>
 8004544:	4621      	mov	r1, r4
 8004546:	4638      	mov	r0, r7
 8004548:	f7ff fc02 	bl	8003d50 <_malloc_r>
 800454c:	4605      	mov	r5, r0
 800454e:	2800      	cmp	r0, #0
 8004550:	d0f2      	beq.n	8004538 <_realloc_r+0x1c>
 8004552:	4631      	mov	r1, r6
 8004554:	4622      	mov	r2, r4
 8004556:	f7ff fb7b 	bl	8003c50 <memcpy>
 800455a:	4631      	mov	r1, r6
 800455c:	4638      	mov	r0, r7
 800455e:	f7ff fba7 	bl	8003cb0 <_free_r>
 8004562:	e7e9      	b.n	8004538 <_realloc_r+0x1c>
 8004564:	4635      	mov	r5, r6
 8004566:	e7e7      	b.n	8004538 <_realloc_r+0x1c>

08004568 <_malloc_usable_size_r>:
 8004568:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800456c:	1f18      	subs	r0, r3, #4
 800456e:	2b00      	cmp	r3, #0
 8004570:	bfbc      	itt	lt
 8004572:	580b      	ldrlt	r3, [r1, r0]
 8004574:	18c0      	addlt	r0, r0, r3
 8004576:	4770      	bx	lr

08004578 <_init>:
 8004578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800457a:	bf00      	nop
 800457c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800457e:	bc08      	pop	{r3}
 8004580:	469e      	mov	lr, r3
 8004582:	4770      	bx	lr

08004584 <_fini>:
 8004584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004586:	bf00      	nop
 8004588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800458a:	bc08      	pop	{r3}
 800458c:	469e      	mov	lr, r3
 800458e:	4770      	bx	lr
