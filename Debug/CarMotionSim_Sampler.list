
CarMotionSim_Sampler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030e0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  08003270  08003270  00013270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003390  08003390  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08003390  08003390  00013390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003398  08003398  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003398  08003398  00013398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800339c  0800339c  0001339c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080033a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          0000004c  20000068  20000068  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000b4  200000b4  00020068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .debug_info   000307f1  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003210  00000000  00000000  00050889  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007e8  00000000  00000000  00053aa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000730  00000000  00000000  00054288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000603d  00000000  00000000  000549b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000188be  00000000  00000000  0005a9f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000732b3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003958  00000000  00000000  00073308  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003258 	.word	0x08003258

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08003258 	.word	0x08003258

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000578:	b480      	push	{r7}
 800057a:	b085      	sub	sp, #20
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000580:	4b08      	ldr	r3, [pc, #32]	; (80005a4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000582:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000584:	4907      	ldr	r1, [pc, #28]	; (80005a4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	4313      	orrs	r3, r2
 800058a:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800058c:	4b05      	ldr	r3, [pc, #20]	; (80005a4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800058e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	4013      	ands	r3, r2
 8000594:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000596:	68fb      	ldr	r3, [r7, #12]
}
 8000598:	bf00      	nop
 800059a:	3714      	adds	r7, #20
 800059c:	46bd      	mov	sp, r7
 800059e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a2:	4770      	bx	lr
 80005a4:	40023800 	.word	0x40023800

080005a8 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80005a8:	b480      	push	{r7}
 80005aa:	b083      	sub	sp, #12
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
 80005b0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80005b2:	683b      	ldr	r3, [r7, #0]
 80005b4:	041a      	lsls	r2, r3, #16
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	619a      	str	r2, [r3, #24]
}
 80005ba:	bf00      	nop
 80005bc:	370c      	adds	r7, #12
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
	...

080005c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b086      	sub	sp, #24
 80005cc:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ce:	463b      	mov	r3, r7
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	605a      	str	r2, [r3, #4]
 80005d6:	609a      	str	r2, [r3, #8]
 80005d8:	60da      	str	r2, [r3, #12]
 80005da:	611a      	str	r2, [r3, #16]
 80005dc:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 80005de:	2080      	movs	r0, #128	; 0x80
 80005e0:	f7ff ffca 	bl	8000578 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80005e4:	2004      	movs	r0, #4
 80005e6:	f7ff ffc7 	bl	8000578 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LCD_RS_Pin|LCD_ENABLE_Pin|LCD_D4_Pin|LCD_D5_Pin
 80005ea:	213f      	movs	r1, #63	; 0x3f
 80005ec:	480a      	ldr	r0, [pc, #40]	; (8000618 <MX_GPIO_Init+0x50>)
 80005ee:	f7ff ffdb 	bl	80005a8 <LL_GPIO_ResetOutputPin>
                          |LCD_D6_Pin|LCD_D7_Pin);

  /**/
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_ENABLE_Pin|LCD_D4_Pin|LCD_D5_Pin
 80005f2:	233f      	movs	r3, #63	; 0x3f
 80005f4:	603b      	str	r3, [r7, #0]
                          |LCD_D6_Pin|LCD_D7_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80005f6:	2301      	movs	r3, #1
 80005f8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80005fa:	2302      	movs	r3, #2
 80005fc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80005fe:	2300      	movs	r3, #0
 8000600:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000602:	2300      	movs	r3, #0
 8000604:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000606:	463b      	mov	r3, r7
 8000608:	4619      	mov	r1, r3
 800060a:	4803      	ldr	r0, [pc, #12]	; (8000618 <MX_GPIO_Init+0x50>)
 800060c:	f001 fb9c 	bl	8001d48 <LL_GPIO_Init>

}
 8000610:	bf00      	nop
 8000612:	3718      	adds	r7, #24
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	40020800 	.word	0x40020800

0800061c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800061c:	b480      	push	{r7}
 800061e:	b085      	sub	sp, #20
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	f003 0307 	and.w	r3, r3, #7
 800062a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800062c:	4b0c      	ldr	r3, [pc, #48]	; (8000660 <__NVIC_SetPriorityGrouping+0x44>)
 800062e:	68db      	ldr	r3, [r3, #12]
 8000630:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000632:	68ba      	ldr	r2, [r7, #8]
 8000634:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000638:	4013      	ands	r3, r2
 800063a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000640:	68bb      	ldr	r3, [r7, #8]
 8000642:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000644:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000648:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800064c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800064e:	4a04      	ldr	r2, [pc, #16]	; (8000660 <__NVIC_SetPriorityGrouping+0x44>)
 8000650:	68bb      	ldr	r3, [r7, #8]
 8000652:	60d3      	str	r3, [r2, #12]
}
 8000654:	bf00      	nop
 8000656:	3714      	adds	r7, #20
 8000658:	46bd      	mov	sp, r7
 800065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065e:	4770      	bx	lr
 8000660:	e000ed00 	.word	0xe000ed00

08000664 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8000664:	b480      	push	{r7}
 8000666:	b083      	sub	sp, #12
 8000668:	af00      	add	r7, sp, #0
 800066a:	4603      	mov	r3, r0
 800066c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800066e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000672:	2b00      	cmp	r3, #0
 8000674:	db0c      	blt.n	8000690 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000676:	79fb      	ldrb	r3, [r7, #7]
 8000678:	f003 021f 	and.w	r2, r3, #31
 800067c:	4907      	ldr	r1, [pc, #28]	; (800069c <__NVIC_ClearPendingIRQ+0x38>)
 800067e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000682:	095b      	lsrs	r3, r3, #5
 8000684:	2001      	movs	r0, #1
 8000686:	fa00 f202 	lsl.w	r2, r0, r2
 800068a:	3360      	adds	r3, #96	; 0x60
 800068c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000690:	bf00      	nop
 8000692:	370c      	adds	r7, #12
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr
 800069c:	e000e100 	.word	0xe000e100

080006a0 <LL_RCC_HSE_EnableBypass>:
  * @brief  Enable HSE external oscillator (HSE Bypass)
  * @rmtoll CR           HSEBYP        LL_RCC_HSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableBypass(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 80006a4:	4b05      	ldr	r3, [pc, #20]	; (80006bc <LL_RCC_HSE_EnableBypass+0x1c>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a04      	ldr	r2, [pc, #16]	; (80006bc <LL_RCC_HSE_EnableBypass+0x1c>)
 80006aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80006ae:	6013      	str	r3, [r2, #0]
}
 80006b0:	bf00      	nop
 80006b2:	46bd      	mov	sp, r7
 80006b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop
 80006bc:	40023800 	.word	0x40023800

080006c0 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80006c4:	4b05      	ldr	r3, [pc, #20]	; (80006dc <LL_RCC_HSE_Enable+0x1c>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a04      	ldr	r2, [pc, #16]	; (80006dc <LL_RCC_HSE_Enable+0x1c>)
 80006ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80006ce:	6013      	str	r3, [r2, #0]
}
 80006d0:	bf00      	nop
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	40023800 	.word	0x40023800

080006e0 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 80006e4:	4b07      	ldr	r3, [pc, #28]	; (8000704 <LL_RCC_HSE_IsReady+0x24>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80006f0:	bf0c      	ite	eq
 80006f2:	2301      	moveq	r3, #1
 80006f4:	2300      	movne	r3, #0
 80006f6:	b2db      	uxtb	r3, r3
}
 80006f8:	4618      	mov	r0, r3
 80006fa:	46bd      	mov	sp, r7
 80006fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop
 8000704:	40023800 	.word	0x40023800

08000708 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000708:	b480      	push	{r7}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000710:	4b06      	ldr	r3, [pc, #24]	; (800072c <LL_RCC_SetSysClkSource+0x24>)
 8000712:	689b      	ldr	r3, [r3, #8]
 8000714:	f023 0203 	bic.w	r2, r3, #3
 8000718:	4904      	ldr	r1, [pc, #16]	; (800072c <LL_RCC_SetSysClkSource+0x24>)
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	4313      	orrs	r3, r2
 800071e:	608b      	str	r3, [r1, #8]
}
 8000720:	bf00      	nop
 8000722:	370c      	adds	r7, #12
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr
 800072c:	40023800 	.word	0x40023800

08000730 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000734:	4b04      	ldr	r3, [pc, #16]	; (8000748 <LL_RCC_GetSysClkSource+0x18>)
 8000736:	689b      	ldr	r3, [r3, #8]
 8000738:	f003 030c 	and.w	r3, r3, #12
}
 800073c:	4618      	mov	r0, r3
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	40023800 	.word	0x40023800

0800074c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800074c:	b480      	push	{r7}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000754:	4b06      	ldr	r3, [pc, #24]	; (8000770 <LL_RCC_SetAHBPrescaler+0x24>)
 8000756:	689b      	ldr	r3, [r3, #8]
 8000758:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800075c:	4904      	ldr	r1, [pc, #16]	; (8000770 <LL_RCC_SetAHBPrescaler+0x24>)
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	4313      	orrs	r3, r2
 8000762:	608b      	str	r3, [r1, #8]
}
 8000764:	bf00      	nop
 8000766:	370c      	adds	r7, #12
 8000768:	46bd      	mov	sp, r7
 800076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076e:	4770      	bx	lr
 8000770:	40023800 	.word	0x40023800

08000774 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000774:	b480      	push	{r7}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800077c:	4b06      	ldr	r3, [pc, #24]	; (8000798 <LL_RCC_SetAPB1Prescaler+0x24>)
 800077e:	689b      	ldr	r3, [r3, #8]
 8000780:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000784:	4904      	ldr	r1, [pc, #16]	; (8000798 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	4313      	orrs	r3, r2
 800078a:	608b      	str	r3, [r1, #8]
}
 800078c:	bf00      	nop
 800078e:	370c      	adds	r7, #12
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr
 8000798:	40023800 	.word	0x40023800

0800079c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800079c:	b480      	push	{r7}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80007a4:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <LL_RCC_SetAPB2Prescaler+0x24>)
 80007a6:	689b      	ldr	r3, [r3, #8]
 80007a8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80007ac:	4904      	ldr	r1, [pc, #16]	; (80007c0 <LL_RCC_SetAPB2Prescaler+0x24>)
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	4313      	orrs	r3, r2
 80007b2:	608b      	str	r3, [r1, #8]
}
 80007b4:	bf00      	nop
 80007b6:	370c      	adds	r7, #12
 80007b8:	46bd      	mov	sp, r7
 80007ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007be:	4770      	bx	lr
 80007c0:	40023800 	.word	0x40023800

080007c4 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80007c8:	4b05      	ldr	r3, [pc, #20]	; (80007e0 <LL_RCC_PLL_Enable+0x1c>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4a04      	ldr	r2, [pc, #16]	; (80007e0 <LL_RCC_PLL_Enable+0x1c>)
 80007ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80007d2:	6013      	str	r3, [r2, #0]
}
 80007d4:	bf00      	nop
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	40023800 	.word	0x40023800

080007e4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80007e8:	4b07      	ldr	r3, [pc, #28]	; (8000808 <LL_RCC_PLL_IsReady+0x24>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80007f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80007f4:	bf0c      	ite	eq
 80007f6:	2301      	moveq	r3, #1
 80007f8:	2300      	movne	r3, #0
 80007fa:	b2db      	uxtb	r3, r3
}
 80007fc:	4618      	mov	r0, r3
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	40023800 	.word	0x40023800

0800080c <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 800080c:	b480      	push	{r7}
 800080e:	b085      	sub	sp, #20
 8000810:	af00      	add	r7, sp, #0
 8000812:	60f8      	str	r0, [r7, #12]
 8000814:	60b9      	str	r1, [r7, #8]
 8000816:	607a      	str	r2, [r7, #4]
 8000818:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 800081a:	4b0d      	ldr	r3, [pc, #52]	; (8000850 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800081c:	685a      	ldr	r2, [r3, #4]
 800081e:	4b0d      	ldr	r3, [pc, #52]	; (8000854 <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 8000820:	4013      	ands	r3, r2
 8000822:	68f9      	ldr	r1, [r7, #12]
 8000824:	68ba      	ldr	r2, [r7, #8]
 8000826:	4311      	orrs	r1, r2
 8000828:	687a      	ldr	r2, [r7, #4]
 800082a:	0192      	lsls	r2, r2, #6
 800082c:	430a      	orrs	r2, r1
 800082e:	4908      	ldr	r1, [pc, #32]	; (8000850 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000830:	4313      	orrs	r3, r2
 8000832:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8000834:	4b06      	ldr	r3, [pc, #24]	; (8000850 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000836:	685b      	ldr	r3, [r3, #4]
 8000838:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800083c:	4904      	ldr	r1, [pc, #16]	; (8000850 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	4313      	orrs	r3, r2
 8000842:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 8000844:	bf00      	nop
 8000846:	3714      	adds	r7, #20
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr
 8000850:	40023800 	.word	0x40023800
 8000854:	ffbf8000 	.word	0xffbf8000

08000858 <LL_AHB1_GRP1_EnableClock>:
{
 8000858:	b480      	push	{r7}
 800085a:	b085      	sub	sp, #20
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000860:	4b08      	ldr	r3, [pc, #32]	; (8000884 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000862:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000864:	4907      	ldr	r1, [pc, #28]	; (8000884 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	4313      	orrs	r3, r2
 800086a:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800086c:	4b05      	ldr	r3, [pc, #20]	; (8000884 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800086e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	4013      	ands	r3, r2
 8000874:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000876:	68fb      	ldr	r3, [r7, #12]
}
 8000878:	bf00      	nop
 800087a:	3714      	adds	r7, #20
 800087c:	46bd      	mov	sp, r7
 800087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000882:	4770      	bx	lr
 8000884:	40023800 	.word	0x40023800

08000888 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000888:	b480      	push	{r7}
 800088a:	b085      	sub	sp, #20
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000890:	4b08      	ldr	r3, [pc, #32]	; (80008b4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000892:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000894:	4907      	ldr	r1, [pc, #28]	; (80008b4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	4313      	orrs	r3, r2
 800089a:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800089c:	4b05      	ldr	r3, [pc, #20]	; (80008b4 <LL_APB1_GRP1_EnableClock+0x2c>)
 800089e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	4013      	ands	r3, r2
 80008a4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008a6:	68fb      	ldr	r3, [r7, #12]
}
 80008a8:	bf00      	nop
 80008aa:	3714      	adds	r7, #20
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr
 80008b4:	40023800 	.word	0x40023800

080008b8 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b085      	sub	sp, #20
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80008c0:	4b08      	ldr	r3, [pc, #32]	; (80008e4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80008c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80008c4:	4907      	ldr	r1, [pc, #28]	; (80008e4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	4313      	orrs	r3, r2
 80008ca:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80008cc:	4b05      	ldr	r3, [pc, #20]	; (80008e4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80008ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	4013      	ands	r3, r2
 80008d4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008d6:	68fb      	ldr	r3, [r7, #12]
}
 80008d8:	bf00      	nop
 80008da:	3714      	adds	r7, #20
 80008dc:	46bd      	mov	sp, r7
 80008de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e2:	4770      	bx	lr
 80008e4:	40023800 	.word	0x40023800

080008e8 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b083      	sub	sp, #12
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80008f0:	4b06      	ldr	r3, [pc, #24]	; (800090c <LL_FLASH_SetLatency+0x24>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	f023 0207 	bic.w	r2, r3, #7
 80008f8:	4904      	ldr	r1, [pc, #16]	; (800090c <LL_FLASH_SetLatency+0x24>)
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	4313      	orrs	r3, r2
 80008fe:	600b      	str	r3, [r1, #0]
}
 8000900:	bf00      	nop
 8000902:	370c      	adds	r7, #12
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr
 800090c:	40023c00 	.word	0x40023c00

08000910 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000914:	4b04      	ldr	r3, [pc, #16]	; (8000928 <LL_FLASH_GetLatency+0x18>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	f003 0307 	and.w	r3, r3, #7
}
 800091c:	4618      	mov	r0, r3
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	40023c00 	.word	0x40023c00

0800092c <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8000934:	4b06      	ldr	r3, [pc, #24]	; (8000950 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800093c:	4904      	ldr	r1, [pc, #16]	; (8000950 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	4313      	orrs	r3, r2
 8000942:	600b      	str	r3, [r1, #0]
}
 8000944:	bf00      	nop
 8000946:	370c      	adds	r7, #12
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr
 8000950:	40007000 	.word	0x40007000

08000954 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	691b      	ldr	r3, [r3, #16]
 8000960:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	695b      	ldr	r3, [r3, #20]
 800096c:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	615a      	str	r2, [r3, #20]
}
 8000974:	bf00      	nop
 8000976:	370c      	adds	r7, #12
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr

08000980 <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
{
 8000980:	b480      	push	{r7}
 8000982:	b083      	sub	sp, #12
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	f003 0320 	and.w	r3, r3, #32
 8000990:	2b20      	cmp	r3, #32
 8000992:	bf0c      	ite	eq
 8000994:	2301      	moveq	r3, #1
 8000996:	2300      	movne	r3, #0
 8000998:	b2db      	uxtb	r3, r3
}
 800099a:	4618      	mov	r0, r3
 800099c:	370c      	adds	r7, #12
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr

080009a6 <LL_USART_ReceiveData9>:
  * @rmtoll DR           DR            LL_USART_ReceiveData9
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0x1FF
  */
__STATIC_INLINE uint16_t LL_USART_ReceiveData9(USART_TypeDef *USARTx)
{
 80009a6:	b480      	push	{r7}
 80009a8:	b083      	sub	sp, #12
 80009aa:	af00      	add	r7, sp, #0
 80009ac:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	685b      	ldr	r3, [r3, #4]
 80009b2:	b29b      	uxth	r3, r3
 80009b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80009b8:	b29b      	uxth	r3, r3
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	370c      	adds	r7, #12
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr

080009c6 <_ZNSt11char_traitsIcE6lengthEPKc>:
#endif
	return __builtin_memcmp(__s1, __s2, __n);
      }

      static _GLIBCXX17_CONSTEXPR size_t
      length(const char_type* __s)
 80009c6:	b580      	push	{r7, lr}
 80009c8:	b084      	sub	sp, #16
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	6078      	str	r0, [r7, #4]
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	60fb      	str	r3, [r7, #12]
      return __builtin_is_constant_evaluated();
 80009d2:	2300      	movs	r3, #0
      {
#if __cplusplus >= 201703L
	if (__constant_string_p(__s))
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d004      	beq.n	80009e2 <_ZNSt11char_traitsIcE6lengthEPKc+0x1c>
	  return __gnu_cxx::char_traits<char_type>::length(__s);
 80009d8:	6878      	ldr	r0, [r7, #4]
 80009da:	f000 fa48 	bl	8000e6e <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc>
 80009de:	4603      	mov	r3, r0
 80009e0:	e004      	b.n	80009ec <_ZNSt11char_traitsIcE6lengthEPKc+0x26>
#endif
	return __builtin_strlen(__s);
 80009e2:	6878      	ldr	r0, [r7, #4]
 80009e4:	f7ff fc44 	bl	8000270 <strlen>
 80009e8:	4603      	mov	r3, r0
 80009ea:	bf00      	nop
      }
 80009ec:	4618      	mov	r0, r3
 80009ee:	3710      	adds	r7, #16
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}

080009f4 <_ZNSt7__cxx119to_stringEm>:
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, 4 * sizeof(long),
					   "%ld", __val); }

  inline string
  to_string(unsigned long __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf,
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b084      	sub	sp, #16
 80009f8:	af02      	add	r7, sp, #8
 80009fa:	6078      	str	r0, [r7, #4]
 80009fc:	6039      	str	r1, [r7, #0]
					   4 * sizeof(unsigned long),
					   "%lu", __val); }
 80009fe:	6878      	ldr	r0, [r7, #4]
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	9300      	str	r3, [sp, #0]
 8000a04:	4b04      	ldr	r3, [pc, #16]	; (8000a18 <_ZNSt7__cxx119to_stringEm+0x24>)
 8000a06:	2210      	movs	r2, #16
 8000a08:	4904      	ldr	r1, [pc, #16]	; (8000a1c <_ZNSt7__cxx119to_stringEm+0x28>)
 8000a0a:	f000 fa50 	bl	8000eae <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>
 8000a0e:	6878      	ldr	r0, [r7, #4]
 8000a10:	3708      	adds	r7, #8
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	08003270 	.word	0x08003270
 8000a1c:	08002be5 	.word	0x08002be5

08000a20 <_ZNKSt5arrayIhLj10EE3endEv>:
      _GLIBCXX17_CONSTEXPR iterator
      end() noexcept
      { return iterator(data() + _Nm); }

      _GLIBCXX17_CONSTEXPR const_iterator
      end() const noexcept
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
      { return const_iterator(data() + _Nm); }
 8000a28:	6878      	ldr	r0, [r7, #4]
 8000a2a:	f000 fab0 	bl	8000f8e <_ZNKSt5arrayIhLj10EE4dataEv>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	330a      	adds	r3, #10
 8000a32:	4618      	mov	r0, r3
 8000a34:	3708      	adds	r7, #8
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}

08000a3a <_ZNKSt5arrayIhLj10EE5beginEv>:
      begin() const noexcept
 8000a3a:	b580      	push	{r7, lr}
 8000a3c:	b082      	sub	sp, #8
 8000a3e:	af00      	add	r7, sp, #0
 8000a40:	6078      	str	r0, [r7, #4]
      { return const_iterator(data()); }
 8000a42:	6878      	ldr	r0, [r7, #4]
 8000a44:	f000 faa3 	bl	8000f8e <_ZNKSt5arrayIhLj10EE4dataEv>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	3708      	adds	r7, #8
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}

08000a52 <_ZZ7getDataRSt5arrayIhLj10EERhS2_S2_ENKUlPhE_clES3_>:
    auto A_iter  =   std::find(data.begin(),  data.end(),'A');
    auto B_iter = std::find(data.begin(), data.end(), 'B');
    auto C_iter = std::find(data.begin(), data.end(), 'C');


    auto exam = [data](decltype(A_iter) praIter)
 8000a52:	b580      	push	{r7, lr}
 8000a54:	b082      	sub	sp, #8
 8000a56:	af00      	add	r7, sp, #0
 8000a58:	6078      	str	r0, [r7, #4]
 8000a5a:	6039      	str	r1, [r7, #0]
    {
        if(praIter != data.end() && praIter != data.begin() )
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f7ff ffde 	bl	8000a20 <_ZNKSt5arrayIhLj10EE3endEv>
 8000a64:	4602      	mov	r2, r0
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	4293      	cmp	r3, r2
 8000a6a:	d009      	beq.n	8000a80 <_ZZ7getDataRSt5arrayIhLj10EERhS2_S2_ENKUlPhE_clES3_+0x2e>
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f7ff ffe3 	bl	8000a3a <_ZNKSt5arrayIhLj10EE5beginEv>
 8000a74:	4602      	mov	r2, r0
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	4293      	cmp	r3, r2
 8000a7a:	d001      	beq.n	8000a80 <_ZZ7getDataRSt5arrayIhLj10EERhS2_S2_ENKUlPhE_clES3_+0x2e>
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	e000      	b.n	8000a82 <_ZZ7getDataRSt5arrayIhLj10EERhS2_S2_ENKUlPhE_clES3_+0x30>
 8000a80:	2300      	movs	r3, #0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <_ZZ7getDataRSt5arrayIhLj10EERhS2_S2_ENKUlPhE_clES3_+0x38>
        {
            return 1;
 8000a86:	2301      	movs	r3, #1
 8000a88:	e000      	b.n	8000a8c <_ZZ7getDataRSt5arrayIhLj10EERhS2_S2_ENKUlPhE_clES3_+0x3a>
        }
        return 0;
 8000a8a:	2300      	movs	r3, #0
    };
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	3708      	adds	r7, #8
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}

08000a94 <_Z7getDataRSt5arrayIhLj10EERhS2_S2_>:
{
 8000a94:	b590      	push	{r4, r7, lr}
 8000a96:	b08f      	sub	sp, #60	; 0x3c
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	60f8      	str	r0, [r7, #12]
 8000a9c:	60b9      	str	r1, [r7, #8]
 8000a9e:	607a      	str	r2, [r7, #4]
 8000aa0:	603b      	str	r3, [r7, #0]
    constexpr auto nextByte = 1;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	637b      	str	r3, [r7, #52]	; 0x34
    constexpr auto startByte = '[';
 8000aa6:	235b      	movs	r3, #91	; 0x5b
 8000aa8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    auto A_iter  =   std::find(data.begin(),  data.end(),'A');
 8000aac:	68f8      	ldr	r0, [r7, #12]
 8000aae:	f000 fa36 	bl	8000f1e <_ZNSt5arrayIhLj10EE5beginEv>
 8000ab2:	4604      	mov	r4, r0
 8000ab4:	68f8      	ldr	r0, [r7, #12]
 8000ab6:	f000 fa3e 	bl	8000f36 <_ZNSt5arrayIhLj10EE3endEv>
 8000aba:	4601      	mov	r1, r0
 8000abc:	2341      	movs	r3, #65	; 0x41
 8000abe:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8000ac2:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8000ac6:	461a      	mov	r2, r3
 8000ac8:	4620      	mov	r0, r4
 8000aca:	f000 fa41 	bl	8000f50 <_ZSt4findIPhcET_S1_S1_RKT0_>
 8000ace:	62f8      	str	r0, [r7, #44]	; 0x2c
    auto B_iter = std::find(data.begin(), data.end(), 'B');
 8000ad0:	68f8      	ldr	r0, [r7, #12]
 8000ad2:	f000 fa24 	bl	8000f1e <_ZNSt5arrayIhLj10EE5beginEv>
 8000ad6:	4604      	mov	r4, r0
 8000ad8:	68f8      	ldr	r0, [r7, #12]
 8000ada:	f000 fa2c 	bl	8000f36 <_ZNSt5arrayIhLj10EE3endEv>
 8000ade:	4601      	mov	r1, r0
 8000ae0:	2342      	movs	r3, #66	; 0x42
 8000ae2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8000ae6:	f107 0322 	add.w	r3, r7, #34	; 0x22
 8000aea:	461a      	mov	r2, r3
 8000aec:	4620      	mov	r0, r4
 8000aee:	f000 fa2f 	bl	8000f50 <_ZSt4findIPhcET_S1_S1_RKT0_>
 8000af2:	62b8      	str	r0, [r7, #40]	; 0x28
    auto C_iter = std::find(data.begin(), data.end(), 'C');
 8000af4:	68f8      	ldr	r0, [r7, #12]
 8000af6:	f000 fa12 	bl	8000f1e <_ZNSt5arrayIhLj10EE5beginEv>
 8000afa:	4604      	mov	r4, r0
 8000afc:	68f8      	ldr	r0, [r7, #12]
 8000afe:	f000 fa1a 	bl	8000f36 <_ZNSt5arrayIhLj10EE3endEv>
 8000b02:	4601      	mov	r1, r0
 8000b04:	2343      	movs	r3, #67	; 0x43
 8000b06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8000b0a:	f107 0323 	add.w	r3, r7, #35	; 0x23
 8000b0e:	461a      	mov	r2, r3
 8000b10:	4620      	mov	r0, r4
 8000b12:	f000 fa1d 	bl	8000f50 <_ZSt4findIPhcET_S1_S1_RKT0_>
 8000b16:	6278      	str	r0, [r7, #36]	; 0x24
    };
 8000b18:	68fa      	ldr	r2, [r7, #12]
 8000b1a:	f107 0314 	add.w	r3, r7, #20
 8000b1e:	6810      	ldr	r0, [r2, #0]
 8000b20:	6851      	ldr	r1, [r2, #4]
 8000b22:	c303      	stmia	r3!, {r0, r1}
 8000b24:	8912      	ldrh	r2, [r2, #8]
 8000b26:	801a      	strh	r2, [r3, #0]

    if(exam(A_iter))
 8000b28:	f107 0314 	add.w	r3, r7, #20
 8000b2c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f7ff ff8f 	bl	8000a52 <_ZZ7getDataRSt5arrayIhLj10EERhS2_S2_ENKUlPhE_clES3_>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	bf14      	ite	ne
 8000b3a:	2301      	movne	r3, #1
 8000b3c:	2300      	moveq	r3, #0
 8000b3e:	b2db      	uxtb	r3, r3
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d008      	beq.n	8000b56 <_Z7getDataRSt5arrayIhLj10EERhS2_S2_+0xc2>
    {
       if(*(A_iter-nextByte) == startByte)
 8000b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b46:	3b01      	subs	r3, #1
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	2b5b      	cmp	r3, #91	; 0x5b
 8000b4c:	d103      	bne.n	8000b56 <_Z7getDataRSt5arrayIhLj10EERhS2_S2_+0xc2>
       {
    	   surge = *(A_iter+nextByte);
 8000b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b50:	785a      	ldrb	r2, [r3, #1]
 8000b52:	68bb      	ldr	r3, [r7, #8]
 8000b54:	701a      	strb	r2, [r3, #0]
       }
    }
    if(exam(B_iter))
 8000b56:	f107 0314 	add.w	r3, r7, #20
 8000b5a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f7ff ff78 	bl	8000a52 <_ZZ7getDataRSt5arrayIhLj10EERhS2_S2_ENKUlPhE_clES3_>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	bf14      	ite	ne
 8000b68:	2301      	movne	r3, #1
 8000b6a:	2300      	moveq	r3, #0
 8000b6c:	b2db      	uxtb	r3, r3
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d008      	beq.n	8000b84 <_Z7getDataRSt5arrayIhLj10EERhS2_S2_+0xf0>
    {
        if(*(B_iter-nextByte) == startByte)
 8000b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b74:	3b01      	subs	r3, #1
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	2b5b      	cmp	r3, #91	; 0x5b
 8000b7a:	d103      	bne.n	8000b84 <_Z7getDataRSt5arrayIhLj10EERhS2_S2_+0xf0>
        {
        	sway = *(B_iter+nextByte);
 8000b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b7e:	785a      	ldrb	r2, [r3, #1]
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	701a      	strb	r2, [r3, #0]
        }
    }
    if(exam(C_iter))
 8000b84:	f107 0314 	add.w	r3, r7, #20
 8000b88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f7ff ff61 	bl	8000a52 <_ZZ7getDataRSt5arrayIhLj10EERhS2_S2_ENKUlPhE_clES3_>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	bf14      	ite	ne
 8000b96:	2301      	movne	r3, #1
 8000b98:	2300      	moveq	r3, #0
 8000b9a:	b2db      	uxtb	r3, r3
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d008      	beq.n	8000bb2 <_Z7getDataRSt5arrayIhLj10EERhS2_S2_+0x11e>
    {
        if(*(C_iter-nextByte) == startByte)
 8000ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ba2:	3b01      	subs	r3, #1
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	2b5b      	cmp	r3, #91	; 0x5b
 8000ba8:	d103      	bne.n	8000bb2 <_Z7getDataRSt5arrayIhLj10EERhS2_S2_+0x11e>
        {
            traction = *(C_iter+nextByte);
 8000baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bac:	785a      	ldrb	r2, [r3, #1]
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	701a      	strb	r2, [r3, #0]
        }
    }

}
 8000bb2:	bf00      	nop
 8000bb4:	373c      	adds	r7, #60	; 0x3c
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd90      	pop	{r4, r7, pc}
	...

08000bbc <main>:
  * @brief  The application entry point.
  * @retval int
  */
const char *myName = "TranHoangAnh";
int main()
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b08e      	sub	sp, #56	; 0x38
 8000bc0:	af00      	add	r7, sp, #0
  
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000bc2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000bc6:	f7ff fe77 	bl	80008b8 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000bca:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000bce:	f7ff fe5b 	bl	8000888 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000bd2:	2007      	movs	r0, #7
 8000bd4:	f7ff fd22 	bl	800061c <__NVIC_SetPriorityGrouping>

  
  SystemClock_Config();
 8000bd8:	f000 f890 	bl	8000cfc <_Z18SystemClock_Configv>

  
  MX_GPIO_Init();
 8000bdc:	f7ff fcf4 	bl	80005c8 <MX_GPIO_Init>
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART6);
}

__SFI auto UHAL_USART6::initialize()
{
	LL_USART_InitTypeDef USART_InitStruct = {0};
 8000be0:	f107 031c 	add.w	r3, r7, #28
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	605a      	str	r2, [r3, #4]
 8000bea:	609a      	str	r2, [r3, #8]
 8000bec:	60da      	str	r2, [r3, #12]
 8000bee:	611a      	str	r2, [r3, #16]
 8000bf0:	615a      	str	r2, [r3, #20]
 8000bf2:	619a      	str	r2, [r3, #24]
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf4:	1d3b      	adds	r3, r7, #4
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	601a      	str	r2, [r3, #0]
 8000bfa:	605a      	str	r2, [r3, #4]
 8000bfc:	609a      	str	r2, [r3, #8]
 8000bfe:	60da      	str	r2, [r3, #12]
 8000c00:	611a      	str	r2, [r3, #16]
 8000c02:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART6);
 8000c04:	2020      	movs	r0, #32
 8000c06:	f7ff fe57 	bl	80008b8 <LL_APB2_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8000c0a:	2004      	movs	r0, #4
 8000c0c:	f7ff fe24 	bl	8000858 <LL_AHB1_GRP1_EnableClock>
	/**USART6 GPIO Configuration
	 PC6   ------> USART6_TX
	 PC7   ------> USART6_RX
	 */
	GPIO_InitStruct.Pin = LL_GPIO_PIN_6 | LL_GPIO_PIN_7;
 8000c10:	23c0      	movs	r3, #192	; 0xc0
 8000c12:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000c14:	2302      	movs	r3, #2
 8000c16:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000c18:	2303      	movs	r3, #3
 8000c1a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000c20:	2300      	movs	r3, #0
 8000c22:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8000c24:	2308      	movs	r3, #8
 8000c26:	61bb      	str	r3, [r7, #24]
	LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c28:	1d3b      	adds	r3, r7, #4
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4810      	ldr	r0, [pc, #64]	; (8000c70 <main+0xb4>)
 8000c2e:	f001 f88b 	bl	8001d48 <LL_GPIO_Init>

	USART_InitStruct.BaudRate = 115200;
 8000c32:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000c36:	61fb      	str	r3, [r7, #28]
	USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_9B;
 8000c38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c3c:	623b      	str	r3, [r7, #32]
	USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	627b      	str	r3, [r7, #36]	; 0x24
	USART_InitStruct.Parity = LL_USART_PARITY_EVEN;
 8000c42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c46:	62bb      	str	r3, [r7, #40]	; 0x28
	USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000c48:	230c      	movs	r3, #12
 8000c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
	USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	633b      	str	r3, [r7, #48]	; 0x30
	USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000c50:	2300      	movs	r3, #0
 8000c52:	637b      	str	r3, [r7, #52]	; 0x34
	LL_USART_Init(USART6, &USART_InitStruct);
 8000c54:	f107 031c 	add.w	r3, r7, #28
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4806      	ldr	r0, [pc, #24]	; (8000c74 <main+0xb8>)
 8000c5c:	f001 fbec 	bl	8002438 <LL_USART_Init>
	LL_USART_ConfigAsyncMode(USART6);
 8000c60:	4804      	ldr	r0, [pc, #16]	; (8000c74 <main+0xb8>)
 8000c62:	f7ff fe77 	bl	8000954 <LL_USART_ConfigAsyncMode>
}
 8000c66:	bf00      	nop

  
  UHAL_USART6::initialize();
  UHAL_USART6::interruptReceiveInit();
 8000c68:	f000 fee8 	bl	8001a3c <_ZN11UHAL_USART620interruptReceiveInitEv>
  
  while (true)
 8000c6c:	e7fe      	b.n	8000c6c <main+0xb0>
 8000c6e:	bf00      	nop
 8000c70:	40020800 	.word	0x40020800
 8000c74:	40011400 	.word	0x40011400

08000c78 <USART6_IRQHandler>:


extern "C"
{
void USART6_IRQHandler(void)
{
 8000c78:	b598      	push	{r3, r4, r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
				return LL_USART_IsActiveFlag_RXNE(thisInstance);
 8000c7c:	4819      	ldr	r0, [pc, #100]	; (8000ce4 <USART6_IRQHandler+0x6c>)
 8000c7e:	f7ff fe7f 	bl	8000980 <LL_USART_IsActiveFlag_RXNE>
 8000c82:	4603      	mov	r3, r0
 8000c84:	bf00      	nop
//        transmitData(_uartBuffer);
//        TXE::clear();
//    }


    if(RXNE::isSet())
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	bf14      	ite	ne
 8000c8a:	2301      	movne	r3, #1
 8000c8c:	2300      	moveq	r3, #0
 8000c8e:	b2db      	uxtb	r3, r3
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d021      	beq.n	8000cd8 <USART6_IRQHandler+0x60>
    {
    	if(_index <10)
 8000c94:	4b14      	ldr	r3, [pc, #80]	; (8000ce8 <USART6_IRQHandler+0x70>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	2b09      	cmp	r3, #9
 8000c9a:	d806      	bhi.n	8000caa <USART6_IRQHandler+0x32>
    	{
    		_index++;
 8000c9c:	4b12      	ldr	r3, [pc, #72]	; (8000ce8 <USART6_IRQHandler+0x70>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	3301      	adds	r3, #1
 8000ca2:	b2da      	uxtb	r2, r3
 8000ca4:	4b10      	ldr	r3, [pc, #64]	; (8000ce8 <USART6_IRQHandler+0x70>)
 8000ca6:	701a      	strb	r2, [r3, #0]
 8000ca8:	e008      	b.n	8000cbc <USART6_IRQHandler+0x44>

    	}else
    	{
    		getData(_arrayBuffer, _surge,_sway,_traction);
 8000caa:	4b10      	ldr	r3, [pc, #64]	; (8000cec <USART6_IRQHandler+0x74>)
 8000cac:	4a10      	ldr	r2, [pc, #64]	; (8000cf0 <USART6_IRQHandler+0x78>)
 8000cae:	4911      	ldr	r1, [pc, #68]	; (8000cf4 <USART6_IRQHandler+0x7c>)
 8000cb0:	4811      	ldr	r0, [pc, #68]	; (8000cf8 <USART6_IRQHandler+0x80>)
 8000cb2:	f7ff feef 	bl	8000a94 <_Z7getDataRSt5arrayIhLj10EERhS2_S2_>
    		_index = 0;
 8000cb6:	4b0c      	ldr	r3, [pc, #48]	; (8000ce8 <USART6_IRQHandler+0x70>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	701a      	strb	r2, [r3, #0]
	LL_USART_EnableDirectionRx(thisInstance);
}

UHAL_USART6::data_T UHAL_USART6::receivedData()
{
	return LL_USART_ReceiveData9(thisInstance);
 8000cbc:	4809      	ldr	r0, [pc, #36]	; (8000ce4 <USART6_IRQHandler+0x6c>)
 8000cbe:	f7ff fe72 	bl	80009a6 <LL_USART_ReceiveData9>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	b2dc      	uxtb	r4, r3

    	}
      _arrayBuffer[_index] = receivedData();
 8000cc6:	4b08      	ldr	r3, [pc, #32]	; (8000ce8 <USART6_IRQHandler+0x70>)
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	4619      	mov	r1, r3
 8000ccc:	480a      	ldr	r0, [pc, #40]	; (8000cf8 <USART6_IRQHandler+0x80>)
 8000cce:	f000 f96b 	bl	8000fa8 <_ZNSt5arrayIhLj10EEixEj>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	4622      	mov	r2, r4
 8000cd6:	701a      	strb	r2, [r3, #0]


    }
    NVIC_ClearPendingIRQ(UHAL_USART6::thisIRQn);
 8000cd8:	2047      	movs	r0, #71	; 0x47
 8000cda:	f7ff fcc3 	bl	8000664 <__NVIC_ClearPendingIRQ>
}
 8000cde:	bf00      	nop
 8000ce0:	bd98      	pop	{r3, r4, r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	40011400 	.word	0x40011400
 8000ce8:	20000092 	.word	0x20000092
 8000cec:	20000086 	.word	0x20000086
 8000cf0:	20000085 	.word	0x20000085
 8000cf4:	20000084 	.word	0x20000084
 8000cf8:	20000088 	.word	0x20000088

08000cfc <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_5);
 8000d00:	2005      	movs	r0, #5
 8000d02:	f7ff fdf1 	bl	80008e8 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_5)
 8000d06:	f7ff fe03 	bl	8000910 <LL_FLASH_GetLatency>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b05      	cmp	r3, #5
 8000d0e:	bf14      	ite	ne
 8000d10:	2301      	movne	r3, #1
 8000d12:	2300      	moveq	r3, #0
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d000      	beq.n	8000d1c <_Z18SystemClock_Configv+0x20>
 8000d1a:	e7f4      	b.n	8000d06 <_Z18SystemClock_Configv+0xa>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8000d1c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000d20:	f7ff fe04 	bl	800092c <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSE_EnableBypass();
 8000d24:	f7ff fcbc 	bl	80006a0 <LL_RCC_HSE_EnableBypass>
  LL_RCC_HSE_Enable();
 8000d28:	f7ff fcca 	bl	80006c0 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8000d2c:	f7ff fcd8 	bl	80006e0 <LL_RCC_HSE_IsReady>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b01      	cmp	r3, #1
 8000d34:	bf14      	ite	ne
 8000d36:	2301      	movne	r3, #1
 8000d38:	2300      	moveq	r3, #0
 8000d3a:	b2db      	uxtb	r3, r3
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d000      	beq.n	8000d42 <_Z18SystemClock_Configv+0x46>
 8000d40:	e7f4      	b.n	8000d2c <_Z18SystemClock_Configv+0x30>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_4, 168, LL_RCC_PLLP_DIV_2);
 8000d42:	2300      	movs	r3, #0
 8000d44:	22a8      	movs	r2, #168	; 0xa8
 8000d46:	2104      	movs	r1, #4
 8000d48:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000d4c:	f7ff fd5e 	bl	800080c <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8000d50:	f7ff fd38 	bl	80007c4 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8000d54:	f7ff fd46 	bl	80007e4 <LL_RCC_PLL_IsReady>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b01      	cmp	r3, #1
 8000d5c:	bf14      	ite	ne
 8000d5e:	2301      	movne	r3, #1
 8000d60:	2300      	moveq	r3, #0
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d000      	beq.n	8000d6a <_Z18SystemClock_Configv+0x6e>
 8000d68:	e7f4      	b.n	8000d54 <_Z18SystemClock_Configv+0x58>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000d6a:	2000      	movs	r0, #0
 8000d6c:	f7ff fcee 	bl	800074c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_4);
 8000d70:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8000d74:	f7ff fcfe 	bl	8000774 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
 8000d78:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000d7c:	f7ff fd0e 	bl	800079c <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000d80:	2002      	movs	r0, #2
 8000d82:	f7ff fcc1 	bl	8000708 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000d86:	f7ff fcd3 	bl	8000730 <LL_RCC_GetSysClkSource>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b08      	cmp	r3, #8
 8000d8e:	bf14      	ite	ne
 8000d90:	2301      	movne	r3, #1
 8000d92:	2300      	moveq	r3, #0
 8000d94:	b2db      	uxtb	r3, r3
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d000      	beq.n	8000d9c <_Z18SystemClock_Configv+0xa0>
 8000d9a:	e7f4      	b.n	8000d86 <_Z18SystemClock_Configv+0x8a>
  {

  }
  LL_Init1msTick(168000000);
 8000d9c:	4803      	ldr	r0, [pc, #12]	; (8000dac <_Z18SystemClock_Configv+0xb0>)
 8000d9e:	f001 fbe5 	bl	800256c <LL_Init1msTick>
  LL_SetSystemCoreClock(168000000);
 8000da2:	4802      	ldr	r0, [pc, #8]	; (8000dac <_Z18SystemClock_Configv+0xb0>)
 8000da4:	f001 fbf0 	bl	8002588 <LL_SetSystemCoreClock>
}
 8000da8:	bf00      	nop
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	0a037a00 	.word	0x0a037a00

08000db0 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b09c      	sub	sp, #112	; 0x70
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
 8000db8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
//	void *str = file;
	std::string _file = reinterpret_cast<const char*>(file);
 8000dba:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f001 fbf2 	bl	80025a8 <_ZNSaIcEC1Ev>
 8000dc4:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8000dc8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000dcc:	6879      	ldr	r1, [r7, #4]
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f000 f8f9 	bl	8000fc6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8000dd4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f001 fbe6 	bl	80025aa <_ZNSaIcED1Ev>
	std::string _line = std::to_string(line);
 8000dde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000de2:	6839      	ldr	r1, [r7, #0]
 8000de4:	4618      	mov	r0, r3
 8000de6:	f7ff fe05 	bl	80009f4 <_ZNSt7__cxx119to_stringEm>
	std::string msg =_line + _file + '\n';
 8000dea:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000dee:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8000df2:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000df6:	4618      	mov	r0, r3
 8000df8:	f000 f90b 	bl	8001012 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_SA_>
 8000dfc:	f107 030c 	add.w	r3, r7, #12
 8000e00:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8000e04:	220a      	movs	r2, #10
 8000e06:	4618      	mov	r0, r3
 8000e08:	f000 f916 	bl	8001038 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S5_>
 8000e0c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000e10:	4618      	mov	r0, r3
 8000e12:	f001 fca1 	bl	8002758 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	UHAL_USART6::send(msg);
 8000e16:	f107 030c 	add.w	r3, r7, #12
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f000 fda8 	bl	8001970 <_ZN11UHAL_USART64sendERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
	std::string msg =_line + _file + '\n';
 8000e20:	f107 030c 	add.w	r3, r7, #12
 8000e24:	4618      	mov	r0, r3
 8000e26:	f001 fc97 	bl	8002758 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	std::string _line = std::to_string(line);
 8000e2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f001 fc92 	bl	8002758 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	std::string _file = reinterpret_cast<const char*>(file);
 8000e34:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f001 fc8d 	bl	8002758 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

}
 8000e3e:	bf00      	nop
 8000e40:	3770      	adds	r7, #112	; 0x70
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}

08000e46 <_ZN9__gnu_cxx11char_traitsIcE2eqERKcS3_>:
      eq(const char_type& __c1, const char_type& __c2)
 8000e46:	b480      	push	{r7}
 8000e48:	b083      	sub	sp, #12
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	6078      	str	r0, [r7, #4]
 8000e4e:	6039      	str	r1, [r7, #0]
      { return __c1 == __c2; }
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	781a      	ldrb	r2, [r3, #0]
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	bf0c      	ite	eq
 8000e5c:	2301      	moveq	r3, #1
 8000e5e:	2300      	movne	r3, #0
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	4618      	mov	r0, r3
 8000e64:	370c      	adds	r7, #12
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr

08000e6e <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc>:
    char_traits<_CharT>::
 8000e6e:	b580      	push	{r7, lr}
 8000e70:	b084      	sub	sp, #16
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	6078      	str	r0, [r7, #4]
      std::size_t __i = 0;
 8000e76:	2300      	movs	r3, #0
 8000e78:	60fb      	str	r3, [r7, #12]
      while (!eq(__p[__i], char_type()))
 8000e7a:	687a      	ldr	r2, [r7, #4]
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	4413      	add	r3, r2
 8000e80:	2200      	movs	r2, #0
 8000e82:	72fa      	strb	r2, [r7, #11]
 8000e84:	f107 020b 	add.w	r2, r7, #11
 8000e88:	4611      	mov	r1, r2
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f7ff ffdb 	bl	8000e46 <_ZN9__gnu_cxx11char_traitsIcE2eqERKcS3_>
 8000e90:	4603      	mov	r3, r0
 8000e92:	f083 0301 	eor.w	r3, r3, #1
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d003      	beq.n	8000ea4 <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc+0x36>
        ++__i;
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	60fb      	str	r3, [r7, #12]
      while (!eq(__p[__i], char_type()))
 8000ea2:	e7ea      	b.n	8000e7a <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc+0xc>
      return __i;
 8000ea4:	68fb      	ldr	r3, [r7, #12]
    }
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3710      	adds	r7, #16
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}

08000eae <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>:
    }

  // Helper for the to_string / to_wstring functions.
  template<typename _String, typename _CharT = typename _String::value_type>
    _String
    __to_xstring(int (*__convf) (_CharT*, std::size_t, const _CharT*,
 8000eae:	b408      	push	{r3}
 8000eb0:	b590      	push	{r4, r7, lr}
 8000eb2:	b088      	sub	sp, #32
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	60f8      	str	r0, [r7, #12]
 8000eb8:	60b9      	str	r1, [r7, #8]
 8000eba:	607a      	str	r2, [r7, #4]
				 __builtin_va_list), std::size_t __n,
		 const _CharT* __fmt, ...)
    {
      // XXX Eventually the result should be constructed in-place in
      // the __cxx11 string, likely with the help of internal hooks.
      _CharT* __s = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	3307      	adds	r3, #7
 8000ec0:	08db      	lsrs	r3, r3, #3
 8000ec2:	00db      	lsls	r3, r3, #3
 8000ec4:	ebad 0d03 	sub.w	sp, sp, r3
 8000ec8:	466b      	mov	r3, sp
 8000eca:	3307      	adds	r3, #7
 8000ecc:	08db      	lsrs	r3, r3, #3
 8000ece:	00db      	lsls	r3, r3, #3
 8000ed0:	61fb      	str	r3, [r7, #28]
							  * __n));

      __builtin_va_list __args;
      __builtin_va_start(__args, __fmt);
 8000ed2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ed6:	613b      	str	r3, [r7, #16]

      const int __len = __convf(__s, __n, __fmt, __args);
 8000ed8:	68bc      	ldr	r4, [r7, #8]
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000ede:	6879      	ldr	r1, [r7, #4]
 8000ee0:	69f8      	ldr	r0, [r7, #28]
 8000ee2:	47a0      	blx	r4
 8000ee4:	61b8      	str	r0, [r7, #24]

      __builtin_va_end(__args);

      return _String(__s, __s + __len);
 8000ee6:	69bb      	ldr	r3, [r7, #24]
 8000ee8:	69fa      	ldr	r2, [r7, #28]
 8000eea:	18d4      	adds	r4, r2, r3
 8000eec:	f107 0314 	add.w	r3, r7, #20
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f001 fb59 	bl	80025a8 <_ZNSaIcEC1Ev>
 8000ef6:	f107 0314 	add.w	r3, r7, #20
 8000efa:	4622      	mov	r2, r4
 8000efc:	69f9      	ldr	r1, [r7, #28]
 8000efe:	68f8      	ldr	r0, [r7, #12]
 8000f00:	f000 f8b4 	bl	800106c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPcvEET_S7_RKS3_>
 8000f04:	f107 0314 	add.w	r3, r7, #20
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f001 fb4e 	bl	80025aa <_ZNSaIcED1Ev>
 8000f0e:	bf00      	nop
    }
 8000f10:	68f8      	ldr	r0, [r7, #12]
 8000f12:	3720      	adds	r7, #32
 8000f14:	46bd      	mov	sp, r7
 8000f16:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000f1a:	b001      	add	sp, #4
 8000f1c:	4770      	bx	lr

08000f1e <_ZNSt5arrayIhLj10EE5beginEv>:
      begin() noexcept
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b082      	sub	sp, #8
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 8000f26:	6878      	ldr	r0, [r7, #4]
 8000f28:	f000 f8ca 	bl	80010c0 <_ZNSt5arrayIhLj10EE4dataEv>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}

08000f36 <_ZNSt5arrayIhLj10EE3endEv>:
      end() noexcept
 8000f36:	b580      	push	{r7, lr}
 8000f38:	b082      	sub	sp, #8
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 8000f3e:	6878      	ldr	r0, [r7, #4]
 8000f40:	f000 f8be 	bl	80010c0 <_ZNSt5arrayIhLj10EE4dataEv>
 8000f44:	4603      	mov	r3, r0
 8000f46:	330a      	adds	r3, #10
 8000f48:	4618      	mov	r0, r3
 8000f4a:	3708      	adds	r7, #8
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <_ZSt4findIPhcET_S1_S1_RKT0_>:
   *  @return   The first iterator @c i in the range @p [__first,__last)
   *  such that @c *i == @p __val, or @p __last if no such iterator exists.
  */
  template<typename _InputIterator, typename _Tp>
    inline _InputIterator
    find(_InputIterator __first, _InputIterator __last,
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	60f8      	str	r0, [r7, #12]
 8000f58:	60b9      	str	r1, [r7, #8]
 8000f5a:	607a      	str	r2, [r7, #4]
      // concept requirements
      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
      __glibcxx_function_requires(_EqualOpConcept<
		typename iterator_traits<_InputIterator>::value_type, _Tp>)
      __glibcxx_requires_valid_range(__first, __last);
      return std::__find_if(__first, __last,
 8000f5c:	6878      	ldr	r0, [r7, #4]
 8000f5e:	f000 f8bc 	bl	80010da <_ZN9__gnu_cxx5__ops17__iter_equals_valIKcEENS0_16_Iter_equals_valIT_EERS4_>
 8000f62:	4603      	mov	r3, r0
 8000f64:	461a      	mov	r2, r3
 8000f66:	68b9      	ldr	r1, [r7, #8]
 8000f68:	68f8      	ldr	r0, [r7, #12]
 8000f6a:	f000 f8c5 	bl	80010f8 <_ZSt9__find_ifIPhN9__gnu_cxx5__ops16_Iter_equals_valIKcEEET_S6_S6_T0_>
 8000f6e:	4603      	mov	r3, r0
			    __gnu_cxx::__ops::__iter_equals_val(__val));
    }
 8000f70:	4618      	mov	r0, r3
 8000f72:	3710      	adds	r7, #16
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <_ZNSt14__array_traitsIhLj10EE6_S_ptrERA10_Kh>:
      _S_ptr(const _Type& __t) noexcept
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	4618      	mov	r0, r3
 8000f84:	370c      	adds	r7, #12
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr

08000f8e <_ZNKSt5arrayIhLj10EE4dataEv>:
      _GLIBCXX17_CONSTEXPR pointer
      data() noexcept
      { return _AT_Type::_S_ptr(_M_elems); }

      _GLIBCXX17_CONSTEXPR const_pointer
      data() const noexcept
 8000f8e:	b580      	push	{r7, lr}
 8000f90:	b082      	sub	sp, #8
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff ffed 	bl	8000f78 <_ZNSt14__array_traitsIhLj10EE6_S_ptrERA10_Kh>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3708      	adds	r7, #8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}

08000fa8 <_ZNSt5arrayIhLj10EEixEj>:
      operator[](size_type __n) noexcept
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6839      	ldr	r1, [r7, #0]
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f000 f8b5 	bl	8001126 <_ZNSt14__array_traitsIhLj10EE6_S_refERA10_Khj>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>:
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
 8000fc6:	b590      	push	{r4, r7, lr}
 8000fc8:	b085      	sub	sp, #20
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	60f8      	str	r0, [r7, #12]
 8000fce:	60b9      	str	r1, [r7, #8]
 8000fd0:	607a      	str	r2, [r7, #4]
      : _M_dataplus(_M_local_data(), __a)
 8000fd2:	68fc      	ldr	r4, [r7, #12]
 8000fd4:	68f8      	ldr	r0, [r7, #12]
 8000fd6:	f001 fafa 	bl	80025ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	687a      	ldr	r2, [r7, #4]
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4620      	mov	r0, r4
 8000fe2:	f001 fc37 	bl	8002854 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>
      { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }
 8000fe6:	68bb      	ldr	r3, [r7, #8]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d006      	beq.n	8000ffa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0x34>
 8000fec:	68b8      	ldr	r0, [r7, #8]
 8000fee:	f7ff fcea 	bl	80009c6 <_ZNSt11char_traitsIcE6lengthEPKc>
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	4413      	add	r3, r2
 8000ff8:	e001      	b.n	8000ffe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0x38>
 8000ffa:	68bb      	ldr	r3, [r7, #8]
 8000ffc:	3b01      	subs	r3, #1
 8000ffe:	461a      	mov	r2, r3
 8001000:	68b9      	ldr	r1, [r7, #8]
 8001002:	68f8      	ldr	r0, [r7, #12]
 8001004:	f000 f84d 	bl	80010a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_>
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	4618      	mov	r0, r3
 800100c:	3714      	adds	r7, #20
 800100e:	46bd      	mov	sp, r7
 8001010:	bd90      	pop	{r4, r7, pc}

08001012 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_SA_>:
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 8001012:	b580      	push	{r7, lr}
 8001014:	b084      	sub	sp, #16
 8001016:	af00      	add	r7, sp, #0
 8001018:	60f8      	str	r0, [r7, #12]
 800101a:	60b9      	str	r1, [r7, #8]
 800101c:	607a      	str	r2, [r7, #4]
      basic_string<_CharT, _Traits, _Alloc> __str(__lhs);
 800101e:	68b9      	ldr	r1, [r7, #8]
 8001020:	68f8      	ldr	r0, [r7, #12]
 8001022:	f001 fc19 	bl	8002858 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
      __str.append(__rhs);
 8001026:	6879      	ldr	r1, [r7, #4]
 8001028:	68f8      	ldr	r0, [r7, #12]
 800102a:	f001 fc0d 	bl	8002848 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>
      return __str;
 800102e:	bf00      	nop
    }
 8001030:	68f8      	ldr	r0, [r7, #12]
 8001032:	3710      	adds	r7, #16
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}

08001038 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S5_>:
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	60f8      	str	r0, [r7, #12]
 8001040:	60b9      	str	r1, [r7, #8]
 8001042:	4613      	mov	r3, r2
 8001044:	71fb      	strb	r3, [r7, #7]
    { return std::move(__lhs.append(1, __rhs)); }
 8001046:	79fb      	ldrb	r3, [r7, #7]
 8001048:	461a      	mov	r2, r3
 800104a:	2101      	movs	r1, #1
 800104c:	68b8      	ldr	r0, [r7, #8]
 800104e:	f001 fbcf 	bl	80027f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEjc>
 8001052:	4603      	mov	r3, r0
 8001054:	4618      	mov	r0, r3
 8001056:	f000 f874 	bl	8001142 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 800105a:	4603      	mov	r3, r0
 800105c:	4619      	mov	r1, r3
 800105e:	68f8      	ldr	r0, [r7, #12]
 8001060:	f001 fb60 	bl	8002724 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 8001064:	68f8      	ldr	r0, [r7, #12]
 8001066:	3710      	adds	r7, #16
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}

0800106c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPcvEET_S7_RKS3_>:
        basic_string(_InputIterator __beg, _InputIterator __end,
 800106c:	b590      	push	{r4, r7, lr}
 800106e:	b085      	sub	sp, #20
 8001070:	af00      	add	r7, sp, #0
 8001072:	60f8      	str	r0, [r7, #12]
 8001074:	60b9      	str	r1, [r7, #8]
 8001076:	607a      	str	r2, [r7, #4]
 8001078:	603b      	str	r3, [r7, #0]
	: _M_dataplus(_M_local_data(), __a)
 800107a:	68fc      	ldr	r4, [r7, #12]
 800107c:	68f8      	ldr	r0, [r7, #12]
 800107e:	f001 faa6 	bl	80025ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 8001082:	4603      	mov	r3, r0
 8001084:	683a      	ldr	r2, [r7, #0]
 8001086:	4619      	mov	r1, r3
 8001088:	4620      	mov	r0, r4
 800108a:	f001 fbe3 	bl	8002854 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>
	{ _M_construct(__beg, __end); }
 800108e:	687a      	ldr	r2, [r7, #4]
 8001090:	68b9      	ldr	r1, [r7, #8]
 8001092:	68f8      	ldr	r0, [r7, #12]
 8001094:	f000 f860 	bl	8001158 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_>
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	4618      	mov	r0, r3
 800109c:	3714      	adds	r7, #20
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd90      	pop	{r4, r7, pc}

080010a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_>:
        _M_construct(_InIterator __beg, _InIterator __end)
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b084      	sub	sp, #16
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	60f8      	str	r0, [r7, #12]
 80010aa:	60b9      	str	r1, [r7, #8]
 80010ac:	607a      	str	r2, [r7, #4]
	  _M_construct_aux(__beg, __end, _Integral());
 80010ae:	687a      	ldr	r2, [r7, #4]
 80010b0:	68b9      	ldr	r1, [r7, #8]
 80010b2:	68f8      	ldr	r0, [r7, #12]
 80010b4:	f000 f85f 	bl	8001176 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPKcEEvT_S8_St12__false_type>
        }
 80010b8:	bf00      	nop
 80010ba:	3710      	adds	r7, #16
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}

080010c0 <_ZNSt5arrayIhLj10EE4dataEv>:
      data() noexcept
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	4618      	mov	r0, r3
 80010cc:	f7ff ff54 	bl	8000f78 <_ZNSt14__array_traitsIhLj10EE6_S_ptrERA10_Kh>
 80010d0:	4603      	mov	r3, r0
 80010d2:	4618      	mov	r0, r3
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}

080010da <_ZN9__gnu_cxx5__ops17__iter_equals_valIKcEENS0_16_Iter_equals_valIT_EERS4_>:
	{ return *__it == _M_value; }
    };

  template<typename _Value>
    inline _Iter_equals_val<_Value>
    __iter_equals_val(_Value& __val)
 80010da:	b580      	push	{r7, lr}
 80010dc:	b084      	sub	sp, #16
 80010de:	af00      	add	r7, sp, #0
 80010e0:	6078      	str	r0, [r7, #4]
    { return _Iter_equals_val<_Value>(__val); }
 80010e2:	f107 030c 	add.w	r3, r7, #12
 80010e6:	6879      	ldr	r1, [r7, #4]
 80010e8:	4618      	mov	r0, r3
 80010ea:	f000 f855 	bl	8001198 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEC1ERS2_>
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	4618      	mov	r0, r3
 80010f2:	3710      	adds	r7, #16
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <_ZSt9__find_ifIPhN9__gnu_cxx5__ops16_Iter_equals_valIKcEEET_S6_S6_T0_>:
    __find_if(_Iterator __first, _Iterator __last, _Predicate __pred)
 80010f8:	b5b0      	push	{r4, r5, r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	60f8      	str	r0, [r7, #12]
 8001100:	60b9      	str	r1, [r7, #8]
 8001102:	607a      	str	r2, [r7, #4]
      return __find_if(__first, __last, __pred,
 8001104:	68fc      	ldr	r4, [r7, #12]
		       std::__iterator_category(__first));
 8001106:	f107 030c 	add.w	r3, r7, #12
 800110a:	4618      	mov	r0, r3
 800110c:	f000 f853 	bl	80011b6 <_ZSt19__iterator_categoryIPhENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
      return __find_if(__first, __last, __pred,
 8001110:	462b      	mov	r3, r5
 8001112:	687a      	ldr	r2, [r7, #4]
 8001114:	68b9      	ldr	r1, [r7, #8]
 8001116:	4620      	mov	r0, r4
 8001118:	f000 f857 	bl	80011ca <_ZSt9__find_ifIPhN9__gnu_cxx5__ops16_Iter_equals_valIKcEEET_S6_S6_T0_St26random_access_iterator_tag>
 800111c:	4603      	mov	r3, r0
    }
 800111e:	4618      	mov	r0, r3
 8001120:	3710      	adds	r7, #16
 8001122:	46bd      	mov	sp, r7
 8001124:	bdb0      	pop	{r4, r5, r7, pc}

08001126 <_ZNSt14__array_traitsIhLj10EE6_S_refERA10_Khj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8001126:	b480      	push	{r7}
 8001128:	b083      	sub	sp, #12
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]
 800112e:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8001130:	687a      	ldr	r2, [r7, #4]
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	4413      	add	r3, r2
 8001136:	4618      	mov	r0, r3
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr

08001142 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8001142:	b480      	push	{r7}
 8001144:	b083      	sub	sp, #12
 8001146:	af00      	add	r7, sp, #0
 8001148:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4618      	mov	r0, r3
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr

08001158 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_>:
        _M_construct(_InIterator __beg, _InIterator __end)
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	60f8      	str	r0, [r7, #12]
 8001160:	60b9      	str	r1, [r7, #8]
 8001162:	607a      	str	r2, [r7, #4]
	  _M_construct_aux(__beg, __end, _Integral());
 8001164:	687a      	ldr	r2, [r7, #4]
 8001166:	68b9      	ldr	r1, [r7, #8]
 8001168:	68f8      	ldr	r0, [r7, #12]
 800116a:	f000 f8ad 	bl	80012c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPcEEvT_S7_St12__false_type>
        }
 800116e:	bf00      	nop
 8001170:	3710      	adds	r7, #16
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPKcEEvT_S8_St12__false_type>:
        _M_construct_aux(_InIterator __beg, _InIterator __end,
 8001176:	b590      	push	{r4, r7, lr}
 8001178:	b087      	sub	sp, #28
 800117a:	af00      	add	r7, sp, #0
 800117c:	60f8      	str	r0, [r7, #12]
 800117e:	60b9      	str	r1, [r7, #8]
 8001180:	607a      	str	r2, [r7, #4]
 8001182:	703b      	strb	r3, [r7, #0]
          _M_construct(__beg, __end, _Tag());
 8001184:	4623      	mov	r3, r4
 8001186:	687a      	ldr	r2, [r7, #4]
 8001188:	68b9      	ldr	r1, [r7, #8]
 800118a:	68f8      	ldr	r0, [r7, #12]
 800118c:	f000 f8c2 	bl	8001314 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
	}
 8001190:	bf00      	nop
 8001192:	371c      	adds	r7, #28
 8001194:	46bd      	mov	sp, r7
 8001196:	bd90      	pop	{r4, r7, pc}

08001198 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEC1ERS2_>:
      _Iter_equals_val(_Value& __value)
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	6039      	str	r1, [r7, #0]
	: _M_value(__value)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	683a      	ldr	r2, [r7, #0]
 80011a6:	601a      	str	r2, [r3, #0]
      { }
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	4618      	mov	r0, r3
 80011ac:	370c      	adds	r7, #12
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr

080011b6 <_ZSt19__iterator_categoryIPhENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 80011b6:	b480      	push	{r7}
 80011b8:	b083      	sub	sp, #12
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 80011be:	4618      	mov	r0, r3
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr

080011ca <_ZSt9__find_ifIPhN9__gnu_cxx5__ops16_Iter_equals_valIKcEEET_S6_S6_T0_St26random_access_iterator_tag>:
    __find_if(_RandomAccessIterator __first, _RandomAccessIterator __last,
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b086      	sub	sp, #24
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	60f8      	str	r0, [r7, #12]
 80011d2:	60b9      	str	r1, [r7, #8]
 80011d4:	607a      	str	r2, [r7, #4]
 80011d6:	703b      	strb	r3, [r7, #0]
	__trip_count = (__last - __first) >> 2;
 80011d8:	68ba      	ldr	r2, [r7, #8]
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	109b      	asrs	r3, r3, #2
 80011e0:	617b      	str	r3, [r7, #20]
      for (; __trip_count > 0; --__trip_count)
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	dd37      	ble.n	8001258 <_ZSt9__find_ifIPhN9__gnu_cxx5__ops16_Iter_equals_valIKcEEET_S6_S6_T0_St26random_access_iterator_tag+0x8e>
	  if (__pred(__first))
 80011e8:	1d3b      	adds	r3, r7, #4
 80011ea:	68f9      	ldr	r1, [r7, #12]
 80011ec:	4618      	mov	r0, r3
 80011ee:	f000 f8d9 	bl	80013a4 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclIPhEEbT_>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <_ZSt9__find_ifIPhN9__gnu_cxx5__ops16_Iter_equals_valIKcEEET_S6_S6_T0_St26random_access_iterator_tag+0x32>
	    return __first;
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	e061      	b.n	80012c0 <_ZSt9__find_ifIPhN9__gnu_cxx5__ops16_Iter_equals_valIKcEEET_S6_S6_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	3301      	adds	r3, #1
 8001200:	60fb      	str	r3, [r7, #12]
	  if (__pred(__first))
 8001202:	1d3b      	adds	r3, r7, #4
 8001204:	68f9      	ldr	r1, [r7, #12]
 8001206:	4618      	mov	r0, r3
 8001208:	f000 f8cc 	bl	80013a4 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclIPhEEbT_>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <_ZSt9__find_ifIPhN9__gnu_cxx5__ops16_Iter_equals_valIKcEEET_S6_S6_T0_St26random_access_iterator_tag+0x4c>
	    return __first;
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	e054      	b.n	80012c0 <_ZSt9__find_ifIPhN9__gnu_cxx5__ops16_Iter_equals_valIKcEEET_S6_S6_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	3301      	adds	r3, #1
 800121a:	60fb      	str	r3, [r7, #12]
	  if (__pred(__first))
 800121c:	1d3b      	adds	r3, r7, #4
 800121e:	68f9      	ldr	r1, [r7, #12]
 8001220:	4618      	mov	r0, r3
 8001222:	f000 f8bf 	bl	80013a4 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclIPhEEbT_>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <_ZSt9__find_ifIPhN9__gnu_cxx5__ops16_Iter_equals_valIKcEEET_S6_S6_T0_St26random_access_iterator_tag+0x66>
	    return __first;
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	e047      	b.n	80012c0 <_ZSt9__find_ifIPhN9__gnu_cxx5__ops16_Iter_equals_valIKcEEET_S6_S6_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	3301      	adds	r3, #1
 8001234:	60fb      	str	r3, [r7, #12]
	  if (__pred(__first))
 8001236:	1d3b      	adds	r3, r7, #4
 8001238:	68f9      	ldr	r1, [r7, #12]
 800123a:	4618      	mov	r0, r3
 800123c:	f000 f8b2 	bl	80013a4 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclIPhEEbT_>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <_ZSt9__find_ifIPhN9__gnu_cxx5__ops16_Iter_equals_valIKcEEET_S6_S6_T0_St26random_access_iterator_tag+0x80>
	    return __first;
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	e03a      	b.n	80012c0 <_ZSt9__find_ifIPhN9__gnu_cxx5__ops16_Iter_equals_valIKcEEET_S6_S6_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	3301      	adds	r3, #1
 800124e:	60fb      	str	r3, [r7, #12]
      for (; __trip_count > 0; --__trip_count)
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	3b01      	subs	r3, #1
 8001254:	617b      	str	r3, [r7, #20]
 8001256:	e7c4      	b.n	80011e2 <_ZSt9__find_ifIPhN9__gnu_cxx5__ops16_Iter_equals_valIKcEEET_S6_S6_T0_St26random_access_iterator_tag+0x18>
      switch (__last - __first)
 8001258:	68ba      	ldr	r2, [r7, #8]
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	2b03      	cmp	r3, #3
 8001260:	d006      	beq.n	8001270 <_ZSt9__find_ifIPhN9__gnu_cxx5__ops16_Iter_equals_valIKcEEET_S6_S6_T0_St26random_access_iterator_tag+0xa6>
 8001262:	2b03      	cmp	r3, #3
 8001264:	dc2b      	bgt.n	80012be <_ZSt9__find_ifIPhN9__gnu_cxx5__ops16_Iter_equals_valIKcEEET_S6_S6_T0_St26random_access_iterator_tag+0xf4>
 8001266:	2b01      	cmp	r3, #1
 8001268:	d01c      	beq.n	80012a4 <_ZSt9__find_ifIPhN9__gnu_cxx5__ops16_Iter_equals_valIKcEEET_S6_S6_T0_St26random_access_iterator_tag+0xda>
 800126a:	2b02      	cmp	r3, #2
 800126c:	d00d      	beq.n	800128a <_ZSt9__find_ifIPhN9__gnu_cxx5__ops16_Iter_equals_valIKcEEET_S6_S6_T0_St26random_access_iterator_tag+0xc0>
 800126e:	e026      	b.n	80012be <_ZSt9__find_ifIPhN9__gnu_cxx5__ops16_Iter_equals_valIKcEEET_S6_S6_T0_St26random_access_iterator_tag+0xf4>
	  if (__pred(__first))
 8001270:	1d3b      	adds	r3, r7, #4
 8001272:	68f9      	ldr	r1, [r7, #12]
 8001274:	4618      	mov	r0, r3
 8001276:	f000 f895 	bl	80013a4 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclIPhEEbT_>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <_ZSt9__find_ifIPhN9__gnu_cxx5__ops16_Iter_equals_valIKcEEET_S6_S6_T0_St26random_access_iterator_tag+0xba>
	    return __first;
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	e01d      	b.n	80012c0 <_ZSt9__find_ifIPhN9__gnu_cxx5__ops16_Iter_equals_valIKcEEET_S6_S6_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	3301      	adds	r3, #1
 8001288:	60fb      	str	r3, [r7, #12]
	  if (__pred(__first))
 800128a:	1d3b      	adds	r3, r7, #4
 800128c:	68f9      	ldr	r1, [r7, #12]
 800128e:	4618      	mov	r0, r3
 8001290:	f000 f888 	bl	80013a4 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclIPhEEbT_>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <_ZSt9__find_ifIPhN9__gnu_cxx5__ops16_Iter_equals_valIKcEEET_S6_S6_T0_St26random_access_iterator_tag+0xd4>
	    return __first;
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	e010      	b.n	80012c0 <_ZSt9__find_ifIPhN9__gnu_cxx5__ops16_Iter_equals_valIKcEEET_S6_S6_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	3301      	adds	r3, #1
 80012a2:	60fb      	str	r3, [r7, #12]
	  if (__pred(__first))
 80012a4:	1d3b      	adds	r3, r7, #4
 80012a6:	68f9      	ldr	r1, [r7, #12]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f000 f87b 	bl	80013a4 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclIPhEEbT_>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <_ZSt9__find_ifIPhN9__gnu_cxx5__ops16_Iter_equals_valIKcEEET_S6_S6_T0_St26random_access_iterator_tag+0xee>
	    return __first;
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	e003      	b.n	80012c0 <_ZSt9__find_ifIPhN9__gnu_cxx5__ops16_Iter_equals_valIKcEEET_S6_S6_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	3301      	adds	r3, #1
 80012bc:	60fb      	str	r3, [r7, #12]
	  return __last;
 80012be:	68bb      	ldr	r3, [r7, #8]
    }
 80012c0:	4618      	mov	r0, r3
 80012c2:	3718      	adds	r7, #24
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}

080012c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPcEEvT_S7_St12__false_type>:
        _M_construct_aux(_InIterator __beg, _InIterator __end,
 80012c8:	b590      	push	{r4, r7, lr}
 80012ca:	b087      	sub	sp, #28
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	60f8      	str	r0, [r7, #12]
 80012d0:	60b9      	str	r1, [r7, #8]
 80012d2:	607a      	str	r2, [r7, #4]
 80012d4:	703b      	strb	r3, [r7, #0]
          _M_construct(__beg, __end, _Tag());
 80012d6:	4623      	mov	r3, r4
 80012d8:	687a      	ldr	r2, [r7, #4]
 80012da:	68b9      	ldr	r1, [r7, #8]
 80012dc:	68f8      	ldr	r0, [r7, #12]
 80012de:	f000 f88b 	bl	80013f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
	}
 80012e2:	bf00      	nop
 80012e4:	371c      	adds	r7, #28
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd90      	pop	{r4, r7, pc}

080012ea <_ZSt8distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 80012ea:	b5b0      	push	{r4, r5, r7, lr}
 80012ec:	b082      	sub	sp, #8
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	6078      	str	r0, [r7, #4]
 80012f2:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 80012f4:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 80012f6:	1d3b      	adds	r3, r7, #4
 80012f8:	4618      	mov	r0, r3
 80012fa:	f000 f8d5 	bl	80014a8 <_ZSt19__iterator_categoryIPKcENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__distance(__first, __last,
 80012fe:	462a      	mov	r2, r5
 8001300:	6839      	ldr	r1, [r7, #0]
 8001302:	4620      	mov	r0, r4
 8001304:	f000 f8da 	bl	80014bc <_ZSt10__distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>
 8001308:	4603      	mov	r3, r0
    }
 800130a:	4618      	mov	r0, r3
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001314 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
      void
      basic_string<_CharT, _Traits, _Alloc>::
 8001314:	b580      	push	{r7, lr}
 8001316:	b086      	sub	sp, #24
 8001318:	af00      	add	r7, sp, #0
 800131a:	60f8      	str	r0, [r7, #12]
 800131c:	60b9      	str	r1, [r7, #8]
 800131e:	607a      	str	r2, [r7, #4]
 8001320:	703b      	strb	r3, [r7, #0]
      _M_construct(_InIterator __beg, _InIterator __end,
		   std::forward_iterator_tag)
      {
	// NB: Not required, but considered best practice.
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
 8001322:	68b8      	ldr	r0, [r7, #8]
 8001324:	f000 f8b0 	bl	8001488 <_ZN9__gnu_cxx17__is_null_pointerIKcEEbPT_>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d005      	beq.n	800133a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x26>
 800132e:	68ba      	ldr	r2, [r7, #8]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	429a      	cmp	r2, r3
 8001334:	d001      	beq.n	800133a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x26>
 8001336:	2301      	movs	r3, #1
 8001338:	e000      	b.n	800133c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x28>
 800133a:	2300      	movs	r3, #0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d002      	beq.n	8001346 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x32>
	  std::__throw_logic_error(__N("basic_string::"
 8001340:	4817      	ldr	r0, [pc, #92]	; (80013a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x8c>)
 8001342:	f001 f936 	bl	80025b2 <_ZSt19__throw_logic_errorPKc>
				       "_M_construct null not valid"));

	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 8001346:	6879      	ldr	r1, [r7, #4]
 8001348:	68b8      	ldr	r0, [r7, #8]
 800134a:	f7ff ffce 	bl	80012ea <_ZSt8distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_>
 800134e:	4603      	mov	r3, r0
 8001350:	617b      	str	r3, [r7, #20]

	if (__dnew > size_type(_S_local_capacity))
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	2b0f      	cmp	r3, #15
 8001356:	d910      	bls.n	800137a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x66>
	  {
	    _M_data(_M_create(__dnew, size_type(0)));
 8001358:	f107 0314 	add.w	r3, r7, #20
 800135c:	2200      	movs	r2, #0
 800135e:	4619      	mov	r1, r3
 8001360:	68f8      	ldr	r0, [r7, #12]
 8001362:	f001 f93d 	bl	80025e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8001366:	4603      	mov	r3, r0
 8001368:	4619      	mov	r1, r3
 800136a:	68f8      	ldr	r0, [r7, #12]
 800136c:	f001 f92b 	bl	80025c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_capacity(__dnew);
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	4619      	mov	r1, r3
 8001374:	68f8      	ldr	r0, [r7, #12]
 8001376:	f001 f92c 	bl	80025d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>
	  }

	// Check for out_of_range and length_error exceptions.
	__try
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
 800137a:	68f8      	ldr	r0, [r7, #12]
 800137c:	f001 f925 	bl	80025ca <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 8001380:	4603      	mov	r3, r0
 8001382:	687a      	ldr	r2, [r7, #4]
 8001384:	68b9      	ldr	r1, [r7, #8]
 8001386:	4618      	mov	r0, r3
 8001388:	f001 f98b 	bl	80026a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
	  {
	    _M_dispose();
	    __throw_exception_again;
	  }

	_M_set_length(__dnew);
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	4619      	mov	r1, r3
 8001390:	68f8      	ldr	r0, [r7, #12]
 8001392:	f001 f920 	bl	80025d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
      }
 8001396:	bf00      	nop
 8001398:	3718      	adds	r7, #24
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	08003284 	.word	0x08003284

080013a4 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclIPhEEbT_>:
	operator()(_Iterator __it)
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	6039      	str	r1, [r7, #0]
	{ return *__it == _M_value; }
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	781a      	ldrb	r2, [r3, #0]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	bf0c      	ite	eq
 80013bc:	2301      	moveq	r3, #1
 80013be:	2300      	movne	r3, #0
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	4618      	mov	r0, r3
 80013c4:	370c      	adds	r7, #12
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr

080013ce <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>:
    distance(_InputIterator __first, _InputIterator __last)
 80013ce:	b5b0      	push	{r4, r5, r7, lr}
 80013d0:	b082      	sub	sp, #8
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	6078      	str	r0, [r7, #4]
 80013d6:	6039      	str	r1, [r7, #0]
      return std::__distance(__first, __last,
 80013d8:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 80013da:	1d3b      	adds	r3, r7, #4
 80013dc:	4618      	mov	r0, r3
 80013de:	f000 f88c 	bl	80014fa <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
      return std::__distance(__first, __last,
 80013e2:	462a      	mov	r2, r5
 80013e4:	6839      	ldr	r1, [r7, #0]
 80013e6:	4620      	mov	r0, r4
 80013e8:	f000 f891 	bl	800150e <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>
 80013ec:	4603      	mov	r3, r0
    }
 80013ee:	4618      	mov	r0, r3
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080013f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
      basic_string<_CharT, _Traits, _Alloc>::
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b086      	sub	sp, #24
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	60f8      	str	r0, [r7, #12]
 8001400:	60b9      	str	r1, [r7, #8]
 8001402:	607a      	str	r2, [r7, #4]
 8001404:	703b      	strb	r3, [r7, #0]
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
 8001406:	68b8      	ldr	r0, [r7, #8]
 8001408:	f000 f867 	bl	80014da <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d005      	beq.n	800141e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x26>
 8001412:	68ba      	ldr	r2, [r7, #8]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	429a      	cmp	r2, r3
 8001418:	d001      	beq.n	800141e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x26>
 800141a:	2301      	movs	r3, #1
 800141c:	e000      	b.n	8001420 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x28>
 800141e:	2300      	movs	r3, #0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d002      	beq.n	800142a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x32>
	  std::__throw_logic_error(__N("basic_string::"
 8001424:	4817      	ldr	r0, [pc, #92]	; (8001484 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x8c>)
 8001426:	f001 f8c4 	bl	80025b2 <_ZSt19__throw_logic_errorPKc>
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 800142a:	6879      	ldr	r1, [r7, #4]
 800142c:	68b8      	ldr	r0, [r7, #8]
 800142e:	f7ff ffce 	bl	80013ce <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>
 8001432:	4603      	mov	r3, r0
 8001434:	617b      	str	r3, [r7, #20]
	if (__dnew > size_type(_S_local_capacity))
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	2b0f      	cmp	r3, #15
 800143a:	d910      	bls.n	800145e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x66>
	    _M_data(_M_create(__dnew, size_type(0)));
 800143c:	f107 0314 	add.w	r3, r7, #20
 8001440:	2200      	movs	r2, #0
 8001442:	4619      	mov	r1, r3
 8001444:	68f8      	ldr	r0, [r7, #12]
 8001446:	f001 f8cb 	bl	80025e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800144a:	4603      	mov	r3, r0
 800144c:	4619      	mov	r1, r3
 800144e:	68f8      	ldr	r0, [r7, #12]
 8001450:	f001 f8b9 	bl	80025c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_capacity(__dnew);
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	4619      	mov	r1, r3
 8001458:	68f8      	ldr	r0, [r7, #12]
 800145a:	f001 f8ba 	bl	80025d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
 800145e:	68f8      	ldr	r0, [r7, #12]
 8001460:	f001 f8b3 	bl	80025ca <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 8001464:	4603      	mov	r3, r0
 8001466:	687a      	ldr	r2, [r7, #4]
 8001468:	68b9      	ldr	r1, [r7, #8]
 800146a:	4618      	mov	r0, r3
 800146c:	f001 f914 	bl	8002698 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
	_M_set_length(__dnew);
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	4619      	mov	r1, r3
 8001474:	68f8      	ldr	r0, [r7, #12]
 8001476:	f001 f8ae 	bl	80025d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
      }
 800147a:	bf00      	nop
 800147c:	3718      	adds	r7, #24
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	08003284 	.word	0x08003284

08001488 <_ZN9__gnu_cxx17__is_null_pointerIKcEEbPT_>:


  // For use in string and vstring.
  template<typename _Type>
    inline bool
    __is_null_pointer(_Type* __ptr)
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
    { return __ptr == 0; }
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2b00      	cmp	r3, #0
 8001494:	bf0c      	ite	eq
 8001496:	2301      	moveq	r3, #1
 8001498:	2300      	movne	r3, #0
 800149a:	b2db      	uxtb	r3, r3
 800149c:	4618      	mov	r0, r3
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr

080014a8 <_ZSt19__iterator_categoryIPKcENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
    __iterator_category(const _Iter&)
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 80014b0:	4618      	mov	r0, r3
 80014b2:	370c      	adds	r7, #12
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr

080014bc <_ZSt10__distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 80014bc:	b480      	push	{r7}
 80014be:	b085      	sub	sp, #20
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	60f8      	str	r0, [r7, #12]
 80014c4:	60b9      	str	r1, [r7, #8]
 80014c6:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 80014c8:	68ba      	ldr	r2, [r7, #8]
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	1ad3      	subs	r3, r2, r3
    }
 80014ce:	4618      	mov	r0, r3
 80014d0:	3714      	adds	r7, #20
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr

080014da <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>:
    __is_null_pointer(_Type* __ptr)
 80014da:	b480      	push	{r7}
 80014dc:	b083      	sub	sp, #12
 80014de:	af00      	add	r7, sp, #0
 80014e0:	6078      	str	r0, [r7, #4]
    { return __ptr == 0; }
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	bf0c      	ite	eq
 80014e8:	2301      	moveq	r3, #1
 80014ea:	2300      	movne	r3, #0
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	4618      	mov	r0, r3
 80014f0:	370c      	adds	r7, #12
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr

080014fa <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
    __iterator_category(const _Iter&)
 80014fa:	b480      	push	{r7}
 80014fc:	b083      	sub	sp, #12
 80014fe:	af00      	add	r7, sp, #0
 8001500:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8001502:	4618      	mov	r0, r3
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr

0800150e <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800150e:	b480      	push	{r7}
 8001510:	b085      	sub	sp, #20
 8001512:	af00      	add	r7, sp, #0
 8001514:	60f8      	str	r0, [r7, #12]
 8001516:	60b9      	str	r1, [r7, #8]
 8001518:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 800151a:	68ba      	ldr	r2, [r7, #8]
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	1ad3      	subs	r3, r2, r3
    }
 8001520:	4618      	mov	r0, r3
 8001522:	3714      	adds	r7, #20
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001530:	e7fe      	b.n	8001530 <NMI_Handler+0x4>

08001532 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001532:	b480      	push	{r7}
 8001534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001536:	e7fe      	b.n	8001536 <HardFault_Handler+0x4>

08001538 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800153c:	e7fe      	b.n	800153c <MemManage_Handler+0x4>

0800153e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800153e:	b480      	push	{r7}
 8001540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001542:	e7fe      	b.n	8001542 <BusFault_Handler+0x4>

08001544 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001548:	e7fe      	b.n	8001548 <UsageFault_Handler+0x4>

0800154a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800154a:	b480      	push	{r7}
 800154c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800154e:	bf00      	nop
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr

08001558 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800155c:	bf00      	nop
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr

08001566 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001566:	b480      	push	{r7}
 8001568:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800156a:	bf00      	nop
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr

08001574 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001578:	bf00      	nop
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr

08001582 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001582:	b480      	push	{r7}
 8001584:	af00      	add	r7, sp, #0

  /* USER CODE END UART4_IRQn 0 */
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001586:	bf00      	nop
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
	return 1;
 8001594:	2301      	movs	r3, #1
}
 8001596:	4618      	mov	r0, r3
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <_kill>:

int _kill(int pid, int sig)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80015aa:	f001 f987 	bl	80028bc <__errno>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2216      	movs	r2, #22
 80015b2:	601a      	str	r2, [r3, #0]
	return -1;
 80015b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3708      	adds	r7, #8
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}

080015c0 <_exit>:

void _exit (int status)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80015c8:	f04f 31ff 	mov.w	r1, #4294967295
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	f7ff ffe7 	bl	80015a0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80015d2:	e7fe      	b.n	80015d2 <_exit+0x12>

080015d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b086      	sub	sp, #24
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015dc:	4a14      	ldr	r2, [pc, #80]	; (8001630 <_sbrk+0x5c>)
 80015de:	4b15      	ldr	r3, [pc, #84]	; (8001634 <_sbrk+0x60>)
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015e8:	4b13      	ldr	r3, [pc, #76]	; (8001638 <_sbrk+0x64>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d102      	bne.n	80015f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015f0:	4b11      	ldr	r3, [pc, #68]	; (8001638 <_sbrk+0x64>)
 80015f2:	4a12      	ldr	r2, [pc, #72]	; (800163c <_sbrk+0x68>)
 80015f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015f6:	4b10      	ldr	r3, [pc, #64]	; (8001638 <_sbrk+0x64>)
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4413      	add	r3, r2
 80015fe:	693a      	ldr	r2, [r7, #16]
 8001600:	429a      	cmp	r2, r3
 8001602:	d207      	bcs.n	8001614 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001604:	f001 f95a 	bl	80028bc <__errno>
 8001608:	4603      	mov	r3, r0
 800160a:	220c      	movs	r2, #12
 800160c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800160e:	f04f 33ff 	mov.w	r3, #4294967295
 8001612:	e009      	b.n	8001628 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001614:	4b08      	ldr	r3, [pc, #32]	; (8001638 <_sbrk+0x64>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800161a:	4b07      	ldr	r3, [pc, #28]	; (8001638 <_sbrk+0x64>)
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4413      	add	r3, r2
 8001622:	4a05      	ldr	r2, [pc, #20]	; (8001638 <_sbrk+0x64>)
 8001624:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001626:	68fb      	ldr	r3, [r7, #12]
}
 8001628:	4618      	mov	r0, r3
 800162a:	3718      	adds	r7, #24
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	20020000 	.word	0x20020000
 8001634:	00000400 	.word	0x00000400
 8001638:	20000094 	.word	0x20000094
 800163c:	200000b8 	.word	0x200000b8

08001640 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001644:	4b06      	ldr	r3, [pc, #24]	; (8001660 <SystemInit+0x20>)
 8001646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800164a:	4a05      	ldr	r2, [pc, #20]	; (8001660 <SystemInit+0x20>)
 800164c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001650:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001654:	bf00      	nop
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	e000ed00 	.word	0xe000ed00

08001664 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001664:	f8df d034 	ldr.w	sp, [pc, #52]	; 800169c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001668:	480d      	ldr	r0, [pc, #52]	; (80016a0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800166a:	490e      	ldr	r1, [pc, #56]	; (80016a4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800166c:	4a0e      	ldr	r2, [pc, #56]	; (80016a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800166e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001670:	e002      	b.n	8001678 <LoopCopyDataInit>

08001672 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001672:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001674:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001676:	3304      	adds	r3, #4

08001678 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001678:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800167a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800167c:	d3f9      	bcc.n	8001672 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800167e:	4a0b      	ldr	r2, [pc, #44]	; (80016ac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001680:	4c0b      	ldr	r4, [pc, #44]	; (80016b0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001682:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001684:	e001      	b.n	800168a <LoopFillZerobss>

08001686 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001686:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001688:	3204      	adds	r2, #4

0800168a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800168a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800168c:	d3fb      	bcc.n	8001686 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800168e:	f7ff ffd7 	bl	8001640 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001692:	f001 f919 	bl	80028c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001696:	f7ff fa91 	bl	8000bbc <main>
  bx  lr    
 800169a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800169c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80016a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016a4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80016a8:	080033a0 	.word	0x080033a0
  ldr r2, =_sbss
 80016ac:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80016b0:	200000b4 	.word	0x200000b4

080016b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016b4:	e7fe      	b.n	80016b4 <ADC_IRQHandler>
	...

080016b8 <__NVIC_GetPriorityGrouping>:
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016bc:	4b04      	ldr	r3, [pc, #16]	; (80016d0 <__NVIC_GetPriorityGrouping+0x18>)
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	0a1b      	lsrs	r3, r3, #8
 80016c2:	f003 0307 	and.w	r3, r3, #7
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr
 80016d0:	e000ed00 	.word	0xe000ed00

080016d4 <__NVIC_EnableIRQ>:
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	4603      	mov	r3, r0
 80016dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	db0b      	blt.n	80016fe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016e6:	79fb      	ldrb	r3, [r7, #7]
 80016e8:	f003 021f 	and.w	r2, r3, #31
 80016ec:	4907      	ldr	r1, [pc, #28]	; (800170c <__NVIC_EnableIRQ+0x38>)
 80016ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f2:	095b      	lsrs	r3, r3, #5
 80016f4:	2001      	movs	r0, #1
 80016f6:	fa00 f202 	lsl.w	r2, r0, r2
 80016fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80016fe:	bf00      	nop
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	e000e100 	.word	0xe000e100

08001710 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	4603      	mov	r3, r0
 8001718:	6039      	str	r1, [r7, #0]
 800171a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800171c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001720:	2b00      	cmp	r3, #0
 8001722:	db0a      	blt.n	800173a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	b2da      	uxtb	r2, r3
 8001728:	490c      	ldr	r1, [pc, #48]	; (800175c <__NVIC_SetPriority+0x4c>)
 800172a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800172e:	0112      	lsls	r2, r2, #4
 8001730:	b2d2      	uxtb	r2, r2
 8001732:	440b      	add	r3, r1
 8001734:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001738:	e00a      	b.n	8001750 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	b2da      	uxtb	r2, r3
 800173e:	4908      	ldr	r1, [pc, #32]	; (8001760 <__NVIC_SetPriority+0x50>)
 8001740:	79fb      	ldrb	r3, [r7, #7]
 8001742:	f003 030f 	and.w	r3, r3, #15
 8001746:	3b04      	subs	r3, #4
 8001748:	0112      	lsls	r2, r2, #4
 800174a:	b2d2      	uxtb	r2, r2
 800174c:	440b      	add	r3, r1
 800174e:	761a      	strb	r2, [r3, #24]
}
 8001750:	bf00      	nop
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr
 800175c:	e000e100 	.word	0xe000e100
 8001760:	e000ed00 	.word	0xe000ed00

08001764 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001764:	b480      	push	{r7}
 8001766:	b089      	sub	sp, #36	; 0x24
 8001768:	af00      	add	r7, sp, #0
 800176a:	60f8      	str	r0, [r7, #12]
 800176c:	60b9      	str	r1, [r7, #8]
 800176e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	f003 0307 	and.w	r3, r3, #7
 8001776:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	f1c3 0307 	rsb	r3, r3, #7
 800177e:	2b04      	cmp	r3, #4
 8001780:	bf28      	it	cs
 8001782:	2304      	movcs	r3, #4
 8001784:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	3304      	adds	r3, #4
 800178a:	2b06      	cmp	r3, #6
 800178c:	d902      	bls.n	8001794 <NVIC_EncodePriority+0x30>
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	3b03      	subs	r3, #3
 8001792:	e000      	b.n	8001796 <NVIC_EncodePriority+0x32>
 8001794:	2300      	movs	r3, #0
 8001796:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001798:	2201      	movs	r2, #1
 800179a:	69bb      	ldr	r3, [r7, #24]
 800179c:	fa02 f303 	lsl.w	r3, r2, r3
 80017a0:	1e5a      	subs	r2, r3, #1
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	401a      	ands	r2, r3
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017aa:	2101      	movs	r1, #1
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	fa01 f303 	lsl.w	r3, r1, r3
 80017b2:	1e59      	subs	r1, r3, #1
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	400b      	ands	r3, r1
         );
 80017b8:	4313      	orrs	r3, r2
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3724      	adds	r7, #36	; 0x24
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
	...

080017c8 <LL_APB2_GRP1_IsEnabledClock>:
  *
  *         (*) value not defined in all devices.
  * @retval State of Periphs (1 or 0).
*/
__STATIC_INLINE uint32_t LL_APB2_GRP1_IsEnabledClock(uint32_t Periphs)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  return (READ_BIT(RCC->APB2ENR, Periphs) == Periphs);
 80017d0:	4b07      	ldr	r3, [pc, #28]	; (80017f0 <LL_APB2_GRP1_IsEnabledClock+0x28>)
 80017d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	4013      	ands	r3, r2
 80017d8:	687a      	ldr	r2, [r7, #4]
 80017da:	429a      	cmp	r2, r3
 80017dc:	bf0c      	ite	eq
 80017de:	2301      	moveq	r3, #1
 80017e0:	2300      	movne	r3, #0
 80017e2:	b2db      	uxtb	r3, r3
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	370c      	adds	r7, #12
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr
 80017f0:	40023800 	.word	0x40023800

080017f4 <LL_USART_Enable>:
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	60da      	str	r2, [r3, #12]
}
 8001808:	bf00      	nop
 800180a:	370c      	adds	r7, #12
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr

08001814 <LL_USART_EnableDirectionRx>:
{
 8001814:	b480      	push	{r7}
 8001816:	b089      	sub	sp, #36	; 0x24
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RE);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	330c      	adds	r3, #12
 8001820:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	e853 3f00 	ldrex	r3, [r3]
 8001828:	60bb      	str	r3, [r7, #8]
   return(result);
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	f043 0304 	orr.w	r3, r3, #4
 8001830:	61fb      	str	r3, [r7, #28]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	330c      	adds	r3, #12
 8001836:	69fa      	ldr	r2, [r7, #28]
 8001838:	61ba      	str	r2, [r7, #24]
 800183a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800183c:	6979      	ldr	r1, [r7, #20]
 800183e:	69ba      	ldr	r2, [r7, #24]
 8001840:	e841 2300 	strex	r3, r2, [r1]
 8001844:	613b      	str	r3, [r7, #16]
   return(result);
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	2b00      	cmp	r3, #0
 800184a:	bf14      	ite	ne
 800184c:	2301      	movne	r3, #1
 800184e:	2300      	moveq	r3, #0
 8001850:	b2db      	uxtb	r3, r3
 8001852:	2b00      	cmp	r3, #0
 8001854:	d000      	beq.n	8001858 <LL_USART_EnableDirectionRx+0x44>
 8001856:	e7e1      	b.n	800181c <LL_USART_EnableDirectionRx+0x8>
}
 8001858:	bf00      	nop
 800185a:	3724      	adds	r7, #36	; 0x24
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <LL_USART_EnableDirectionTx>:
{
 8001864:	b480      	push	{r7}
 8001866:	b089      	sub	sp, #36	; 0x24
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TE);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	330c      	adds	r3, #12
 8001870:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	e853 3f00 	ldrex	r3, [r3]
 8001878:	60bb      	str	r3, [r7, #8]
   return(result);
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	f043 0308 	orr.w	r3, r3, #8
 8001880:	61fb      	str	r3, [r7, #28]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	330c      	adds	r3, #12
 8001886:	69fa      	ldr	r2, [r7, #28]
 8001888:	61ba      	str	r2, [r7, #24]
 800188a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800188c:	6979      	ldr	r1, [r7, #20]
 800188e:	69ba      	ldr	r2, [r7, #24]
 8001890:	e841 2300 	strex	r3, r2, [r1]
 8001894:	613b      	str	r3, [r7, #16]
   return(result);
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	2b00      	cmp	r3, #0
 800189a:	bf14      	ite	ne
 800189c:	2301      	movne	r3, #1
 800189e:	2300      	moveq	r3, #0
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d000      	beq.n	80018a8 <LL_USART_EnableDirectionTx+0x44>
 80018a6:	e7e1      	b.n	800186c <LL_USART_EnableDirectionTx+0x8>
}
 80018a8:	bf00      	nop
 80018aa:	3724      	adds	r7, #36	; 0x24
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <LL_USART_IsActiveFlag_TC>:
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018c4:	2b40      	cmp	r3, #64	; 0x40
 80018c6:	bf0c      	ite	eq
 80018c8:	2301      	moveq	r3, #1
 80018ca:	2300      	movne	r3, #0
 80018cc:	b2db      	uxtb	r3, r3
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	370c      	adds	r7, #12
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr

080018da <LL_USART_IsActiveFlag_TXE>:
{
 80018da:	b480      	push	{r7}
 80018dc:	b083      	sub	sp, #12
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018ea:	2b80      	cmp	r3, #128	; 0x80
 80018ec:	bf0c      	ite	eq
 80018ee:	2301      	moveq	r3, #1
 80018f0:	2300      	movne	r3, #0
 80018f2:	b2db      	uxtb	r3, r3
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	370c      	adds	r7, #12
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <LL_USART_EnableIT_RXNE>:
{
 8001900:	b480      	push	{r7}
 8001902:	b089      	sub	sp, #36	; 0x24
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	330c      	adds	r3, #12
 800190c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	e853 3f00 	ldrex	r3, [r3]
 8001914:	60bb      	str	r3, [r7, #8]
   return(result);
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	f043 0320 	orr.w	r3, r3, #32
 800191c:	61fb      	str	r3, [r7, #28]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	330c      	adds	r3, #12
 8001922:	69fa      	ldr	r2, [r7, #28]
 8001924:	61ba      	str	r2, [r7, #24]
 8001926:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001928:	6979      	ldr	r1, [r7, #20]
 800192a:	69ba      	ldr	r2, [r7, #24]
 800192c:	e841 2300 	strex	r3, r2, [r1]
 8001930:	613b      	str	r3, [r7, #16]
   return(result);
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	2b00      	cmp	r3, #0
 8001936:	bf14      	ite	ne
 8001938:	2301      	movne	r3, #1
 800193a:	2300      	moveq	r3, #0
 800193c:	b2db      	uxtb	r3, r3
 800193e:	2b00      	cmp	r3, #0
 8001940:	d000      	beq.n	8001944 <LL_USART_EnableIT_RXNE+0x44>
 8001942:	e7e1      	b.n	8001908 <LL_USART_EnableIT_RXNE+0x8>
}
 8001944:	bf00      	nop
 8001946:	3724      	adds	r7, #36	; 0x24
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr

08001950 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	460b      	mov	r3, r1
 800195a:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 800195c:	78fa      	ldrb	r2, [r7, #3]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	605a      	str	r2, [r3, #4]
}
 8001962:	bf00      	nop
 8001964:	370c      	adds	r7, #12
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
	...

08001970 <_ZN11UHAL_USART64sendERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

}


void UHAL_USART6::send(const std::string& str)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b088      	sub	sp, #32
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
__SFI auto UHAL_USART6::enable()
{

	if constexpr (systemDebug == debug_T::debugOn)
	{
		auto posAssert = LL_APB2_GRP1_IsEnabledClock(
 8001978:	2020      	movs	r0, #32
 800197a:	f7ff ff25 	bl	80017c8 <LL_APB2_GRP1_IsEnabledClock>
 800197e:	6178      	str	r0, [r7, #20]
			LL_APB2_GRP1_PERIPH_USART6);
		assert_param(posAssert);
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d103      	bne.n	800198e <_ZN11UHAL_USART64sendERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1e>
 8001986:	21f7      	movs	r1, #247	; 0xf7
 8001988:	482a      	ldr	r0, [pc, #168]	; (8001a34 <_ZN11UHAL_USART64sendERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xc4>)
 800198a:	f7ff fa11 	bl	8000db0 <assert_failed>
	}
	LL_USART_Enable(thisInstance);
 800198e:	482a      	ldr	r0, [pc, #168]	; (8001a38 <_ZN11UHAL_USART64sendERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xc8>)
 8001990:	f7ff ff30 	bl	80017f4 <LL_USART_Enable>
}
 8001994:	bf00      	nop

auto UHAL_USART6::enableTransmitter()
{
	LL_USART_EnableDirectionTx(thisInstance);
 8001996:	4828      	ldr	r0, [pc, #160]	; (8001a38 <_ZN11UHAL_USART64sendERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xc8>)
 8001998:	f7ff ff64 	bl	8001864 <LL_USART_EnableDirectionTx>
}
 800199c:	bf00      	nop
{
	return UHAL_ERROR::DEPRECATED;
}
auto UHAL_USART6::flag_IT::TXE::isSet()
{
	return LL_USART_IsActiveFlag_TXE(thisInstance);
 800199e:	4826      	ldr	r0, [pc, #152]	; (8001a38 <_ZN11UHAL_USART64sendERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xc8>)
 80019a0:	f7ff ff9b 	bl	80018da <LL_USART_IsActiveFlag_TXE>
 80019a4:	4603      	mov	r3, r0
 80019a6:	bf00      	nop
  using namespace UHAL_USART6::flag_IT;
  enable();
  enableTransmitter();
  waitUntil(TXE::isSet());
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	bf0c      	ite	eq
 80019ac:	2301      	moveq	r3, #1
 80019ae:	2300      	movne	r3, #0
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d000      	beq.n	80019b8 <_ZN11UHAL_USART64sendERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x48>
 80019b6:	e7f2      	b.n	800199e <_ZN11UHAL_USART64sendERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2e>
    for (decltype(static_cast<std::string>(str))::value_type  eachCharOfStr : str)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	61fb      	str	r3, [r7, #28]
 80019bc:	69f8      	ldr	r0, [r7, #28]
 80019be:	f000 fed1 	bl	8002764 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5beginEv>
 80019c2:	4603      	mov	r3, r0
 80019c4:	60fb      	str	r3, [r7, #12]
 80019c6:	69f8      	ldr	r0, [r7, #28]
 80019c8:	f000 fece 	bl	8002768 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE3endEv>
 80019cc:	4603      	mov	r3, r0
 80019ce:	60bb      	str	r3, [r7, #8]
 80019d0:	f107 0208 	add.w	r2, r7, #8
 80019d4:	f107 030c 	add.w	r3, r7, #12
 80019d8:	4611      	mov	r1, r2
 80019da:	4618      	mov	r0, r3
 80019dc:	f000 f870 	bl	8001ac0 <_ZN9__gnu_cxxneIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKNS_17__normal_iteratorIT_T0_EESE_>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d022      	beq.n	8001a2c <_ZN11UHAL_USART64sendERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xbc>
 80019e6:	f107 030c 	add.w	r3, r7, #12
 80019ea:	4618      	mov	r0, r3
 80019ec:	f000 f890 	bl	8001b10 <_ZNK9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv>
 80019f0:	4603      	mov	r3, r0
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	76fb      	strb	r3, [r7, #27]
 80019f6:	7efb      	ldrb	r3, [r7, #27]
 80019f8:	74fb      	strb	r3, [r7, #19]
	LL_USART_TransmitData8(thisInstance, data);
 80019fa:	7cfb      	ldrb	r3, [r7, #19]
 80019fc:	4619      	mov	r1, r3
 80019fe:	480e      	ldr	r0, [pc, #56]	; (8001a38 <_ZN11UHAL_USART64sendERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xc8>)
 8001a00:	f7ff ffa6 	bl	8001950 <LL_USART_TransmitData8>
}
 8001a04:	bf00      	nop
	return LL_USART_IsActiveFlag_TC(thisInstance);
 8001a06:	480c      	ldr	r0, [pc, #48]	; (8001a38 <_ZN11UHAL_USART64sendERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xc8>)
 8001a08:	f7ff ff54 	bl	80018b4 <LL_USART_IsActiveFlag_TC>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	bf00      	nop
  {
    transmitData(eachCharOfStr);
    waitUntil(TC::isSet());
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	bf0c      	ite	eq
 8001a14:	2301      	moveq	r3, #1
 8001a16:	2300      	movne	r3, #0
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d000      	beq.n	8001a20 <_ZN11UHAL_USART64sendERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xb0>
 8001a1e:	e7f2      	b.n	8001a06 <_ZN11UHAL_USART64sendERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x96>
    for (decltype(static_cast<std::string>(str))::value_type  eachCharOfStr : str)
 8001a20:	f107 030c 	add.w	r3, r7, #12
 8001a24:	4618      	mov	r0, r3
 8001a26:	f000 f863 	bl	8001af0 <_ZN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv>
 8001a2a:	e7d1      	b.n	80019d0 <_ZN11UHAL_USART64sendERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x60>
  }

}
 8001a2c:	bf00      	nop
 8001a2e:	3720      	adds	r7, #32
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	080032b0 	.word	0x080032b0
 8001a38:	40011400 	.word	0x40011400

08001a3c <_ZN11UHAL_USART620interruptReceiveInitEv>:
    enableTransmitter();
    enableInterruptHandle();
}

void UHAL_USART6::interruptReceiveInit()
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
		return LL_APB2_GRP1_IsEnabledClock(LL_APB2_GRP1_PERIPH_USART6);
 8001a42:	2020      	movs	r0, #32
 8001a44:	f7ff fec0 	bl	80017c8 <LL_APB2_GRP1_IsEnabledClock>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	bf00      	nop

    if constexpr(systemDebug == debug_T::debugOn)
    {
        auto posAssert =  isPeripheralClKEnabled();
 8001a4c:	607b      	str	r3, [r7, #4]
        assert_param(posAssert);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d103      	bne.n	8001a5c <_ZN11UHAL_USART620interruptReceiveInitEv+0x20>
 8001a54:	214f      	movs	r1, #79	; 0x4f
 8001a56:	4817      	ldr	r0, [pc, #92]	; (8001ab4 <_ZN11UHAL_USART620interruptReceiveInitEv+0x78>)
 8001a58:	f7ff f9aa 	bl	8000db0 <assert_failed>
				LL_USART_EnableIT_RXNE(thisInstance);
 8001a5c:	4816      	ldr	r0, [pc, #88]	; (8001ab8 <_ZN11UHAL_USART620interruptReceiveInitEv+0x7c>)
 8001a5e:	f7ff ff4f 	bl	8001900 <LL_USART_EnableIT_RXNE>
			}
 8001a62:	bf00      	nop
		auto posAssert = LL_APB2_GRP1_IsEnabledClock(
 8001a64:	2020      	movs	r0, #32
 8001a66:	f7ff feaf 	bl	80017c8 <LL_APB2_GRP1_IsEnabledClock>
 8001a6a:	6038      	str	r0, [r7, #0]
		assert_param(posAssert);
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d103      	bne.n	8001a7a <_ZN11UHAL_USART620interruptReceiveInitEv+0x3e>
 8001a72:	21f7      	movs	r1, #247	; 0xf7
 8001a74:	4811      	ldr	r0, [pc, #68]	; (8001abc <_ZN11UHAL_USART620interruptReceiveInitEv+0x80>)
 8001a76:	f7ff f99b 	bl	8000db0 <assert_failed>
	LL_USART_Enable(thisInstance);
 8001a7a:	480f      	ldr	r0, [pc, #60]	; (8001ab8 <_ZN11UHAL_USART620interruptReceiveInitEv+0x7c>)
 8001a7c:	f7ff feba 	bl	80017f4 <LL_USART_Enable>
}
 8001a80:	bf00      	nop
	return UHAL_ERROR::DEPRECATED;
}

auto UHAL_USART6::enableReceiver()
{
	LL_USART_EnableDirectionRx(thisInstance);
 8001a82:	480d      	ldr	r0, [pc, #52]	; (8001ab8 <_ZN11UHAL_USART620interruptReceiveInitEv+0x7c>)
 8001a84:	f7ff fec6 	bl	8001814 <LL_USART_EnableDirectionRx>
}
 8001a88:	bf00      	nop
	NVIC_SetPriority(USART6_IRQn,
 8001a8a:	f7ff fe15 	bl	80016b8 <__NVIC_GetPriorityGrouping>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2100      	movs	r1, #0
 8001a92:	2200      	movs	r2, #0
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7ff fe65 	bl	8001764 <NVIC_EncodePriority>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	2047      	movs	r0, #71	; 0x47
 8001aa0:	f7ff fe36 	bl	8001710 <__NVIC_SetPriority>
	NVIC_EnableIRQ(USART6_IRQn);
 8001aa4:	2047      	movs	r0, #71	; 0x47
 8001aa6:	f7ff fe15 	bl	80016d4 <__NVIC_EnableIRQ>
}
 8001aaa:	bf00      	nop
   // PE::enableIT();
    enable();
    enableReceiver();
    enableInterruptHandle();

}
 8001aac:	bf00      	nop
 8001aae:	3708      	adds	r7, #8
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	080032e0 	.word	0x080032e0
 8001ab8:	40011400 	.word	0x40011400
 8001abc:	080032b0 	.word	0x080032b0

08001ac0 <_ZN9__gnu_cxxneIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKNS_17__normal_iteratorIT_T0_EESE_>:
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8001ac0:	b590      	push	{r4, r7, lr}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f000 f82c 	bl	8001b28 <_ZNK9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	681c      	ldr	r4, [r3, #0]
 8001ad4:	6838      	ldr	r0, [r7, #0]
 8001ad6:	f000 f827 	bl	8001b28 <_ZNK9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>
 8001ada:	4603      	mov	r3, r0
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	429c      	cmp	r4, r3
 8001ae0:	bf14      	ite	ne
 8001ae2:	2301      	movne	r3, #1
 8001ae4:	2300      	moveq	r3, #0
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	4618      	mov	r0, r3
 8001aea:	370c      	adds	r7, #12
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd90      	pop	{r4, r7, pc}

08001af0 <_ZN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
	++_M_current;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	1c5a      	adds	r2, r3, #1
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	601a      	str	r2, [r3, #0]
	return *this;
 8001b02:	687b      	ldr	r3, [r7, #4]
      }
 8001b04:	4618      	mov	r0, r3
 8001b06:	370c      	adds	r7, #12
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr

08001b10 <_ZNK9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	370c      	adds	r7, #12
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr

08001b28 <_ZNK9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	4618      	mov	r0, r3
 8001b34:	370c      	adds	r7, #12
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr

08001b3e <LL_GPIO_SetPinMode>:
{
 8001b3e:	b480      	push	{r7}
 8001b40:	b089      	sub	sp, #36	; 0x24
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	60f8      	str	r0, [r7, #12]
 8001b46:	60b9      	str	r1, [r7, #8]
 8001b48:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	fa93 f3a3 	rbit	r3, r3
 8001b58:	613b      	str	r3, [r7, #16]
  return result;
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	fab3 f383 	clz	r3, r3
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	005b      	lsls	r3, r3, #1
 8001b64:	2103      	movs	r1, #3
 8001b66:	fa01 f303 	lsl.w	r3, r1, r3
 8001b6a:	43db      	mvns	r3, r3
 8001b6c:	401a      	ands	r2, r3
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	fa93 f3a3 	rbit	r3, r3
 8001b78:	61bb      	str	r3, [r7, #24]
  return result;
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	fab3 f383 	clz	r3, r3
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	6879      	ldr	r1, [r7, #4]
 8001b86:	fa01 f303 	lsl.w	r3, r1, r3
 8001b8a:	431a      	orrs	r2, r3
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	601a      	str	r2, [r3, #0]
}
 8001b90:	bf00      	nop
 8001b92:	3724      	adds	r7, #36	; 0x24
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr

08001b9c <LL_GPIO_SetPinOutputType>:
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b085      	sub	sp, #20
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	60f8      	str	r0, [r7, #12]
 8001ba4:	60b9      	str	r1, [r7, #8]
 8001ba6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	685a      	ldr	r2, [r3, #4]
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	43db      	mvns	r3, r3
 8001bb0:	401a      	ands	r2, r3
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	6879      	ldr	r1, [r7, #4]
 8001bb6:	fb01 f303 	mul.w	r3, r1, r3
 8001bba:	431a      	orrs	r2, r3
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	605a      	str	r2, [r3, #4]
}
 8001bc0:	bf00      	nop
 8001bc2:	3714      	adds	r7, #20
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr

08001bcc <LL_GPIO_SetPinSpeed>:
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b089      	sub	sp, #36	; 0x24
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	60f8      	str	r0, [r7, #12]
 8001bd4:	60b9      	str	r1, [r7, #8]
 8001bd6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	689a      	ldr	r2, [r3, #8]
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	fa93 f3a3 	rbit	r3, r3
 8001be6:	613b      	str	r3, [r7, #16]
  return result;
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	fab3 f383 	clz	r3, r3
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	005b      	lsls	r3, r3, #1
 8001bf2:	2103      	movs	r1, #3
 8001bf4:	fa01 f303 	lsl.w	r3, r1, r3
 8001bf8:	43db      	mvns	r3, r3
 8001bfa:	401a      	ands	r2, r3
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	fa93 f3a3 	rbit	r3, r3
 8001c06:	61bb      	str	r3, [r7, #24]
  return result;
 8001c08:	69bb      	ldr	r3, [r7, #24]
 8001c0a:	fab3 f383 	clz	r3, r3
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	6879      	ldr	r1, [r7, #4]
 8001c14:	fa01 f303 	lsl.w	r3, r1, r3
 8001c18:	431a      	orrs	r2, r3
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	609a      	str	r2, [r3, #8]
}
 8001c1e:	bf00      	nop
 8001c20:	3724      	adds	r7, #36	; 0x24
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr

08001c2a <LL_GPIO_SetPinPull>:
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	b089      	sub	sp, #36	; 0x24
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	60f8      	str	r0, [r7, #12]
 8001c32:	60b9      	str	r1, [r7, #8]
 8001c34:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	68da      	ldr	r2, [r3, #12]
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	fa93 f3a3 	rbit	r3, r3
 8001c44:	613b      	str	r3, [r7, #16]
  return result;
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	fab3 f383 	clz	r3, r3
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	005b      	lsls	r3, r3, #1
 8001c50:	2103      	movs	r1, #3
 8001c52:	fa01 f303 	lsl.w	r3, r1, r3
 8001c56:	43db      	mvns	r3, r3
 8001c58:	401a      	ands	r2, r3
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	fa93 f3a3 	rbit	r3, r3
 8001c64:	61bb      	str	r3, [r7, #24]
  return result;
 8001c66:	69bb      	ldr	r3, [r7, #24]
 8001c68:	fab3 f383 	clz	r3, r3
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	005b      	lsls	r3, r3, #1
 8001c70:	6879      	ldr	r1, [r7, #4]
 8001c72:	fa01 f303 	lsl.w	r3, r1, r3
 8001c76:	431a      	orrs	r2, r3
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	60da      	str	r2, [r3, #12]
}
 8001c7c:	bf00      	nop
 8001c7e:	3724      	adds	r7, #36	; 0x24
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr

08001c88 <LL_GPIO_SetAFPin_0_7>:
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b089      	sub	sp, #36	; 0x24
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	60f8      	str	r0, [r7, #12]
 8001c90:	60b9      	str	r1, [r7, #8]
 8001c92:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	6a1a      	ldr	r2, [r3, #32]
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	fa93 f3a3 	rbit	r3, r3
 8001ca2:	613b      	str	r3, [r7, #16]
  return result;
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	fab3 f383 	clz	r3, r3
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	210f      	movs	r1, #15
 8001cb0:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb4:	43db      	mvns	r3, r3
 8001cb6:	401a      	ands	r2, r3
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	fa93 f3a3 	rbit	r3, r3
 8001cc2:	61bb      	str	r3, [r7, #24]
  return result;
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	fab3 f383 	clz	r3, r3
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	6879      	ldr	r1, [r7, #4]
 8001cd0:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd4:	431a      	orrs	r2, r3
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	621a      	str	r2, [r3, #32]
}
 8001cda:	bf00      	nop
 8001cdc:	3724      	adds	r7, #36	; 0x24
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr

08001ce6 <LL_GPIO_SetAFPin_8_15>:
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	b089      	sub	sp, #36	; 0x24
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	60f8      	str	r0, [r7, #12]
 8001cee:	60b9      	str	r1, [r7, #8]
 8001cf0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	0a1b      	lsrs	r3, r3, #8
 8001cfa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	fa93 f3a3 	rbit	r3, r3
 8001d02:	613b      	str	r3, [r7, #16]
  return result;
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	fab3 f383 	clz	r3, r3
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	210f      	movs	r1, #15
 8001d10:	fa01 f303 	lsl.w	r3, r1, r3
 8001d14:	43db      	mvns	r3, r3
 8001d16:	401a      	ands	r2, r3
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	0a1b      	lsrs	r3, r3, #8
 8001d1c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	fa93 f3a3 	rbit	r3, r3
 8001d24:	61bb      	str	r3, [r7, #24]
  return result;
 8001d26:	69bb      	ldr	r3, [r7, #24]
 8001d28:	fab3 f383 	clz	r3, r3
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	6879      	ldr	r1, [r7, #4]
 8001d32:	fa01 f303 	lsl.w	r3, r1, r3
 8001d36:	431a      	orrs	r2, r3
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001d3c:	bf00      	nop
 8001d3e:	3724      	adds	r7, #36	; 0x24
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr

08001d48 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b088      	sub	sp, #32
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8001d52:	2300      	movs	r3, #0
 8001d54:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8001d56:	2300      	movs	r3, #0
 8001d58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	fa93 f3a3 	rbit	r3, r3
 8001d66:	613b      	str	r3, [r7, #16]
  return result;
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	fab3 f383 	clz	r3, r3
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001d72:	e050      	b.n	8001e16 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	2101      	movs	r1, #1
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d80:	4013      	ands	r3, r2
 8001d82:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8001d84:	69bb      	ldr	r3, [r7, #24]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d042      	beq.n	8001e10 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d003      	beq.n	8001d9a <LL_GPIO_Init+0x52>
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d10d      	bne.n	8001db6 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	461a      	mov	r2, r3
 8001da0:	69b9      	ldr	r1, [r7, #24]
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f7ff ff12 	bl	8001bcc <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	461a      	mov	r2, r3
 8001dae:	69b9      	ldr	r1, [r7, #24]
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f7ff fef3 	bl	8001b9c <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	691b      	ldr	r3, [r3, #16]
 8001dba:	461a      	mov	r2, r3
 8001dbc:	69b9      	ldr	r1, [r7, #24]
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f7ff ff33 	bl	8001c2a <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d11a      	bne.n	8001e02 <LL_GPIO_Init+0xba>
 8001dcc:	69bb      	ldr	r3, [r7, #24]
 8001dce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	fa93 f3a3 	rbit	r3, r3
 8001dd6:	60bb      	str	r3, [r7, #8]
  return result;
 8001dd8:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8001dda:	fab3 f383 	clz	r3, r3
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	2b07      	cmp	r3, #7
 8001de2:	d807      	bhi.n	8001df4 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	695b      	ldr	r3, [r3, #20]
 8001de8:	461a      	mov	r2, r3
 8001dea:	69b9      	ldr	r1, [r7, #24]
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f7ff ff4b 	bl	8001c88 <LL_GPIO_SetAFPin_0_7>
 8001df2:	e006      	b.n	8001e02 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	695b      	ldr	r3, [r3, #20]
 8001df8:	461a      	mov	r2, r3
 8001dfa:	69b9      	ldr	r1, [r7, #24]
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f7ff ff72 	bl	8001ce6 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	461a      	mov	r2, r3
 8001e08:	69b9      	ldr	r1, [r7, #24]
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f7ff fe97 	bl	8001b3e <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	3301      	adds	r3, #1
 8001e14:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d1a7      	bne.n	8001d74 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3720      	adds	r7, #32
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
	...

08001e30 <LL_RCC_GetSysClkSource>:
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001e34:	4b04      	ldr	r3, [pc, #16]	; (8001e48 <LL_RCC_GetSysClkSource+0x18>)
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	f003 030c 	and.w	r3, r3, #12
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	40023800 	.word	0x40023800

08001e4c <LL_RCC_GetAHBPrescaler>:
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001e50:	4b04      	ldr	r3, [pc, #16]	; (8001e64 <LL_RCC_GetAHBPrescaler+0x18>)
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	40023800 	.word	0x40023800

08001e68 <LL_RCC_GetAPB1Prescaler>:
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001e6c:	4b04      	ldr	r3, [pc, #16]	; (8001e80 <LL_RCC_GetAPB1Prescaler+0x18>)
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	40023800 	.word	0x40023800

08001e84 <LL_RCC_GetAPB2Prescaler>:
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001e88:	4b04      	ldr	r3, [pc, #16]	; (8001e9c <LL_RCC_GetAPB2Prescaler+0x18>)
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	40023800 	.word	0x40023800

08001ea0 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001ea4:	4b04      	ldr	r3, [pc, #16]	; (8001eb8 <LL_RCC_PLL_GetMainSource+0x18>)
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	40023800 	.word	0x40023800

08001ebc <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001ec0:	4b04      	ldr	r3, [pc, #16]	; (8001ed4 <LL_RCC_PLL_GetN+0x18>)
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	099b      	lsrs	r3, r3, #6
 8001ec6:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr
 8001ed4:	40023800 	.word	0x40023800

08001ed8 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8001edc:	4b04      	ldr	r3, [pc, #16]	; (8001ef0 <LL_RCC_PLL_GetP+0x18>)
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	40023800 	.word	0x40023800

08001ef4 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001ef8:	4b04      	ldr	r3, [pc, #16]	; (8001f0c <LL_RCC_PLL_GetDivider+0x18>)
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	40023800 	.word	0x40023800

08001f10 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8001f18:	f000 f820 	bl	8001f5c <RCC_GetSystemClockFreq>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4618      	mov	r0, r3
 8001f28:	f000 f840 	bl	8001fac <RCC_GetHCLKClockFreq>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f000 f84e 	bl	8001fd8 <RCC_GetPCLK1ClockFreq>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	4618      	mov	r0, r3
 8001f48:	f000 f85a 	bl	8002000 <RCC_GetPCLK2ClockFreq>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	60da      	str	r2, [r3, #12]
}
 8001f52:	bf00      	nop
 8001f54:	3708      	adds	r7, #8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
	...

08001f5c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8001f62:	2300      	movs	r3, #0
 8001f64:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8001f66:	f7ff ff63 	bl	8001e30 <LL_RCC_GetSysClkSource>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b08      	cmp	r3, #8
 8001f6e:	d00c      	beq.n	8001f8a <RCC_GetSystemClockFreq+0x2e>
 8001f70:	2b08      	cmp	r3, #8
 8001f72:	d80f      	bhi.n	8001f94 <RCC_GetSystemClockFreq+0x38>
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d002      	beq.n	8001f7e <RCC_GetSystemClockFreq+0x22>
 8001f78:	2b04      	cmp	r3, #4
 8001f7a:	d003      	beq.n	8001f84 <RCC_GetSystemClockFreq+0x28>
 8001f7c:	e00a      	b.n	8001f94 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8001f7e:	4b09      	ldr	r3, [pc, #36]	; (8001fa4 <RCC_GetSystemClockFreq+0x48>)
 8001f80:	607b      	str	r3, [r7, #4]
      break;
 8001f82:	e00a      	b.n	8001f9a <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8001f84:	4b08      	ldr	r3, [pc, #32]	; (8001fa8 <RCC_GetSystemClockFreq+0x4c>)
 8001f86:	607b      	str	r3, [r7, #4]
      break;
 8001f88:	e007      	b.n	8001f9a <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8001f8a:	2008      	movs	r0, #8
 8001f8c:	f000 f84c 	bl	8002028 <RCC_PLL_GetFreqDomain_SYS>
 8001f90:	6078      	str	r0, [r7, #4]
      break;
 8001f92:	e002      	b.n	8001f9a <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8001f94:	4b03      	ldr	r3, [pc, #12]	; (8001fa4 <RCC_GetSystemClockFreq+0x48>)
 8001f96:	607b      	str	r3, [r7, #4]
      break;
 8001f98:	bf00      	nop
  }

  return frequency;
 8001f9a:	687b      	ldr	r3, [r7, #4]
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3708      	adds	r7, #8
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	00f42400 	.word	0x00f42400
 8001fa8:	007a1200 	.word	0x007a1200

08001fac <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8001fb4:	f7ff ff4a 	bl	8001e4c <LL_RCC_GetAHBPrescaler>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	091b      	lsrs	r3, r3, #4
 8001fbc:	f003 030f 	and.w	r3, r3, #15
 8001fc0:	4a04      	ldr	r2, [pc, #16]	; (8001fd4 <RCC_GetHCLKClockFreq+0x28>)
 8001fc2:	5cd3      	ldrb	r3, [r2, r3]
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	40d3      	lsrs	r3, r2
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3708      	adds	r7, #8
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	08003310 	.word	0x08003310

08001fd8 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8001fe0:	f7ff ff42 	bl	8001e68 <LL_RCC_GetAPB1Prescaler>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	0a9b      	lsrs	r3, r3, #10
 8001fe8:	4a04      	ldr	r2, [pc, #16]	; (8001ffc <RCC_GetPCLK1ClockFreq+0x24>)
 8001fea:	5cd3      	ldrb	r3, [r2, r3]
 8001fec:	461a      	mov	r2, r3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	40d3      	lsrs	r3, r2
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	08003320 	.word	0x08003320

08002000 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8002008:	f7ff ff3c 	bl	8001e84 <LL_RCC_GetAPB2Prescaler>
 800200c:	4603      	mov	r3, r0
 800200e:	0b5b      	lsrs	r3, r3, #13
 8002010:	4a04      	ldr	r2, [pc, #16]	; (8002024 <RCC_GetPCLK2ClockFreq+0x24>)
 8002012:	5cd3      	ldrb	r3, [r2, r3]
 8002014:	461a      	mov	r2, r3
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	40d3      	lsrs	r3, r2
}
 800201a:	4618      	mov	r0, r3
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	08003320 	.word	0x08003320

08002028 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8002028:	b590      	push	{r4, r7, lr}
 800202a:	b087      	sub	sp, #28
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8002030:	2300      	movs	r3, #0
 8002032:	617b      	str	r3, [r7, #20]
 8002034:	2300      	movs	r3, #0
 8002036:	60fb      	str	r3, [r7, #12]
 8002038:	2300      	movs	r3, #0
 800203a:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800203c:	f7ff ff30 	bl	8001ea0 <LL_RCC_PLL_GetMainSource>
 8002040:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d004      	beq.n	8002052 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800204e:	d003      	beq.n	8002058 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8002050:	e005      	b.n	800205e <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8002052:	4b12      	ldr	r3, [pc, #72]	; (800209c <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8002054:	617b      	str	r3, [r7, #20]
      break;
 8002056:	e005      	b.n	8002064 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8002058:	4b11      	ldr	r3, [pc, #68]	; (80020a0 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 800205a:	617b      	str	r3, [r7, #20]
      break;
 800205c:	e002      	b.n	8002064 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 800205e:	4b0f      	ldr	r3, [pc, #60]	; (800209c <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8002060:	617b      	str	r3, [r7, #20]
      break;
 8002062:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2b08      	cmp	r3, #8
 8002068:	d113      	bne.n	8002092 <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800206a:	f7ff ff43 	bl	8001ef4 <LL_RCC_PLL_GetDivider>
 800206e:	4602      	mov	r2, r0
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	fbb3 f4f2 	udiv	r4, r3, r2
 8002076:	f7ff ff21 	bl	8001ebc <LL_RCC_PLL_GetN>
 800207a:	4603      	mov	r3, r0
 800207c:	fb03 f404 	mul.w	r4, r3, r4
 8002080:	f7ff ff2a 	bl	8001ed8 <LL_RCC_PLL_GetP>
 8002084:	4603      	mov	r3, r0
 8002086:	0c1b      	lsrs	r3, r3, #16
 8002088:	3301      	adds	r3, #1
 800208a:	005b      	lsls	r3, r3, #1
 800208c:	fbb4 f3f3 	udiv	r3, r4, r3
 8002090:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8002092:	693b      	ldr	r3, [r7, #16]
}
 8002094:	4618      	mov	r0, r3
 8002096:	371c      	adds	r7, #28
 8002098:	46bd      	mov	sp, r7
 800209a:	bd90      	pop	{r4, r7, pc}
 800209c:	00f42400 	.word	0x00f42400
 80020a0:	007a1200 	.word	0x007a1200

080020a4 <LL_USART_IsEnabled>:
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020b8:	bf0c      	ite	eq
 80020ba:	2301      	moveq	r3, #1
 80020bc:	2300      	movne	r3, #0
 80020be:	b2db      	uxtb	r3, r3
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	370c      	adds	r7, #12
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <LL_USART_SetStopBitsLength>:
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	691b      	ldr	r3, [r3, #16]
 80020da:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	431a      	orrs	r2, r3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	611a      	str	r2, [r3, #16]
}
 80020e6:	bf00      	nop
 80020e8:	370c      	adds	r7, #12
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr

080020f2 <LL_USART_SetHWFlowCtrl>:
{
 80020f2:	b480      	push	{r7}
 80020f4:	b083      	sub	sp, #12
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
 80020fa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	695b      	ldr	r3, [r3, #20]
 8002100:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	431a      	orrs	r2, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	615a      	str	r2, [r3, #20]
}
 800210c:	bf00      	nop
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr

08002118 <LL_USART_SetBaudRate>:
{
 8002118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800211c:	b09f      	sub	sp, #124	; 0x7c
 800211e:	af00      	add	r7, sp, #0
 8002120:	6778      	str	r0, [r7, #116]	; 0x74
 8002122:	6739      	str	r1, [r7, #112]	; 0x70
 8002124:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002126:	66bb      	str	r3, [r7, #104]	; 0x68
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8002128:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800212a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800212e:	f040 80bc 	bne.w	80022aa <LL_USART_SetBaudRate+0x192>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8002132:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002134:	461c      	mov	r4, r3
 8002136:	f04f 0500 	mov.w	r5, #0
 800213a:	4622      	mov	r2, r4
 800213c:	462b      	mov	r3, r5
 800213e:	eb12 0a02 	adds.w	sl, r2, r2
 8002142:	eb43 0b03 	adc.w	fp, r3, r3
 8002146:	4652      	mov	r2, sl
 8002148:	465b      	mov	r3, fp
 800214a:	1912      	adds	r2, r2, r4
 800214c:	eb45 0303 	adc.w	r3, r5, r3
 8002150:	f04f 0000 	mov.w	r0, #0
 8002154:	f04f 0100 	mov.w	r1, #0
 8002158:	00d9      	lsls	r1, r3, #3
 800215a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800215e:	00d0      	lsls	r0, r2, #3
 8002160:	4602      	mov	r2, r0
 8002162:	460b      	mov	r3, r1
 8002164:	1911      	adds	r1, r2, r4
 8002166:	6639      	str	r1, [r7, #96]	; 0x60
 8002168:	416b      	adcs	r3, r5
 800216a:	667b      	str	r3, [r7, #100]	; 0x64
 800216c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800216e:	461a      	mov	r2, r3
 8002170:	f04f 0300 	mov.w	r3, #0
 8002174:	1891      	adds	r1, r2, r2
 8002176:	6339      	str	r1, [r7, #48]	; 0x30
 8002178:	415b      	adcs	r3, r3
 800217a:	637b      	str	r3, [r7, #52]	; 0x34
 800217c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002180:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002184:	f7fe f87c 	bl	8000280 <__aeabi_uldivmod>
 8002188:	4602      	mov	r2, r0
 800218a:	460b      	mov	r3, r1
 800218c:	4ba9      	ldr	r3, [pc, #676]	; (8002434 <LL_USART_SetBaudRate+0x31c>)
 800218e:	fba3 2302 	umull	r2, r3, r3, r2
 8002192:	095b      	lsrs	r3, r3, #5
 8002194:	b29b      	uxth	r3, r3
 8002196:	011b      	lsls	r3, r3, #4
 8002198:	b29e      	uxth	r6, r3
 800219a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800219c:	461c      	mov	r4, r3
 800219e:	f04f 0500 	mov.w	r5, #0
 80021a2:	4622      	mov	r2, r4
 80021a4:	462b      	mov	r3, r5
 80021a6:	1891      	adds	r1, r2, r2
 80021a8:	62b9      	str	r1, [r7, #40]	; 0x28
 80021aa:	415b      	adcs	r3, r3
 80021ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80021b2:	1912      	adds	r2, r2, r4
 80021b4:	eb45 0303 	adc.w	r3, r5, r3
 80021b8:	f04f 0000 	mov.w	r0, #0
 80021bc:	f04f 0100 	mov.w	r1, #0
 80021c0:	00d9      	lsls	r1, r3, #3
 80021c2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80021c6:	00d0      	lsls	r0, r2, #3
 80021c8:	4602      	mov	r2, r0
 80021ca:	460b      	mov	r3, r1
 80021cc:	1911      	adds	r1, r2, r4
 80021ce:	65b9      	str	r1, [r7, #88]	; 0x58
 80021d0:	416b      	adcs	r3, r5
 80021d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80021d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80021d6:	461a      	mov	r2, r3
 80021d8:	f04f 0300 	mov.w	r3, #0
 80021dc:	1891      	adds	r1, r2, r2
 80021de:	6239      	str	r1, [r7, #32]
 80021e0:	415b      	adcs	r3, r3
 80021e2:	627b      	str	r3, [r7, #36]	; 0x24
 80021e4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80021e8:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80021ec:	f7fe f848 	bl	8000280 <__aeabi_uldivmod>
 80021f0:	4602      	mov	r2, r0
 80021f2:	460b      	mov	r3, r1
 80021f4:	4b8f      	ldr	r3, [pc, #572]	; (8002434 <LL_USART_SetBaudRate+0x31c>)
 80021f6:	fba3 1302 	umull	r1, r3, r3, r2
 80021fa:	095b      	lsrs	r3, r3, #5
 80021fc:	2164      	movs	r1, #100	; 0x64
 80021fe:	fb01 f303 	mul.w	r3, r1, r3
 8002202:	1ad3      	subs	r3, r2, r3
 8002204:	00db      	lsls	r3, r3, #3
 8002206:	3332      	adds	r3, #50	; 0x32
 8002208:	4a8a      	ldr	r2, [pc, #552]	; (8002434 <LL_USART_SetBaudRate+0x31c>)
 800220a:	fba2 2303 	umull	r2, r3, r2, r3
 800220e:	095b      	lsrs	r3, r3, #5
 8002210:	b29b      	uxth	r3, r3
 8002212:	005b      	lsls	r3, r3, #1
 8002214:	b29b      	uxth	r3, r3
 8002216:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800221a:	b29b      	uxth	r3, r3
 800221c:	4433      	add	r3, r6
 800221e:	b29e      	uxth	r6, r3
 8002220:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002222:	4618      	mov	r0, r3
 8002224:	f04f 0100 	mov.w	r1, #0
 8002228:	4602      	mov	r2, r0
 800222a:	460b      	mov	r3, r1
 800222c:	1894      	adds	r4, r2, r2
 800222e:	61bc      	str	r4, [r7, #24]
 8002230:	415b      	adcs	r3, r3
 8002232:	61fb      	str	r3, [r7, #28]
 8002234:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002238:	1812      	adds	r2, r2, r0
 800223a:	eb41 0303 	adc.w	r3, r1, r3
 800223e:	f04f 0400 	mov.w	r4, #0
 8002242:	f04f 0500 	mov.w	r5, #0
 8002246:	00dd      	lsls	r5, r3, #3
 8002248:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800224c:	00d4      	lsls	r4, r2, #3
 800224e:	4622      	mov	r2, r4
 8002250:	462b      	mov	r3, r5
 8002252:	1814      	adds	r4, r2, r0
 8002254:	653c      	str	r4, [r7, #80]	; 0x50
 8002256:	414b      	adcs	r3, r1
 8002258:	657b      	str	r3, [r7, #84]	; 0x54
 800225a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800225c:	461a      	mov	r2, r3
 800225e:	f04f 0300 	mov.w	r3, #0
 8002262:	1891      	adds	r1, r2, r2
 8002264:	6139      	str	r1, [r7, #16]
 8002266:	415b      	adcs	r3, r3
 8002268:	617b      	str	r3, [r7, #20]
 800226a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800226e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002272:	f7fe f805 	bl	8000280 <__aeabi_uldivmod>
 8002276:	4602      	mov	r2, r0
 8002278:	460b      	mov	r3, r1
 800227a:	4b6e      	ldr	r3, [pc, #440]	; (8002434 <LL_USART_SetBaudRate+0x31c>)
 800227c:	fba3 1302 	umull	r1, r3, r3, r2
 8002280:	095b      	lsrs	r3, r3, #5
 8002282:	2164      	movs	r1, #100	; 0x64
 8002284:	fb01 f303 	mul.w	r3, r1, r3
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	00db      	lsls	r3, r3, #3
 800228c:	3332      	adds	r3, #50	; 0x32
 800228e:	4a69      	ldr	r2, [pc, #420]	; (8002434 <LL_USART_SetBaudRate+0x31c>)
 8002290:	fba2 2303 	umull	r2, r3, r2, r3
 8002294:	095b      	lsrs	r3, r3, #5
 8002296:	b29b      	uxth	r3, r3
 8002298:	f003 0307 	and.w	r3, r3, #7
 800229c:	b29b      	uxth	r3, r3
 800229e:	4433      	add	r3, r6
 80022a0:	b29b      	uxth	r3, r3
 80022a2:	461a      	mov	r2, r3
 80022a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022a6:	609a      	str	r2, [r3, #8]
}
 80022a8:	e0be      	b.n	8002428 <LL_USART_SetBaudRate+0x310>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80022aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80022ac:	461c      	mov	r4, r3
 80022ae:	f04f 0500 	mov.w	r5, #0
 80022b2:	4622      	mov	r2, r4
 80022b4:	462b      	mov	r3, r5
 80022b6:	eb12 0802 	adds.w	r8, r2, r2
 80022ba:	eb43 0903 	adc.w	r9, r3, r3
 80022be:	4642      	mov	r2, r8
 80022c0:	464b      	mov	r3, r9
 80022c2:	1912      	adds	r2, r2, r4
 80022c4:	eb45 0303 	adc.w	r3, r5, r3
 80022c8:	f04f 0000 	mov.w	r0, #0
 80022cc:	f04f 0100 	mov.w	r1, #0
 80022d0:	00d9      	lsls	r1, r3, #3
 80022d2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80022d6:	00d0      	lsls	r0, r2, #3
 80022d8:	4602      	mov	r2, r0
 80022da:	460b      	mov	r3, r1
 80022dc:	1911      	adds	r1, r2, r4
 80022de:	64b9      	str	r1, [r7, #72]	; 0x48
 80022e0:	416b      	adcs	r3, r5
 80022e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80022e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80022e6:	4618      	mov	r0, r3
 80022e8:	f04f 0100 	mov.w	r1, #0
 80022ec:	f04f 0200 	mov.w	r2, #0
 80022f0:	f04f 0300 	mov.w	r3, #0
 80022f4:	008b      	lsls	r3, r1, #2
 80022f6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80022fa:	0082      	lsls	r2, r0, #2
 80022fc:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002300:	f7fd ffbe 	bl	8000280 <__aeabi_uldivmod>
 8002304:	4602      	mov	r2, r0
 8002306:	460b      	mov	r3, r1
 8002308:	4b4a      	ldr	r3, [pc, #296]	; (8002434 <LL_USART_SetBaudRate+0x31c>)
 800230a:	fba3 2302 	umull	r2, r3, r3, r2
 800230e:	095b      	lsrs	r3, r3, #5
 8002310:	b29b      	uxth	r3, r3
 8002312:	011b      	lsls	r3, r3, #4
 8002314:	b29e      	uxth	r6, r3
 8002316:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002318:	4618      	mov	r0, r3
 800231a:	f04f 0100 	mov.w	r1, #0
 800231e:	4602      	mov	r2, r0
 8002320:	460b      	mov	r3, r1
 8002322:	1894      	adds	r4, r2, r2
 8002324:	60bc      	str	r4, [r7, #8]
 8002326:	415b      	adcs	r3, r3
 8002328:	60fb      	str	r3, [r7, #12]
 800232a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800232e:	1812      	adds	r2, r2, r0
 8002330:	eb41 0303 	adc.w	r3, r1, r3
 8002334:	f04f 0400 	mov.w	r4, #0
 8002338:	f04f 0500 	mov.w	r5, #0
 800233c:	00dd      	lsls	r5, r3, #3
 800233e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002342:	00d4      	lsls	r4, r2, #3
 8002344:	4622      	mov	r2, r4
 8002346:	462b      	mov	r3, r5
 8002348:	1814      	adds	r4, r2, r0
 800234a:	643c      	str	r4, [r7, #64]	; 0x40
 800234c:	414b      	adcs	r3, r1
 800234e:	647b      	str	r3, [r7, #68]	; 0x44
 8002350:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002352:	4618      	mov	r0, r3
 8002354:	f04f 0100 	mov.w	r1, #0
 8002358:	f04f 0200 	mov.w	r2, #0
 800235c:	f04f 0300 	mov.w	r3, #0
 8002360:	008b      	lsls	r3, r1, #2
 8002362:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002366:	0082      	lsls	r2, r0, #2
 8002368:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800236c:	f7fd ff88 	bl	8000280 <__aeabi_uldivmod>
 8002370:	4602      	mov	r2, r0
 8002372:	460b      	mov	r3, r1
 8002374:	4b2f      	ldr	r3, [pc, #188]	; (8002434 <LL_USART_SetBaudRate+0x31c>)
 8002376:	fba3 1302 	umull	r1, r3, r3, r2
 800237a:	095b      	lsrs	r3, r3, #5
 800237c:	2164      	movs	r1, #100	; 0x64
 800237e:	fb01 f303 	mul.w	r3, r1, r3
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	011b      	lsls	r3, r3, #4
 8002386:	3332      	adds	r3, #50	; 0x32
 8002388:	4a2a      	ldr	r2, [pc, #168]	; (8002434 <LL_USART_SetBaudRate+0x31c>)
 800238a:	fba2 2303 	umull	r2, r3, r2, r3
 800238e:	095b      	lsrs	r3, r3, #5
 8002390:	b29b      	uxth	r3, r3
 8002392:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002396:	b29b      	uxth	r3, r3
 8002398:	4433      	add	r3, r6
 800239a:	b29e      	uxth	r6, r3
 800239c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800239e:	4618      	mov	r0, r3
 80023a0:	f04f 0100 	mov.w	r1, #0
 80023a4:	4602      	mov	r2, r0
 80023a6:	460b      	mov	r3, r1
 80023a8:	1894      	adds	r4, r2, r2
 80023aa:	603c      	str	r4, [r7, #0]
 80023ac:	415b      	adcs	r3, r3
 80023ae:	607b      	str	r3, [r7, #4]
 80023b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80023b4:	1812      	adds	r2, r2, r0
 80023b6:	eb41 0303 	adc.w	r3, r1, r3
 80023ba:	f04f 0400 	mov.w	r4, #0
 80023be:	f04f 0500 	mov.w	r5, #0
 80023c2:	00dd      	lsls	r5, r3, #3
 80023c4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80023c8:	00d4      	lsls	r4, r2, #3
 80023ca:	4622      	mov	r2, r4
 80023cc:	462b      	mov	r3, r5
 80023ce:	1814      	adds	r4, r2, r0
 80023d0:	63bc      	str	r4, [r7, #56]	; 0x38
 80023d2:	414b      	adcs	r3, r1
 80023d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80023d8:	4618      	mov	r0, r3
 80023da:	f04f 0100 	mov.w	r1, #0
 80023de:	f04f 0200 	mov.w	r2, #0
 80023e2:	f04f 0300 	mov.w	r3, #0
 80023e6:	008b      	lsls	r3, r1, #2
 80023e8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80023ec:	0082      	lsls	r2, r0, #2
 80023ee:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80023f2:	f7fd ff45 	bl	8000280 <__aeabi_uldivmod>
 80023f6:	4602      	mov	r2, r0
 80023f8:	460b      	mov	r3, r1
 80023fa:	4b0e      	ldr	r3, [pc, #56]	; (8002434 <LL_USART_SetBaudRate+0x31c>)
 80023fc:	fba3 1302 	umull	r1, r3, r3, r2
 8002400:	095b      	lsrs	r3, r3, #5
 8002402:	2164      	movs	r1, #100	; 0x64
 8002404:	fb01 f303 	mul.w	r3, r1, r3
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	011b      	lsls	r3, r3, #4
 800240c:	3332      	adds	r3, #50	; 0x32
 800240e:	4a09      	ldr	r2, [pc, #36]	; (8002434 <LL_USART_SetBaudRate+0x31c>)
 8002410:	fba2 2303 	umull	r2, r3, r2, r3
 8002414:	095b      	lsrs	r3, r3, #5
 8002416:	b29b      	uxth	r3, r3
 8002418:	f003 030f 	and.w	r3, r3, #15
 800241c:	b29b      	uxth	r3, r3
 800241e:	4433      	add	r3, r6
 8002420:	b29b      	uxth	r3, r3
 8002422:	461a      	mov	r2, r3
 8002424:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002426:	609a      	str	r2, [r3, #8]
}
 8002428:	bf00      	nop
 800242a:	377c      	adds	r7, #124	; 0x7c
 800242c:	46bd      	mov	sp, r7
 800242e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002432:	bf00      	nop
 8002434:	51eb851f 	.word	0x51eb851f

08002438 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b088      	sub	sp, #32
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8002446:	2300      	movs	r3, #0
 8002448:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f7ff fe2a 	bl	80020a4 <LL_USART_IsEnabled>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d15e      	bne.n	8002514 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800245e:	f023 030c 	bic.w	r3, r3, #12
 8002462:	683a      	ldr	r2, [r7, #0]
 8002464:	6851      	ldr	r1, [r2, #4]
 8002466:	683a      	ldr	r2, [r7, #0]
 8002468:	68d2      	ldr	r2, [r2, #12]
 800246a:	4311      	orrs	r1, r2
 800246c:	683a      	ldr	r2, [r7, #0]
 800246e:	6912      	ldr	r2, [r2, #16]
 8002470:	4311      	orrs	r1, r2
 8002472:	683a      	ldr	r2, [r7, #0]
 8002474:	6992      	ldr	r2, [r2, #24]
 8002476:	430a      	orrs	r2, r1
 8002478:	431a      	orrs	r2, r3
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	4619      	mov	r1, r3
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	f7ff fe21 	bl	80020cc <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	695b      	ldr	r3, [r3, #20]
 800248e:	4619      	mov	r1, r3
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	f7ff fe2e 	bl	80020f2 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8002496:	f107 0308 	add.w	r3, r7, #8
 800249a:	4618      	mov	r0, r3
 800249c:	f7ff fd38 	bl	8001f10 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	4a1f      	ldr	r2, [pc, #124]	; (8002520 <LL_USART_Init+0xe8>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d102      	bne.n	80024ae <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	61bb      	str	r3, [r7, #24]
 80024ac:	e021      	b.n	80024f2 <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4a1c      	ldr	r2, [pc, #112]	; (8002524 <LL_USART_Init+0xec>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d102      	bne.n	80024bc <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	61bb      	str	r3, [r7, #24]
 80024ba:	e01a      	b.n	80024f2 <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	4a1a      	ldr	r2, [pc, #104]	; (8002528 <LL_USART_Init+0xf0>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d102      	bne.n	80024ca <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	61bb      	str	r3, [r7, #24]
 80024c8:	e013      	b.n	80024f2 <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4a17      	ldr	r2, [pc, #92]	; (800252c <LL_USART_Init+0xf4>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d102      	bne.n	80024d8 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	61bb      	str	r3, [r7, #24]
 80024d6:	e00c      	b.n	80024f2 <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	4a15      	ldr	r2, [pc, #84]	; (8002530 <LL_USART_Init+0xf8>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d102      	bne.n	80024e6 <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	61bb      	str	r3, [r7, #24]
 80024e4:	e005      	b.n	80024f2 <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a12      	ldr	r2, [pc, #72]	; (8002534 <LL_USART_Init+0xfc>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d101      	bne.n	80024f2 <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80024f2:	69bb      	ldr	r3, [r7, #24]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d00d      	beq.n	8002514 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d009      	beq.n	8002514 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 8002500:	2300      	movs	r3, #0
 8002502:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	699a      	ldr	r2, [r3, #24]
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	69b9      	ldr	r1, [r7, #24]
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f7ff fe02 	bl	8002118 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002514:	7ffb      	ldrb	r3, [r7, #31]
}
 8002516:	4618      	mov	r0, r3
 8002518:	3720      	adds	r7, #32
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	40011000 	.word	0x40011000
 8002524:	40004400 	.word	0x40004400
 8002528:	40004800 	.word	0x40004800
 800252c:	40011400 	.word	0x40011400
 8002530:	40004c00 	.word	0x40004c00
 8002534:	40005000 	.word	0x40005000

08002538 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	fbb2 f3f3 	udiv	r3, r2, r3
 800254a:	4a07      	ldr	r2, [pc, #28]	; (8002568 <LL_InitTick+0x30>)
 800254c:	3b01      	subs	r3, #1
 800254e:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8002550:	4b05      	ldr	r3, [pc, #20]	; (8002568 <LL_InitTick+0x30>)
 8002552:	2200      	movs	r2, #0
 8002554:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002556:	4b04      	ldr	r3, [pc, #16]	; (8002568 <LL_InitTick+0x30>)
 8002558:	2205      	movs	r2, #5
 800255a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 800255c:	bf00      	nop
 800255e:	370c      	adds	r7, #12
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr
 8002568:	e000e010 	.word	0xe000e010

0800256c <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8002574:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	f7ff ffdd 	bl	8002538 <LL_InitTick>
}
 800257e:	bf00      	nop
 8002580:	3708      	adds	r7, #8
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
	...

08002588 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002590:	4a04      	ldr	r2, [pc, #16]	; (80025a4 <LL_SetSystemCoreClock+0x1c>)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6013      	str	r3, [r2, #0]
}
 8002596:	bf00      	nop
 8002598:	370c      	adds	r7, #12
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
 80025a2:	bf00      	nop
 80025a4:	20000000 	.word	0x20000000

080025a8 <_ZNSaIcEC1Ev>:
 80025a8:	4770      	bx	lr

080025aa <_ZNSaIcED1Ev>:
 80025aa:	4770      	bx	lr

080025ac <_ZSt17__throw_bad_allocv>:
 80025ac:	b508      	push	{r3, lr}
 80025ae:	f000 f97d 	bl	80028ac <abort>

080025b2 <_ZSt19__throw_logic_errorPKc>:
 80025b2:	b508      	push	{r3, lr}
 80025b4:	f000 f97a 	bl	80028ac <abort>

080025b8 <_ZSt20__throw_length_errorPKc>:
 80025b8:	b508      	push	{r3, lr}
 80025ba:	f000 f977 	bl	80028ac <abort>

080025be <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 80025be:	b10a      	cbz	r2, 80025c4 <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 80025c0:	f000 b9b6 	b.w	8002930 <memcpy>
 80025c4:	4770      	bx	lr

080025c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>:
 80025c6:	6001      	str	r1, [r0, #0]
 80025c8:	4770      	bx	lr

080025ca <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>:
 80025ca:	6800      	ldr	r0, [r0, #0]
 80025cc:	4770      	bx	lr

080025ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>:
 80025ce:	3008      	adds	r0, #8
 80025d0:	4770      	bx	lr

080025d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>:
 80025d2:	6081      	str	r1, [r0, #8]
 80025d4:	4770      	bx	lr

080025d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>:
 80025d6:	6803      	ldr	r3, [r0, #0]
 80025d8:	6041      	str	r1, [r0, #4]
 80025da:	2200      	movs	r2, #0
 80025dc:	545a      	strb	r2, [r3, r1]
 80025de:	4770      	bx	lr

080025e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 80025e0:	b508      	push	{r3, lr}
 80025e2:	680b      	ldr	r3, [r1, #0]
 80025e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025e8:	d302      	bcc.n	80025f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 80025ea:	480d      	ldr	r0, [pc, #52]	; (8002620 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 80025ec:	f7ff ffe4 	bl	80025b8 <_ZSt20__throw_length_errorPKc>
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d90b      	bls.n	800260c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 80025f4:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 80025f8:	ea4f 0042 	mov.w	r0, r2, lsl #1
 80025fc:	d206      	bcs.n	800260c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 80025fe:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002602:	bf2a      	itet	cs
 8002604:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 8002608:	6008      	strcc	r0, [r1, #0]
 800260a:	600b      	strcs	r3, [r1, #0]
 800260c:	6808      	ldr	r0, [r1, #0]
 800260e:	3001      	adds	r0, #1
 8002610:	d501      	bpl.n	8002616 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 8002612:	f7ff ffcb 	bl	80025ac <_ZSt17__throw_bad_allocv>
 8002616:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800261a:	f000 b92e 	b.w	800287a <_Znwj>
 800261e:	bf00      	nop
 8002620:	08003328 	.word	0x08003328

08002624 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8002624:	f850 3b08 	ldr.w	r3, [r0], #8
 8002628:	4283      	cmp	r3, r0
 800262a:	d002      	beq.n	8002632 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 800262c:	4618      	mov	r0, r3
 800262e:	f000 b922 	b.w	8002876 <_ZdlPv>
 8002632:	4770      	bx	lr

08002634 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 8002634:	6840      	ldr	r0, [r0, #4]
 8002636:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800263a:	3901      	subs	r1, #1
 800263c:	1a09      	subs	r1, r1, r0
 800263e:	4291      	cmp	r1, r2
 8002640:	b508      	push	{r3, lr}
 8002642:	d202      	bcs.n	800264a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 8002644:	4618      	mov	r0, r3
 8002646:	f7ff ffb7 	bl	80025b8 <_ZSt20__throw_length_errorPKc>
 800264a:	bd08      	pop	{r3, pc}

0800264c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 800264c:	2a01      	cmp	r2, #1
 800264e:	b510      	push	{r4, lr}
 8002650:	d102      	bne.n	8002658 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 8002652:	780a      	ldrb	r2, [r1, #0]
 8002654:	7002      	strb	r2, [r0, #0]
 8002656:	bd10      	pop	{r4, pc}
 8002658:	f7ff ffb1 	bl	80025be <_ZNSt11char_traitsIcE4copyEPcPKcj>
 800265c:	e7fb      	b.n	8002656 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

0800265e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 800265e:	2a01      	cmp	r2, #1
 8002660:	b430      	push	{r4, r5}
 8002662:	d103      	bne.n	800266c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 8002664:	780b      	ldrb	r3, [r1, #0]
 8002666:	7003      	strb	r3, [r0, #0]
 8002668:	bc30      	pop	{r4, r5}
 800266a:	4770      	bx	lr
 800266c:	2a00      	cmp	r2, #0
 800266e:	d0fb      	beq.n	8002668 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 8002670:	bc30      	pop	{r4, r5}
 8002672:	f000 b96b 	b.w	800294c <memmove>

08002676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>:
 8002676:	460b      	mov	r3, r1
 8002678:	2b01      	cmp	r3, #1
 800267a:	b410      	push	{r4}
 800267c:	4611      	mov	r1, r2
 800267e:	4604      	mov	r4, r0
 8002680:	d103      	bne.n	800268a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0x14>
 8002682:	7022      	strb	r2, [r4, #0]
 8002684:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002688:	4770      	bx	lr
 800268a:	2b00      	cmp	r3, #0
 800268c:	d0fa      	beq.n	8002684 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0xe>
 800268e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002692:	461a      	mov	r2, r3
 8002694:	f000 b974 	b.w	8002980 <memset>

08002698 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 8002698:	b508      	push	{r3, lr}
 800269a:	1a52      	subs	r2, r2, r1
 800269c:	f7ff ffd6 	bl	800264c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80026a0:	bd08      	pop	{r3, pc}

080026a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 80026a2:	b508      	push	{r3, lr}
 80026a4:	1a52      	subs	r2, r2, r1
 80026a6:	f7ff ffd1 	bl	800264c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80026aa:	bd08      	pop	{r3, pc}

080026ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 80026ac:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80026b0:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80026b2:	461f      	mov	r7, r3
 80026b4:	6843      	ldr	r3, [r0, #4]
 80026b6:	eb01 0802 	add.w	r8, r1, r2
 80026ba:	1ab2      	subs	r2, r6, r2
 80026bc:	441a      	add	r2, r3
 80026be:	eba3 0908 	sub.w	r9, r3, r8
 80026c2:	4603      	mov	r3, r0
 80026c4:	9201      	str	r2, [sp, #4]
 80026c6:	f853 2b08 	ldr.w	r2, [r3], #8
 80026ca:	429a      	cmp	r2, r3
 80026cc:	bf18      	it	ne
 80026ce:	6882      	ldrne	r2, [r0, #8]
 80026d0:	460d      	mov	r5, r1
 80026d2:	bf08      	it	eq
 80026d4:	220f      	moveq	r2, #15
 80026d6:	a901      	add	r1, sp, #4
 80026d8:	4604      	mov	r4, r0
 80026da:	f7ff ff81 	bl	80025e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80026de:	4682      	mov	sl, r0
 80026e0:	b11d      	cbz	r5, 80026ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
 80026e2:	6821      	ldr	r1, [r4, #0]
 80026e4:	462a      	mov	r2, r5
 80026e6:	f7ff ffb1 	bl	800264c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80026ea:	b137      	cbz	r7, 80026fa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 80026ec:	b12e      	cbz	r6, 80026fa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 80026ee:	4632      	mov	r2, r6
 80026f0:	4639      	mov	r1, r7
 80026f2:	eb0a 0005 	add.w	r0, sl, r5
 80026f6:	f7ff ffa9 	bl	800264c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80026fa:	f1b9 0f00 	cmp.w	r9, #0
 80026fe:	d007      	beq.n	8002710 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x64>
 8002700:	6821      	ldr	r1, [r4, #0]
 8002702:	4435      	add	r5, r6
 8002704:	464a      	mov	r2, r9
 8002706:	4441      	add	r1, r8
 8002708:	eb0a 0005 	add.w	r0, sl, r5
 800270c:	f7ff ff9e 	bl	800264c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8002710:	4620      	mov	r0, r4
 8002712:	f7ff ff87 	bl	8002624 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8002716:	9b01      	ldr	r3, [sp, #4]
 8002718:	f8c4 a000 	str.w	sl, [r4]
 800271c:	60a3      	str	r3, [r4, #8]
 800271e:	b002      	add	sp, #8
 8002720:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08002724 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>:
 8002724:	b570      	push	{r4, r5, r6, lr}
 8002726:	4604      	mov	r4, r0
 8002728:	460e      	mov	r6, r1
 800272a:	3008      	adds	r0, #8
 800272c:	6020      	str	r0, [r4, #0]
 800272e:	f856 3b08 	ldr.w	r3, [r6], #8
 8002732:	429e      	cmp	r6, r3
 8002734:	460d      	mov	r5, r1
 8002736:	d10b      	bne.n	8002750 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x2c>
 8002738:	2210      	movs	r2, #16
 800273a:	4631      	mov	r1, r6
 800273c:	f7ff ff3f 	bl	80025be <_ZNSt11char_traitsIcE4copyEPcPKcj>
 8002740:	686b      	ldr	r3, [r5, #4]
 8002742:	6063      	str	r3, [r4, #4]
 8002744:	2300      	movs	r3, #0
 8002746:	602e      	str	r6, [r5, #0]
 8002748:	606b      	str	r3, [r5, #4]
 800274a:	722b      	strb	r3, [r5, #8]
 800274c:	4620      	mov	r0, r4
 800274e:	bd70      	pop	{r4, r5, r6, pc}
 8002750:	6023      	str	r3, [r4, #0]
 8002752:	688b      	ldr	r3, [r1, #8]
 8002754:	60a3      	str	r3, [r4, #8]
 8002756:	e7f3      	b.n	8002740 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x1c>

08002758 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8002758:	b510      	push	{r4, lr}
 800275a:	4604      	mov	r4, r0
 800275c:	f7ff ff62 	bl	8002624 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8002760:	4620      	mov	r0, r4
 8002762:	bd10      	pop	{r4, pc}

08002764 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5beginEv>:
 8002764:	6800      	ldr	r0, [r0, #0]
 8002766:	4770      	bx	lr

08002768 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE3endEv>:
 8002768:	e9d0 2000 	ldrd	r2, r0, [r0]
 800276c:	4410      	add	r0, r2
 800276e:	4770      	bx	lr

08002770 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc>:
 8002770:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002774:	4616      	mov	r6, r2
 8002776:	461d      	mov	r5, r3
 8002778:	4604      	mov	r4, r0
 800277a:	4b1c      	ldr	r3, [pc, #112]	; (80027ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x7c>)
 800277c:	462a      	mov	r2, r5
 800277e:	460f      	mov	r7, r1
 8002780:	4631      	mov	r1, r6
 8002782:	f7ff ff57 	bl	8002634 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 8002786:	4623      	mov	r3, r4
 8002788:	6862      	ldr	r2, [r4, #4]
 800278a:	f853 0b08 	ldr.w	r0, [r3], #8
 800278e:	4298      	cmp	r0, r3
 8002790:	bf18      	it	ne
 8002792:	68a3      	ldrne	r3, [r4, #8]
 8002794:	eba5 0806 	sub.w	r8, r5, r6
 8002798:	4490      	add	r8, r2
 800279a:	bf08      	it	eq
 800279c:	230f      	moveq	r3, #15
 800279e:	4543      	cmp	r3, r8
 80027a0:	d31b      	bcc.n	80027da <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x6a>
 80027a2:	19f3      	adds	r3, r6, r7
 80027a4:	1ad2      	subs	r2, r2, r3
 80027a6:	d006      	beq.n	80027b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x46>
 80027a8:	42ae      	cmp	r6, r5
 80027aa:	d004      	beq.n	80027b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x46>
 80027ac:	4438      	add	r0, r7
 80027ae:	1981      	adds	r1, r0, r6
 80027b0:	4428      	add	r0, r5
 80027b2:	f7ff ff54 	bl	800265e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80027b6:	b135      	cbz	r5, 80027c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x56>
 80027b8:	6820      	ldr	r0, [r4, #0]
 80027ba:	f89d 2020 	ldrb.w	r2, [sp, #32]
 80027be:	4629      	mov	r1, r5
 80027c0:	4438      	add	r0, r7
 80027c2:	f7ff ff58 	bl	8002676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>
 80027c6:	6823      	ldr	r3, [r4, #0]
 80027c8:	f8c4 8004 	str.w	r8, [r4, #4]
 80027cc:	2200      	movs	r2, #0
 80027ce:	4620      	mov	r0, r4
 80027d0:	f803 2008 	strb.w	r2, [r3, r8]
 80027d4:	b002      	add	sp, #8
 80027d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80027da:	9500      	str	r5, [sp, #0]
 80027dc:	2300      	movs	r3, #0
 80027de:	4632      	mov	r2, r6
 80027e0:	4639      	mov	r1, r7
 80027e2:	4620      	mov	r0, r4
 80027e4:	f7ff ff62 	bl	80026ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 80027e8:	e7e5      	b.n	80027b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x46>
 80027ea:	bf00      	nop
 80027ec:	08003340 	.word	0x08003340

080027f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEjc>:
 80027f0:	b507      	push	{r0, r1, r2, lr}
 80027f2:	9200      	str	r2, [sp, #0]
 80027f4:	460b      	mov	r3, r1
 80027f6:	2200      	movs	r2, #0
 80027f8:	6841      	ldr	r1, [r0, #4]
 80027fa:	f7ff ffb9 	bl	8002770 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc>
 80027fe:	b003      	add	sp, #12
 8002800:	f85d fb04 	ldr.w	pc, [sp], #4

08002804 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>:
 8002804:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002806:	4604      	mov	r4, r0
 8002808:	4623      	mov	r3, r4
 800280a:	6840      	ldr	r0, [r0, #4]
 800280c:	f853 6b08 	ldr.w	r6, [r3], #8
 8002810:	429e      	cmp	r6, r3
 8002812:	bf18      	it	ne
 8002814:	68a3      	ldrne	r3, [r4, #8]
 8002816:	eb00 0502 	add.w	r5, r0, r2
 800281a:	bf08      	it	eq
 800281c:	230f      	moveq	r3, #15
 800281e:	429d      	cmp	r5, r3
 8002820:	d80a      	bhi.n	8002838 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x34>
 8002822:	b112      	cbz	r2, 800282a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>
 8002824:	4430      	add	r0, r6
 8002826:	f7ff ff11 	bl	800264c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800282a:	6823      	ldr	r3, [r4, #0]
 800282c:	6065      	str	r5, [r4, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	4620      	mov	r0, r4
 8002832:	555a      	strb	r2, [r3, r5]
 8002834:	b002      	add	sp, #8
 8002836:	bd70      	pop	{r4, r5, r6, pc}
 8002838:	9200      	str	r2, [sp, #0]
 800283a:	460b      	mov	r3, r1
 800283c:	2200      	movs	r2, #0
 800283e:	4601      	mov	r1, r0
 8002840:	4620      	mov	r0, r4
 8002842:	f7ff ff33 	bl	80026ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8002846:	e7f0      	b.n	800282a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>

08002848 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>:
 8002848:	b508      	push	{r3, lr}
 800284a:	e9d1 1200 	ldrd	r1, r2, [r1]
 800284e:	f7ff ffd9 	bl	8002804 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 8002852:	bd08      	pop	{r3, pc}

08002854 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>:
 8002854:	6001      	str	r1, [r0, #0]
 8002856:	4770      	bx	lr

08002858 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 8002858:	b538      	push	{r3, r4, r5, lr}
 800285a:	f100 0308 	add.w	r3, r0, #8
 800285e:	6003      	str	r3, [r0, #0]
 8002860:	e9d1 5200 	ldrd	r5, r2, [r1]
 8002864:	4604      	mov	r4, r0
 8002866:	f04f 0300 	mov.w	r3, #0
 800286a:	442a      	add	r2, r5
 800286c:	4629      	mov	r1, r5
 800286e:	f7fe fdc3 	bl	80013f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 8002872:	4620      	mov	r0, r4
 8002874:	bd38      	pop	{r3, r4, r5, pc}

08002876 <_ZdlPv>:
 8002876:	f000 b853 	b.w	8002920 <free>

0800287a <_Znwj>:
 800287a:	2801      	cmp	r0, #1
 800287c:	bf38      	it	cc
 800287e:	2001      	movcc	r0, #1
 8002880:	b510      	push	{r4, lr}
 8002882:	4604      	mov	r4, r0
 8002884:	4620      	mov	r0, r4
 8002886:	f000 f843 	bl	8002910 <malloc>
 800288a:	b930      	cbnz	r0, 800289a <_Znwj+0x20>
 800288c:	f000 f806 	bl	800289c <_ZSt15get_new_handlerv>
 8002890:	b908      	cbnz	r0, 8002896 <_Znwj+0x1c>
 8002892:	f000 f80b 	bl	80028ac <abort>
 8002896:	4780      	blx	r0
 8002898:	e7f4      	b.n	8002884 <_Znwj+0xa>
 800289a:	bd10      	pop	{r4, pc}

0800289c <_ZSt15get_new_handlerv>:
 800289c:	4b02      	ldr	r3, [pc, #8]	; (80028a8 <_ZSt15get_new_handlerv+0xc>)
 800289e:	6818      	ldr	r0, [r3, #0]
 80028a0:	f3bf 8f5b 	dmb	ish
 80028a4:	4770      	bx	lr
 80028a6:	bf00      	nop
 80028a8:	20000098 	.word	0x20000098

080028ac <abort>:
 80028ac:	b508      	push	{r3, lr}
 80028ae:	2006      	movs	r0, #6
 80028b0:	f000 f950 	bl	8002b54 <raise>
 80028b4:	2001      	movs	r0, #1
 80028b6:	f7fe fe83 	bl	80015c0 <_exit>
	...

080028bc <__errno>:
 80028bc:	4b01      	ldr	r3, [pc, #4]	; (80028c4 <__errno+0x8>)
 80028be:	6818      	ldr	r0, [r3, #0]
 80028c0:	4770      	bx	lr
 80028c2:	bf00      	nop
 80028c4:	20000004 	.word	0x20000004

080028c8 <__libc_init_array>:
 80028c8:	b570      	push	{r4, r5, r6, lr}
 80028ca:	4d0d      	ldr	r5, [pc, #52]	; (8002900 <__libc_init_array+0x38>)
 80028cc:	4c0d      	ldr	r4, [pc, #52]	; (8002904 <__libc_init_array+0x3c>)
 80028ce:	1b64      	subs	r4, r4, r5
 80028d0:	10a4      	asrs	r4, r4, #2
 80028d2:	2600      	movs	r6, #0
 80028d4:	42a6      	cmp	r6, r4
 80028d6:	d109      	bne.n	80028ec <__libc_init_array+0x24>
 80028d8:	4d0b      	ldr	r5, [pc, #44]	; (8002908 <__libc_init_array+0x40>)
 80028da:	4c0c      	ldr	r4, [pc, #48]	; (800290c <__libc_init_array+0x44>)
 80028dc:	f000 fcbc 	bl	8003258 <_init>
 80028e0:	1b64      	subs	r4, r4, r5
 80028e2:	10a4      	asrs	r4, r4, #2
 80028e4:	2600      	movs	r6, #0
 80028e6:	42a6      	cmp	r6, r4
 80028e8:	d105      	bne.n	80028f6 <__libc_init_array+0x2e>
 80028ea:	bd70      	pop	{r4, r5, r6, pc}
 80028ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80028f0:	4798      	blx	r3
 80028f2:	3601      	adds	r6, #1
 80028f4:	e7ee      	b.n	80028d4 <__libc_init_array+0xc>
 80028f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80028fa:	4798      	blx	r3
 80028fc:	3601      	adds	r6, #1
 80028fe:	e7f2      	b.n	80028e6 <__libc_init_array+0x1e>
 8002900:	08003398 	.word	0x08003398
 8002904:	08003398 	.word	0x08003398
 8002908:	08003398 	.word	0x08003398
 800290c:	0800339c 	.word	0x0800339c

08002910 <malloc>:
 8002910:	4b02      	ldr	r3, [pc, #8]	; (800291c <malloc+0xc>)
 8002912:	4601      	mov	r1, r0
 8002914:	6818      	ldr	r0, [r3, #0]
 8002916:	f000 b88b 	b.w	8002a30 <_malloc_r>
 800291a:	bf00      	nop
 800291c:	20000004 	.word	0x20000004

08002920 <free>:
 8002920:	4b02      	ldr	r3, [pc, #8]	; (800292c <free+0xc>)
 8002922:	4601      	mov	r1, r0
 8002924:	6818      	ldr	r0, [r3, #0]
 8002926:	f000 b833 	b.w	8002990 <_free_r>
 800292a:	bf00      	nop
 800292c:	20000004 	.word	0x20000004

08002930 <memcpy>:
 8002930:	440a      	add	r2, r1
 8002932:	4291      	cmp	r1, r2
 8002934:	f100 33ff 	add.w	r3, r0, #4294967295
 8002938:	d100      	bne.n	800293c <memcpy+0xc>
 800293a:	4770      	bx	lr
 800293c:	b510      	push	{r4, lr}
 800293e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002942:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002946:	4291      	cmp	r1, r2
 8002948:	d1f9      	bne.n	800293e <memcpy+0xe>
 800294a:	bd10      	pop	{r4, pc}

0800294c <memmove>:
 800294c:	4288      	cmp	r0, r1
 800294e:	b510      	push	{r4, lr}
 8002950:	eb01 0402 	add.w	r4, r1, r2
 8002954:	d902      	bls.n	800295c <memmove+0x10>
 8002956:	4284      	cmp	r4, r0
 8002958:	4623      	mov	r3, r4
 800295a:	d807      	bhi.n	800296c <memmove+0x20>
 800295c:	1e43      	subs	r3, r0, #1
 800295e:	42a1      	cmp	r1, r4
 8002960:	d008      	beq.n	8002974 <memmove+0x28>
 8002962:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002966:	f803 2f01 	strb.w	r2, [r3, #1]!
 800296a:	e7f8      	b.n	800295e <memmove+0x12>
 800296c:	4402      	add	r2, r0
 800296e:	4601      	mov	r1, r0
 8002970:	428a      	cmp	r2, r1
 8002972:	d100      	bne.n	8002976 <memmove+0x2a>
 8002974:	bd10      	pop	{r4, pc}
 8002976:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800297a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800297e:	e7f7      	b.n	8002970 <memmove+0x24>

08002980 <memset>:
 8002980:	4402      	add	r2, r0
 8002982:	4603      	mov	r3, r0
 8002984:	4293      	cmp	r3, r2
 8002986:	d100      	bne.n	800298a <memset+0xa>
 8002988:	4770      	bx	lr
 800298a:	f803 1b01 	strb.w	r1, [r3], #1
 800298e:	e7f9      	b.n	8002984 <memset+0x4>

08002990 <_free_r>:
 8002990:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002992:	2900      	cmp	r1, #0
 8002994:	d048      	beq.n	8002a28 <_free_r+0x98>
 8002996:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800299a:	9001      	str	r0, [sp, #4]
 800299c:	2b00      	cmp	r3, #0
 800299e:	f1a1 0404 	sub.w	r4, r1, #4
 80029a2:	bfb8      	it	lt
 80029a4:	18e4      	addlt	r4, r4, r3
 80029a6:	f000 f92b 	bl	8002c00 <__malloc_lock>
 80029aa:	4a20      	ldr	r2, [pc, #128]	; (8002a2c <_free_r+0x9c>)
 80029ac:	9801      	ldr	r0, [sp, #4]
 80029ae:	6813      	ldr	r3, [r2, #0]
 80029b0:	4615      	mov	r5, r2
 80029b2:	b933      	cbnz	r3, 80029c2 <_free_r+0x32>
 80029b4:	6063      	str	r3, [r4, #4]
 80029b6:	6014      	str	r4, [r2, #0]
 80029b8:	b003      	add	sp, #12
 80029ba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80029be:	f000 b925 	b.w	8002c0c <__malloc_unlock>
 80029c2:	42a3      	cmp	r3, r4
 80029c4:	d90b      	bls.n	80029de <_free_r+0x4e>
 80029c6:	6821      	ldr	r1, [r4, #0]
 80029c8:	1862      	adds	r2, r4, r1
 80029ca:	4293      	cmp	r3, r2
 80029cc:	bf04      	itt	eq
 80029ce:	681a      	ldreq	r2, [r3, #0]
 80029d0:	685b      	ldreq	r3, [r3, #4]
 80029d2:	6063      	str	r3, [r4, #4]
 80029d4:	bf04      	itt	eq
 80029d6:	1852      	addeq	r2, r2, r1
 80029d8:	6022      	streq	r2, [r4, #0]
 80029da:	602c      	str	r4, [r5, #0]
 80029dc:	e7ec      	b.n	80029b8 <_free_r+0x28>
 80029de:	461a      	mov	r2, r3
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	b10b      	cbz	r3, 80029e8 <_free_r+0x58>
 80029e4:	42a3      	cmp	r3, r4
 80029e6:	d9fa      	bls.n	80029de <_free_r+0x4e>
 80029e8:	6811      	ldr	r1, [r2, #0]
 80029ea:	1855      	adds	r5, r2, r1
 80029ec:	42a5      	cmp	r5, r4
 80029ee:	d10b      	bne.n	8002a08 <_free_r+0x78>
 80029f0:	6824      	ldr	r4, [r4, #0]
 80029f2:	4421      	add	r1, r4
 80029f4:	1854      	adds	r4, r2, r1
 80029f6:	42a3      	cmp	r3, r4
 80029f8:	6011      	str	r1, [r2, #0]
 80029fa:	d1dd      	bne.n	80029b8 <_free_r+0x28>
 80029fc:	681c      	ldr	r4, [r3, #0]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	6053      	str	r3, [r2, #4]
 8002a02:	4421      	add	r1, r4
 8002a04:	6011      	str	r1, [r2, #0]
 8002a06:	e7d7      	b.n	80029b8 <_free_r+0x28>
 8002a08:	d902      	bls.n	8002a10 <_free_r+0x80>
 8002a0a:	230c      	movs	r3, #12
 8002a0c:	6003      	str	r3, [r0, #0]
 8002a0e:	e7d3      	b.n	80029b8 <_free_r+0x28>
 8002a10:	6825      	ldr	r5, [r4, #0]
 8002a12:	1961      	adds	r1, r4, r5
 8002a14:	428b      	cmp	r3, r1
 8002a16:	bf04      	itt	eq
 8002a18:	6819      	ldreq	r1, [r3, #0]
 8002a1a:	685b      	ldreq	r3, [r3, #4]
 8002a1c:	6063      	str	r3, [r4, #4]
 8002a1e:	bf04      	itt	eq
 8002a20:	1949      	addeq	r1, r1, r5
 8002a22:	6021      	streq	r1, [r4, #0]
 8002a24:	6054      	str	r4, [r2, #4]
 8002a26:	e7c7      	b.n	80029b8 <_free_r+0x28>
 8002a28:	b003      	add	sp, #12
 8002a2a:	bd30      	pop	{r4, r5, pc}
 8002a2c:	2000009c 	.word	0x2000009c

08002a30 <_malloc_r>:
 8002a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a32:	1ccd      	adds	r5, r1, #3
 8002a34:	f025 0503 	bic.w	r5, r5, #3
 8002a38:	3508      	adds	r5, #8
 8002a3a:	2d0c      	cmp	r5, #12
 8002a3c:	bf38      	it	cc
 8002a3e:	250c      	movcc	r5, #12
 8002a40:	2d00      	cmp	r5, #0
 8002a42:	4606      	mov	r6, r0
 8002a44:	db01      	blt.n	8002a4a <_malloc_r+0x1a>
 8002a46:	42a9      	cmp	r1, r5
 8002a48:	d903      	bls.n	8002a52 <_malloc_r+0x22>
 8002a4a:	230c      	movs	r3, #12
 8002a4c:	6033      	str	r3, [r6, #0]
 8002a4e:	2000      	movs	r0, #0
 8002a50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a52:	f000 f8d5 	bl	8002c00 <__malloc_lock>
 8002a56:	4921      	ldr	r1, [pc, #132]	; (8002adc <_malloc_r+0xac>)
 8002a58:	680a      	ldr	r2, [r1, #0]
 8002a5a:	4614      	mov	r4, r2
 8002a5c:	b99c      	cbnz	r4, 8002a86 <_malloc_r+0x56>
 8002a5e:	4f20      	ldr	r7, [pc, #128]	; (8002ae0 <_malloc_r+0xb0>)
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	b923      	cbnz	r3, 8002a6e <_malloc_r+0x3e>
 8002a64:	4621      	mov	r1, r4
 8002a66:	4630      	mov	r0, r6
 8002a68:	f000 f83c 	bl	8002ae4 <_sbrk_r>
 8002a6c:	6038      	str	r0, [r7, #0]
 8002a6e:	4629      	mov	r1, r5
 8002a70:	4630      	mov	r0, r6
 8002a72:	f000 f837 	bl	8002ae4 <_sbrk_r>
 8002a76:	1c43      	adds	r3, r0, #1
 8002a78:	d123      	bne.n	8002ac2 <_malloc_r+0x92>
 8002a7a:	230c      	movs	r3, #12
 8002a7c:	6033      	str	r3, [r6, #0]
 8002a7e:	4630      	mov	r0, r6
 8002a80:	f000 f8c4 	bl	8002c0c <__malloc_unlock>
 8002a84:	e7e3      	b.n	8002a4e <_malloc_r+0x1e>
 8002a86:	6823      	ldr	r3, [r4, #0]
 8002a88:	1b5b      	subs	r3, r3, r5
 8002a8a:	d417      	bmi.n	8002abc <_malloc_r+0x8c>
 8002a8c:	2b0b      	cmp	r3, #11
 8002a8e:	d903      	bls.n	8002a98 <_malloc_r+0x68>
 8002a90:	6023      	str	r3, [r4, #0]
 8002a92:	441c      	add	r4, r3
 8002a94:	6025      	str	r5, [r4, #0]
 8002a96:	e004      	b.n	8002aa2 <_malloc_r+0x72>
 8002a98:	6863      	ldr	r3, [r4, #4]
 8002a9a:	42a2      	cmp	r2, r4
 8002a9c:	bf0c      	ite	eq
 8002a9e:	600b      	streq	r3, [r1, #0]
 8002aa0:	6053      	strne	r3, [r2, #4]
 8002aa2:	4630      	mov	r0, r6
 8002aa4:	f000 f8b2 	bl	8002c0c <__malloc_unlock>
 8002aa8:	f104 000b 	add.w	r0, r4, #11
 8002aac:	1d23      	adds	r3, r4, #4
 8002aae:	f020 0007 	bic.w	r0, r0, #7
 8002ab2:	1ac2      	subs	r2, r0, r3
 8002ab4:	d0cc      	beq.n	8002a50 <_malloc_r+0x20>
 8002ab6:	1a1b      	subs	r3, r3, r0
 8002ab8:	50a3      	str	r3, [r4, r2]
 8002aba:	e7c9      	b.n	8002a50 <_malloc_r+0x20>
 8002abc:	4622      	mov	r2, r4
 8002abe:	6864      	ldr	r4, [r4, #4]
 8002ac0:	e7cc      	b.n	8002a5c <_malloc_r+0x2c>
 8002ac2:	1cc4      	adds	r4, r0, #3
 8002ac4:	f024 0403 	bic.w	r4, r4, #3
 8002ac8:	42a0      	cmp	r0, r4
 8002aca:	d0e3      	beq.n	8002a94 <_malloc_r+0x64>
 8002acc:	1a21      	subs	r1, r4, r0
 8002ace:	4630      	mov	r0, r6
 8002ad0:	f000 f808 	bl	8002ae4 <_sbrk_r>
 8002ad4:	3001      	adds	r0, #1
 8002ad6:	d1dd      	bne.n	8002a94 <_malloc_r+0x64>
 8002ad8:	e7cf      	b.n	8002a7a <_malloc_r+0x4a>
 8002ada:	bf00      	nop
 8002adc:	2000009c 	.word	0x2000009c
 8002ae0:	200000a0 	.word	0x200000a0

08002ae4 <_sbrk_r>:
 8002ae4:	b538      	push	{r3, r4, r5, lr}
 8002ae6:	4d06      	ldr	r5, [pc, #24]	; (8002b00 <_sbrk_r+0x1c>)
 8002ae8:	2300      	movs	r3, #0
 8002aea:	4604      	mov	r4, r0
 8002aec:	4608      	mov	r0, r1
 8002aee:	602b      	str	r3, [r5, #0]
 8002af0:	f7fe fd70 	bl	80015d4 <_sbrk>
 8002af4:	1c43      	adds	r3, r0, #1
 8002af6:	d102      	bne.n	8002afe <_sbrk_r+0x1a>
 8002af8:	682b      	ldr	r3, [r5, #0]
 8002afa:	b103      	cbz	r3, 8002afe <_sbrk_r+0x1a>
 8002afc:	6023      	str	r3, [r4, #0]
 8002afe:	bd38      	pop	{r3, r4, r5, pc}
 8002b00:	200000a4 	.word	0x200000a4

08002b04 <_raise_r>:
 8002b04:	291f      	cmp	r1, #31
 8002b06:	b538      	push	{r3, r4, r5, lr}
 8002b08:	4604      	mov	r4, r0
 8002b0a:	460d      	mov	r5, r1
 8002b0c:	d904      	bls.n	8002b18 <_raise_r+0x14>
 8002b0e:	2316      	movs	r3, #22
 8002b10:	6003      	str	r3, [r0, #0]
 8002b12:	f04f 30ff 	mov.w	r0, #4294967295
 8002b16:	bd38      	pop	{r3, r4, r5, pc}
 8002b18:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8002b1a:	b112      	cbz	r2, 8002b22 <_raise_r+0x1e>
 8002b1c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8002b20:	b94b      	cbnz	r3, 8002b36 <_raise_r+0x32>
 8002b22:	4620      	mov	r0, r4
 8002b24:	f000 f830 	bl	8002b88 <_getpid_r>
 8002b28:	462a      	mov	r2, r5
 8002b2a:	4601      	mov	r1, r0
 8002b2c:	4620      	mov	r0, r4
 8002b2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002b32:	f000 b817 	b.w	8002b64 <_kill_r>
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d00a      	beq.n	8002b50 <_raise_r+0x4c>
 8002b3a:	1c59      	adds	r1, r3, #1
 8002b3c:	d103      	bne.n	8002b46 <_raise_r+0x42>
 8002b3e:	2316      	movs	r3, #22
 8002b40:	6003      	str	r3, [r0, #0]
 8002b42:	2001      	movs	r0, #1
 8002b44:	e7e7      	b.n	8002b16 <_raise_r+0x12>
 8002b46:	2400      	movs	r4, #0
 8002b48:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8002b4c:	4628      	mov	r0, r5
 8002b4e:	4798      	blx	r3
 8002b50:	2000      	movs	r0, #0
 8002b52:	e7e0      	b.n	8002b16 <_raise_r+0x12>

08002b54 <raise>:
 8002b54:	4b02      	ldr	r3, [pc, #8]	; (8002b60 <raise+0xc>)
 8002b56:	4601      	mov	r1, r0
 8002b58:	6818      	ldr	r0, [r3, #0]
 8002b5a:	f7ff bfd3 	b.w	8002b04 <_raise_r>
 8002b5e:	bf00      	nop
 8002b60:	20000004 	.word	0x20000004

08002b64 <_kill_r>:
 8002b64:	b538      	push	{r3, r4, r5, lr}
 8002b66:	4d07      	ldr	r5, [pc, #28]	; (8002b84 <_kill_r+0x20>)
 8002b68:	2300      	movs	r3, #0
 8002b6a:	4604      	mov	r4, r0
 8002b6c:	4608      	mov	r0, r1
 8002b6e:	4611      	mov	r1, r2
 8002b70:	602b      	str	r3, [r5, #0]
 8002b72:	f7fe fd15 	bl	80015a0 <_kill>
 8002b76:	1c43      	adds	r3, r0, #1
 8002b78:	d102      	bne.n	8002b80 <_kill_r+0x1c>
 8002b7a:	682b      	ldr	r3, [r5, #0]
 8002b7c:	b103      	cbz	r3, 8002b80 <_kill_r+0x1c>
 8002b7e:	6023      	str	r3, [r4, #0]
 8002b80:	bd38      	pop	{r3, r4, r5, pc}
 8002b82:	bf00      	nop
 8002b84:	200000a4 	.word	0x200000a4

08002b88 <_getpid_r>:
 8002b88:	f7fe bd02 	b.w	8001590 <_getpid>

08002b8c <_vsniprintf_r>:
 8002b8c:	b530      	push	{r4, r5, lr}
 8002b8e:	1e14      	subs	r4, r2, #0
 8002b90:	4605      	mov	r5, r0
 8002b92:	b09b      	sub	sp, #108	; 0x6c
 8002b94:	4618      	mov	r0, r3
 8002b96:	da05      	bge.n	8002ba4 <_vsniprintf_r+0x18>
 8002b98:	238b      	movs	r3, #139	; 0x8b
 8002b9a:	602b      	str	r3, [r5, #0]
 8002b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8002ba0:	b01b      	add	sp, #108	; 0x6c
 8002ba2:	bd30      	pop	{r4, r5, pc}
 8002ba4:	f44f 7302 	mov.w	r3, #520	; 0x208
 8002ba8:	f8ad 300c 	strh.w	r3, [sp, #12]
 8002bac:	bf14      	ite	ne
 8002bae:	f104 33ff 	addne.w	r3, r4, #4294967295
 8002bb2:	4623      	moveq	r3, r4
 8002bb4:	9302      	str	r3, [sp, #8]
 8002bb6:	9305      	str	r3, [sp, #20]
 8002bb8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002bbc:	9100      	str	r1, [sp, #0]
 8002bbe:	9104      	str	r1, [sp, #16]
 8002bc0:	f8ad 300e 	strh.w	r3, [sp, #14]
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8002bc8:	4669      	mov	r1, sp
 8002bca:	4628      	mov	r0, r5
 8002bcc:	f000 f880 	bl	8002cd0 <_svfiprintf_r>
 8002bd0:	1c43      	adds	r3, r0, #1
 8002bd2:	bfbc      	itt	lt
 8002bd4:	238b      	movlt	r3, #139	; 0x8b
 8002bd6:	602b      	strlt	r3, [r5, #0]
 8002bd8:	2c00      	cmp	r4, #0
 8002bda:	d0e1      	beq.n	8002ba0 <_vsniprintf_r+0x14>
 8002bdc:	9b00      	ldr	r3, [sp, #0]
 8002bde:	2200      	movs	r2, #0
 8002be0:	701a      	strb	r2, [r3, #0]
 8002be2:	e7dd      	b.n	8002ba0 <_vsniprintf_r+0x14>

08002be4 <vsniprintf>:
 8002be4:	b507      	push	{r0, r1, r2, lr}
 8002be6:	9300      	str	r3, [sp, #0]
 8002be8:	4613      	mov	r3, r2
 8002bea:	460a      	mov	r2, r1
 8002bec:	4601      	mov	r1, r0
 8002bee:	4803      	ldr	r0, [pc, #12]	; (8002bfc <vsniprintf+0x18>)
 8002bf0:	6800      	ldr	r0, [r0, #0]
 8002bf2:	f7ff ffcb 	bl	8002b8c <_vsniprintf_r>
 8002bf6:	b003      	add	sp, #12
 8002bf8:	f85d fb04 	ldr.w	pc, [sp], #4
 8002bfc:	20000004 	.word	0x20000004

08002c00 <__malloc_lock>:
 8002c00:	4801      	ldr	r0, [pc, #4]	; (8002c08 <__malloc_lock+0x8>)
 8002c02:	f000 baf9 	b.w	80031f8 <__retarget_lock_acquire_recursive>
 8002c06:	bf00      	nop
 8002c08:	200000ac 	.word	0x200000ac

08002c0c <__malloc_unlock>:
 8002c0c:	4801      	ldr	r0, [pc, #4]	; (8002c14 <__malloc_unlock+0x8>)
 8002c0e:	f000 baf4 	b.w	80031fa <__retarget_lock_release_recursive>
 8002c12:	bf00      	nop
 8002c14:	200000ac 	.word	0x200000ac

08002c18 <__ssputs_r>:
 8002c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c1c:	688e      	ldr	r6, [r1, #8]
 8002c1e:	429e      	cmp	r6, r3
 8002c20:	4682      	mov	sl, r0
 8002c22:	460c      	mov	r4, r1
 8002c24:	4690      	mov	r8, r2
 8002c26:	461f      	mov	r7, r3
 8002c28:	d838      	bhi.n	8002c9c <__ssputs_r+0x84>
 8002c2a:	898a      	ldrh	r2, [r1, #12]
 8002c2c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002c30:	d032      	beq.n	8002c98 <__ssputs_r+0x80>
 8002c32:	6825      	ldr	r5, [r4, #0]
 8002c34:	6909      	ldr	r1, [r1, #16]
 8002c36:	eba5 0901 	sub.w	r9, r5, r1
 8002c3a:	6965      	ldr	r5, [r4, #20]
 8002c3c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002c40:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002c44:	3301      	adds	r3, #1
 8002c46:	444b      	add	r3, r9
 8002c48:	106d      	asrs	r5, r5, #1
 8002c4a:	429d      	cmp	r5, r3
 8002c4c:	bf38      	it	cc
 8002c4e:	461d      	movcc	r5, r3
 8002c50:	0553      	lsls	r3, r2, #21
 8002c52:	d531      	bpl.n	8002cb8 <__ssputs_r+0xa0>
 8002c54:	4629      	mov	r1, r5
 8002c56:	f7ff feeb 	bl	8002a30 <_malloc_r>
 8002c5a:	4606      	mov	r6, r0
 8002c5c:	b950      	cbnz	r0, 8002c74 <__ssputs_r+0x5c>
 8002c5e:	230c      	movs	r3, #12
 8002c60:	f8ca 3000 	str.w	r3, [sl]
 8002c64:	89a3      	ldrh	r3, [r4, #12]
 8002c66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c6a:	81a3      	strh	r3, [r4, #12]
 8002c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c74:	6921      	ldr	r1, [r4, #16]
 8002c76:	464a      	mov	r2, r9
 8002c78:	f7ff fe5a 	bl	8002930 <memcpy>
 8002c7c:	89a3      	ldrh	r3, [r4, #12]
 8002c7e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002c82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c86:	81a3      	strh	r3, [r4, #12]
 8002c88:	6126      	str	r6, [r4, #16]
 8002c8a:	6165      	str	r5, [r4, #20]
 8002c8c:	444e      	add	r6, r9
 8002c8e:	eba5 0509 	sub.w	r5, r5, r9
 8002c92:	6026      	str	r6, [r4, #0]
 8002c94:	60a5      	str	r5, [r4, #8]
 8002c96:	463e      	mov	r6, r7
 8002c98:	42be      	cmp	r6, r7
 8002c9a:	d900      	bls.n	8002c9e <__ssputs_r+0x86>
 8002c9c:	463e      	mov	r6, r7
 8002c9e:	4632      	mov	r2, r6
 8002ca0:	6820      	ldr	r0, [r4, #0]
 8002ca2:	4641      	mov	r1, r8
 8002ca4:	f7ff fe52 	bl	800294c <memmove>
 8002ca8:	68a3      	ldr	r3, [r4, #8]
 8002caa:	6822      	ldr	r2, [r4, #0]
 8002cac:	1b9b      	subs	r3, r3, r6
 8002cae:	4432      	add	r2, r6
 8002cb0:	60a3      	str	r3, [r4, #8]
 8002cb2:	6022      	str	r2, [r4, #0]
 8002cb4:	2000      	movs	r0, #0
 8002cb6:	e7db      	b.n	8002c70 <__ssputs_r+0x58>
 8002cb8:	462a      	mov	r2, r5
 8002cba:	f000 fa9f 	bl	80031fc <_realloc_r>
 8002cbe:	4606      	mov	r6, r0
 8002cc0:	2800      	cmp	r0, #0
 8002cc2:	d1e1      	bne.n	8002c88 <__ssputs_r+0x70>
 8002cc4:	6921      	ldr	r1, [r4, #16]
 8002cc6:	4650      	mov	r0, sl
 8002cc8:	f7ff fe62 	bl	8002990 <_free_r>
 8002ccc:	e7c7      	b.n	8002c5e <__ssputs_r+0x46>
	...

08002cd0 <_svfiprintf_r>:
 8002cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002cd4:	4698      	mov	r8, r3
 8002cd6:	898b      	ldrh	r3, [r1, #12]
 8002cd8:	061b      	lsls	r3, r3, #24
 8002cda:	b09d      	sub	sp, #116	; 0x74
 8002cdc:	4607      	mov	r7, r0
 8002cde:	460d      	mov	r5, r1
 8002ce0:	4614      	mov	r4, r2
 8002ce2:	d50e      	bpl.n	8002d02 <_svfiprintf_r+0x32>
 8002ce4:	690b      	ldr	r3, [r1, #16]
 8002ce6:	b963      	cbnz	r3, 8002d02 <_svfiprintf_r+0x32>
 8002ce8:	2140      	movs	r1, #64	; 0x40
 8002cea:	f7ff fea1 	bl	8002a30 <_malloc_r>
 8002cee:	6028      	str	r0, [r5, #0]
 8002cf0:	6128      	str	r0, [r5, #16]
 8002cf2:	b920      	cbnz	r0, 8002cfe <_svfiprintf_r+0x2e>
 8002cf4:	230c      	movs	r3, #12
 8002cf6:	603b      	str	r3, [r7, #0]
 8002cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8002cfc:	e0d1      	b.n	8002ea2 <_svfiprintf_r+0x1d2>
 8002cfe:	2340      	movs	r3, #64	; 0x40
 8002d00:	616b      	str	r3, [r5, #20]
 8002d02:	2300      	movs	r3, #0
 8002d04:	9309      	str	r3, [sp, #36]	; 0x24
 8002d06:	2320      	movs	r3, #32
 8002d08:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002d0c:	f8cd 800c 	str.w	r8, [sp, #12]
 8002d10:	2330      	movs	r3, #48	; 0x30
 8002d12:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8002ebc <_svfiprintf_r+0x1ec>
 8002d16:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002d1a:	f04f 0901 	mov.w	r9, #1
 8002d1e:	4623      	mov	r3, r4
 8002d20:	469a      	mov	sl, r3
 8002d22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002d26:	b10a      	cbz	r2, 8002d2c <_svfiprintf_r+0x5c>
 8002d28:	2a25      	cmp	r2, #37	; 0x25
 8002d2a:	d1f9      	bne.n	8002d20 <_svfiprintf_r+0x50>
 8002d2c:	ebba 0b04 	subs.w	fp, sl, r4
 8002d30:	d00b      	beq.n	8002d4a <_svfiprintf_r+0x7a>
 8002d32:	465b      	mov	r3, fp
 8002d34:	4622      	mov	r2, r4
 8002d36:	4629      	mov	r1, r5
 8002d38:	4638      	mov	r0, r7
 8002d3a:	f7ff ff6d 	bl	8002c18 <__ssputs_r>
 8002d3e:	3001      	adds	r0, #1
 8002d40:	f000 80aa 	beq.w	8002e98 <_svfiprintf_r+0x1c8>
 8002d44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002d46:	445a      	add	r2, fp
 8002d48:	9209      	str	r2, [sp, #36]	; 0x24
 8002d4a:	f89a 3000 	ldrb.w	r3, [sl]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	f000 80a2 	beq.w	8002e98 <_svfiprintf_r+0x1c8>
 8002d54:	2300      	movs	r3, #0
 8002d56:	f04f 32ff 	mov.w	r2, #4294967295
 8002d5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002d5e:	f10a 0a01 	add.w	sl, sl, #1
 8002d62:	9304      	str	r3, [sp, #16]
 8002d64:	9307      	str	r3, [sp, #28]
 8002d66:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002d6a:	931a      	str	r3, [sp, #104]	; 0x68
 8002d6c:	4654      	mov	r4, sl
 8002d6e:	2205      	movs	r2, #5
 8002d70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d74:	4851      	ldr	r0, [pc, #324]	; (8002ebc <_svfiprintf_r+0x1ec>)
 8002d76:	f7fd fa2b 	bl	80001d0 <memchr>
 8002d7a:	9a04      	ldr	r2, [sp, #16]
 8002d7c:	b9d8      	cbnz	r0, 8002db6 <_svfiprintf_r+0xe6>
 8002d7e:	06d0      	lsls	r0, r2, #27
 8002d80:	bf44      	itt	mi
 8002d82:	2320      	movmi	r3, #32
 8002d84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002d88:	0711      	lsls	r1, r2, #28
 8002d8a:	bf44      	itt	mi
 8002d8c:	232b      	movmi	r3, #43	; 0x2b
 8002d8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002d92:	f89a 3000 	ldrb.w	r3, [sl]
 8002d96:	2b2a      	cmp	r3, #42	; 0x2a
 8002d98:	d015      	beq.n	8002dc6 <_svfiprintf_r+0xf6>
 8002d9a:	9a07      	ldr	r2, [sp, #28]
 8002d9c:	4654      	mov	r4, sl
 8002d9e:	2000      	movs	r0, #0
 8002da0:	f04f 0c0a 	mov.w	ip, #10
 8002da4:	4621      	mov	r1, r4
 8002da6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002daa:	3b30      	subs	r3, #48	; 0x30
 8002dac:	2b09      	cmp	r3, #9
 8002dae:	d94e      	bls.n	8002e4e <_svfiprintf_r+0x17e>
 8002db0:	b1b0      	cbz	r0, 8002de0 <_svfiprintf_r+0x110>
 8002db2:	9207      	str	r2, [sp, #28]
 8002db4:	e014      	b.n	8002de0 <_svfiprintf_r+0x110>
 8002db6:	eba0 0308 	sub.w	r3, r0, r8
 8002dba:	fa09 f303 	lsl.w	r3, r9, r3
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	9304      	str	r3, [sp, #16]
 8002dc2:	46a2      	mov	sl, r4
 8002dc4:	e7d2      	b.n	8002d6c <_svfiprintf_r+0x9c>
 8002dc6:	9b03      	ldr	r3, [sp, #12]
 8002dc8:	1d19      	adds	r1, r3, #4
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	9103      	str	r1, [sp, #12]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	bfbb      	ittet	lt
 8002dd2:	425b      	neglt	r3, r3
 8002dd4:	f042 0202 	orrlt.w	r2, r2, #2
 8002dd8:	9307      	strge	r3, [sp, #28]
 8002dda:	9307      	strlt	r3, [sp, #28]
 8002ddc:	bfb8      	it	lt
 8002dde:	9204      	strlt	r2, [sp, #16]
 8002de0:	7823      	ldrb	r3, [r4, #0]
 8002de2:	2b2e      	cmp	r3, #46	; 0x2e
 8002de4:	d10c      	bne.n	8002e00 <_svfiprintf_r+0x130>
 8002de6:	7863      	ldrb	r3, [r4, #1]
 8002de8:	2b2a      	cmp	r3, #42	; 0x2a
 8002dea:	d135      	bne.n	8002e58 <_svfiprintf_r+0x188>
 8002dec:	9b03      	ldr	r3, [sp, #12]
 8002dee:	1d1a      	adds	r2, r3, #4
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	9203      	str	r2, [sp, #12]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	bfb8      	it	lt
 8002df8:	f04f 33ff 	movlt.w	r3, #4294967295
 8002dfc:	3402      	adds	r4, #2
 8002dfe:	9305      	str	r3, [sp, #20]
 8002e00:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002ecc <_svfiprintf_r+0x1fc>
 8002e04:	7821      	ldrb	r1, [r4, #0]
 8002e06:	2203      	movs	r2, #3
 8002e08:	4650      	mov	r0, sl
 8002e0a:	f7fd f9e1 	bl	80001d0 <memchr>
 8002e0e:	b140      	cbz	r0, 8002e22 <_svfiprintf_r+0x152>
 8002e10:	2340      	movs	r3, #64	; 0x40
 8002e12:	eba0 000a 	sub.w	r0, r0, sl
 8002e16:	fa03 f000 	lsl.w	r0, r3, r0
 8002e1a:	9b04      	ldr	r3, [sp, #16]
 8002e1c:	4303      	orrs	r3, r0
 8002e1e:	3401      	adds	r4, #1
 8002e20:	9304      	str	r3, [sp, #16]
 8002e22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e26:	4826      	ldr	r0, [pc, #152]	; (8002ec0 <_svfiprintf_r+0x1f0>)
 8002e28:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002e2c:	2206      	movs	r2, #6
 8002e2e:	f7fd f9cf 	bl	80001d0 <memchr>
 8002e32:	2800      	cmp	r0, #0
 8002e34:	d038      	beq.n	8002ea8 <_svfiprintf_r+0x1d8>
 8002e36:	4b23      	ldr	r3, [pc, #140]	; (8002ec4 <_svfiprintf_r+0x1f4>)
 8002e38:	bb1b      	cbnz	r3, 8002e82 <_svfiprintf_r+0x1b2>
 8002e3a:	9b03      	ldr	r3, [sp, #12]
 8002e3c:	3307      	adds	r3, #7
 8002e3e:	f023 0307 	bic.w	r3, r3, #7
 8002e42:	3308      	adds	r3, #8
 8002e44:	9303      	str	r3, [sp, #12]
 8002e46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e48:	4433      	add	r3, r6
 8002e4a:	9309      	str	r3, [sp, #36]	; 0x24
 8002e4c:	e767      	b.n	8002d1e <_svfiprintf_r+0x4e>
 8002e4e:	fb0c 3202 	mla	r2, ip, r2, r3
 8002e52:	460c      	mov	r4, r1
 8002e54:	2001      	movs	r0, #1
 8002e56:	e7a5      	b.n	8002da4 <_svfiprintf_r+0xd4>
 8002e58:	2300      	movs	r3, #0
 8002e5a:	3401      	adds	r4, #1
 8002e5c:	9305      	str	r3, [sp, #20]
 8002e5e:	4619      	mov	r1, r3
 8002e60:	f04f 0c0a 	mov.w	ip, #10
 8002e64:	4620      	mov	r0, r4
 8002e66:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002e6a:	3a30      	subs	r2, #48	; 0x30
 8002e6c:	2a09      	cmp	r2, #9
 8002e6e:	d903      	bls.n	8002e78 <_svfiprintf_r+0x1a8>
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d0c5      	beq.n	8002e00 <_svfiprintf_r+0x130>
 8002e74:	9105      	str	r1, [sp, #20]
 8002e76:	e7c3      	b.n	8002e00 <_svfiprintf_r+0x130>
 8002e78:	fb0c 2101 	mla	r1, ip, r1, r2
 8002e7c:	4604      	mov	r4, r0
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e7f0      	b.n	8002e64 <_svfiprintf_r+0x194>
 8002e82:	ab03      	add	r3, sp, #12
 8002e84:	9300      	str	r3, [sp, #0]
 8002e86:	462a      	mov	r2, r5
 8002e88:	4b0f      	ldr	r3, [pc, #60]	; (8002ec8 <_svfiprintf_r+0x1f8>)
 8002e8a:	a904      	add	r1, sp, #16
 8002e8c:	4638      	mov	r0, r7
 8002e8e:	f3af 8000 	nop.w
 8002e92:	1c42      	adds	r2, r0, #1
 8002e94:	4606      	mov	r6, r0
 8002e96:	d1d6      	bne.n	8002e46 <_svfiprintf_r+0x176>
 8002e98:	89ab      	ldrh	r3, [r5, #12]
 8002e9a:	065b      	lsls	r3, r3, #25
 8002e9c:	f53f af2c 	bmi.w	8002cf8 <_svfiprintf_r+0x28>
 8002ea0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002ea2:	b01d      	add	sp, #116	; 0x74
 8002ea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ea8:	ab03      	add	r3, sp, #12
 8002eaa:	9300      	str	r3, [sp, #0]
 8002eac:	462a      	mov	r2, r5
 8002eae:	4b06      	ldr	r3, [pc, #24]	; (8002ec8 <_svfiprintf_r+0x1f8>)
 8002eb0:	a904      	add	r1, sp, #16
 8002eb2:	4638      	mov	r0, r7
 8002eb4:	f000 f87a 	bl	8002fac <_printf_i>
 8002eb8:	e7eb      	b.n	8002e92 <_svfiprintf_r+0x1c2>
 8002eba:	bf00      	nop
 8002ebc:	0800335d 	.word	0x0800335d
 8002ec0:	08003367 	.word	0x08003367
 8002ec4:	00000000 	.word	0x00000000
 8002ec8:	08002c19 	.word	0x08002c19
 8002ecc:	08003363 	.word	0x08003363

08002ed0 <_printf_common>:
 8002ed0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ed4:	4616      	mov	r6, r2
 8002ed6:	4699      	mov	r9, r3
 8002ed8:	688a      	ldr	r2, [r1, #8]
 8002eda:	690b      	ldr	r3, [r1, #16]
 8002edc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	bfb8      	it	lt
 8002ee4:	4613      	movlt	r3, r2
 8002ee6:	6033      	str	r3, [r6, #0]
 8002ee8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002eec:	4607      	mov	r7, r0
 8002eee:	460c      	mov	r4, r1
 8002ef0:	b10a      	cbz	r2, 8002ef6 <_printf_common+0x26>
 8002ef2:	3301      	adds	r3, #1
 8002ef4:	6033      	str	r3, [r6, #0]
 8002ef6:	6823      	ldr	r3, [r4, #0]
 8002ef8:	0699      	lsls	r1, r3, #26
 8002efa:	bf42      	ittt	mi
 8002efc:	6833      	ldrmi	r3, [r6, #0]
 8002efe:	3302      	addmi	r3, #2
 8002f00:	6033      	strmi	r3, [r6, #0]
 8002f02:	6825      	ldr	r5, [r4, #0]
 8002f04:	f015 0506 	ands.w	r5, r5, #6
 8002f08:	d106      	bne.n	8002f18 <_printf_common+0x48>
 8002f0a:	f104 0a19 	add.w	sl, r4, #25
 8002f0e:	68e3      	ldr	r3, [r4, #12]
 8002f10:	6832      	ldr	r2, [r6, #0]
 8002f12:	1a9b      	subs	r3, r3, r2
 8002f14:	42ab      	cmp	r3, r5
 8002f16:	dc26      	bgt.n	8002f66 <_printf_common+0x96>
 8002f18:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002f1c:	1e13      	subs	r3, r2, #0
 8002f1e:	6822      	ldr	r2, [r4, #0]
 8002f20:	bf18      	it	ne
 8002f22:	2301      	movne	r3, #1
 8002f24:	0692      	lsls	r2, r2, #26
 8002f26:	d42b      	bmi.n	8002f80 <_printf_common+0xb0>
 8002f28:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002f2c:	4649      	mov	r1, r9
 8002f2e:	4638      	mov	r0, r7
 8002f30:	47c0      	blx	r8
 8002f32:	3001      	adds	r0, #1
 8002f34:	d01e      	beq.n	8002f74 <_printf_common+0xa4>
 8002f36:	6823      	ldr	r3, [r4, #0]
 8002f38:	68e5      	ldr	r5, [r4, #12]
 8002f3a:	6832      	ldr	r2, [r6, #0]
 8002f3c:	f003 0306 	and.w	r3, r3, #6
 8002f40:	2b04      	cmp	r3, #4
 8002f42:	bf08      	it	eq
 8002f44:	1aad      	subeq	r5, r5, r2
 8002f46:	68a3      	ldr	r3, [r4, #8]
 8002f48:	6922      	ldr	r2, [r4, #16]
 8002f4a:	bf0c      	ite	eq
 8002f4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002f50:	2500      	movne	r5, #0
 8002f52:	4293      	cmp	r3, r2
 8002f54:	bfc4      	itt	gt
 8002f56:	1a9b      	subgt	r3, r3, r2
 8002f58:	18ed      	addgt	r5, r5, r3
 8002f5a:	2600      	movs	r6, #0
 8002f5c:	341a      	adds	r4, #26
 8002f5e:	42b5      	cmp	r5, r6
 8002f60:	d11a      	bne.n	8002f98 <_printf_common+0xc8>
 8002f62:	2000      	movs	r0, #0
 8002f64:	e008      	b.n	8002f78 <_printf_common+0xa8>
 8002f66:	2301      	movs	r3, #1
 8002f68:	4652      	mov	r2, sl
 8002f6a:	4649      	mov	r1, r9
 8002f6c:	4638      	mov	r0, r7
 8002f6e:	47c0      	blx	r8
 8002f70:	3001      	adds	r0, #1
 8002f72:	d103      	bne.n	8002f7c <_printf_common+0xac>
 8002f74:	f04f 30ff 	mov.w	r0, #4294967295
 8002f78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f7c:	3501      	adds	r5, #1
 8002f7e:	e7c6      	b.n	8002f0e <_printf_common+0x3e>
 8002f80:	18e1      	adds	r1, r4, r3
 8002f82:	1c5a      	adds	r2, r3, #1
 8002f84:	2030      	movs	r0, #48	; 0x30
 8002f86:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002f8a:	4422      	add	r2, r4
 8002f8c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002f90:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002f94:	3302      	adds	r3, #2
 8002f96:	e7c7      	b.n	8002f28 <_printf_common+0x58>
 8002f98:	2301      	movs	r3, #1
 8002f9a:	4622      	mov	r2, r4
 8002f9c:	4649      	mov	r1, r9
 8002f9e:	4638      	mov	r0, r7
 8002fa0:	47c0      	blx	r8
 8002fa2:	3001      	adds	r0, #1
 8002fa4:	d0e6      	beq.n	8002f74 <_printf_common+0xa4>
 8002fa6:	3601      	adds	r6, #1
 8002fa8:	e7d9      	b.n	8002f5e <_printf_common+0x8e>
	...

08002fac <_printf_i>:
 8002fac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002fb0:	460c      	mov	r4, r1
 8002fb2:	4691      	mov	r9, r2
 8002fb4:	7e27      	ldrb	r7, [r4, #24]
 8002fb6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002fb8:	2f78      	cmp	r7, #120	; 0x78
 8002fba:	4680      	mov	r8, r0
 8002fbc:	469a      	mov	sl, r3
 8002fbe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002fc2:	d807      	bhi.n	8002fd4 <_printf_i+0x28>
 8002fc4:	2f62      	cmp	r7, #98	; 0x62
 8002fc6:	d80a      	bhi.n	8002fde <_printf_i+0x32>
 8002fc8:	2f00      	cmp	r7, #0
 8002fca:	f000 80d8 	beq.w	800317e <_printf_i+0x1d2>
 8002fce:	2f58      	cmp	r7, #88	; 0x58
 8002fd0:	f000 80a3 	beq.w	800311a <_printf_i+0x16e>
 8002fd4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002fd8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002fdc:	e03a      	b.n	8003054 <_printf_i+0xa8>
 8002fde:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002fe2:	2b15      	cmp	r3, #21
 8002fe4:	d8f6      	bhi.n	8002fd4 <_printf_i+0x28>
 8002fe6:	a001      	add	r0, pc, #4	; (adr r0, 8002fec <_printf_i+0x40>)
 8002fe8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002fec:	08003045 	.word	0x08003045
 8002ff0:	08003059 	.word	0x08003059
 8002ff4:	08002fd5 	.word	0x08002fd5
 8002ff8:	08002fd5 	.word	0x08002fd5
 8002ffc:	08002fd5 	.word	0x08002fd5
 8003000:	08002fd5 	.word	0x08002fd5
 8003004:	08003059 	.word	0x08003059
 8003008:	08002fd5 	.word	0x08002fd5
 800300c:	08002fd5 	.word	0x08002fd5
 8003010:	08002fd5 	.word	0x08002fd5
 8003014:	08002fd5 	.word	0x08002fd5
 8003018:	08003165 	.word	0x08003165
 800301c:	08003089 	.word	0x08003089
 8003020:	08003147 	.word	0x08003147
 8003024:	08002fd5 	.word	0x08002fd5
 8003028:	08002fd5 	.word	0x08002fd5
 800302c:	08003187 	.word	0x08003187
 8003030:	08002fd5 	.word	0x08002fd5
 8003034:	08003089 	.word	0x08003089
 8003038:	08002fd5 	.word	0x08002fd5
 800303c:	08002fd5 	.word	0x08002fd5
 8003040:	0800314f 	.word	0x0800314f
 8003044:	680b      	ldr	r3, [r1, #0]
 8003046:	1d1a      	adds	r2, r3, #4
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	600a      	str	r2, [r1, #0]
 800304c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003050:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003054:	2301      	movs	r3, #1
 8003056:	e0a3      	b.n	80031a0 <_printf_i+0x1f4>
 8003058:	6825      	ldr	r5, [r4, #0]
 800305a:	6808      	ldr	r0, [r1, #0]
 800305c:	062e      	lsls	r6, r5, #24
 800305e:	f100 0304 	add.w	r3, r0, #4
 8003062:	d50a      	bpl.n	800307a <_printf_i+0xce>
 8003064:	6805      	ldr	r5, [r0, #0]
 8003066:	600b      	str	r3, [r1, #0]
 8003068:	2d00      	cmp	r5, #0
 800306a:	da03      	bge.n	8003074 <_printf_i+0xc8>
 800306c:	232d      	movs	r3, #45	; 0x2d
 800306e:	426d      	negs	r5, r5
 8003070:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003074:	485e      	ldr	r0, [pc, #376]	; (80031f0 <_printf_i+0x244>)
 8003076:	230a      	movs	r3, #10
 8003078:	e019      	b.n	80030ae <_printf_i+0x102>
 800307a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800307e:	6805      	ldr	r5, [r0, #0]
 8003080:	600b      	str	r3, [r1, #0]
 8003082:	bf18      	it	ne
 8003084:	b22d      	sxthne	r5, r5
 8003086:	e7ef      	b.n	8003068 <_printf_i+0xbc>
 8003088:	680b      	ldr	r3, [r1, #0]
 800308a:	6825      	ldr	r5, [r4, #0]
 800308c:	1d18      	adds	r0, r3, #4
 800308e:	6008      	str	r0, [r1, #0]
 8003090:	0628      	lsls	r0, r5, #24
 8003092:	d501      	bpl.n	8003098 <_printf_i+0xec>
 8003094:	681d      	ldr	r5, [r3, #0]
 8003096:	e002      	b.n	800309e <_printf_i+0xf2>
 8003098:	0669      	lsls	r1, r5, #25
 800309a:	d5fb      	bpl.n	8003094 <_printf_i+0xe8>
 800309c:	881d      	ldrh	r5, [r3, #0]
 800309e:	4854      	ldr	r0, [pc, #336]	; (80031f0 <_printf_i+0x244>)
 80030a0:	2f6f      	cmp	r7, #111	; 0x6f
 80030a2:	bf0c      	ite	eq
 80030a4:	2308      	moveq	r3, #8
 80030a6:	230a      	movne	r3, #10
 80030a8:	2100      	movs	r1, #0
 80030aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80030ae:	6866      	ldr	r6, [r4, #4]
 80030b0:	60a6      	str	r6, [r4, #8]
 80030b2:	2e00      	cmp	r6, #0
 80030b4:	bfa2      	ittt	ge
 80030b6:	6821      	ldrge	r1, [r4, #0]
 80030b8:	f021 0104 	bicge.w	r1, r1, #4
 80030bc:	6021      	strge	r1, [r4, #0]
 80030be:	b90d      	cbnz	r5, 80030c4 <_printf_i+0x118>
 80030c0:	2e00      	cmp	r6, #0
 80030c2:	d04d      	beq.n	8003160 <_printf_i+0x1b4>
 80030c4:	4616      	mov	r6, r2
 80030c6:	fbb5 f1f3 	udiv	r1, r5, r3
 80030ca:	fb03 5711 	mls	r7, r3, r1, r5
 80030ce:	5dc7      	ldrb	r7, [r0, r7]
 80030d0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80030d4:	462f      	mov	r7, r5
 80030d6:	42bb      	cmp	r3, r7
 80030d8:	460d      	mov	r5, r1
 80030da:	d9f4      	bls.n	80030c6 <_printf_i+0x11a>
 80030dc:	2b08      	cmp	r3, #8
 80030de:	d10b      	bne.n	80030f8 <_printf_i+0x14c>
 80030e0:	6823      	ldr	r3, [r4, #0]
 80030e2:	07df      	lsls	r7, r3, #31
 80030e4:	d508      	bpl.n	80030f8 <_printf_i+0x14c>
 80030e6:	6923      	ldr	r3, [r4, #16]
 80030e8:	6861      	ldr	r1, [r4, #4]
 80030ea:	4299      	cmp	r1, r3
 80030ec:	bfde      	ittt	le
 80030ee:	2330      	movle	r3, #48	; 0x30
 80030f0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80030f4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80030f8:	1b92      	subs	r2, r2, r6
 80030fa:	6122      	str	r2, [r4, #16]
 80030fc:	f8cd a000 	str.w	sl, [sp]
 8003100:	464b      	mov	r3, r9
 8003102:	aa03      	add	r2, sp, #12
 8003104:	4621      	mov	r1, r4
 8003106:	4640      	mov	r0, r8
 8003108:	f7ff fee2 	bl	8002ed0 <_printf_common>
 800310c:	3001      	adds	r0, #1
 800310e:	d14c      	bne.n	80031aa <_printf_i+0x1fe>
 8003110:	f04f 30ff 	mov.w	r0, #4294967295
 8003114:	b004      	add	sp, #16
 8003116:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800311a:	4835      	ldr	r0, [pc, #212]	; (80031f0 <_printf_i+0x244>)
 800311c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003120:	6823      	ldr	r3, [r4, #0]
 8003122:	680e      	ldr	r6, [r1, #0]
 8003124:	061f      	lsls	r7, r3, #24
 8003126:	f856 5b04 	ldr.w	r5, [r6], #4
 800312a:	600e      	str	r6, [r1, #0]
 800312c:	d514      	bpl.n	8003158 <_printf_i+0x1ac>
 800312e:	07d9      	lsls	r1, r3, #31
 8003130:	bf44      	itt	mi
 8003132:	f043 0320 	orrmi.w	r3, r3, #32
 8003136:	6023      	strmi	r3, [r4, #0]
 8003138:	b91d      	cbnz	r5, 8003142 <_printf_i+0x196>
 800313a:	6823      	ldr	r3, [r4, #0]
 800313c:	f023 0320 	bic.w	r3, r3, #32
 8003140:	6023      	str	r3, [r4, #0]
 8003142:	2310      	movs	r3, #16
 8003144:	e7b0      	b.n	80030a8 <_printf_i+0xfc>
 8003146:	6823      	ldr	r3, [r4, #0]
 8003148:	f043 0320 	orr.w	r3, r3, #32
 800314c:	6023      	str	r3, [r4, #0]
 800314e:	2378      	movs	r3, #120	; 0x78
 8003150:	4828      	ldr	r0, [pc, #160]	; (80031f4 <_printf_i+0x248>)
 8003152:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003156:	e7e3      	b.n	8003120 <_printf_i+0x174>
 8003158:	065e      	lsls	r6, r3, #25
 800315a:	bf48      	it	mi
 800315c:	b2ad      	uxthmi	r5, r5
 800315e:	e7e6      	b.n	800312e <_printf_i+0x182>
 8003160:	4616      	mov	r6, r2
 8003162:	e7bb      	b.n	80030dc <_printf_i+0x130>
 8003164:	680b      	ldr	r3, [r1, #0]
 8003166:	6826      	ldr	r6, [r4, #0]
 8003168:	6960      	ldr	r0, [r4, #20]
 800316a:	1d1d      	adds	r5, r3, #4
 800316c:	600d      	str	r5, [r1, #0]
 800316e:	0635      	lsls	r5, r6, #24
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	d501      	bpl.n	8003178 <_printf_i+0x1cc>
 8003174:	6018      	str	r0, [r3, #0]
 8003176:	e002      	b.n	800317e <_printf_i+0x1d2>
 8003178:	0671      	lsls	r1, r6, #25
 800317a:	d5fb      	bpl.n	8003174 <_printf_i+0x1c8>
 800317c:	8018      	strh	r0, [r3, #0]
 800317e:	2300      	movs	r3, #0
 8003180:	6123      	str	r3, [r4, #16]
 8003182:	4616      	mov	r6, r2
 8003184:	e7ba      	b.n	80030fc <_printf_i+0x150>
 8003186:	680b      	ldr	r3, [r1, #0]
 8003188:	1d1a      	adds	r2, r3, #4
 800318a:	600a      	str	r2, [r1, #0]
 800318c:	681e      	ldr	r6, [r3, #0]
 800318e:	6862      	ldr	r2, [r4, #4]
 8003190:	2100      	movs	r1, #0
 8003192:	4630      	mov	r0, r6
 8003194:	f7fd f81c 	bl	80001d0 <memchr>
 8003198:	b108      	cbz	r0, 800319e <_printf_i+0x1f2>
 800319a:	1b80      	subs	r0, r0, r6
 800319c:	6060      	str	r0, [r4, #4]
 800319e:	6863      	ldr	r3, [r4, #4]
 80031a0:	6123      	str	r3, [r4, #16]
 80031a2:	2300      	movs	r3, #0
 80031a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80031a8:	e7a8      	b.n	80030fc <_printf_i+0x150>
 80031aa:	6923      	ldr	r3, [r4, #16]
 80031ac:	4632      	mov	r2, r6
 80031ae:	4649      	mov	r1, r9
 80031b0:	4640      	mov	r0, r8
 80031b2:	47d0      	blx	sl
 80031b4:	3001      	adds	r0, #1
 80031b6:	d0ab      	beq.n	8003110 <_printf_i+0x164>
 80031b8:	6823      	ldr	r3, [r4, #0]
 80031ba:	079b      	lsls	r3, r3, #30
 80031bc:	d413      	bmi.n	80031e6 <_printf_i+0x23a>
 80031be:	68e0      	ldr	r0, [r4, #12]
 80031c0:	9b03      	ldr	r3, [sp, #12]
 80031c2:	4298      	cmp	r0, r3
 80031c4:	bfb8      	it	lt
 80031c6:	4618      	movlt	r0, r3
 80031c8:	e7a4      	b.n	8003114 <_printf_i+0x168>
 80031ca:	2301      	movs	r3, #1
 80031cc:	4632      	mov	r2, r6
 80031ce:	4649      	mov	r1, r9
 80031d0:	4640      	mov	r0, r8
 80031d2:	47d0      	blx	sl
 80031d4:	3001      	adds	r0, #1
 80031d6:	d09b      	beq.n	8003110 <_printf_i+0x164>
 80031d8:	3501      	adds	r5, #1
 80031da:	68e3      	ldr	r3, [r4, #12]
 80031dc:	9903      	ldr	r1, [sp, #12]
 80031de:	1a5b      	subs	r3, r3, r1
 80031e0:	42ab      	cmp	r3, r5
 80031e2:	dcf2      	bgt.n	80031ca <_printf_i+0x21e>
 80031e4:	e7eb      	b.n	80031be <_printf_i+0x212>
 80031e6:	2500      	movs	r5, #0
 80031e8:	f104 0619 	add.w	r6, r4, #25
 80031ec:	e7f5      	b.n	80031da <_printf_i+0x22e>
 80031ee:	bf00      	nop
 80031f0:	0800336e 	.word	0x0800336e
 80031f4:	0800337f 	.word	0x0800337f

080031f8 <__retarget_lock_acquire_recursive>:
 80031f8:	4770      	bx	lr

080031fa <__retarget_lock_release_recursive>:
 80031fa:	4770      	bx	lr

080031fc <_realloc_r>:
 80031fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031fe:	4607      	mov	r7, r0
 8003200:	4614      	mov	r4, r2
 8003202:	460e      	mov	r6, r1
 8003204:	b921      	cbnz	r1, 8003210 <_realloc_r+0x14>
 8003206:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800320a:	4611      	mov	r1, r2
 800320c:	f7ff bc10 	b.w	8002a30 <_malloc_r>
 8003210:	b922      	cbnz	r2, 800321c <_realloc_r+0x20>
 8003212:	f7ff fbbd 	bl	8002990 <_free_r>
 8003216:	4625      	mov	r5, r4
 8003218:	4628      	mov	r0, r5
 800321a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800321c:	f000 f814 	bl	8003248 <_malloc_usable_size_r>
 8003220:	42a0      	cmp	r0, r4
 8003222:	d20f      	bcs.n	8003244 <_realloc_r+0x48>
 8003224:	4621      	mov	r1, r4
 8003226:	4638      	mov	r0, r7
 8003228:	f7ff fc02 	bl	8002a30 <_malloc_r>
 800322c:	4605      	mov	r5, r0
 800322e:	2800      	cmp	r0, #0
 8003230:	d0f2      	beq.n	8003218 <_realloc_r+0x1c>
 8003232:	4631      	mov	r1, r6
 8003234:	4622      	mov	r2, r4
 8003236:	f7ff fb7b 	bl	8002930 <memcpy>
 800323a:	4631      	mov	r1, r6
 800323c:	4638      	mov	r0, r7
 800323e:	f7ff fba7 	bl	8002990 <_free_r>
 8003242:	e7e9      	b.n	8003218 <_realloc_r+0x1c>
 8003244:	4635      	mov	r5, r6
 8003246:	e7e7      	b.n	8003218 <_realloc_r+0x1c>

08003248 <_malloc_usable_size_r>:
 8003248:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800324c:	1f18      	subs	r0, r3, #4
 800324e:	2b00      	cmp	r3, #0
 8003250:	bfbc      	itt	lt
 8003252:	580b      	ldrlt	r3, [r1, r0]
 8003254:	18c0      	addlt	r0, r0, r3
 8003256:	4770      	bx	lr

08003258 <_init>:
 8003258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800325a:	bf00      	nop
 800325c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800325e:	bc08      	pop	{r3}
 8003260:	469e      	mov	lr, r3
 8003262:	4770      	bx	lr

08003264 <_fini>:
 8003264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003266:	bf00      	nop
 8003268:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800326a:	bc08      	pop	{r3}
 800326c:	469e      	mov	lr, r3
 800326e:	4770      	bx	lr
