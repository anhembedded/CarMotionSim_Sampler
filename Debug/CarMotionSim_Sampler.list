
CarMotionSim_Sampler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d14  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  08004ea4  08004ea4  00014ea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004fe4  08004fe4  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08004fe4  08004fe4  00014fe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004fec  08004fec  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08004fec  08004fec  00014fec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08004ff4  08004ff4  00014ff4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08004ffc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          000000b0  20000068  20000068  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000118  20000118  00020068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003f88d  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000045c6  00000000  00000000  0005f925  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000dd0  00000000  00000000  00063ef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000cd8  00000000  00000000  00064cc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000094f0  00000000  00000000  00065998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0001a1c2  00000000  00000000  0006ee88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0008904a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005324  00000000  00000000  000890a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004e8c 	.word	0x08004e8c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08004e8c 	.word	0x08004e8c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000578:	b480      	push	{r7}
 800057a:	b085      	sub	sp, #20
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000580:	4b08      	ldr	r3, [pc, #32]	; (80005a4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000582:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000584:	4907      	ldr	r1, [pc, #28]	; (80005a4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	4313      	orrs	r3, r2
 800058a:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800058c:	4b05      	ldr	r3, [pc, #20]	; (80005a4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800058e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	4013      	ands	r3, r2
 8000594:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000596:	68fb      	ldr	r3, [r7, #12]
}
 8000598:	bf00      	nop
 800059a:	3714      	adds	r7, #20
 800059c:	46bd      	mov	sp, r7
 800059e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a2:	4770      	bx	lr
 80005a4:	40023800 	.word	0x40023800

080005a8 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80005a8:	b480      	push	{r7}
 80005aa:	b083      	sub	sp, #12
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
 80005b0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80005b2:	683b      	ldr	r3, [r7, #0]
 80005b4:	041a      	lsls	r2, r3, #16
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	619a      	str	r2, [r3, #24]
}
 80005ba:	bf00      	nop
 80005bc:	370c      	adds	r7, #12
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
	...

080005c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b086      	sub	sp, #24
 80005cc:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ce:	463b      	mov	r3, r7
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	605a      	str	r2, [r3, #4]
 80005d6:	609a      	str	r2, [r3, #8]
 80005d8:	60da      	str	r2, [r3, #12]
 80005da:	611a      	str	r2, [r3, #16]
 80005dc:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 80005de:	2080      	movs	r0, #128	; 0x80
 80005e0:	f7ff ffca 	bl	8000578 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80005e4:	2004      	movs	r0, #4
 80005e6:	f7ff ffc7 	bl	8000578 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LCD_RS_Pin|LCD_ENABLE_Pin|LCD_D4_Pin|LCD_D5_Pin
 80005ea:	213f      	movs	r1, #63	; 0x3f
 80005ec:	480a      	ldr	r0, [pc, #40]	; (8000618 <MX_GPIO_Init+0x50>)
 80005ee:	f7ff ffdb 	bl	80005a8 <LL_GPIO_ResetOutputPin>
                          |LCD_D6_Pin|LCD_D7_Pin);

  /**/
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_ENABLE_Pin|LCD_D4_Pin|LCD_D5_Pin
 80005f2:	233f      	movs	r3, #63	; 0x3f
 80005f4:	603b      	str	r3, [r7, #0]
                          |LCD_D6_Pin|LCD_D7_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80005f6:	2301      	movs	r3, #1
 80005f8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80005fa:	2302      	movs	r3, #2
 80005fc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80005fe:	2300      	movs	r3, #0
 8000600:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000602:	2300      	movs	r3, #0
 8000604:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000606:	463b      	mov	r3, r7
 8000608:	4619      	mov	r1, r3
 800060a:	4803      	ldr	r0, [pc, #12]	; (8000618 <MX_GPIO_Init+0x50>)
 800060c:	f003 f9b7 	bl	800397e <LL_GPIO_Init>

}
 8000610:	bf00      	nop
 8000612:	3718      	adds	r7, #24
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	40020800 	.word	0x40020800

0800061c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800061c:	b480      	push	{r7}
 800061e:	b085      	sub	sp, #20
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	f003 0307 	and.w	r3, r3, #7
 800062a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800062c:	4b0c      	ldr	r3, [pc, #48]	; (8000660 <__NVIC_SetPriorityGrouping+0x44>)
 800062e:	68db      	ldr	r3, [r3, #12]
 8000630:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000632:	68ba      	ldr	r2, [r7, #8]
 8000634:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000638:	4013      	ands	r3, r2
 800063a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000640:	68bb      	ldr	r3, [r7, #8]
 8000642:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000644:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000648:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800064c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800064e:	4a04      	ldr	r2, [pc, #16]	; (8000660 <__NVIC_SetPriorityGrouping+0x44>)
 8000650:	68bb      	ldr	r3, [r7, #8]
 8000652:	60d3      	str	r3, [r2, #12]
}
 8000654:	bf00      	nop
 8000656:	3714      	adds	r7, #20
 8000658:	46bd      	mov	sp, r7
 800065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065e:	4770      	bx	lr
 8000660:	e000ed00 	.word	0xe000ed00

08000664 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8000664:	b480      	push	{r7}
 8000666:	b083      	sub	sp, #12
 8000668:	af00      	add	r7, sp, #0
 800066a:	4603      	mov	r3, r0
 800066c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800066e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000672:	2b00      	cmp	r3, #0
 8000674:	db0c      	blt.n	8000690 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000676:	79fb      	ldrb	r3, [r7, #7]
 8000678:	f003 021f 	and.w	r2, r3, #31
 800067c:	4907      	ldr	r1, [pc, #28]	; (800069c <__NVIC_ClearPendingIRQ+0x38>)
 800067e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000682:	095b      	lsrs	r3, r3, #5
 8000684:	2001      	movs	r0, #1
 8000686:	fa00 f202 	lsl.w	r2, r0, r2
 800068a:	3360      	adds	r3, #96	; 0x60
 800068c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000690:	bf00      	nop
 8000692:	370c      	adds	r7, #12
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr
 800069c:	e000e100 	.word	0xe000e100

080006a0 <LL_RCC_HSE_EnableBypass>:
  * @brief  Enable HSE external oscillator (HSE Bypass)
  * @rmtoll CR           HSEBYP        LL_RCC_HSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableBypass(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 80006a4:	4b05      	ldr	r3, [pc, #20]	; (80006bc <LL_RCC_HSE_EnableBypass+0x1c>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a04      	ldr	r2, [pc, #16]	; (80006bc <LL_RCC_HSE_EnableBypass+0x1c>)
 80006aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80006ae:	6013      	str	r3, [r2, #0]
}
 80006b0:	bf00      	nop
 80006b2:	46bd      	mov	sp, r7
 80006b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop
 80006bc:	40023800 	.word	0x40023800

080006c0 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80006c4:	4b05      	ldr	r3, [pc, #20]	; (80006dc <LL_RCC_HSE_Enable+0x1c>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a04      	ldr	r2, [pc, #16]	; (80006dc <LL_RCC_HSE_Enable+0x1c>)
 80006ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80006ce:	6013      	str	r3, [r2, #0]
}
 80006d0:	bf00      	nop
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	40023800 	.word	0x40023800

080006e0 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 80006e4:	4b07      	ldr	r3, [pc, #28]	; (8000704 <LL_RCC_HSE_IsReady+0x24>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80006f0:	bf0c      	ite	eq
 80006f2:	2301      	moveq	r3, #1
 80006f4:	2300      	movne	r3, #0
 80006f6:	b2db      	uxtb	r3, r3
}
 80006f8:	4618      	mov	r0, r3
 80006fa:	46bd      	mov	sp, r7
 80006fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop
 8000704:	40023800 	.word	0x40023800

08000708 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000708:	b480      	push	{r7}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000710:	4b06      	ldr	r3, [pc, #24]	; (800072c <LL_RCC_SetSysClkSource+0x24>)
 8000712:	689b      	ldr	r3, [r3, #8]
 8000714:	f023 0203 	bic.w	r2, r3, #3
 8000718:	4904      	ldr	r1, [pc, #16]	; (800072c <LL_RCC_SetSysClkSource+0x24>)
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	4313      	orrs	r3, r2
 800071e:	608b      	str	r3, [r1, #8]
}
 8000720:	bf00      	nop
 8000722:	370c      	adds	r7, #12
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr
 800072c:	40023800 	.word	0x40023800

08000730 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000734:	4b04      	ldr	r3, [pc, #16]	; (8000748 <LL_RCC_GetSysClkSource+0x18>)
 8000736:	689b      	ldr	r3, [r3, #8]
 8000738:	f003 030c 	and.w	r3, r3, #12
}
 800073c:	4618      	mov	r0, r3
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	40023800 	.word	0x40023800

0800074c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800074c:	b480      	push	{r7}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000754:	4b06      	ldr	r3, [pc, #24]	; (8000770 <LL_RCC_SetAHBPrescaler+0x24>)
 8000756:	689b      	ldr	r3, [r3, #8]
 8000758:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800075c:	4904      	ldr	r1, [pc, #16]	; (8000770 <LL_RCC_SetAHBPrescaler+0x24>)
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	4313      	orrs	r3, r2
 8000762:	608b      	str	r3, [r1, #8]
}
 8000764:	bf00      	nop
 8000766:	370c      	adds	r7, #12
 8000768:	46bd      	mov	sp, r7
 800076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076e:	4770      	bx	lr
 8000770:	40023800 	.word	0x40023800

08000774 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000774:	b480      	push	{r7}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800077c:	4b06      	ldr	r3, [pc, #24]	; (8000798 <LL_RCC_SetAPB1Prescaler+0x24>)
 800077e:	689b      	ldr	r3, [r3, #8]
 8000780:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000784:	4904      	ldr	r1, [pc, #16]	; (8000798 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	4313      	orrs	r3, r2
 800078a:	608b      	str	r3, [r1, #8]
}
 800078c:	bf00      	nop
 800078e:	370c      	adds	r7, #12
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr
 8000798:	40023800 	.word	0x40023800

0800079c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800079c:	b480      	push	{r7}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80007a4:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <LL_RCC_SetAPB2Prescaler+0x24>)
 80007a6:	689b      	ldr	r3, [r3, #8]
 80007a8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80007ac:	4904      	ldr	r1, [pc, #16]	; (80007c0 <LL_RCC_SetAPB2Prescaler+0x24>)
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	4313      	orrs	r3, r2
 80007b2:	608b      	str	r3, [r1, #8]
}
 80007b4:	bf00      	nop
 80007b6:	370c      	adds	r7, #12
 80007b8:	46bd      	mov	sp, r7
 80007ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007be:	4770      	bx	lr
 80007c0:	40023800 	.word	0x40023800

080007c4 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80007c8:	4b05      	ldr	r3, [pc, #20]	; (80007e0 <LL_RCC_PLL_Enable+0x1c>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4a04      	ldr	r2, [pc, #16]	; (80007e0 <LL_RCC_PLL_Enable+0x1c>)
 80007ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80007d2:	6013      	str	r3, [r2, #0]
}
 80007d4:	bf00      	nop
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	40023800 	.word	0x40023800

080007e4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80007e8:	4b07      	ldr	r3, [pc, #28]	; (8000808 <LL_RCC_PLL_IsReady+0x24>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80007f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80007f4:	bf0c      	ite	eq
 80007f6:	2301      	moveq	r3, #1
 80007f8:	2300      	movne	r3, #0
 80007fa:	b2db      	uxtb	r3, r3
}
 80007fc:	4618      	mov	r0, r3
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	40023800 	.word	0x40023800

0800080c <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 800080c:	b480      	push	{r7}
 800080e:	b085      	sub	sp, #20
 8000810:	af00      	add	r7, sp, #0
 8000812:	60f8      	str	r0, [r7, #12]
 8000814:	60b9      	str	r1, [r7, #8]
 8000816:	607a      	str	r2, [r7, #4]
 8000818:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 800081a:	4b0d      	ldr	r3, [pc, #52]	; (8000850 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800081c:	685a      	ldr	r2, [r3, #4]
 800081e:	4b0d      	ldr	r3, [pc, #52]	; (8000854 <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 8000820:	4013      	ands	r3, r2
 8000822:	68f9      	ldr	r1, [r7, #12]
 8000824:	68ba      	ldr	r2, [r7, #8]
 8000826:	4311      	orrs	r1, r2
 8000828:	687a      	ldr	r2, [r7, #4]
 800082a:	0192      	lsls	r2, r2, #6
 800082c:	430a      	orrs	r2, r1
 800082e:	4908      	ldr	r1, [pc, #32]	; (8000850 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000830:	4313      	orrs	r3, r2
 8000832:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8000834:	4b06      	ldr	r3, [pc, #24]	; (8000850 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000836:	685b      	ldr	r3, [r3, #4]
 8000838:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800083c:	4904      	ldr	r1, [pc, #16]	; (8000850 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	4313      	orrs	r3, r2
 8000842:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 8000844:	bf00      	nop
 8000846:	3714      	adds	r7, #20
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr
 8000850:	40023800 	.word	0x40023800
 8000854:	ffbf8000 	.word	0xffbf8000

08000858 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000858:	b480      	push	{r7}
 800085a:	b085      	sub	sp, #20
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000860:	4b08      	ldr	r3, [pc, #32]	; (8000884 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000862:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000864:	4907      	ldr	r1, [pc, #28]	; (8000884 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	4313      	orrs	r3, r2
 800086a:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800086c:	4b05      	ldr	r3, [pc, #20]	; (8000884 <LL_APB1_GRP1_EnableClock+0x2c>)
 800086e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	4013      	ands	r3, r2
 8000874:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000876:	68fb      	ldr	r3, [r7, #12]
}
 8000878:	bf00      	nop
 800087a:	3714      	adds	r7, #20
 800087c:	46bd      	mov	sp, r7
 800087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000882:	4770      	bx	lr
 8000884:	40023800 	.word	0x40023800

08000888 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000888:	b480      	push	{r7}
 800088a:	b085      	sub	sp, #20
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000890:	4b08      	ldr	r3, [pc, #32]	; (80008b4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000892:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000894:	4907      	ldr	r1, [pc, #28]	; (80008b4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	4313      	orrs	r3, r2
 800089a:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800089c:	4b05      	ldr	r3, [pc, #20]	; (80008b4 <LL_APB2_GRP1_EnableClock+0x2c>)
 800089e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	4013      	ands	r3, r2
 80008a4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008a6:	68fb      	ldr	r3, [r7, #12]
}
 80008a8:	bf00      	nop
 80008aa:	3714      	adds	r7, #20
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr
 80008b4:	40023800 	.word	0x40023800

080008b8 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80008c0:	4b06      	ldr	r3, [pc, #24]	; (80008dc <LL_FLASH_SetLatency+0x24>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	f023 0207 	bic.w	r2, r3, #7
 80008c8:	4904      	ldr	r1, [pc, #16]	; (80008dc <LL_FLASH_SetLatency+0x24>)
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	4313      	orrs	r3, r2
 80008ce:	600b      	str	r3, [r1, #0]
}
 80008d0:	bf00      	nop
 80008d2:	370c      	adds	r7, #12
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr
 80008dc:	40023c00 	.word	0x40023c00

080008e0 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80008e4:	4b04      	ldr	r3, [pc, #16]	; (80008f8 <LL_FLASH_GetLatency+0x18>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	f003 0307 	and.w	r3, r3, #7
}
 80008ec:	4618      	mov	r0, r3
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	40023c00 	.word	0x40023c00

080008fc <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8000904:	4b06      	ldr	r3, [pc, #24]	; (8000920 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800090c:	4904      	ldr	r1, [pc, #16]	; (8000920 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	4313      	orrs	r3, r2
 8000912:	600b      	str	r3, [r1, #0]
}
 8000914:	bf00      	nop
 8000916:	370c      	adds	r7, #12
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr
 8000920:	40007000 	.word	0x40007000

08000924 <LL_DMA_IsActiveFlag_HT0>:
  * @rmtoll LISR  HTIF0    LL_DMA_IsActiveFlag_HT0
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT0(DMA_TypeDef *DMAx)
{
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->LISR ,DMA_LISR_HTIF0)==(DMA_LISR_HTIF0));
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	f003 0310 	and.w	r3, r3, #16
 8000934:	2b10      	cmp	r3, #16
 8000936:	bf0c      	ite	eq
 8000938:	2301      	moveq	r3, #1
 800093a:	2300      	movne	r3, #0
 800093c:	b2db      	uxtb	r3, r3
}
 800093e:	4618      	mov	r0, r3
 8000940:	370c      	adds	r7, #12
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr

0800094a <LL_DMA_IsActiveFlag_HT1>:
  * @rmtoll LISR  HTIF1    LL_DMA_IsActiveFlag_HT1
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT1(DMA_TypeDef *DMAx)
{
 800094a:	b480      	push	{r7}
 800094c:	b083      	sub	sp, #12
 800094e:	af00      	add	r7, sp, #0
 8000950:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->LISR ,DMA_LISR_HTIF1)==(DMA_LISR_HTIF1));
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800095a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800095e:	bf0c      	ite	eq
 8000960:	2301      	moveq	r3, #1
 8000962:	2300      	movne	r3, #0
 8000964:	b2db      	uxtb	r3, r3
}
 8000966:	4618      	mov	r0, r3
 8000968:	370c      	adds	r7, #12
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr

08000972 <LL_DMA_IsActiveFlag_TC0>:
  * @rmtoll LISR  TCIF0    LL_DMA_IsActiveFlag_TC0
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC0(DMA_TypeDef *DMAx)
{
 8000972:	b480      	push	{r7}
 8000974:	b083      	sub	sp, #12
 8000976:	af00      	add	r7, sp, #0
 8000978:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->LISR ,DMA_LISR_TCIF0)==(DMA_LISR_TCIF0));
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	f003 0320 	and.w	r3, r3, #32
 8000982:	2b20      	cmp	r3, #32
 8000984:	bf0c      	ite	eq
 8000986:	2301      	moveq	r3, #1
 8000988:	2300      	movne	r3, #0
 800098a:	b2db      	uxtb	r3, r3
}
 800098c:	4618      	mov	r0, r3
 800098e:	370c      	adds	r7, #12
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr

08000998 <LL_DMA_IsActiveFlag_TC1>:
  * @rmtoll LISR  TCIF1    LL_DMA_IsActiveFlag_TC1
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC1(DMA_TypeDef *DMAx)
{
 8000998:	b480      	push	{r7}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->LISR ,DMA_LISR_TCIF1)==(DMA_LISR_TCIF1));
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80009a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80009ac:	bf0c      	ite	eq
 80009ae:	2301      	moveq	r3, #1
 80009b0:	2300      	movne	r3, #0
 80009b2:	b2db      	uxtb	r3, r3
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	370c      	adds	r7, #12
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr

080009c0 <LL_DMA_IsActiveFlag_TE0>:
  * @rmtoll LISR  TEIF0    LL_DMA_IsActiveFlag_TE0
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TE0(DMA_TypeDef *DMAx)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->LISR ,DMA_LISR_TEIF0)==(DMA_LISR_TEIF0));
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	f003 0308 	and.w	r3, r3, #8
 80009d0:	2b08      	cmp	r3, #8
 80009d2:	bf0c      	ite	eq
 80009d4:	2301      	moveq	r3, #1
 80009d6:	2300      	movne	r3, #0
 80009d8:	b2db      	uxtb	r3, r3
}
 80009da:	4618      	mov	r0, r3
 80009dc:	370c      	adds	r7, #12
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr

080009e6 <LL_DMA_IsActiveFlag_TE1>:
  * @rmtoll LISR  TEIF1    LL_DMA_IsActiveFlag_TE1
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TE1(DMA_TypeDef *DMAx)
{
 80009e6:	b480      	push	{r7}
 80009e8:	b083      	sub	sp, #12
 80009ea:	af00      	add	r7, sp, #0
 80009ec:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->LISR ,DMA_LISR_TEIF1)==(DMA_LISR_TEIF1));
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80009f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80009fa:	bf0c      	ite	eq
 80009fc:	2301      	moveq	r3, #1
 80009fe:	2300      	movne	r3, #0
 8000a00:	b2db      	uxtb	r3, r3
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	370c      	adds	r7, #12
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr

08000a0e <LL_DMA_IsActiveFlag_DME0>:
  * @rmtoll LISR  DMEIF0    LL_DMA_IsActiveFlag_DME0
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_DME0(DMA_TypeDef *DMAx)
{
 8000a0e:	b480      	push	{r7}
 8000a10:	b083      	sub	sp, #12
 8000a12:	af00      	add	r7, sp, #0
 8000a14:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->LISR ,DMA_LISR_DMEIF0)==(DMA_LISR_DMEIF0));
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	f003 0304 	and.w	r3, r3, #4
 8000a1e:	2b04      	cmp	r3, #4
 8000a20:	bf0c      	ite	eq
 8000a22:	2301      	moveq	r3, #1
 8000a24:	2300      	movne	r3, #0
 8000a26:	b2db      	uxtb	r3, r3
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	370c      	adds	r7, #12
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr

08000a34 <LL_DMA_IsActiveFlag_FE0>:
  * @rmtoll LISR  FEIF0    LL_DMA_IsActiveFlag_FE0
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_FE0(DMA_TypeDef *DMAx)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->LISR ,DMA_LISR_FEIF0)==(DMA_LISR_FEIF0));
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	f003 0301 	and.w	r3, r3, #1
 8000a44:	2b01      	cmp	r3, #1
 8000a46:	bf0c      	ite	eq
 8000a48:	2301      	moveq	r3, #1
 8000a4a:	2300      	movne	r3, #0
 8000a4c:	b2db      	uxtb	r3, r3
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	370c      	adds	r7, #12
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr

08000a5a <LL_DMA_IsActiveFlag_FE1>:
  * @rmtoll LISR  FEIF1    LL_DMA_IsActiveFlag_FE1
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_FE1(DMA_TypeDef *DMAx)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	b083      	sub	sp, #12
 8000a5e:	af00      	add	r7, sp, #0
 8000a60:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->LISR ,DMA_LISR_FEIF1)==(DMA_LISR_FEIF1));
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a6a:	2b40      	cmp	r3, #64	; 0x40
 8000a6c:	bf0c      	ite	eq
 8000a6e:	2301      	moveq	r3, #1
 8000a70:	2300      	movne	r3, #0
 8000a72:	b2db      	uxtb	r3, r3
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	370c      	adds	r7, #12
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr

08000a80 <LL_DMA_ClearFlag_HT0>:
  * @rmtoll LIFCR  CHTIF0    LL_DMA_ClearFlag_HT0
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_HT0(DMA_TypeDef *DMAx)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CHTIF0);
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	2210      	movs	r2, #16
 8000a8c:	609a      	str	r2, [r3, #8]
}
 8000a8e:	bf00      	nop
 8000a90:	370c      	adds	r7, #12
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr

08000a9a <LL_DMA_ClearFlag_HT1>:
  * @rmtoll LIFCR  CHTIF1    LL_DMA_ClearFlag_HT1
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_HT1(DMA_TypeDef *DMAx)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	b083      	sub	sp, #12
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CHTIF1);
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000aa8:	609a      	str	r2, [r3, #8]
}
 8000aaa:	bf00      	nop
 8000aac:	370c      	adds	r7, #12
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr

08000ab6 <LL_DMA_ClearFlag_TC0>:
  * @rmtoll LIFCR  CTCIF0    LL_DMA_ClearFlag_TC0
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC0(DMA_TypeDef *DMAx)
{
 8000ab6:	b480      	push	{r7}
 8000ab8:	b083      	sub	sp, #12
 8000aba:	af00      	add	r7, sp, #0
 8000abc:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CTCIF0);
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	2220      	movs	r2, #32
 8000ac2:	609a      	str	r2, [r3, #8]
}
 8000ac4:	bf00      	nop
 8000ac6:	370c      	adds	r7, #12
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr

08000ad0 <LL_DMA_ClearFlag_TC1>:
  * @rmtoll LIFCR  CTCIF1    LL_DMA_ClearFlag_TC1
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC1(DMA_TypeDef *DMAx)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CTCIF1);
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ade:	609a      	str	r2, [r3, #8]
}
 8000ae0:	bf00      	nop
 8000ae2:	370c      	adds	r7, #12
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr

08000aec <LL_DMA_ClearFlag_TE0>:
  * @rmtoll LIFCR  CTEIF0    LL_DMA_ClearFlag_TE0
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TE0(DMA_TypeDef *DMAx)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CTEIF0);
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	2208      	movs	r2, #8
 8000af8:	609a      	str	r2, [r3, #8]
}
 8000afa:	bf00      	nop
 8000afc:	370c      	adds	r7, #12
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr

08000b06 <LL_DMA_ClearFlag_TE1>:
  * @rmtoll LIFCR  CTEIF1    LL_DMA_ClearFlag_TE1
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TE1(DMA_TypeDef *DMAx)
{
 8000b06:	b480      	push	{r7}
 8000b08:	b083      	sub	sp, #12
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CTEIF1);
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b14:	609a      	str	r2, [r3, #8]
}
 8000b16:	bf00      	nop
 8000b18:	370c      	adds	r7, #12
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr

08000b22 <LL_DMA_ClearFlag_DME0>:
  * @rmtoll LIFCR  CDMEIF0    LL_DMA_ClearFlag_DME0
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_DME0(DMA_TypeDef *DMAx)
{
 8000b22:	b480      	push	{r7}
 8000b24:	b083      	sub	sp, #12
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CDMEIF0);
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	2204      	movs	r2, #4
 8000b2e:	609a      	str	r2, [r3, #8]
}
 8000b30:	bf00      	nop
 8000b32:	370c      	adds	r7, #12
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr

08000b3c <LL_DMA_ClearFlag_FE0>:
  * @rmtoll LIFCR  CFEIF0    LL_DMA_ClearFlag_FE0
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_FE0(DMA_TypeDef *DMAx)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CFEIF0);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	2201      	movs	r2, #1
 8000b48:	609a      	str	r2, [r3, #8]
}
 8000b4a:	bf00      	nop
 8000b4c:	370c      	adds	r7, #12
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr

08000b56 <LL_DMA_ClearFlag_FE1>:
  * @rmtoll LIFCR  CFEIF1    LL_DMA_ClearFlag_FE1
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_FE1(DMA_TypeDef *DMAx)
{
 8000b56:	b480      	push	{r7}
 8000b58:	b083      	sub	sp, #12
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CFEIF1);
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	2240      	movs	r2, #64	; 0x40
 8000b62:	609a      	str	r2, [r3, #8]
}
 8000b64:	bf00      	nop
 8000b66:	370c      	adds	r7, #12
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr

08000b70 <LL_USART_IsActiveFlag_PE>:
  * @rmtoll SR           PE            LL_USART_IsActiveFlag_PE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_PE(USART_TypeDef *USARTx)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_PE) == (USART_SR_PE));
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	f003 0301 	and.w	r3, r3, #1
 8000b80:	2b01      	cmp	r3, #1
 8000b82:	bf0c      	ite	eq
 8000b84:	2301      	moveq	r3, #1
 8000b86:	2300      	movne	r3, #0
 8000b88:	b2db      	uxtb	r3, r3
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	370c      	adds	r7, #12
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr

08000b96 <LL_USART_IsActiveFlag_FE>:
  * @rmtoll SR           FE            LL_USART_IsActiveFlag_FE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_FE(USART_TypeDef *USARTx)
{
 8000b96:	b480      	push	{r7}
 8000b98:	b083      	sub	sp, #12
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_FE) == (USART_SR_FE));
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	f003 0302 	and.w	r3, r3, #2
 8000ba6:	2b02      	cmp	r3, #2
 8000ba8:	bf0c      	ite	eq
 8000baa:	2301      	moveq	r3, #1
 8000bac:	2300      	movne	r3, #0
 8000bae:	b2db      	uxtb	r3, r3
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	370c      	adds	r7, #12
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr

08000bbc <LL_USART_IsActiveFlag_NE>:
  * @rmtoll SR           NF            LL_USART_IsActiveFlag_NE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_NE(USART_TypeDef *USARTx)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_NE) == (USART_SR_NE));
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	f003 0304 	and.w	r3, r3, #4
 8000bcc:	2b04      	cmp	r3, #4
 8000bce:	bf0c      	ite	eq
 8000bd0:	2301      	moveq	r3, #1
 8000bd2:	2300      	movne	r3, #0
 8000bd4:	b2db      	uxtb	r3, r3
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	370c      	adds	r7, #12
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr

08000be2 <LL_USART_IsActiveFlag_ORE>:
  * @rmtoll SR           ORE           LL_USART_IsActiveFlag_ORE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_ORE(USART_TypeDef *USARTx)
{
 8000be2:	b480      	push	{r7}
 8000be4:	b083      	sub	sp, #12
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	f003 0308 	and.w	r3, r3, #8
 8000bf2:	2b08      	cmp	r3, #8
 8000bf4:	bf0c      	ite	eq
 8000bf6:	2301      	moveq	r3, #1
 8000bf8:	2300      	movne	r3, #0
 8000bfa:	b2db      	uxtb	r3, r3
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	370c      	adds	r7, #12
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr

08000c08 <LL_USART_IsActiveFlag_IDLE>:
  * @rmtoll SR           IDLE          LL_USART_IsActiveFlag_IDLE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_IDLE(USART_TypeDef *USARTx)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_IDLE) == (USART_SR_IDLE));
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f003 0310 	and.w	r3, r3, #16
 8000c18:	2b10      	cmp	r3, #16
 8000c1a:	bf0c      	ite	eq
 8000c1c:	2301      	moveq	r3, #1
 8000c1e:	2300      	movne	r3, #0
 8000c20:	b2db      	uxtb	r3, r3
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	370c      	adds	r7, #12
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr

08000c2e <LL_USART_ClearFlag_PE>:
  * @rmtoll SR           PE            LL_USART_ClearFlag_PE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_PE(USART_TypeDef *USARTx)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	b085      	sub	sp, #20
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8000c3c:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8000c44:	68fb      	ldr	r3, [r7, #12]
}
 8000c46:	bf00      	nop
 8000c48:	3714      	adds	r7, #20
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr

08000c52 <LL_USART_ClearFlag_FE>:
  * @rmtoll SR           FE            LL_USART_ClearFlag_FE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_FE(USART_TypeDef *USARTx)
{
 8000c52:	b480      	push	{r7}
 8000c54:	b085      	sub	sp, #20
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8000c60:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	685b      	ldr	r3, [r3, #4]
 8000c66:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8000c68:	68fb      	ldr	r3, [r7, #12]
}
 8000c6a:	bf00      	nop
 8000c6c:	3714      	adds	r7, #20
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr

08000c76 <LL_USART_ClearFlag_NE>:
  * @rmtoll SR           NF            LL_USART_ClearFlag_NE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_NE(USART_TypeDef *USARTx)
{
 8000c76:	b480      	push	{r7}
 8000c78:	b085      	sub	sp, #20
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8000c84:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8000c8c:	68fb      	ldr	r3, [r7, #12]
}
 8000c8e:	bf00      	nop
 8000c90:	3714      	adds	r7, #20
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr

08000c9a <LL_USART_ClearFlag_ORE>:
  * @rmtoll SR           ORE           LL_USART_ClearFlag_ORE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
{
 8000c9a:	b480      	push	{r7}
 8000c9c:	b085      	sub	sp, #20
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8000ca8:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8000cb0:	68fb      	ldr	r3, [r7, #12]
}
 8000cb2:	bf00      	nop
 8000cb4:	3714      	adds	r7, #20
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr

08000cbe <LL_USART_ClearFlag_IDLE>:
  * @rmtoll SR           IDLE          LL_USART_ClearFlag_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_IDLE(USART_TypeDef *USARTx)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	b085      	sub	sp, #20
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8000ccc:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8000cd4:	68fb      	ldr	r3, [r7, #12]
}
 8000cd6:	bf00      	nop
 8000cd8:	3714      	adds	r7, #20
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr

08000ce2 <_ZNSt11char_traitsIcE6lengthEPKc>:
#endif
	return __builtin_memcmp(__s1, __s2, __n);
      }

      static _GLIBCXX17_CONSTEXPR size_t
      length(const char_type* __s)
 8000ce2:	b580      	push	{r7, lr}
 8000ce4:	b084      	sub	sp, #16
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	6078      	str	r0, [r7, #4]
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	60fb      	str	r3, [r7, #12]
      return __builtin_is_constant_evaluated();
 8000cee:	2300      	movs	r3, #0
      {
#if __cplusplus >= 201703L
	if (__constant_string_p(__s))
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d004      	beq.n	8000cfe <_ZNSt11char_traitsIcE6lengthEPKc+0x1c>
	  return __gnu_cxx::char_traits<char_type>::length(__s);
 8000cf4:	6878      	ldr	r0, [r7, #4]
 8000cf6:	f000 fb70 	bl	80013da <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	e004      	b.n	8000d08 <_ZNSt11char_traitsIcE6lengthEPKc+0x26>
#endif
	return __builtin_strlen(__s);
 8000cfe:	6878      	ldr	r0, [r7, #4]
 8000d00:	f7ff fab6 	bl	8000270 <strlen>
 8000d04:	4603      	mov	r3, r0
 8000d06:	bf00      	nop
      }
 8000d08:	4618      	mov	r0, r3
 8000d0a:	3710      	adds	r7, #16
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <_ZNSt7__cxx119to_stringEm>:
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, 4 * sizeof(long),
					   "%ld", __val); }

  inline string
  to_string(unsigned long __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf,
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af02      	add	r7, sp, #8
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	6039      	str	r1, [r7, #0]
					   4 * sizeof(unsigned long),
					   "%lu", __val); }
 8000d1a:	6878      	ldr	r0, [r7, #4]
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	9300      	str	r3, [sp, #0]
 8000d20:	4b04      	ldr	r3, [pc, #16]	; (8000d34 <_ZNSt7__cxx119to_stringEm+0x24>)
 8000d22:	2210      	movs	r2, #16
 8000d24:	4904      	ldr	r1, [pc, #16]	; (8000d38 <_ZNSt7__cxx119to_stringEm+0x28>)
 8000d26:	f000 fb78 	bl	800141a <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>
 8000d2a:	6878      	ldr	r0, [r7, #4]
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	08004ea4 	.word	0x08004ea4
 8000d38:	08004819 	.word	0x08004819

08000d3c <LL_ADC_IsActiveFlag_EOCS>:
  * @rmtoll SR       EOC            LL_ADC_IsActiveFlag_EOCS
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOCS(ADC_TypeDef *ADCx)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_EOCS) == (LL_ADC_FLAG_EOCS));
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f003 0302 	and.w	r3, r3, #2
 8000d4c:	2b02      	cmp	r3, #2
 8000d4e:	bf0c      	ite	eq
 8000d50:	2301      	moveq	r3, #1
 8000d52:	2300      	movne	r3, #0
 8000d54:	b2db      	uxtb	r3, r3
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	370c      	adds	r7, #12
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr

08000d62 <LL_ADC_IsActiveFlag_OVR>:
  * @rmtoll SR       OVR            LL_ADC_IsActiveFlag_OVR
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_OVR(ADC_TypeDef *ADCx)
{
 8000d62:	b480      	push	{r7}
 8000d64:	b083      	sub	sp, #12
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_OVR) == (LL_ADC_FLAG_OVR));
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f003 0320 	and.w	r3, r3, #32
 8000d72:	2b20      	cmp	r3, #32
 8000d74:	bf0c      	ite	eq
 8000d76:	2301      	moveq	r3, #1
 8000d78:	2300      	movne	r3, #0
 8000d7a:	b2db      	uxtb	r3, r3
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	370c      	adds	r7, #12
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr

08000d88 <LL_ADC_ClearFlag_EOCS>:
  * @rmtoll SR       EOC            LL_ADC_ClearFlag_EOCS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_EOCS(ADC_TypeDef *ADCx)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	f06f 0202 	mvn.w	r2, #2
 8000d96:	601a      	str	r2, [r3, #0]
}
 8000d98:	bf00      	nop
 8000d9a:	370c      	adds	r7, #12
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr

08000da4 <_Z5Rev16t>:
	return lobyte << 8 | hibyte;
}


inline uint16_t Rev16(uint16_t a)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	4603      	mov	r3, r0
 8000dac:	80fb      	strh	r3, [r7, #6]
  asm ("rev16 %1,%0"
          : "=r" (a)
          : "r" (a));
 8000dae:	88fb      	ldrh	r3, [r7, #6]
 8000db0:	ba5b      	rev16	r3, r3
 8000db2:	80fb      	strh	r3, [r7, #6]
  return a;
 8000db4:	88fb      	ldrh	r3, [r7, #6]
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
	...

08000dc4 <main>:
 * @brief  The application entry point.
 * @retval int
 */
const char *myName = "TranHoangAnh";
int main()
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000dc8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000dcc:	f7ff fd5c 	bl	8000888 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000dd0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000dd4:	f7ff fd40 	bl	8000858 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000dd8:	2007      	movs	r0, #7
 8000dda:	f7ff fc1f 	bl	800061c <__NVIC_SetPriorityGrouping>

  SystemClock_Config();
 8000dde:	f000 fa43 	bl	8001268 <_Z18SystemClock_Configv>
  MX_GPIO_Init();
 8000de2:	f7ff fbf1 	bl	80005c8 <MX_GPIO_Init>
  
  UHAL_USART6::developing::fristRun(reinterpret_cast<uintptr_t>(&usartBuffer), 8);
 8000de6:	4b0f      	ldr	r3, [pc, #60]	; (8000e24 <main+0x60>)
 8000de8:	2108      	movs	r1, #8
 8000dea:	4618      	mov	r0, r3
 8000dec:	f002 fb26 	bl	800343c <_ZN11UHAL_USART610developing8fristRunEjt>

 //  UHAL_TIM5_PWM::developing::firstRun();

  UHAL_DMA2::DMA_ADC1::initialize2();
 8000df0:	f001 fc24 	bl	800263c <_ZN9UHAL_DMA28DMA_ADC111initialize2Ev>
  UHAL_ADC::initialize2();
 8000df4:	f001 f95c 	bl	80020b0 <_ZN8UHAL_ADC11initialize2Ev>
  UHAL_DMA2::DMA_ADC1::enableInterrupt();
 8000df8:	f001 fc64 	bl	80026c4 <_ZN9UHAL_DMA28DMA_ADC115enableInterruptEv>
  UHAL_ADC::enableInterrupt();
 8000dfc:	f001 f930 	bl	8002060 <_ZN8UHAL_ADC15enableInterruptEv>
  UHAL_DMA2::DMA_ADC1::setBufferAddress(reinterpret_cast<uintptr_t>(&adcBuffer));
 8000e00:	4b09      	ldr	r3, [pc, #36]	; (8000e28 <main+0x64>)
 8000e02:	4618      	mov	r0, r3
 8000e04:	f001 fc0a 	bl	800261c <_ZN9UHAL_DMA28DMA_ADC116setBufferAddressEj>
  UHAL_DMA2::DMA_ADC1::setPeripheralADDress(reinterpret_cast<uintptr_t>(&ADC1->DR));
 8000e08:	4808      	ldr	r0, [pc, #32]	; (8000e2c <main+0x68>)
 8000e0a:	f001 fc4b 	bl	80026a4 <_ZN9UHAL_DMA28DMA_ADC120setPeripheralADDressEj>
  UHAL_DMA2::DMA_ADC1::setNumberOfDataTransfer(2);
 8000e0e:	2002      	movs	r0, #2
 8000e10:	f001 fc36 	bl	8002680 <_ZN9UHAL_DMA28DMA_ADC123setNumberOfDataTransferEt>
  UHAL_DMA2::DMA_ADC1::enable();
 8000e14:	f001 fc2a 	bl	800266c <_ZN9UHAL_DMA28DMA_ADC16enableEv>
  UHAL_ADC::enable();
 8000e18:	f001 f90c 	bl	8002034 <_ZN8UHAL_ADC6enableEv>
  UHAL_ADC::startConversion();
 8000e1c:	f001 f93e 	bl	800209c <_ZN8UHAL_ADC15startConversionEv>
  while (true)
 8000e20:	e7fe      	b.n	8000e20 <main+0x5c>
 8000e22:	bf00      	nop
 8000e24:	200000b4 	.word	0x200000b4
 8000e28:	200000c8 	.word	0x200000c8
 8000e2c:	4001204c 	.word	0x4001204c

08000e30 <USART6_IRQHandler>:
}

extern "C"
{
  void USART6_IRQHandler(void)
  {
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b086      	sub	sp, #24
 8000e34:	af00      	add	r7, sp, #0
    using namespace UHAL_USART6;
    using namespace UHAL_USART6::flag_IT;
    usartInterrupt++;
 8000e36:	4b5b      	ldr	r3, [pc, #364]	; (8000fa4 <USART6_IRQHandler+0x174>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	3301      	adds	r3, #1
 8000e3c:	4a59      	ldr	r2, [pc, #356]	; (8000fa4 <USART6_IRQHandler+0x174>)
 8000e3e:	6013      	str	r3, [r2, #0]
		}
		namespace IDLE /// Idle Line Detected
		{
			__SFI auto isSet()
			{
				return LL_USART_IsActiveFlag_IDLE(thisInstance);
 8000e40:	4859      	ldr	r0, [pc, #356]	; (8000fa8 <USART6_IRQHandler+0x178>)
 8000e42:	f7ff fee1 	bl	8000c08 <LL_USART_IsActiveFlag_IDLE>
 8000e46:	4603      	mov	r3, r0
 8000e48:	bf00      	nop
    if(IDLE::isSet())
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	bf14      	ite	ne
 8000e4e:	2301      	movne	r3, #1
 8000e50:	2300      	moveq	r3, #0
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d027      	beq.n	8000ea8 <USART6_IRQHandler+0x78>
    {
    	UHAL_DMA2::DMA_USART6::disable();
 8000e58:	f001 fca8 	bl	80027ac <_ZN9UHAL_DMA210DMA_USART67disableEv>
        waitUntil(UHAL_DMA2::DMA_USART6::isDisabled());
 8000e5c:	f001 fcb0 	bl	80027c0 <_ZN9UHAL_DMA210DMA_USART610isDisabledEv>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	bf0c      	ite	eq
 8000e66:	2301      	moveq	r3, #1
 8000e68:	2300      	movne	r3, #0
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d000      	beq.n	8000e72 <USART6_IRQHandler+0x42>
 8000e70:	e7f4      	b.n	8000e5c <USART6_IRQHandler+0x2c>
    	UHAL_DMA2::DMA_USART6::setNumberOfDataTransfer(8);
 8000e72:	2008      	movs	r0, #8
 8000e74:	f001 fc60 	bl	8002738 <_ZN9UHAL_DMA210DMA_USART623setNumberOfDataTransferEt>
    	UHAL_DMA2::DMA_USART6::enable();
 8000e78:	f001 fc54 	bl	8002724 <_ZN9UHAL_DMA210DMA_USART66enableEv>
    	usartIdel++;
 8000e7c:	4b4b      	ldr	r3, [pc, #300]	; (8000fac <USART6_IRQHandler+0x17c>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	3301      	adds	r3, #1
 8000e82:	4a4a      	ldr	r2, [pc, #296]	; (8000fac <USART6_IRQHandler+0x17c>)
 8000e84:	6013      	str	r3, [r2, #0]
 8000e86:	4848      	ldr	r0, [pc, #288]	; (8000fa8 <USART6_IRQHandler+0x178>)
 8000e88:	f7ff febe 	bl	8000c08 <LL_USART_IsActiveFlag_IDLE>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	bf00      	nop
			}
			__SFI auto clear()
			{
				if constexpr (systemDebug == debug_T::debugOn)
				{
					auto posAssert = isSet();
 8000e90:	617b      	str	r3, [r7, #20]
					assert_param(posAssert);
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d103      	bne.n	8000ea0 <USART6_IRQHandler+0x70>
 8000e98:	214f      	movs	r1, #79	; 0x4f
 8000e9a:	4845      	ldr	r0, [pc, #276]	; (8000fb0 <USART6_IRQHandler+0x180>)
 8000e9c:	f000 fa3e 	bl	800131c <assert_failed>
				}
				LL_USART_ClearFlag_IDLE(thisInstance);
 8000ea0:	4841      	ldr	r0, [pc, #260]	; (8000fa8 <USART6_IRQHandler+0x178>)
 8000ea2:	f7ff ff0c 	bl	8000cbe <LL_USART_ClearFlag_IDLE>
			}
 8000ea6:	bf00      	nop
		}
		namespace PE /// Parity error detected
		{
			__SFI auto isSet()
			{
				return LL_USART_IsActiveFlag_PE(thisInstance);
 8000ea8:	483f      	ldr	r0, [pc, #252]	; (8000fa8 <USART6_IRQHandler+0x178>)
 8000eaa:	f7ff fe61 	bl	8000b70 <LL_USART_IsActiveFlag_PE>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	bf00      	nop
    	IDLE::clear();
    }
    if(PE::isSet() || NF::isSet()||FE::isSet()||ORE::isSet())
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d114      	bne.n	8000ee0 <USART6_IRQHandler+0xb0>
		}
		namespace NF /// Noise flag
		{
			__SFI auto isSet()
			{
				return LL_USART_IsActiveFlag_NE(thisInstance);
 8000eb6:	483c      	ldr	r0, [pc, #240]	; (8000fa8 <USART6_IRQHandler+0x178>)
 8000eb8:	f7ff fe80 	bl	8000bbc <LL_USART_IsActiveFlag_NE>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	bf00      	nop
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d10d      	bne.n	8000ee0 <USART6_IRQHandler+0xb0>
		}
		namespace FE /// Framing error
		{
			__SFI auto isSet()
			{
				return LL_USART_IsActiveFlag_FE(thisInstance);
 8000ec4:	4838      	ldr	r0, [pc, #224]	; (8000fa8 <USART6_IRQHandler+0x178>)
 8000ec6:	f7ff fe66 	bl	8000b96 <LL_USART_IsActiveFlag_FE>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	bf00      	nop
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d106      	bne.n	8000ee0 <USART6_IRQHandler+0xb0>
		}
		namespace ORE /// Overrun error detected
		{
			__SFI auto isSet()
			{
				return LL_USART_IsActiveFlag_ORE(thisInstance);
 8000ed2:	4835      	ldr	r0, [pc, #212]	; (8000fa8 <USART6_IRQHandler+0x178>)
 8000ed4:	f7ff fe85 	bl	8000be2 <LL_USART_IsActiveFlag_ORE>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	bf00      	nop
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <USART6_IRQHandler+0xb4>
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	e000      	b.n	8000ee6 <USART6_IRQHandler+0xb6>
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d055      	beq.n	8000f96 <USART6_IRQHandler+0x166>
    {
    	usartErro++;
 8000eea:	4b32      	ldr	r3, [pc, #200]	; (8000fb4 <USART6_IRQHandler+0x184>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	3301      	adds	r3, #1
 8000ef0:	4a30      	ldr	r2, [pc, #192]	; (8000fb4 <USART6_IRQHandler+0x184>)
 8000ef2:	6013      	str	r3, [r2, #0]
    	UHAL_DMA2::DMA_USART6::disable();
 8000ef4:	f001 fc5a 	bl	80027ac <_ZN9UHAL_DMA210DMA_USART67disableEv>
    	waitUntil(UHAL_DMA2::DMA_USART6::isDisabled());
 8000ef8:	f001 fc62 	bl	80027c0 <_ZN9UHAL_DMA210DMA_USART610isDisabledEv>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	bf0c      	ite	eq
 8000f02:	2301      	moveq	r3, #1
 8000f04:	2300      	movne	r3, #0
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d000      	beq.n	8000f0e <USART6_IRQHandler+0xde>
 8000f0c:	e7f4      	b.n	8000ef8 <USART6_IRQHandler+0xc8>
				return LL_USART_IsActiveFlag_PE(thisInstance);
 8000f0e:	4826      	ldr	r0, [pc, #152]	; (8000fa8 <USART6_IRQHandler+0x178>)
 8000f10:	f7ff fe2e 	bl	8000b70 <LL_USART_IsActiveFlag_PE>
 8000f14:	4603      	mov	r3, r0
 8000f16:	bf00      	nop
					auto posAssert = isSet();
 8000f18:	607b      	str	r3, [r7, #4]
					assert_param(posAssert);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d103      	bne.n	8000f28 <USART6_IRQHandler+0xf8>
 8000f20:	217d      	movs	r1, #125	; 0x7d
 8000f22:	4823      	ldr	r0, [pc, #140]	; (8000fb0 <USART6_IRQHandler+0x180>)
 8000f24:	f000 f9fa 	bl	800131c <assert_failed>
				LL_USART_ClearFlag_PE(thisInstance);
 8000f28:	481f      	ldr	r0, [pc, #124]	; (8000fa8 <USART6_IRQHandler+0x178>)
 8000f2a:	f7ff fe80 	bl	8000c2e <LL_USART_ClearFlag_PE>
			}
 8000f2e:	bf00      	nop
				return LL_USART_IsActiveFlag_NE(thisInstance);
 8000f30:	481d      	ldr	r0, [pc, #116]	; (8000fa8 <USART6_IRQHandler+0x178>)
 8000f32:	f7ff fe43 	bl	8000bbc <LL_USART_IsActiveFlag_NE>
 8000f36:	4603      	mov	r3, r0
 8000f38:	bf00      	nop
					auto posAssert = isSet();
 8000f3a:	60bb      	str	r3, [r7, #8]
					assert_param(posAssert);
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d103      	bne.n	8000f4a <USART6_IRQHandler+0x11a>
 8000f42:	2194      	movs	r1, #148	; 0x94
 8000f44:	481a      	ldr	r0, [pc, #104]	; (8000fb0 <USART6_IRQHandler+0x180>)
 8000f46:	f000 f9e9 	bl	800131c <assert_failed>
				LL_USART_ClearFlag_NE(thisInstance);
 8000f4a:	4817      	ldr	r0, [pc, #92]	; (8000fa8 <USART6_IRQHandler+0x178>)
 8000f4c:	f7ff fe93 	bl	8000c76 <LL_USART_ClearFlag_NE>
			}
 8000f50:	bf00      	nop
				return LL_USART_IsActiveFlag_FE(thisInstance);
 8000f52:	4815      	ldr	r0, [pc, #84]	; (8000fa8 <USART6_IRQHandler+0x178>)
 8000f54:	f7ff fe1f 	bl	8000b96 <LL_USART_IsActiveFlag_FE>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	bf00      	nop
					auto posAssert = isSet();
 8000f5c:	60fb      	str	r3, [r7, #12]
					assert_param(posAssert);
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d103      	bne.n	8000f6c <USART6_IRQHandler+0x13c>
 8000f64:	21ab      	movs	r1, #171	; 0xab
 8000f66:	4812      	ldr	r0, [pc, #72]	; (8000fb0 <USART6_IRQHandler+0x180>)
 8000f68:	f000 f9d8 	bl	800131c <assert_failed>
				LL_USART_ClearFlag_FE(thisInstance);
 8000f6c:	480e      	ldr	r0, [pc, #56]	; (8000fa8 <USART6_IRQHandler+0x178>)
 8000f6e:	f7ff fe70 	bl	8000c52 <LL_USART_ClearFlag_FE>
			}
 8000f72:	bf00      	nop
				return LL_USART_IsActiveFlag_ORE(thisInstance);
 8000f74:	480c      	ldr	r0, [pc, #48]	; (8000fa8 <USART6_IRQHandler+0x178>)
 8000f76:	f7ff fe34 	bl	8000be2 <LL_USART_IsActiveFlag_ORE>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	bf00      	nop
			}
			__SFI auto clear()
			{
				if constexpr (systemDebug == debug_T::debugOn)
				{
					auto posAssert = isSet();
 8000f7e:	613b      	str	r3, [r7, #16]
					assert_param(posAssert);
 8000f80:	693b      	ldr	r3, [r7, #16]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d103      	bne.n	8000f8e <USART6_IRQHandler+0x15e>
 8000f86:	21c2      	movs	r1, #194	; 0xc2
 8000f88:	4809      	ldr	r0, [pc, #36]	; (8000fb0 <USART6_IRQHandler+0x180>)
 8000f8a:	f000 f9c7 	bl	800131c <assert_failed>
				}
				LL_USART_ClearFlag_ORE(thisInstance);
 8000f8e:	4806      	ldr	r0, [pc, #24]	; (8000fa8 <USART6_IRQHandler+0x178>)
 8000f90:	f7ff fe83 	bl	8000c9a <LL_USART_ClearFlag_ORE>
			}
 8000f94:	bf00      	nop
    	PE::clear();
    	NF::clear();
    	FE::clear();
    	ORE::clear();
    }
    NVIC_ClearPendingIRQ(UHAL_USART6::thisIRQn);
 8000f96:	2047      	movs	r0, #71	; 0x47
 8000f98:	f7ff fb64 	bl	8000664 <__NVIC_ClearPendingIRQ>
  }
 8000f9c:	bf00      	nop
 8000f9e:	3718      	adds	r7, #24
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	200000a8 	.word	0x200000a8
 8000fa8:	40011400 	.word	0x40011400
 8000fac:	200000b0 	.word	0x200000b0
 8000fb0:	08004eb8 	.word	0x08004eb8
 8000fb4:	200000ac 	.word	0x200000ac

08000fb8 <DMA2_Stream0_IRQHandler>:

  void DMA2_Stream0_IRQHandler()
  {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
    dmaInterrupt++;
 8000fbc:	4b39      	ldr	r3, [pc, #228]	; (80010a4 <DMA2_Stream0_IRQHandler+0xec>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	4a38      	ldr	r2, [pc, #224]	; (80010a4 <DMA2_Stream0_IRQHandler+0xec>)
 8000fc4:	6013      	str	r3, [r2, #0]
          namespace DMEIF // Direct mode error
          {
           
            __SFI auto isSet()
            {
               return LL_DMA_IsActiveFlag_DME0(thisInstance);
 8000fc6:	4838      	ldr	r0, [pc, #224]	; (80010a8 <DMA2_Stream0_IRQHandler+0xf0>)
 8000fc8:	f7ff fd21 	bl	8000a0e <LL_DMA_IsActiveFlag_DME0>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	bf00      	nop
    using namespace UHAL_DMA2::DMA_ADC1;
    if (flag_IT::DMEIF::isSet())
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	bf14      	ite	ne
 8000fd4:	2301      	movne	r3, #1
 8000fd6:	2300      	moveq	r3, #0
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d008      	beq.n	8000ff0 <DMA2_Stream0_IRQHandler+0x38>
    {
      dmaDirectModeERROR++;
 8000fde:	4b33      	ldr	r3, [pc, #204]	; (80010ac <DMA2_Stream0_IRQHandler+0xf4>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	4a31      	ldr	r2, [pc, #196]	; (80010ac <DMA2_Stream0_IRQHandler+0xf4>)
 8000fe6:	6013      	str	r3, [r2, #0]
            }
            __SFI auto clear()  
            {
                LL_DMA_ClearFlag_DME0(thisInstance);
 8000fe8:	482f      	ldr	r0, [pc, #188]	; (80010a8 <DMA2_Stream0_IRQHandler+0xf0>)
 8000fea:	f7ff fd9a 	bl	8000b22 <LL_DMA_ClearFlag_DME0>
            }       
 8000fee:	bf00      	nop
               return LL_DMA_IsActiveFlag_HT0(thisInstance);
 8000ff0:	482d      	ldr	r0, [pc, #180]	; (80010a8 <DMA2_Stream0_IRQHandler+0xf0>)
 8000ff2:	f7ff fc97 	bl	8000924 <LL_DMA_IsActiveFlag_HT0>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	bf00      	nop
      flag_IT::DMEIF::clear();
    }
    if (flag_IT::HTIF::isSet())
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	bf14      	ite	ne
 8000ffe:	2301      	movne	r3, #1
 8001000:	2300      	moveq	r3, #0
 8001002:	b2db      	uxtb	r3, r3
 8001004:	2b00      	cmp	r3, #0
 8001006:	d008      	beq.n	800101a <DMA2_Stream0_IRQHandler+0x62>
    {
      dmaHalfTrans++;
 8001008:	4b29      	ldr	r3, [pc, #164]	; (80010b0 <DMA2_Stream0_IRQHandler+0xf8>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	3301      	adds	r3, #1
 800100e:	4a28      	ldr	r2, [pc, #160]	; (80010b0 <DMA2_Stream0_IRQHandler+0xf8>)
 8001010:	6013      	str	r3, [r2, #0]
               LL_DMA_ClearFlag_HT0(thisInstance);
 8001012:	4825      	ldr	r0, [pc, #148]	; (80010a8 <DMA2_Stream0_IRQHandler+0xf0>)
 8001014:	f7ff fd34 	bl	8000a80 <LL_DMA_ClearFlag_HT0>
            }         
 8001018:	bf00      	nop
               return LL_DMA_IsActiveFlag_TC0(thisInstance);
 800101a:	4823      	ldr	r0, [pc, #140]	; (80010a8 <DMA2_Stream0_IRQHandler+0xf0>)
 800101c:	f7ff fca9 	bl	8000972 <LL_DMA_IsActiveFlag_TC0>
 8001020:	4603      	mov	r3, r0
 8001022:	bf00      	nop
     flag_IT::HTIF::clear();
    }
    if (flag_IT::TCIF::isSet())
 8001024:	2b00      	cmp	r3, #0
 8001026:	bf14      	ite	ne
 8001028:	2301      	movne	r3, #1
 800102a:	2300      	moveq	r3, #0
 800102c:	b2db      	uxtb	r3, r3
 800102e:	2b00      	cmp	r3, #0
 8001030:	d008      	beq.n	8001044 <DMA2_Stream0_IRQHandler+0x8c>
    {
      dmaCompTrans++;
 8001032:	4b20      	ldr	r3, [pc, #128]	; (80010b4 <DMA2_Stream0_IRQHandler+0xfc>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	3301      	adds	r3, #1
 8001038:	4a1e      	ldr	r2, [pc, #120]	; (80010b4 <DMA2_Stream0_IRQHandler+0xfc>)
 800103a:	6013      	str	r3, [r2, #0]
                LL_DMA_ClearFlag_TC0(thisInstance);
 800103c:	481a      	ldr	r0, [pc, #104]	; (80010a8 <DMA2_Stream0_IRQHandler+0xf0>)
 800103e:	f7ff fd3a 	bl	8000ab6 <LL_DMA_ClearFlag_TC0>
            }       
 8001042:	bf00      	nop
               return LL_DMA_IsActiveFlag_TE0(thisInstance);
 8001044:	4818      	ldr	r0, [pc, #96]	; (80010a8 <DMA2_Stream0_IRQHandler+0xf0>)
 8001046:	f7ff fcbb 	bl	80009c0 <LL_DMA_IsActiveFlag_TE0>
 800104a:	4603      	mov	r3, r0
 800104c:	bf00      	nop
      flag_IT::TCIF::clear();
    }
    if (flag_IT::TEIF::isSet())
 800104e:	2b00      	cmp	r3, #0
 8001050:	bf14      	ite	ne
 8001052:	2301      	movne	r3, #1
 8001054:	2300      	moveq	r3, #0
 8001056:	b2db      	uxtb	r3, r3
 8001058:	2b00      	cmp	r3, #0
 800105a:	d008      	beq.n	800106e <DMA2_Stream0_IRQHandler+0xb6>
    {
      dmaTransError++;
 800105c:	4b16      	ldr	r3, [pc, #88]	; (80010b8 <DMA2_Stream0_IRQHandler+0x100>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	3301      	adds	r3, #1
 8001062:	4a15      	ldr	r2, [pc, #84]	; (80010b8 <DMA2_Stream0_IRQHandler+0x100>)
 8001064:	6013      	str	r3, [r2, #0]
                LL_DMA_ClearFlag_TE0(thisInstance);
 8001066:	4810      	ldr	r0, [pc, #64]	; (80010a8 <DMA2_Stream0_IRQHandler+0xf0>)
 8001068:	f7ff fd40 	bl	8000aec <LL_DMA_ClearFlag_TE0>
            }       
 800106c:	bf00      	nop
               return LL_DMA_IsActiveFlag_FE0(thisInstance);
 800106e:	480e      	ldr	r0, [pc, #56]	; (80010a8 <DMA2_Stream0_IRQHandler+0xf0>)
 8001070:	f7ff fce0 	bl	8000a34 <LL_DMA_IsActiveFlag_FE0>
 8001074:	4603      	mov	r3, r0
 8001076:	bf00      	nop
      flag_IT::TEIF::clear();
    }
    if (flag_IT::FEIF::isSet())
 8001078:	2b00      	cmp	r3, #0
 800107a:	bf14      	ite	ne
 800107c:	2301      	movne	r3, #1
 800107e:	2300      	moveq	r3, #0
 8001080:	b2db      	uxtb	r3, r3
 8001082:	2b00      	cmp	r3, #0
 8001084:	d008      	beq.n	8001098 <DMA2_Stream0_IRQHandler+0xe0>
    {
      dmaFifoOverUnder++;
 8001086:	4b0d      	ldr	r3, [pc, #52]	; (80010bc <DMA2_Stream0_IRQHandler+0x104>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	3301      	adds	r3, #1
 800108c:	4a0b      	ldr	r2, [pc, #44]	; (80010bc <DMA2_Stream0_IRQHandler+0x104>)
 800108e:	6013      	str	r3, [r2, #0]
                LL_DMA_ClearFlag_FE0(thisInstance);
 8001090:	4805      	ldr	r0, [pc, #20]	; (80010a8 <DMA2_Stream0_IRQHandler+0xf0>)
 8001092:	f7ff fd53 	bl	8000b3c <LL_DMA_ClearFlag_FE0>
            }       
 8001096:	bf00      	nop
      flag_IT::FEIF::clear();
    }
    NVIC_ClearPendingIRQ(thisIRQn);
 8001098:	2038      	movs	r0, #56	; 0x38
 800109a:	f7ff fae3 	bl	8000664 <__NVIC_ClearPendingIRQ>
  }
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	2000008c 	.word	0x2000008c
 80010a8:	40026400 	.word	0x40026400
 80010ac:	200000a0 	.word	0x200000a0
 80010b0:	20000090 	.word	0x20000090
 80010b4:	20000094 	.word	0x20000094
 80010b8:	20000098 	.word	0x20000098
 80010bc:	2000009c 	.word	0x2000009c

080010c0 <DMA2_Stream1_IRQHandler>:

  void DMA2_Stream1_IRQHandler()
  {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
	  using namespace UHAL_DMA2::DMA_USART6;
	  usartDMA ++;
 80010c4:	4b46      	ldr	r3, [pc, #280]	; (80011e0 <DMA2_Stream1_IRQHandler+0x120>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	3301      	adds	r3, #1
 80010ca:	4a45      	ldr	r2, [pc, #276]	; (80011e0 <DMA2_Stream1_IRQHandler+0x120>)
 80010cc:	6013      	str	r3, [r2, #0]
          namespace DMEIF // Direct mode error
          {
           
            __SFI auto isSet()
            {
               return LL_DMA_IsActiveFlag_DME0(thisInstance);
 80010ce:	4845      	ldr	r0, [pc, #276]	; (80011e4 <DMA2_Stream1_IRQHandler+0x124>)
 80010d0:	f7ff fc9d 	bl	8000a0e <LL_DMA_IsActiveFlag_DME0>
 80010d4:	4603      	mov	r3, r0
 80010d6:	bf00      	nop
	  if (flag_IT::DMEIF::isSet())
 80010d8:	2b00      	cmp	r3, #0
 80010da:	bf14      	ite	ne
 80010dc:	2301      	movne	r3, #1
 80010de:	2300      	moveq	r3, #0
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d008      	beq.n	80010f8 <DMA2_Stream1_IRQHandler+0x38>
	      {
	        dmaDirectModeERROR++;
 80010e6:	4b40      	ldr	r3, [pc, #256]	; (80011e8 <DMA2_Stream1_IRQHandler+0x128>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	3301      	adds	r3, #1
 80010ec:	4a3e      	ldr	r2, [pc, #248]	; (80011e8 <DMA2_Stream1_IRQHandler+0x128>)
 80010ee:	6013      	str	r3, [r2, #0]
            }
            __SFI auto clear()  
            {
                LL_DMA_ClearFlag_DME0(thisInstance);
 80010f0:	483c      	ldr	r0, [pc, #240]	; (80011e4 <DMA2_Stream1_IRQHandler+0x124>)
 80010f2:	f7ff fd16 	bl	8000b22 <LL_DMA_ClearFlag_DME0>
            }       
 80010f6:	bf00      	nop
               return LL_DMA_IsActiveFlag_HT1(thisInstance);
 80010f8:	483a      	ldr	r0, [pc, #232]	; (80011e4 <DMA2_Stream1_IRQHandler+0x124>)
 80010fa:	f7ff fc26 	bl	800094a <LL_DMA_IsActiveFlag_HT1>
 80010fe:	4603      	mov	r3, r0
 8001100:	bf00      	nop
	        flag_IT::DMEIF::clear();
	      }

	      if (flag_IT::HTIF::isSet())
 8001102:	2b00      	cmp	r3, #0
 8001104:	bf14      	ite	ne
 8001106:	2301      	movne	r3, #1
 8001108:	2300      	moveq	r3, #0
 800110a:	b2db      	uxtb	r3, r3
 800110c:	2b00      	cmp	r3, #0
 800110e:	d008      	beq.n	8001122 <DMA2_Stream1_IRQHandler+0x62>
	      {
	        dmaHalfTrans++;
 8001110:	4b36      	ldr	r3, [pc, #216]	; (80011ec <DMA2_Stream1_IRQHandler+0x12c>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	3301      	adds	r3, #1
 8001116:	4a35      	ldr	r2, [pc, #212]	; (80011ec <DMA2_Stream1_IRQHandler+0x12c>)
 8001118:	6013      	str	r3, [r2, #0]
               LL_DMA_ClearFlag_HT1(thisInstance);
 800111a:	4832      	ldr	r0, [pc, #200]	; (80011e4 <DMA2_Stream1_IRQHandler+0x124>)
 800111c:	f7ff fcbd 	bl	8000a9a <LL_DMA_ClearFlag_HT1>
            }         
 8001120:	bf00      	nop
               return LL_DMA_IsActiveFlag_TC1(thisInstance);
 8001122:	4830      	ldr	r0, [pc, #192]	; (80011e4 <DMA2_Stream1_IRQHandler+0x124>)
 8001124:	f7ff fc38 	bl	8000998 <LL_DMA_IsActiveFlag_TC1>
 8001128:	4603      	mov	r3, r0
 800112a:	bf00      	nop
	       flag_IT::HTIF::clear();
	      }

	      if (flag_IT::TCIF::isSet())
 800112c:	2b00      	cmp	r3, #0
 800112e:	bf14      	ite	ne
 8001130:	2301      	movne	r3, #1
 8001132:	2300      	moveq	r3, #0
 8001134:	b2db      	uxtb	r3, r3
 8001136:	2b00      	cmp	r3, #0
 8001138:	d023      	beq.n	8001182 <DMA2_Stream1_IRQHandler+0xc2>
	      {
	    	 usartBuffer[4] = Rev16(usartBuffer[0]);
 800113a:	4b2d      	ldr	r3, [pc, #180]	; (80011f0 <DMA2_Stream1_IRQHandler+0x130>)
 800113c:	881b      	ldrh	r3, [r3, #0]
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff fe30 	bl	8000da4 <_Z5Rev16t>
 8001144:	4603      	mov	r3, r0
 8001146:	461a      	mov	r2, r3
 8001148:	4b29      	ldr	r3, [pc, #164]	; (80011f0 <DMA2_Stream1_IRQHandler+0x130>)
 800114a:	811a      	strh	r2, [r3, #8]
	    	 usartBuffer[5] = Rev16(usartBuffer[1]);
 800114c:	4b28      	ldr	r3, [pc, #160]	; (80011f0 <DMA2_Stream1_IRQHandler+0x130>)
 800114e:	885b      	ldrh	r3, [r3, #2]
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff fe27 	bl	8000da4 <_Z5Rev16t>
 8001156:	4603      	mov	r3, r0
 8001158:	461a      	mov	r2, r3
 800115a:	4b25      	ldr	r3, [pc, #148]	; (80011f0 <DMA2_Stream1_IRQHandler+0x130>)
 800115c:	815a      	strh	r2, [r3, #10]
	    	 usartBuffer[6] = Rev16(usartBuffer[2]);
 800115e:	4b24      	ldr	r3, [pc, #144]	; (80011f0 <DMA2_Stream1_IRQHandler+0x130>)
 8001160:	889b      	ldrh	r3, [r3, #4]
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff fe1e 	bl	8000da4 <_Z5Rev16t>
 8001168:	4603      	mov	r3, r0
 800116a:	461a      	mov	r2, r3
 800116c:	4b20      	ldr	r3, [pc, #128]	; (80011f0 <DMA2_Stream1_IRQHandler+0x130>)
 800116e:	819a      	strh	r2, [r3, #12]
	        dmaCompTrans++;
 8001170:	4b20      	ldr	r3, [pc, #128]	; (80011f4 <DMA2_Stream1_IRQHandler+0x134>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	3301      	adds	r3, #1
 8001176:	4a1f      	ldr	r2, [pc, #124]	; (80011f4 <DMA2_Stream1_IRQHandler+0x134>)
 8001178:	6013      	str	r3, [r2, #0]
                LL_DMA_ClearFlag_TC1(thisInstance);
 800117a:	481a      	ldr	r0, [pc, #104]	; (80011e4 <DMA2_Stream1_IRQHandler+0x124>)
 800117c:	f7ff fca8 	bl	8000ad0 <LL_DMA_ClearFlag_TC1>
            }       
 8001180:	bf00      	nop
               return LL_DMA_IsActiveFlag_TE1(thisInstance);
 8001182:	4818      	ldr	r0, [pc, #96]	; (80011e4 <DMA2_Stream1_IRQHandler+0x124>)
 8001184:	f7ff fc2f 	bl	80009e6 <LL_DMA_IsActiveFlag_TE1>
 8001188:	4603      	mov	r3, r0
 800118a:	bf00      	nop
	        flag_IT::TCIF::clear();
	      }

	      if (flag_IT::TEIF::isSet())
 800118c:	2b00      	cmp	r3, #0
 800118e:	bf14      	ite	ne
 8001190:	2301      	movne	r3, #1
 8001192:	2300      	moveq	r3, #0
 8001194:	b2db      	uxtb	r3, r3
 8001196:	2b00      	cmp	r3, #0
 8001198:	d008      	beq.n	80011ac <DMA2_Stream1_IRQHandler+0xec>
	      {
	        dmaTransError++;
 800119a:	4b17      	ldr	r3, [pc, #92]	; (80011f8 <DMA2_Stream1_IRQHandler+0x138>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	3301      	adds	r3, #1
 80011a0:	4a15      	ldr	r2, [pc, #84]	; (80011f8 <DMA2_Stream1_IRQHandler+0x138>)
 80011a2:	6013      	str	r3, [r2, #0]
                LL_DMA_ClearFlag_TE1(thisInstance);
 80011a4:	480f      	ldr	r0, [pc, #60]	; (80011e4 <DMA2_Stream1_IRQHandler+0x124>)
 80011a6:	f7ff fcae 	bl	8000b06 <LL_DMA_ClearFlag_TE1>
            }       
 80011aa:	bf00      	nop
               return LL_DMA_IsActiveFlag_FE1(thisInstance);
 80011ac:	480d      	ldr	r0, [pc, #52]	; (80011e4 <DMA2_Stream1_IRQHandler+0x124>)
 80011ae:	f7ff fc54 	bl	8000a5a <LL_DMA_IsActiveFlag_FE1>
 80011b2:	4603      	mov	r3, r0
 80011b4:	bf00      	nop
	        flag_IT::TEIF::clear();
	      }

	      if (flag_IT::FEIF::isSet())
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	bf14      	ite	ne
 80011ba:	2301      	movne	r3, #1
 80011bc:	2300      	moveq	r3, #0
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d008      	beq.n	80011d6 <DMA2_Stream1_IRQHandler+0x116>
	      {
	        dmaFifoOverUnder++;
 80011c4:	4b0d      	ldr	r3, [pc, #52]	; (80011fc <DMA2_Stream1_IRQHandler+0x13c>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	3301      	adds	r3, #1
 80011ca:	4a0c      	ldr	r2, [pc, #48]	; (80011fc <DMA2_Stream1_IRQHandler+0x13c>)
 80011cc:	6013      	str	r3, [r2, #0]
                LL_DMA_ClearFlag_FE1(thisInstance);
 80011ce:	4805      	ldr	r0, [pc, #20]	; (80011e4 <DMA2_Stream1_IRQHandler+0x124>)
 80011d0:	f7ff fcc1 	bl	8000b56 <LL_DMA_ClearFlag_FE1>
            }       
 80011d4:	bf00      	nop
	        flag_IT::FEIF::clear();
	      }

    NVIC_ClearPendingIRQ(thisIRQn);
 80011d6:	2039      	movs	r0, #57	; 0x39
 80011d8:	f7ff fa44 	bl	8000664 <__NVIC_ClearPendingIRQ>
  }
 80011dc:	bf00      	nop
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	200000a4 	.word	0x200000a4
 80011e4:	40026400 	.word	0x40026400
 80011e8:	200000a0 	.word	0x200000a0
 80011ec:	20000090 	.word	0x20000090
 80011f0:	200000b4 	.word	0x200000b4
 80011f4:	20000094 	.word	0x20000094
 80011f8:	20000098 	.word	0x20000098
 80011fc:	2000009c 	.word	0x2000009c

08001200 <ADC_IRQHandler>:

  void ADC_IRQHandler()
  {
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
    	/*This bit is set by hardware at the end of the conversion of a regular group of channels. It is
    cleared by software or by reading the ADC_DR register.*/
        namespace EOC   /// @brief End of conversion of regular group
        {
            __SFI auto isSet() {
              return  LL_ADC_IsActiveFlag_EOCS(thisInstance);
 8001204:	4815      	ldr	r0, [pc, #84]	; (800125c <ADC_IRQHandler+0x5c>)
 8001206:	f7ff fd99 	bl	8000d3c <LL_ADC_IsActiveFlag_EOCS>
 800120a:	4603      	mov	r3, r0
 800120c:	bf00      	nop

    /// compt
    if (UHAL_ADC::flag_IT::EOC::isSet())
 800120e:	2b00      	cmp	r3, #0
 8001210:	bf14      	ite	ne
 8001212:	2301      	movne	r3, #1
 8001214:	2300      	moveq	r3, #0
 8001216:	b2db      	uxtb	r3, r3
 8001218:	2b00      	cmp	r3, #0
 800121a:	d008      	beq.n	800122e <ADC_IRQHandler+0x2e>
    {
      adcComp++;
 800121c:	4b10      	ldr	r3, [pc, #64]	; (8001260 <ADC_IRQHandler+0x60>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	3301      	adds	r3, #1
 8001222:	4a0f      	ldr	r2, [pc, #60]	; (8001260 <ADC_IRQHandler+0x60>)
 8001224:	6013      	str	r3, [r2, #0]
            }

            __SFI auto clear() {
                LL_ADC_ClearFlag_EOCS(thisInstance);
 8001226:	480d      	ldr	r0, [pc, #52]	; (800125c <ADC_IRQHandler+0x5c>)
 8001228:	f7ff fdae 	bl	8000d88 <LL_ADC_ClearFlag_EOCS>
            }
 800122c:	bf00      	nop
            [[deprecated("this flag no pending")]] __SFI auto clearPendingBit();
        }
        namespace OVR   /// @brief Overrun error
        {
            __SFI auto isSet() {
               return LL_ADC_IsActiveFlag_OVR(thisInstance);
 800122e:	480b      	ldr	r0, [pc, #44]	; (800125c <ADC_IRQHandler+0x5c>)
 8001230:	f7ff fd97 	bl	8000d62 <LL_ADC_IsActiveFlag_OVR>
 8001234:	4603      	mov	r3, r0
 8001236:	bf00      	nop
      UHAL_ADC::flag_IT::EOC::clear();
    }
    /// Overrun Handle
    if (UHAL_ADC::flag_IT::OVR::isSet())
 8001238:	2b00      	cmp	r3, #0
 800123a:	bf14      	ite	ne
 800123c:	2301      	movne	r3, #1
 800123e:	2300      	moveq	r3, #0
 8001240:	b2db      	uxtb	r3, r3
 8001242:	2b00      	cmp	r3, #0
 8001244:	d004      	beq.n	8001250 <ADC_IRQHandler+0x50>
    {
      adcOverrun++;
 8001246:	4b07      	ldr	r3, [pc, #28]	; (8001264 <ADC_IRQHandler+0x64>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	3301      	adds	r3, #1
 800124c:	4a05      	ldr	r2, [pc, #20]	; (8001264 <ADC_IRQHandler+0x64>)
 800124e:	6013      	str	r3, [r2, #0]
      // todo implement this recover for overrun.
      //  UHAL_ADC::recoverAdcFormOverrun(reinterpret_cast<uintptr_t>(&adcBuffer[0]));
    }
    NVIC_ClearPendingIRQ(ADC_IRQn);
 8001250:	2012      	movs	r0, #18
 8001252:	f7ff fa07 	bl	8000664 <__NVIC_ClearPendingIRQ>
  }
 8001256:	bf00      	nop
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40012000 	.word	0x40012000
 8001260:	20000088 	.word	0x20000088
 8001264:	20000084 	.word	0x20000084

08001268 <_Z18SystemClock_Configv>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_5);
 800126c:	2005      	movs	r0, #5
 800126e:	f7ff fb23 	bl	80008b8 <LL_FLASH_SetLatency>
  while (LL_FLASH_GetLatency() != LL_FLASH_LATENCY_5)
 8001272:	f7ff fb35 	bl	80008e0 <LL_FLASH_GetLatency>
 8001276:	4603      	mov	r3, r0
 8001278:	2b05      	cmp	r3, #5
 800127a:	bf14      	ite	ne
 800127c:	2301      	movne	r3, #1
 800127e:	2300      	moveq	r3, #0
 8001280:	b2db      	uxtb	r3, r3
 8001282:	2b00      	cmp	r3, #0
 8001284:	d000      	beq.n	8001288 <_Z18SystemClock_Configv+0x20>
 8001286:	e7f4      	b.n	8001272 <_Z18SystemClock_Configv+0xa>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8001288:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800128c:	f7ff fb36 	bl	80008fc <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSE_EnableBypass();
 8001290:	f7ff fa06 	bl	80006a0 <LL_RCC_HSE_EnableBypass>
  LL_RCC_HSE_Enable();
 8001294:	f7ff fa14 	bl	80006c0 <LL_RCC_HSE_Enable>

  /* Wait till HSE is ready */
  while (LL_RCC_HSE_IsReady() != 1)
 8001298:	f7ff fa22 	bl	80006e0 <LL_RCC_HSE_IsReady>
 800129c:	4603      	mov	r3, r0
 800129e:	2b01      	cmp	r3, #1
 80012a0:	bf14      	ite	ne
 80012a2:	2301      	movne	r3, #1
 80012a4:	2300      	moveq	r3, #0
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d000      	beq.n	80012ae <_Z18SystemClock_Configv+0x46>
 80012ac:	e7f4      	b.n	8001298 <_Z18SystemClock_Configv+0x30>
  {
  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_4, 168, LL_RCC_PLLP_DIV_2);
 80012ae:	2300      	movs	r3, #0
 80012b0:	22a8      	movs	r2, #168	; 0xa8
 80012b2:	2104      	movs	r1, #4
 80012b4:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80012b8:	f7ff faa8 	bl	800080c <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 80012bc:	f7ff fa82 	bl	80007c4 <LL_RCC_PLL_Enable>

  /* Wait till PLL is ready */
  while (LL_RCC_PLL_IsReady() != 1)
 80012c0:	f7ff fa90 	bl	80007e4 <LL_RCC_PLL_IsReady>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	bf14      	ite	ne
 80012ca:	2301      	movne	r3, #1
 80012cc:	2300      	moveq	r3, #0
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d000      	beq.n	80012d6 <_Z18SystemClock_Configv+0x6e>
 80012d4:	e7f4      	b.n	80012c0 <_Z18SystemClock_Configv+0x58>
  {
  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80012d6:	2000      	movs	r0, #0
 80012d8:	f7ff fa38 	bl	800074c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_4);
 80012dc:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 80012e0:	f7ff fa48 	bl	8000774 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
 80012e4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80012e8:	f7ff fa58 	bl	800079c <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80012ec:	2002      	movs	r0, #2
 80012ee:	f7ff fa0b 	bl	8000708 <LL_RCC_SetSysClkSource>

  /* Wait till System clock is ready */
  while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80012f2:	f7ff fa1d 	bl	8000730 <LL_RCC_GetSysClkSource>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b08      	cmp	r3, #8
 80012fa:	bf14      	ite	ne
 80012fc:	2301      	movne	r3, #1
 80012fe:	2300      	moveq	r3, #0
 8001300:	b2db      	uxtb	r3, r3
 8001302:	2b00      	cmp	r3, #0
 8001304:	d000      	beq.n	8001308 <_Z18SystemClock_Configv+0xa0>
 8001306:	e7f4      	b.n	80012f2 <_Z18SystemClock_Configv+0x8a>
  {
  }
  LL_Init1msTick(168000000);
 8001308:	4803      	ldr	r0, [pc, #12]	; (8001318 <_Z18SystemClock_Configv+0xb0>)
 800130a:	f002 ff49 	bl	80041a0 <LL_Init1msTick>
  LL_SetSystemCoreClock(168000000);
 800130e:	4802      	ldr	r0, [pc, #8]	; (8001318 <_Z18SystemClock_Configv+0xb0>)
 8001310:	f002 ff54 	bl	80041bc <LL_SetSystemCoreClock>
}
 8001314:	bf00      	nop
 8001316:	bd80      	pop	{r7, pc}
 8001318:	0a037a00 	.word	0x0a037a00

0800131c <assert_failed>:
 * @param  file: pointer to the source file name
 * @param  line: assert_param error line source number
 * @retval None
 */
void assert_failed(uint8_t *file, uint32_t line)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b09c      	sub	sp, #112	; 0x70
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
  //	void *str = file;
  std::string _file = reinterpret_cast<const char *>(file);
 8001326:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800132a:	4618      	mov	r0, r3
 800132c:	f002 ff56 	bl	80041dc <_ZNSaIcEC1Ev>
 8001330:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8001334:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001338:	6879      	ldr	r1, [r7, #4]
 800133a:	4618      	mov	r0, r3
 800133c:	f000 f8a5 	bl	800148a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8001340:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001344:	4618      	mov	r0, r3
 8001346:	f002 ff4a 	bl	80041de <_ZNSaIcED1Ev>
  std::string _line = std::to_string(line);
 800134a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800134e:	6839      	ldr	r1, [r7, #0]
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff fcdd 	bl	8000d10 <_ZNSt7__cxx119to_stringEm>
  std::string msg = _line + _file + '\n';
 8001356:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800135a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800135e:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001362:	4618      	mov	r0, r3
 8001364:	f000 f8b7 	bl	80014d6 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_SA_>
 8001368:	f107 030c 	add.w	r3, r7, #12
 800136c:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8001370:	220a      	movs	r2, #10
 8001372:	4618      	mov	r0, r3
 8001374:	f000 f8c2 	bl	80014fc <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S5_>
 8001378:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800137c:	4618      	mov	r0, r3
 800137e:	f003 f805 	bl	800438c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  UHAL_USART6::send(msg);
 8001382:	f107 030c 	add.w	r3, r7, #12
 8001386:	4618      	mov	r0, r3
 8001388:	f001 ffd4 	bl	8003334 <_ZN11UHAL_USART64sendERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
  std::string msg = _line + _file + '\n';
 800138c:	f107 030c 	add.w	r3, r7, #12
 8001390:	4618      	mov	r0, r3
 8001392:	f002 fffb 	bl	800438c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  std::string _line = std::to_string(line);
 8001396:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800139a:	4618      	mov	r0, r3
 800139c:	f002 fff6 	bl	800438c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  std::string _file = reinterpret_cast<const char *>(file);
 80013a0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80013a4:	4618      	mov	r0, r3
 80013a6:	f002 fff1 	bl	800438c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 80013aa:	bf00      	nop
 80013ac:	3770      	adds	r7, #112	; 0x70
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <_ZN9__gnu_cxx11char_traitsIcE2eqERKcS3_>:
      eq(const char_type& __c1, const char_type& __c2)
 80013b2:	b480      	push	{r7}
 80013b4:	b083      	sub	sp, #12
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
 80013ba:	6039      	str	r1, [r7, #0]
      { return __c1 == __c2; }
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	781a      	ldrb	r2, [r3, #0]
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	bf0c      	ite	eq
 80013c8:	2301      	moveq	r3, #1
 80013ca:	2300      	movne	r3, #0
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	4618      	mov	r0, r3
 80013d0:	370c      	adds	r7, #12
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr

080013da <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc>:
    char_traits<_CharT>::
 80013da:	b580      	push	{r7, lr}
 80013dc:	b084      	sub	sp, #16
 80013de:	af00      	add	r7, sp, #0
 80013e0:	6078      	str	r0, [r7, #4]
      std::size_t __i = 0;
 80013e2:	2300      	movs	r3, #0
 80013e4:	60fb      	str	r3, [r7, #12]
      while (!eq(__p[__i], char_type()))
 80013e6:	687a      	ldr	r2, [r7, #4]
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	4413      	add	r3, r2
 80013ec:	2200      	movs	r2, #0
 80013ee:	72fa      	strb	r2, [r7, #11]
 80013f0:	f107 020b 	add.w	r2, r7, #11
 80013f4:	4611      	mov	r1, r2
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff ffdb 	bl	80013b2 <_ZN9__gnu_cxx11char_traitsIcE2eqERKcS3_>
 80013fc:	4603      	mov	r3, r0
 80013fe:	f083 0301 	eor.w	r3, r3, #1
 8001402:	b2db      	uxtb	r3, r3
 8001404:	2b00      	cmp	r3, #0
 8001406:	d003      	beq.n	8001410 <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc+0x36>
        ++__i;
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	3301      	adds	r3, #1
 800140c:	60fb      	str	r3, [r7, #12]
      while (!eq(__p[__i], char_type()))
 800140e:	e7ea      	b.n	80013e6 <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc+0xc>
      return __i;
 8001410:	68fb      	ldr	r3, [r7, #12]
    }
 8001412:	4618      	mov	r0, r3
 8001414:	3710      	adds	r7, #16
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>:
    }

  // Helper for the to_string / to_wstring functions.
  template<typename _String, typename _CharT = typename _String::value_type>
    _String
    __to_xstring(int (*__convf) (_CharT*, std::size_t, const _CharT*,
 800141a:	b408      	push	{r3}
 800141c:	b590      	push	{r4, r7, lr}
 800141e:	b088      	sub	sp, #32
 8001420:	af00      	add	r7, sp, #0
 8001422:	60f8      	str	r0, [r7, #12]
 8001424:	60b9      	str	r1, [r7, #8]
 8001426:	607a      	str	r2, [r7, #4]
				 __builtin_va_list), std::size_t __n,
		 const _CharT* __fmt, ...)
    {
      // XXX Eventually the result should be constructed in-place in
      // the __cxx11 string, likely with the help of internal hooks.
      _CharT* __s = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	3307      	adds	r3, #7
 800142c:	08db      	lsrs	r3, r3, #3
 800142e:	00db      	lsls	r3, r3, #3
 8001430:	ebad 0d03 	sub.w	sp, sp, r3
 8001434:	466b      	mov	r3, sp
 8001436:	3307      	adds	r3, #7
 8001438:	08db      	lsrs	r3, r3, #3
 800143a:	00db      	lsls	r3, r3, #3
 800143c:	61fb      	str	r3, [r7, #28]
							  * __n));

      __builtin_va_list __args;
      __builtin_va_start(__args, __fmt);
 800143e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001442:	613b      	str	r3, [r7, #16]

      const int __len = __convf(__s, __n, __fmt, __args);
 8001444:	68bc      	ldr	r4, [r7, #8]
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800144a:	6879      	ldr	r1, [r7, #4]
 800144c:	69f8      	ldr	r0, [r7, #28]
 800144e:	47a0      	blx	r4
 8001450:	61b8      	str	r0, [r7, #24]

      __builtin_va_end(__args);

      return _String(__s, __s + __len);
 8001452:	69bb      	ldr	r3, [r7, #24]
 8001454:	69fa      	ldr	r2, [r7, #28]
 8001456:	18d4      	adds	r4, r2, r3
 8001458:	f107 0314 	add.w	r3, r7, #20
 800145c:	4618      	mov	r0, r3
 800145e:	f002 febd 	bl	80041dc <_ZNSaIcEC1Ev>
 8001462:	f107 0314 	add.w	r3, r7, #20
 8001466:	4622      	mov	r2, r4
 8001468:	69f9      	ldr	r1, [r7, #28]
 800146a:	68f8      	ldr	r0, [r7, #12]
 800146c:	f000 f860 	bl	8001530 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPcvEET_S7_RKS3_>
 8001470:	f107 0314 	add.w	r3, r7, #20
 8001474:	4618      	mov	r0, r3
 8001476:	f002 feb2 	bl	80041de <_ZNSaIcED1Ev>
 800147a:	bf00      	nop
    }
 800147c:	68f8      	ldr	r0, [r7, #12]
 800147e:	3720      	adds	r7, #32
 8001480:	46bd      	mov	sp, r7
 8001482:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001486:	b001      	add	sp, #4
 8001488:	4770      	bx	lr

0800148a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>:
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
 800148a:	b590      	push	{r4, r7, lr}
 800148c:	b085      	sub	sp, #20
 800148e:	af00      	add	r7, sp, #0
 8001490:	60f8      	str	r0, [r7, #12]
 8001492:	60b9      	str	r1, [r7, #8]
 8001494:	607a      	str	r2, [r7, #4]
      : _M_dataplus(_M_local_data(), __a)
 8001496:	68fc      	ldr	r4, [r7, #12]
 8001498:	68f8      	ldr	r0, [r7, #12]
 800149a:	f002 feb2 	bl	8004202 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 800149e:	4603      	mov	r3, r0
 80014a0:	687a      	ldr	r2, [r7, #4]
 80014a2:	4619      	mov	r1, r3
 80014a4:	4620      	mov	r0, r4
 80014a6:	f002 ffef 	bl	8004488 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>
      { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }
 80014aa:	68bb      	ldr	r3, [r7, #8]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d006      	beq.n	80014be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0x34>
 80014b0:	68b8      	ldr	r0, [r7, #8]
 80014b2:	f7ff fc16 	bl	8000ce2 <_ZNSt11char_traitsIcE6lengthEPKc>
 80014b6:	4602      	mov	r2, r0
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	4413      	add	r3, r2
 80014bc:	e001      	b.n	80014c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0x38>
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	3b01      	subs	r3, #1
 80014c2:	461a      	mov	r2, r3
 80014c4:	68b9      	ldr	r1, [r7, #8]
 80014c6:	68f8      	ldr	r0, [r7, #12]
 80014c8:	f000 f84d 	bl	8001566 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_>
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	4618      	mov	r0, r3
 80014d0:	3714      	adds	r7, #20
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd90      	pop	{r4, r7, pc}

080014d6 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_SA_>:
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 80014d6:	b580      	push	{r7, lr}
 80014d8:	b084      	sub	sp, #16
 80014da:	af00      	add	r7, sp, #0
 80014dc:	60f8      	str	r0, [r7, #12]
 80014de:	60b9      	str	r1, [r7, #8]
 80014e0:	607a      	str	r2, [r7, #4]
      basic_string<_CharT, _Traits, _Alloc> __str(__lhs);
 80014e2:	68b9      	ldr	r1, [r7, #8]
 80014e4:	68f8      	ldr	r0, [r7, #12]
 80014e6:	f002 ffd1 	bl	800448c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
      __str.append(__rhs);
 80014ea:	6879      	ldr	r1, [r7, #4]
 80014ec:	68f8      	ldr	r0, [r7, #12]
 80014ee:	f002 ffc5 	bl	800447c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>
      return __str;
 80014f2:	bf00      	nop
    }
 80014f4:	68f8      	ldr	r0, [r7, #12]
 80014f6:	3710      	adds	r7, #16
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}

080014fc <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S5_>:
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	60f8      	str	r0, [r7, #12]
 8001504:	60b9      	str	r1, [r7, #8]
 8001506:	4613      	mov	r3, r2
 8001508:	71fb      	strb	r3, [r7, #7]
    { return std::move(__lhs.append(1, __rhs)); }
 800150a:	79fb      	ldrb	r3, [r7, #7]
 800150c:	461a      	mov	r2, r3
 800150e:	2101      	movs	r1, #1
 8001510:	68b8      	ldr	r0, [r7, #8]
 8001512:	f002 ff87 	bl	8004424 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEjc>
 8001516:	4603      	mov	r3, r0
 8001518:	4618      	mov	r0, r3
 800151a:	f000 f833 	bl	8001584 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 800151e:	4603      	mov	r3, r0
 8001520:	4619      	mov	r1, r3
 8001522:	68f8      	ldr	r0, [r7, #12]
 8001524:	f002 ff18 	bl	8004358 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 8001528:	68f8      	ldr	r0, [r7, #12]
 800152a:	3710      	adds	r7, #16
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}

08001530 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPcvEET_S7_RKS3_>:
        basic_string(_InputIterator __beg, _InputIterator __end,
 8001530:	b590      	push	{r4, r7, lr}
 8001532:	b085      	sub	sp, #20
 8001534:	af00      	add	r7, sp, #0
 8001536:	60f8      	str	r0, [r7, #12]
 8001538:	60b9      	str	r1, [r7, #8]
 800153a:	607a      	str	r2, [r7, #4]
 800153c:	603b      	str	r3, [r7, #0]
	: _M_dataplus(_M_local_data(), __a)
 800153e:	68fc      	ldr	r4, [r7, #12]
 8001540:	68f8      	ldr	r0, [r7, #12]
 8001542:	f002 fe5e 	bl	8004202 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 8001546:	4603      	mov	r3, r0
 8001548:	683a      	ldr	r2, [r7, #0]
 800154a:	4619      	mov	r1, r3
 800154c:	4620      	mov	r0, r4
 800154e:	f002 ff9b 	bl	8004488 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>
	{ _M_construct(__beg, __end); }
 8001552:	687a      	ldr	r2, [r7, #4]
 8001554:	68b9      	ldr	r1, [r7, #8]
 8001556:	68f8      	ldr	r0, [r7, #12]
 8001558:	f000 f81f 	bl	800159a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_>
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	4618      	mov	r0, r3
 8001560:	3714      	adds	r7, #20
 8001562:	46bd      	mov	sp, r7
 8001564:	bd90      	pop	{r4, r7, pc}

08001566 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_>:
        _M_construct(_InIterator __beg, _InIterator __end)
 8001566:	b580      	push	{r7, lr}
 8001568:	b084      	sub	sp, #16
 800156a:	af00      	add	r7, sp, #0
 800156c:	60f8      	str	r0, [r7, #12]
 800156e:	60b9      	str	r1, [r7, #8]
 8001570:	607a      	str	r2, [r7, #4]
	  _M_construct_aux(__beg, __end, _Integral());
 8001572:	687a      	ldr	r2, [r7, #4]
 8001574:	68b9      	ldr	r1, [r7, #8]
 8001576:	68f8      	ldr	r0, [r7, #12]
 8001578:	f000 f81e 	bl	80015b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPKcEEvT_S8_St12__false_type>
        }
 800157c:	bf00      	nop
 800157e:	3710      	adds	r7, #16
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}

08001584 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	4618      	mov	r0, r3
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr

0800159a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_>:
        _M_construct(_InIterator __beg, _InIterator __end)
 800159a:	b580      	push	{r7, lr}
 800159c:	b084      	sub	sp, #16
 800159e:	af00      	add	r7, sp, #0
 80015a0:	60f8      	str	r0, [r7, #12]
 80015a2:	60b9      	str	r1, [r7, #8]
 80015a4:	607a      	str	r2, [r7, #4]
	  _M_construct_aux(__beg, __end, _Integral());
 80015a6:	687a      	ldr	r2, [r7, #4]
 80015a8:	68b9      	ldr	r1, [r7, #8]
 80015aa:	68f8      	ldr	r0, [r7, #12]
 80015ac:	f000 f815 	bl	80015da <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPcEEvT_S7_St12__false_type>
        }
 80015b0:	bf00      	nop
 80015b2:	3710      	adds	r7, #16
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPKcEEvT_S8_St12__false_type>:
        _M_construct_aux(_InIterator __beg, _InIterator __end,
 80015b8:	b590      	push	{r4, r7, lr}
 80015ba:	b087      	sub	sp, #28
 80015bc:	af00      	add	r7, sp, #0
 80015be:	60f8      	str	r0, [r7, #12]
 80015c0:	60b9      	str	r1, [r7, #8]
 80015c2:	607a      	str	r2, [r7, #4]
 80015c4:	703b      	strb	r3, [r7, #0]
          _M_construct(__beg, __end, _Tag());
 80015c6:	4623      	mov	r3, r4
 80015c8:	687a      	ldr	r2, [r7, #4]
 80015ca:	68b9      	ldr	r1, [r7, #8]
 80015cc:	68f8      	ldr	r0, [r7, #12]
 80015ce:	f000 f829 	bl	8001624 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
	}
 80015d2:	bf00      	nop
 80015d4:	371c      	adds	r7, #28
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd90      	pop	{r4, r7, pc}

080015da <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPcEEvT_S7_St12__false_type>:
        _M_construct_aux(_InIterator __beg, _InIterator __end,
 80015da:	b590      	push	{r4, r7, lr}
 80015dc:	b087      	sub	sp, #28
 80015de:	af00      	add	r7, sp, #0
 80015e0:	60f8      	str	r0, [r7, #12]
 80015e2:	60b9      	str	r1, [r7, #8]
 80015e4:	607a      	str	r2, [r7, #4]
 80015e6:	703b      	strb	r3, [r7, #0]
          _M_construct(__beg, __end, _Tag());
 80015e8:	4623      	mov	r3, r4
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	68b9      	ldr	r1, [r7, #8]
 80015ee:	68f8      	ldr	r0, [r7, #12]
 80015f0:	f000 f874 	bl	80016dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
	}
 80015f4:	bf00      	nop
 80015f6:	371c      	adds	r7, #28
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd90      	pop	{r4, r7, pc}

080015fc <_ZSt8distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 80015fc:	b5b0      	push	{r4, r5, r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 8001606:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8001608:	1d3b      	adds	r3, r7, #4
 800160a:	4618      	mov	r0, r3
 800160c:	f000 f8be 	bl	800178c <_ZSt19__iterator_categoryIPKcENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__distance(__first, __last,
 8001610:	462a      	mov	r2, r5
 8001612:	6839      	ldr	r1, [r7, #0]
 8001614:	4620      	mov	r0, r4
 8001616:	f000 f8c3 	bl	80017a0 <_ZSt10__distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>
 800161a:	4603      	mov	r3, r0
    }
 800161c:	4618      	mov	r0, r3
 800161e:	3708      	adds	r7, #8
 8001620:	46bd      	mov	sp, r7
 8001622:	bdb0      	pop	{r4, r5, r7, pc}

08001624 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
      void
      basic_string<_CharT, _Traits, _Alloc>::
 8001624:	b580      	push	{r7, lr}
 8001626:	b086      	sub	sp, #24
 8001628:	af00      	add	r7, sp, #0
 800162a:	60f8      	str	r0, [r7, #12]
 800162c:	60b9      	str	r1, [r7, #8]
 800162e:	607a      	str	r2, [r7, #4]
 8001630:	703b      	strb	r3, [r7, #0]
      _M_construct(_InIterator __beg, _InIterator __end,
		   std::forward_iterator_tag)
      {
	// NB: Not required, but considered best practice.
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
 8001632:	68b8      	ldr	r0, [r7, #8]
 8001634:	f000 f89a 	bl	800176c <_ZN9__gnu_cxx17__is_null_pointerIKcEEbPT_>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d005      	beq.n	800164a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x26>
 800163e:	68ba      	ldr	r2, [r7, #8]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	429a      	cmp	r2, r3
 8001644:	d001      	beq.n	800164a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x26>
 8001646:	2301      	movs	r3, #1
 8001648:	e000      	b.n	800164c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x28>
 800164a:	2300      	movs	r3, #0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d002      	beq.n	8001656 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x32>
	  std::__throw_logic_error(__N("basic_string::"
 8001650:	4817      	ldr	r0, [pc, #92]	; (80016b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x8c>)
 8001652:	f002 fdc8 	bl	80041e6 <_ZSt19__throw_logic_errorPKc>
				       "_M_construct null not valid"));

	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 8001656:	6879      	ldr	r1, [r7, #4]
 8001658:	68b8      	ldr	r0, [r7, #8]
 800165a:	f7ff ffcf 	bl	80015fc <_ZSt8distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_>
 800165e:	4603      	mov	r3, r0
 8001660:	617b      	str	r3, [r7, #20]

	if (__dnew > size_type(_S_local_capacity))
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	2b0f      	cmp	r3, #15
 8001666:	d910      	bls.n	800168a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x66>
	  {
	    _M_data(_M_create(__dnew, size_type(0)));
 8001668:	f107 0314 	add.w	r3, r7, #20
 800166c:	2200      	movs	r2, #0
 800166e:	4619      	mov	r1, r3
 8001670:	68f8      	ldr	r0, [r7, #12]
 8001672:	f002 fdcf 	bl	8004214 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8001676:	4603      	mov	r3, r0
 8001678:	4619      	mov	r1, r3
 800167a:	68f8      	ldr	r0, [r7, #12]
 800167c:	f002 fdbd 	bl	80041fa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_capacity(__dnew);
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	4619      	mov	r1, r3
 8001684:	68f8      	ldr	r0, [r7, #12]
 8001686:	f002 fdbe 	bl	8004206 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>
	  }

	// Check for out_of_range and length_error exceptions.
	__try
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
 800168a:	68f8      	ldr	r0, [r7, #12]
 800168c:	f002 fdb7 	bl	80041fe <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 8001690:	4603      	mov	r3, r0
 8001692:	687a      	ldr	r2, [r7, #4]
 8001694:	68b9      	ldr	r1, [r7, #8]
 8001696:	4618      	mov	r0, r3
 8001698:	f002 fe1d 	bl	80042d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
	  {
	    _M_dispose();
	    __throw_exception_again;
	  }

	_M_set_length(__dnew);
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	4619      	mov	r1, r3
 80016a0:	68f8      	ldr	r0, [r7, #12]
 80016a2:	f002 fdb2 	bl	800420a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
      }
 80016a6:	bf00      	nop
 80016a8:	3718      	adds	r7, #24
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	08004ef0 	.word	0x08004ef0

080016b4 <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>:
    distance(_InputIterator __first, _InputIterator __last)
 80016b4:	b5b0      	push	{r4, r5, r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	6039      	str	r1, [r7, #0]
      return std::__distance(__first, __last,
 80016be:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 80016c0:	1d3b      	adds	r3, r7, #4
 80016c2:	4618      	mov	r0, r3
 80016c4:	f000 f88b 	bl	80017de <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
      return std::__distance(__first, __last,
 80016c8:	462a      	mov	r2, r5
 80016ca:	6839      	ldr	r1, [r7, #0]
 80016cc:	4620      	mov	r0, r4
 80016ce:	f000 f890 	bl	80017f2 <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>
 80016d2:	4603      	mov	r3, r0
    }
 80016d4:	4618      	mov	r0, r3
 80016d6:	3708      	adds	r7, #8
 80016d8:	46bd      	mov	sp, r7
 80016da:	bdb0      	pop	{r4, r5, r7, pc}

080016dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
      basic_string<_CharT, _Traits, _Alloc>::
 80016dc:	b580      	push	{r7, lr}
 80016de:	b086      	sub	sp, #24
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	60f8      	str	r0, [r7, #12]
 80016e4:	60b9      	str	r1, [r7, #8]
 80016e6:	607a      	str	r2, [r7, #4]
 80016e8:	703b      	strb	r3, [r7, #0]
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
 80016ea:	68b8      	ldr	r0, [r7, #8]
 80016ec:	f000 f867 	bl	80017be <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d005      	beq.n	8001702 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x26>
 80016f6:	68ba      	ldr	r2, [r7, #8]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	429a      	cmp	r2, r3
 80016fc:	d001      	beq.n	8001702 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x26>
 80016fe:	2301      	movs	r3, #1
 8001700:	e000      	b.n	8001704 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x28>
 8001702:	2300      	movs	r3, #0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d002      	beq.n	800170e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x32>
	  std::__throw_logic_error(__N("basic_string::"
 8001708:	4817      	ldr	r0, [pc, #92]	; (8001768 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x8c>)
 800170a:	f002 fd6c 	bl	80041e6 <_ZSt19__throw_logic_errorPKc>
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 800170e:	6879      	ldr	r1, [r7, #4]
 8001710:	68b8      	ldr	r0, [r7, #8]
 8001712:	f7ff ffcf 	bl	80016b4 <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>
 8001716:	4603      	mov	r3, r0
 8001718:	617b      	str	r3, [r7, #20]
	if (__dnew > size_type(_S_local_capacity))
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	2b0f      	cmp	r3, #15
 800171e:	d910      	bls.n	8001742 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x66>
	    _M_data(_M_create(__dnew, size_type(0)));
 8001720:	f107 0314 	add.w	r3, r7, #20
 8001724:	2200      	movs	r2, #0
 8001726:	4619      	mov	r1, r3
 8001728:	68f8      	ldr	r0, [r7, #12]
 800172a:	f002 fd73 	bl	8004214 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800172e:	4603      	mov	r3, r0
 8001730:	4619      	mov	r1, r3
 8001732:	68f8      	ldr	r0, [r7, #12]
 8001734:	f002 fd61 	bl	80041fa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_capacity(__dnew);
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	4619      	mov	r1, r3
 800173c:	68f8      	ldr	r0, [r7, #12]
 800173e:	f002 fd62 	bl	8004206 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
 8001742:	68f8      	ldr	r0, [r7, #12]
 8001744:	f002 fd5b 	bl	80041fe <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 8001748:	4603      	mov	r3, r0
 800174a:	687a      	ldr	r2, [r7, #4]
 800174c:	68b9      	ldr	r1, [r7, #8]
 800174e:	4618      	mov	r0, r3
 8001750:	f002 fdbc 	bl	80042cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
	_M_set_length(__dnew);
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	4619      	mov	r1, r3
 8001758:	68f8      	ldr	r0, [r7, #12]
 800175a:	f002 fd56 	bl	800420a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
      }
 800175e:	bf00      	nop
 8001760:	3718      	adds	r7, #24
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	08004ef0 	.word	0x08004ef0

0800176c <_ZN9__gnu_cxx17__is_null_pointerIKcEEbPT_>:


  // For use in string and vstring.
  template<typename _Type>
    inline bool
    __is_null_pointer(_Type* __ptr)
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
    { return __ptr == 0; }
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2b00      	cmp	r3, #0
 8001778:	bf0c      	ite	eq
 800177a:	2301      	moveq	r3, #1
 800177c:	2300      	movne	r3, #0
 800177e:	b2db      	uxtb	r3, r3
 8001780:	4618      	mov	r0, r3
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr

0800178c <_ZSt19__iterator_categoryIPKcENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8001794:	4618      	mov	r0, r3
 8001796:	370c      	adds	r7, #12
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr

080017a0 <_ZSt10__distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 80017a0:	b480      	push	{r7}
 80017a2:	b085      	sub	sp, #20
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	60f8      	str	r0, [r7, #12]
 80017a8:	60b9      	str	r1, [r7, #8]
 80017aa:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 80017ac:	68ba      	ldr	r2, [r7, #8]
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	1ad3      	subs	r3, r2, r3
    }
 80017b2:	4618      	mov	r0, r3
 80017b4:	3714      	adds	r7, #20
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr

080017be <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>:
    __is_null_pointer(_Type* __ptr)
 80017be:	b480      	push	{r7}
 80017c0:	b083      	sub	sp, #12
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]
    { return __ptr == 0; }
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	bf0c      	ite	eq
 80017cc:	2301      	moveq	r3, #1
 80017ce:	2300      	movne	r3, #0
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	4618      	mov	r0, r3
 80017d4:	370c      	adds	r7, #12
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr

080017de <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
    __iterator_category(const _Iter&)
 80017de:	b480      	push	{r7}
 80017e0:	b083      	sub	sp, #12
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 80017e6:	4618      	mov	r0, r3
 80017e8:	370c      	adds	r7, #12
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr

080017f2 <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 80017f2:	b480      	push	{r7}
 80017f4:	b085      	sub	sp, #20
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	60f8      	str	r0, [r7, #12]
 80017fa:	60b9      	str	r1, [r7, #8]
 80017fc:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 80017fe:	68ba      	ldr	r2, [r7, #8]
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	1ad3      	subs	r3, r2, r3
    }
 8001804:	4618      	mov	r0, r3
 8001806:	3714      	adds	r7, #20
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001814:	e7fe      	b.n	8001814 <NMI_Handler+0x4>

08001816 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001816:	b480      	push	{r7}
 8001818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800181a:	e7fe      	b.n	800181a <HardFault_Handler+0x4>

0800181c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001820:	e7fe      	b.n	8001820 <MemManage_Handler+0x4>

08001822 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001822:	b480      	push	{r7}
 8001824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001826:	e7fe      	b.n	8001826 <BusFault_Handler+0x4>

08001828 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800182c:	e7fe      	b.n	800182c <UsageFault_Handler+0x4>

0800182e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800182e:	b480      	push	{r7}
 8001830:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001832:	bf00      	nop
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001840:	bf00      	nop
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr

0800184a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800184a:	b480      	push	{r7}
 800184c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800184e:	bf00      	nop
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr

08001858 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800185c:	bf00      	nop
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr

08001866 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001866:	b480      	push	{r7}
 8001868:	af00      	add	r7, sp, #0

  /* USER CODE END UART4_IRQn 0 */
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800186a:	bf00      	nop
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr

08001874 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
	return 1;
 8001878:	2301      	movs	r3, #1
}
 800187a:	4618      	mov	r0, r3
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr

08001884 <_kill>:

int _kill(int pid, int sig)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800188e:	f002 fe2f 	bl	80044f0 <__errno>
 8001892:	4603      	mov	r3, r0
 8001894:	2216      	movs	r2, #22
 8001896:	601a      	str	r2, [r3, #0]
	return -1;
 8001898:	f04f 33ff 	mov.w	r3, #4294967295
}
 800189c:	4618      	mov	r0, r3
 800189e:	3708      	adds	r7, #8
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <_exit>:

void _exit (int status)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80018ac:	f04f 31ff 	mov.w	r1, #4294967295
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	f7ff ffe7 	bl	8001884 <_kill>
	while (1) {}		/* Make sure we hang here */
 80018b6:	e7fe      	b.n	80018b6 <_exit+0x12>

080018b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b086      	sub	sp, #24
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018c0:	4a14      	ldr	r2, [pc, #80]	; (8001914 <_sbrk+0x5c>)
 80018c2:	4b15      	ldr	r3, [pc, #84]	; (8001918 <_sbrk+0x60>)
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018cc:	4b13      	ldr	r3, [pc, #76]	; (800191c <_sbrk+0x64>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d102      	bne.n	80018da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018d4:	4b11      	ldr	r3, [pc, #68]	; (800191c <_sbrk+0x64>)
 80018d6:	4a12      	ldr	r2, [pc, #72]	; (8001920 <_sbrk+0x68>)
 80018d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018da:	4b10      	ldr	r3, [pc, #64]	; (800191c <_sbrk+0x64>)
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4413      	add	r3, r2
 80018e2:	693a      	ldr	r2, [r7, #16]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d207      	bcs.n	80018f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018e8:	f002 fe02 	bl	80044f0 <__errno>
 80018ec:	4603      	mov	r3, r0
 80018ee:	220c      	movs	r2, #12
 80018f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018f2:	f04f 33ff 	mov.w	r3, #4294967295
 80018f6:	e009      	b.n	800190c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018f8:	4b08      	ldr	r3, [pc, #32]	; (800191c <_sbrk+0x64>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018fe:	4b07      	ldr	r3, [pc, #28]	; (800191c <_sbrk+0x64>)
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4413      	add	r3, r2
 8001906:	4a05      	ldr	r2, [pc, #20]	; (800191c <_sbrk+0x64>)
 8001908:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800190a:	68fb      	ldr	r3, [r7, #12]
}
 800190c:	4618      	mov	r0, r3
 800190e:	3718      	adds	r7, #24
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	20020000 	.word	0x20020000
 8001918:	00000400 	.word	0x00000400
 800191c:	200000e8 	.word	0x200000e8
 8001920:	20000118 	.word	0x20000118

08001924 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001928:	4b06      	ldr	r3, [pc, #24]	; (8001944 <SystemInit+0x20>)
 800192a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800192e:	4a05      	ldr	r2, [pc, #20]	; (8001944 <SystemInit+0x20>)
 8001930:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001934:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001938:	bf00      	nop
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	e000ed00 	.word	0xe000ed00

08001948 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001948:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001980 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800194c:	480d      	ldr	r0, [pc, #52]	; (8001984 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800194e:	490e      	ldr	r1, [pc, #56]	; (8001988 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001950:	4a0e      	ldr	r2, [pc, #56]	; (800198c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001952:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001954:	e002      	b.n	800195c <LoopCopyDataInit>

08001956 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001956:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001958:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800195a:	3304      	adds	r3, #4

0800195c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800195c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800195e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001960:	d3f9      	bcc.n	8001956 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001962:	4a0b      	ldr	r2, [pc, #44]	; (8001990 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001964:	4c0b      	ldr	r4, [pc, #44]	; (8001994 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001966:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001968:	e001      	b.n	800196e <LoopFillZerobss>

0800196a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800196a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800196c:	3204      	adds	r2, #4

0800196e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800196e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001970:	d3fb      	bcc.n	800196a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001972:	f7ff ffd7 	bl	8001924 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001976:	f002 fdc1 	bl	80044fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800197a:	f7ff fa23 	bl	8000dc4 <main>
  bx  lr    
 800197e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001980:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001984:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001988:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800198c:	08004ffc 	.word	0x08004ffc
  ldr r2, =_sbss
 8001990:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001994:	20000118 	.word	0x20000118

08001998 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001998:	e7fe      	b.n	8001998 <CAN1_RX0_IRQHandler>
	...

0800199c <__NVIC_GetPriorityGrouping>:
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019a0:	4b04      	ldr	r3, [pc, #16]	; (80019b4 <__NVIC_GetPriorityGrouping+0x18>)
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	0a1b      	lsrs	r3, r3, #8
 80019a6:	f003 0307 	and.w	r3, r3, #7
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr
 80019b4:	e000ed00 	.word	0xe000ed00

080019b8 <__NVIC_EnableIRQ>:
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	4603      	mov	r3, r0
 80019c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	db0b      	blt.n	80019e2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019ca:	79fb      	ldrb	r3, [r7, #7]
 80019cc:	f003 021f 	and.w	r2, r3, #31
 80019d0:	4907      	ldr	r1, [pc, #28]	; (80019f0 <__NVIC_EnableIRQ+0x38>)
 80019d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d6:	095b      	lsrs	r3, r3, #5
 80019d8:	2001      	movs	r0, #1
 80019da:	fa00 f202 	lsl.w	r2, r0, r2
 80019de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80019e2:	bf00      	nop
 80019e4:	370c      	adds	r7, #12
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	e000e100 	.word	0xe000e100

080019f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	4603      	mov	r3, r0
 80019fc:	6039      	str	r1, [r7, #0]
 80019fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	db0a      	blt.n	8001a1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	b2da      	uxtb	r2, r3
 8001a0c:	490c      	ldr	r1, [pc, #48]	; (8001a40 <__NVIC_SetPriority+0x4c>)
 8001a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a12:	0112      	lsls	r2, r2, #4
 8001a14:	b2d2      	uxtb	r2, r2
 8001a16:	440b      	add	r3, r1
 8001a18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a1c:	e00a      	b.n	8001a34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	b2da      	uxtb	r2, r3
 8001a22:	4908      	ldr	r1, [pc, #32]	; (8001a44 <__NVIC_SetPriority+0x50>)
 8001a24:	79fb      	ldrb	r3, [r7, #7]
 8001a26:	f003 030f 	and.w	r3, r3, #15
 8001a2a:	3b04      	subs	r3, #4
 8001a2c:	0112      	lsls	r2, r2, #4
 8001a2e:	b2d2      	uxtb	r2, r2
 8001a30:	440b      	add	r3, r1
 8001a32:	761a      	strb	r2, [r3, #24]
}
 8001a34:	bf00      	nop
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr
 8001a40:	e000e100 	.word	0xe000e100
 8001a44:	e000ed00 	.word	0xe000ed00

08001a48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b089      	sub	sp, #36	; 0x24
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	60f8      	str	r0, [r7, #12]
 8001a50:	60b9      	str	r1, [r7, #8]
 8001a52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	f003 0307 	and.w	r3, r3, #7
 8001a5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	f1c3 0307 	rsb	r3, r3, #7
 8001a62:	2b04      	cmp	r3, #4
 8001a64:	bf28      	it	cs
 8001a66:	2304      	movcs	r3, #4
 8001a68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	3304      	adds	r3, #4
 8001a6e:	2b06      	cmp	r3, #6
 8001a70:	d902      	bls.n	8001a78 <NVIC_EncodePriority+0x30>
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	3b03      	subs	r3, #3
 8001a76:	e000      	b.n	8001a7a <NVIC_EncodePriority+0x32>
 8001a78:	2300      	movs	r3, #0
 8001a7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	69bb      	ldr	r3, [r7, #24]
 8001a80:	fa02 f303 	lsl.w	r3, r2, r3
 8001a84:	1e5a      	subs	r2, r3, #1
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	401a      	ands	r2, r3
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a8e:	2101      	movs	r1, #1
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	fa01 f303 	lsl.w	r3, r1, r3
 8001a96:	1e59      	subs	r1, r3, #1
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	400b      	ands	r3, r1
         );
 8001a9c:	4313      	orrs	r3, r2
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3724      	adds	r7, #36	; 0x24
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
	...

08001aac <LL_AHB1_GRP1_EnableClock>:
{
 8001aac:	b480      	push	{r7}
 8001aae:	b085      	sub	sp, #20
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001ab4:	4b08      	ldr	r3, [pc, #32]	; (8001ad8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001ab6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ab8:	4907      	ldr	r1, [pc, #28]	; (8001ad8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001ac0:	4b05      	ldr	r3, [pc, #20]	; (8001ad8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001ac2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001aca:	68fb      	ldr	r3, [r7, #12]
}
 8001acc:	bf00      	nop
 8001ace:	3714      	adds	r7, #20
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr
 8001ad8:	40023800 	.word	0x40023800

08001adc <LL_APB2_GRP1_EnableClock>:
{
 8001adc:	b480      	push	{r7}
 8001ade:	b085      	sub	sp, #20
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001ae4:	4b08      	ldr	r3, [pc, #32]	; (8001b08 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001ae6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ae8:	4907      	ldr	r1, [pc, #28]	; (8001b08 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001af0:	4b05      	ldr	r3, [pc, #20]	; (8001b08 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001af2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	4013      	ands	r3, r2
 8001af8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001afa:	68fb      	ldr	r3, [r7, #12]
}
 8001afc:	bf00      	nop
 8001afe:	3714      	adds	r7, #20
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr
 8001b08:	40023800 	.word	0x40023800

08001b0c <LL_DMA_SetDataTransferDirection>:
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b085      	sub	sp, #20
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	60f8      	str	r0, [r7, #12]
 8001b14:	60b9      	str	r1, [r7, #8]
 8001b16:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 8001b18:	4a0d      	ldr	r2, [pc, #52]	; (8001b50 <LL_DMA_SetDataTransferDirection+0x44>)
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	4413      	add	r3, r2
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	461a      	mov	r2, r3
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	4413      	add	r3, r2
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001b2c:	4908      	ldr	r1, [pc, #32]	; (8001b50 <LL_DMA_SetDataTransferDirection+0x44>)
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	440b      	add	r3, r1
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	4619      	mov	r1, r3
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	440b      	add	r3, r1
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	600b      	str	r3, [r1, #0]
}
 8001b42:	bf00      	nop
 8001b44:	3714      	adds	r7, #20
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	08004f64 	.word	0x08004f64

08001b54 <LL_DMA_SetMode>:
{
 8001b54:	b480      	push	{r7}
 8001b56:	b085      	sub	sp, #20
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	60f8      	str	r0, [r7, #12]
 8001b5c:	60b9      	str	r1, [r7, #8]
 8001b5e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 8001b60:	4a0d      	ldr	r2, [pc, #52]	; (8001b98 <LL_DMA_SetMode+0x44>)
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	4413      	add	r3, r2
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	461a      	mov	r2, r3
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f423 7290 	bic.w	r2, r3, #288	; 0x120
 8001b74:	4908      	ldr	r1, [pc, #32]	; (8001b98 <LL_DMA_SetMode+0x44>)
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	440b      	add	r3, r1
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	440b      	add	r3, r1
 8001b82:	4619      	mov	r1, r3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	4313      	orrs	r3, r2
 8001b88:	600b      	str	r3, [r1, #0]
}
 8001b8a:	bf00      	nop
 8001b8c:	3714      	adds	r7, #20
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	08004f64 	.word	0x08004f64

08001b9c <LL_DMA_SetPeriphIncMode>:
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b085      	sub	sp, #20
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	60f8      	str	r0, [r7, #12]
 8001ba4:	60b9      	str	r1, [r7, #8]
 8001ba6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 8001ba8:	4a0d      	ldr	r2, [pc, #52]	; (8001be0 <LL_DMA_SetPeriphIncMode+0x44>)
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	4413      	add	r3, r2
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	4413      	add	r3, r2
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001bbc:	4908      	ldr	r1, [pc, #32]	; (8001be0 <LL_DMA_SetPeriphIncMode+0x44>)
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	440b      	add	r3, r1
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	440b      	add	r3, r1
 8001bca:	4619      	mov	r1, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	600b      	str	r3, [r1, #0]
}
 8001bd2:	bf00      	nop
 8001bd4:	3714      	adds	r7, #20
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	08004f64 	.word	0x08004f64

08001be4 <LL_DMA_SetMemoryIncMode>:
{
 8001be4:	b480      	push	{r7}
 8001be6:	b085      	sub	sp, #20
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	60f8      	str	r0, [r7, #12]
 8001bec:	60b9      	str	r1, [r7, #8]
 8001bee:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 8001bf0:	4a0d      	ldr	r2, [pc, #52]	; (8001c28 <LL_DMA_SetMemoryIncMode+0x44>)
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	4413      	add	r3, r2
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	4413      	add	r3, r2
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001c04:	4908      	ldr	r1, [pc, #32]	; (8001c28 <LL_DMA_SetMemoryIncMode+0x44>)
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	440b      	add	r3, r1
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	440b      	add	r3, r1
 8001c12:	4619      	mov	r1, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	4313      	orrs	r3, r2
 8001c18:	600b      	str	r3, [r1, #0]
}
 8001c1a:	bf00      	nop
 8001c1c:	3714      	adds	r7, #20
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	08004f64 	.word	0x08004f64

08001c2c <LL_DMA_SetPeriphSize>:
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b085      	sub	sp, #20
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	60f8      	str	r0, [r7, #12]
 8001c34:	60b9      	str	r1, [r7, #8]
 8001c36:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 8001c38:	4a0d      	ldr	r2, [pc, #52]	; (8001c70 <LL_DMA_SetPeriphSize+0x44>)
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	4413      	add	r3, r2
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	461a      	mov	r2, r3
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	4413      	add	r3, r2
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8001c4c:	4908      	ldr	r1, [pc, #32]	; (8001c70 <LL_DMA_SetPeriphSize+0x44>)
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	440b      	add	r3, r1
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	4619      	mov	r1, r3
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	440b      	add	r3, r1
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	600b      	str	r3, [r1, #0]
}
 8001c62:	bf00      	nop
 8001c64:	3714      	adds	r7, #20
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	08004f64 	.word	0x08004f64

08001c74 <LL_DMA_SetMemorySize>:
{
 8001c74:	b480      	push	{r7}
 8001c76:	b085      	sub	sp, #20
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	60f8      	str	r0, [r7, #12]
 8001c7c:	60b9      	str	r1, [r7, #8]
 8001c7e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 8001c80:	4a0d      	ldr	r2, [pc, #52]	; (8001cb8 <LL_DMA_SetMemorySize+0x44>)
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	4413      	add	r3, r2
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	461a      	mov	r2, r3
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	4413      	add	r3, r2
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 8001c94:	4908      	ldr	r1, [pc, #32]	; (8001cb8 <LL_DMA_SetMemorySize+0x44>)
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	440b      	add	r3, r1
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	440b      	add	r3, r1
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	600b      	str	r3, [r1, #0]
}
 8001caa:	bf00      	nop
 8001cac:	3714      	adds	r7, #20
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	08004f64 	.word	0x08004f64

08001cbc <LL_DMA_SetStreamPriorityLevel>:
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b085      	sub	sp, #20
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	60f8      	str	r0, [r7, #12]
 8001cc4:	60b9      	str	r1, [r7, #8]
 8001cc6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 8001cc8:	4a0d      	ldr	r2, [pc, #52]	; (8001d00 <LL_DMA_SetStreamPriorityLevel+0x44>)
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	4413      	add	r3, r2
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	4413      	add	r3, r2
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001cdc:	4908      	ldr	r1, [pc, #32]	; (8001d00 <LL_DMA_SetStreamPriorityLevel+0x44>)
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	440b      	add	r3, r1
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	440b      	add	r3, r1
 8001cea:	4619      	mov	r1, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	600b      	str	r3, [r1, #0]
}
 8001cf2:	bf00      	nop
 8001cf4:	3714      	adds	r7, #20
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	08004f64 	.word	0x08004f64

08001d04 <LL_DMA_SetChannelSelection>:
{
 8001d04:	b480      	push	{r7}
 8001d06:	b085      	sub	sp, #20
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	60f8      	str	r0, [r7, #12]
 8001d0c:	60b9      	str	r1, [r7, #8]
 8001d0e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 8001d10:	4a0d      	ldr	r2, [pc, #52]	; (8001d48 <LL_DMA_SetChannelSelection+0x44>)
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	4413      	add	r3, r2
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	461a      	mov	r2, r3
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	4413      	add	r3, r2
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8001d24:	4908      	ldr	r1, [pc, #32]	; (8001d48 <LL_DMA_SetChannelSelection+0x44>)
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	440b      	add	r3, r1
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	440b      	add	r3, r1
 8001d32:	4619      	mov	r1, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	600b      	str	r3, [r1, #0]
}
 8001d3a:	bf00      	nop
 8001d3c:	3714      	adds	r7, #20
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	08004f64 	.word	0x08004f64

08001d4c <LL_DMA_SetMemoryBurstxfer>:
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b085      	sub	sp, #20
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	60f8      	str	r0, [r7, #12]
 8001d54:	60b9      	str	r1, [r7, #8]
 8001d56:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MBURST, Mburst);
 8001d58:	4a0d      	ldr	r2, [pc, #52]	; (8001d90 <LL_DMA_SetMemoryBurstxfer+0x44>)
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	461a      	mov	r2, r3
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	4413      	add	r3, r2
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f023 72c0 	bic.w	r2, r3, #25165824	; 0x1800000
 8001d6c:	4908      	ldr	r1, [pc, #32]	; (8001d90 <LL_DMA_SetMemoryBurstxfer+0x44>)
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	440b      	add	r3, r1
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	4619      	mov	r1, r3
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	440b      	add	r3, r1
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	600b      	str	r3, [r1, #0]
}
 8001d82:	bf00      	nop
 8001d84:	3714      	adds	r7, #20
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	08004f64 	.word	0x08004f64

08001d94 <LL_DMA_SetPeriphBurstxfer>:
{
 8001d94:	b480      	push	{r7}
 8001d96:	b085      	sub	sp, #20
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	60f8      	str	r0, [r7, #12]
 8001d9c:	60b9      	str	r1, [r7, #8]
 8001d9e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PBURST, Pburst);
 8001da0:	4a0d      	ldr	r2, [pc, #52]	; (8001dd8 <LL_DMA_SetPeriphBurstxfer+0x44>)
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	4413      	add	r3, r2
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	461a      	mov	r2, r3
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	4413      	add	r3, r2
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f423 02c0 	bic.w	r2, r3, #6291456	; 0x600000
 8001db4:	4908      	ldr	r1, [pc, #32]	; (8001dd8 <LL_DMA_SetPeriphBurstxfer+0x44>)
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	440b      	add	r3, r1
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	440b      	add	r3, r1
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	600b      	str	r3, [r1, #0]
}
 8001dca:	bf00      	nop
 8001dcc:	3714      	adds	r7, #20
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	08004f64 	.word	0x08004f64

08001ddc <LL_DMA_EnableFifoMode>:
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 8001de6:	4a0c      	ldr	r2, [pc, #48]	; (8001e18 <LL_DMA_EnableFifoMode+0x3c>)
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	4413      	add	r3, r2
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	461a      	mov	r2, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	4413      	add	r3, r2
 8001df4:	695b      	ldr	r3, [r3, #20]
 8001df6:	4908      	ldr	r1, [pc, #32]	; (8001e18 <LL_DMA_EnableFifoMode+0x3c>)
 8001df8:	683a      	ldr	r2, [r7, #0]
 8001dfa:	440a      	add	r2, r1
 8001dfc:	7812      	ldrb	r2, [r2, #0]
 8001dfe:	4611      	mov	r1, r2
 8001e00:	687a      	ldr	r2, [r7, #4]
 8001e02:	440a      	add	r2, r1
 8001e04:	f043 0304 	orr.w	r3, r3, #4
 8001e08:	6153      	str	r3, [r2, #20]
}
 8001e0a:	bf00      	nop
 8001e0c:	370c      	adds	r7, #12
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	08004f64 	.word	0x08004f64

08001e1c <LL_DMA_SetFIFOThreshold>:
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b085      	sub	sp, #20
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	60f8      	str	r0, [r7, #12]
 8001e24:	60b9      	str	r1, [r7, #8]
 8001e26:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_FTH, Threshold);
 8001e28:	4a0d      	ldr	r2, [pc, #52]	; (8001e60 <LL_DMA_SetFIFOThreshold+0x44>)
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	4413      	add	r3, r2
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	461a      	mov	r2, r3
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	4413      	add	r3, r2
 8001e36:	695b      	ldr	r3, [r3, #20]
 8001e38:	f023 0203 	bic.w	r2, r3, #3
 8001e3c:	4908      	ldr	r1, [pc, #32]	; (8001e60 <LL_DMA_SetFIFOThreshold+0x44>)
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	440b      	add	r3, r1
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	4619      	mov	r1, r3
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	440b      	add	r3, r1
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	614b      	str	r3, [r1, #20]
}
 8001e52:	bf00      	nop
 8001e54:	3714      	adds	r7, #20
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	08004f64 	.word	0x08004f64

08001e64 <LL_ADC_REG_SetSequencerRanks>:
{
 8001e64:	b480      	push	{r7}
 8001e66:	b089      	sub	sp, #36	; 0x24
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	60f8      	str	r0, [r7, #12]
 8001e6c:	60b9      	str	r1, [r7, #8]
 8001e6e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	332c      	adds	r3, #44	; 0x2c
 8001e74:	4619      	mov	r1, r3
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e7c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001e80:	61ba      	str	r2, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e82:	69ba      	ldr	r2, [r7, #24]
 8001e84:	fa92 f2a2 	rbit	r2, r2
 8001e88:	617a      	str	r2, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001e8a:	697a      	ldr	r2, [r7, #20]
 8001e8c:	fab2 f282 	clz	r2, r2
 8001e90:	b2d2      	uxtb	r2, r2
 8001e92:	40d3      	lsrs	r3, r2
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	440b      	add	r3, r1
 8001e98:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(*preg,
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	f003 031f 	and.w	r3, r3, #31
 8001ea4:	211f      	movs	r1, #31
 8001ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eaa:	43db      	mvns	r3, r3
 8001eac:	401a      	ands	r2, r3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	f003 011f 	and.w	r1, r3, #31
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	f003 031f 	and.w	r3, r3, #31
 8001eba:	fa01 f303 	lsl.w	r3, r1, r3
 8001ebe:	431a      	orrs	r2, r3
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	601a      	str	r2, [r3, #0]
}
 8001ec4:	bf00      	nop
 8001ec6:	3724      	adds	r7, #36	; 0x24
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <LL_ADC_REG_SetFlagEndOfConversion>:
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR2, ADC_CR2_EOCS, EocSelection);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	431a      	orrs	r2, r3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	609a      	str	r2, [r3, #8]
}
 8001eea:	bf00      	nop
 8001eec:	370c      	adds	r7, #12
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr

08001ef6 <LL_ADC_SetChannelSamplingTime>:
{
 8001ef6:	b480      	push	{r7}
 8001ef8:	b08d      	sub	sp, #52	; 0x34
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	60f8      	str	r0, [r7, #12]
 8001efe:	60b9      	str	r1, [r7, #8]
 8001f00:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	330c      	adds	r3, #12
 8001f06:	4619      	mov	r1, r3
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f0e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f12:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f14:	69ba      	ldr	r2, [r7, #24]
 8001f16:	fa92 f2a2 	rbit	r2, r2
 8001f1a:	617a      	str	r2, [r7, #20]
  return result;
 8001f1c:	697a      	ldr	r2, [r7, #20]
 8001f1e:	fab2 f282 	clz	r2, r2
 8001f22:	b2d2      	uxtb	r2, r2
 8001f24:	40d3      	lsrs	r3, r2
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	440b      	add	r3, r1
 8001f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(*preg,
 8001f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8001f36:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 8001f3a:	6239      	str	r1, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f3c:	6a39      	ldr	r1, [r7, #32]
 8001f3e:	fa91 f1a1 	rbit	r1, r1
 8001f42:	61f9      	str	r1, [r7, #28]
  return result;
 8001f44:	69f9      	ldr	r1, [r7, #28]
 8001f46:	fab1 f181 	clz	r1, r1
 8001f4a:	b2c9      	uxtb	r1, r1
 8001f4c:	40cb      	lsrs	r3, r1
 8001f4e:	2107      	movs	r1, #7
 8001f50:	fa01 f303 	lsl.w	r3, r1, r3
 8001f54:	43db      	mvns	r3, r3
 8001f56:	401a      	ands	r2, r3
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8001f5e:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 8001f62:	62b9      	str	r1, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f66:	fa91 f1a1 	rbit	r1, r1
 8001f6a:	6279      	str	r1, [r7, #36]	; 0x24
  return result;
 8001f6c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f6e:	fab1 f181 	clz	r1, r1
 8001f72:	b2c9      	uxtb	r1, r1
 8001f74:	40cb      	lsrs	r3, r1
 8001f76:	6879      	ldr	r1, [r7, #4]
 8001f78:	fa01 f303 	lsl.w	r3, r1, r3
 8001f7c:	431a      	orrs	r2, r3
 8001f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f80:	601a      	str	r2, [r3, #0]
}
 8001f82:	bf00      	nop
 8001f84:	3734      	adds	r7, #52	; 0x34
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr

08001f8e <LL_ADC_Enable>:
{
 8001f8e:	b480      	push	{r7}
 8001f90:	b083      	sub	sp, #12
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	f043 0201 	orr.w	r2, r3, #1
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	609a      	str	r2, [r3, #8]
}
 8001fa2:	bf00      	nop
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr

08001fae <LL_ADC_IsEnabled>:
{
 8001fae:	b480      	push	{r7}
 8001fb0:	b083      	sub	sp, #12
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	f003 0301 	and.w	r3, r3, #1
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	bf0c      	ite	eq
 8001fc2:	2301      	moveq	r3, #1
 8001fc4:	2300      	movne	r3, #0
 8001fc6:	b2db      	uxtb	r3, r3
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	370c      	adds	r7, #12
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr

08001fd4 <LL_ADC_REG_StartConversionSWStart>:
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_SWSTART);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	609a      	str	r2, [r3, #8]
}
 8001fe8:	bf00      	nop
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <LL_ADC_EnableIT_EOCS>:
  * @rmtoll CR1      EOCIE          LL_ADC_EnableIT_EOCS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_EOCS(ADC_TypeDef *ADCx)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f043 0220 	orr.w	r2, r3, #32
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	605a      	str	r2, [r3, #4]
}
 8002008:	bf00      	nop
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <LL_ADC_EnableIT_OVR>:
  * @rmtoll CR1      OVRIE          LL_ADC_EnableIT_OVR
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_OVR(ADC_TypeDef *ADCx)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR1, LL_ADC_IT_OVR);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	605a      	str	r2, [r3, #4]
}
 8002028:	bf00      	nop
 800202a:	370c      	adds	r7, #12
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr

08002034 <_ZN8UHAL_ADC6enableEv>:
  *         ADC internal analog stabilization is required before performing a
  *         ADC conversion start.
  *         Refer to device datasheet, parameter tSTAB.
**/

void UHAL_ADC::enable() {
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
   LL_ADC_Enable(thisInstance);
 8002038:	4808      	ldr	r0, [pc, #32]	; (800205c <_ZN8UHAL_ADC6enableEv+0x28>)
 800203a:	f7ff ffa8 	bl	8001f8e <LL_ADC_Enable>
    waitUntil(LL_ADC_IsEnabled(ADC1));
 800203e:	4807      	ldr	r0, [pc, #28]	; (800205c <_ZN8UHAL_ADC6enableEv+0x28>)
 8002040:	f7ff ffb5 	bl	8001fae <LL_ADC_IsEnabled>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	bf0c      	ite	eq
 800204a:	2301      	moveq	r3, #1
 800204c:	2300      	movne	r3, #0
 800204e:	b2db      	uxtb	r3, r3
 8002050:	2b00      	cmp	r3, #0
 8002052:	d000      	beq.n	8002056 <_ZN8UHAL_ADC6enableEv+0x22>
 8002054:	e7f3      	b.n	800203e <_ZN8UHAL_ADC6enableEv+0xa>
}
 8002056:	bf00      	nop
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	40012000 	.word	0x40012000

08002060 <_ZN8UHAL_ADC15enableInterruptEv>:

void UHAL_ADC::disable() {
    LL_ADC_Disable(thisInstance);
}

void UHAL_ADC::enableInterrupt() {
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
            __SFI auto clear() {
                LL_ADC_ClearFlag_EOCS(thisInstance);
            }

            __SFI auto enableInterrupt() {
                LL_ADC_EnableIT_EOCS(thisInstance);
 8002064:	480c      	ldr	r0, [pc, #48]	; (8002098 <_ZN8UHAL_ADC15enableInterruptEv+0x38>)
 8002066:	f7ff ffc5 	bl	8001ff4 <LL_ADC_EnableIT_EOCS>
            }
 800206a:	bf00      	nop
            __SFI auto clear() {
                LL_ADC_ClearFlag_OVR(thisInstance);
            }

            __SFI auto enableInterrupt() {
                LL_ADC_EnableIT_OVR(thisInstance);
 800206c:	480a      	ldr	r0, [pc, #40]	; (8002098 <_ZN8UHAL_ADC15enableInterruptEv+0x38>)
 800206e:	f7ff ffd1 	bl	8002014 <LL_ADC_EnableIT_OVR>
            }
 8002072:	bf00      	nop

	flag_IT::EOC::enableInterrupt();
	flag_IT::OVR::enableInterrupt();
    NVIC_SetPriority(ADC_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002074:	f7ff fc92 	bl	800199c <__NVIC_GetPriorityGrouping>
 8002078:	4603      	mov	r3, r0
 800207a:	2200      	movs	r2, #0
 800207c:	2100      	movs	r1, #0
 800207e:	4618      	mov	r0, r3
 8002080:	f7ff fce2 	bl	8001a48 <NVIC_EncodePriority>
 8002084:	4603      	mov	r3, r0
 8002086:	4619      	mov	r1, r3
 8002088:	2012      	movs	r0, #18
 800208a:	f7ff fcb3 	bl	80019f4 <__NVIC_SetPriority>
    NVIC_EnableIRQ(ADC_IRQn);
 800208e:	2012      	movs	r0, #18
 8002090:	f7ff fc92 	bl	80019b8 <__NVIC_EnableIRQ>
}
 8002094:	bf00      	nop
 8002096:	bd80      	pop	{r7, pc}
 8002098:	40012000 	.word	0x40012000

0800209c <_ZN8UHAL_ADC15startConversionEv>:
void UHAL_ADC::off() {
    LL_ADC_Disable(thisInstance);
}


void UHAL_ADC::startConversion() {
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0
    LL_ADC_REG_StartConversionSWStart(thisInstance);
 80020a0:	4802      	ldr	r0, [pc, #8]	; (80020ac <_ZN8UHAL_ADC15startConversionEv+0x10>)
 80020a2:	f7ff ff97 	bl	8001fd4 <LL_ADC_REG_StartConversionSWStart>
}
 80020a6:	bf00      	nop
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	40012000 	.word	0x40012000

080020b0 <_ZN8UHAL_ADC11initialize2Ev>:

UHAL_ADC::thisADC_T UHAL_ADC::readAdcConversionRegister() {
    return LL_ADC_REG_ReadConversionData12(thisInstance);
}
void UHAL_ADC::initialize2()
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b092      	sub	sp, #72	; 0x48
 80020b4:	af00      	add	r7, sp, #0

	  /* USER CODE BEGIN ADC1_Init 0 */

	  /* USER CODE END ADC1_Init 0 */

	  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 80020b6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80020ba:	2200      	movs	r2, #0
 80020bc:	601a      	str	r2, [r3, #0]
 80020be:	605a      	str	r2, [r3, #4]
 80020c0:	609a      	str	r2, [r3, #8]
	  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 80020c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020c6:	2200      	movs	r2, #0
 80020c8:	601a      	str	r2, [r3, #0]
 80020ca:	605a      	str	r2, [r3, #4]
 80020cc:	609a      	str	r2, [r3, #8]
 80020ce:	60da      	str	r2, [r3, #12]
 80020d0:	611a      	str	r2, [r3, #16]
	  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 80020d2:	f107 0318 	add.w	r3, r7, #24
 80020d6:	2200      	movs	r2, #0
 80020d8:	601a      	str	r2, [r3, #0]
 80020da:	605a      	str	r2, [r3, #4]
 80020dc:	609a      	str	r2, [r3, #8]
 80020de:	60da      	str	r2, [r3, #12]

	  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020e0:	463b      	mov	r3, r7
 80020e2:	2200      	movs	r2, #0
 80020e4:	601a      	str	r2, [r3, #0]
 80020e6:	605a      	str	r2, [r3, #4]
 80020e8:	609a      	str	r2, [r3, #8]
 80020ea:	60da      	str	r2, [r3, #12]
 80020ec:	611a      	str	r2, [r3, #16]
 80020ee:	615a      	str	r2, [r3, #20]

	  /* Peripheral clock enable */
	  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 80020f0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80020f4:	f7ff fcf2 	bl	8001adc <LL_APB2_GRP1_EnableClock>

	  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80020f8:	2001      	movs	r0, #1
 80020fa:	f7ff fcd7 	bl	8001aac <LL_AHB1_GRP1_EnableClock>
	  /**ADC1 GPIO Configuration
	  PA2   ------> ADC1_IN2
	  PA3   ------> ADC1_IN3
	  */
	  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 80020fe:	230c      	movs	r3, #12
 8002100:	603b      	str	r3, [r7, #0]
	  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8002102:	2303      	movs	r3, #3
 8002104:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002106:	2300      	movs	r3, #0
 8002108:	613b      	str	r3, [r7, #16]
	  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800210a:	463b      	mov	r3, r7
 800210c:	4619      	mov	r1, r3
 800210e:	4845      	ldr	r0, [pc, #276]	; (8002224 <_ZN8UHAL_ADC11initialize2Ev+0x174>)
 8002110:	f001 fc35 	bl	800397e <LL_GPIO_Init>

	  /* ADC1 DMA Init */

	  /* ADC1 Init */
	  LL_DMA_SetChannelSelection(DMA2, LL_DMA_STREAM_0, LL_DMA_CHANNEL_0);
 8002114:	2200      	movs	r2, #0
 8002116:	2100      	movs	r1, #0
 8002118:	4843      	ldr	r0, [pc, #268]	; (8002228 <_ZN8UHAL_ADC11initialize2Ev+0x178>)
 800211a:	f7ff fdf3 	bl	8001d04 <LL_DMA_SetChannelSelection>

	  LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_STREAM_0, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 800211e:	2200      	movs	r2, #0
 8002120:	2100      	movs	r1, #0
 8002122:	4841      	ldr	r0, [pc, #260]	; (8002228 <_ZN8UHAL_ADC11initialize2Ev+0x178>)
 8002124:	f7ff fcf2 	bl	8001b0c <LL_DMA_SetDataTransferDirection>

	  LL_DMA_SetStreamPriorityLevel(DMA2, LL_DMA_STREAM_0, LL_DMA_PRIORITY_VERYHIGH);
 8002128:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800212c:	2100      	movs	r1, #0
 800212e:	483e      	ldr	r0, [pc, #248]	; (8002228 <_ZN8UHAL_ADC11initialize2Ev+0x178>)
 8002130:	f7ff fdc4 	bl	8001cbc <LL_DMA_SetStreamPriorityLevel>

	  LL_DMA_SetMode(DMA2, LL_DMA_STREAM_0, LL_DMA_MODE_CIRCULAR);
 8002134:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002138:	2100      	movs	r1, #0
 800213a:	483b      	ldr	r0, [pc, #236]	; (8002228 <_ZN8UHAL_ADC11initialize2Ev+0x178>)
 800213c:	f7ff fd0a 	bl	8001b54 <LL_DMA_SetMode>

	  LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_STREAM_0, LL_DMA_PERIPH_NOINCREMENT);
 8002140:	2200      	movs	r2, #0
 8002142:	2100      	movs	r1, #0
 8002144:	4838      	ldr	r0, [pc, #224]	; (8002228 <_ZN8UHAL_ADC11initialize2Ev+0x178>)
 8002146:	f7ff fd29 	bl	8001b9c <LL_DMA_SetPeriphIncMode>

	  LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_STREAM_0, LL_DMA_MEMORY_INCREMENT);
 800214a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800214e:	2100      	movs	r1, #0
 8002150:	4835      	ldr	r0, [pc, #212]	; (8002228 <_ZN8UHAL_ADC11initialize2Ev+0x178>)
 8002152:	f7ff fd47 	bl	8001be4 <LL_DMA_SetMemoryIncMode>

	  LL_DMA_SetPeriphSize(DMA2, LL_DMA_STREAM_0, LL_DMA_PDATAALIGN_HALFWORD);
 8002156:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800215a:	2100      	movs	r1, #0
 800215c:	4832      	ldr	r0, [pc, #200]	; (8002228 <_ZN8UHAL_ADC11initialize2Ev+0x178>)
 800215e:	f7ff fd65 	bl	8001c2c <LL_DMA_SetPeriphSize>

	  LL_DMA_SetMemorySize(DMA2, LL_DMA_STREAM_0, LL_DMA_MDATAALIGN_HALFWORD);
 8002162:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002166:	2100      	movs	r1, #0
 8002168:	482f      	ldr	r0, [pc, #188]	; (8002228 <_ZN8UHAL_ADC11initialize2Ev+0x178>)
 800216a:	f7ff fd83 	bl	8001c74 <LL_DMA_SetMemorySize>

	  LL_DMA_EnableFifoMode(DMA2, LL_DMA_STREAM_0);
 800216e:	2100      	movs	r1, #0
 8002170:	482d      	ldr	r0, [pc, #180]	; (8002228 <_ZN8UHAL_ADC11initialize2Ev+0x178>)
 8002172:	f7ff fe33 	bl	8001ddc <LL_DMA_EnableFifoMode>

	  LL_DMA_SetFIFOThreshold(DMA2, LL_DMA_STREAM_0, LL_DMA_FIFOTHRESHOLD_1_4);
 8002176:	2200      	movs	r2, #0
 8002178:	2100      	movs	r1, #0
 800217a:	482b      	ldr	r0, [pc, #172]	; (8002228 <_ZN8UHAL_ADC11initialize2Ev+0x178>)
 800217c:	f7ff fe4e 	bl	8001e1c <LL_DMA_SetFIFOThreshold>

	  LL_DMA_SetMemoryBurstxfer(DMA2, LL_DMA_STREAM_0, LL_DMA_MBURST_SINGLE);
 8002180:	2200      	movs	r2, #0
 8002182:	2100      	movs	r1, #0
 8002184:	4828      	ldr	r0, [pc, #160]	; (8002228 <_ZN8UHAL_ADC11initialize2Ev+0x178>)
 8002186:	f7ff fde1 	bl	8001d4c <LL_DMA_SetMemoryBurstxfer>

	 LL_DMA_SetPeriphBurstxfer(DMA2, LL_DMA_STREAM_0, LL_DMA_PBURST_SINGLE);
 800218a:	2200      	movs	r2, #0
 800218c:	2100      	movs	r1, #0
 800218e:	4826      	ldr	r0, [pc, #152]	; (8002228 <_ZN8UHAL_ADC11initialize2Ev+0x178>)
 8002190:	f7ff fe00 	bl	8001d94 <LL_DMA_SetPeriphBurstxfer>
	  /* USER CODE BEGIN ADC1_Init 1 */

	  /* USER CODE END ADC1_Init 1 */
	  /** Common config
	  */
	  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8002194:	2300      	movs	r3, #0
 8002196:	63fb      	str	r3, [r7, #60]	; 0x3c
	  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8002198:	2300      	movs	r3, #0
 800219a:	643b      	str	r3, [r7, #64]	; 0x40
	  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 800219c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021a0:	647b      	str	r3, [r7, #68]	; 0x44
	  LL_ADC_Init(ADC1, &ADC_InitStruct);
 80021a2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80021a6:	4619      	mov	r1, r3
 80021a8:	4820      	ldr	r0, [pc, #128]	; (800222c <_ZN8UHAL_ADC11initialize2Ev+0x17c>)
 80021aa:	f001 fa75 	bl	8003698 <LL_ADC_Init>
	  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 80021ae:	2300      	movs	r3, #0
 80021b0:	62bb      	str	r3, [r7, #40]	; 0x28
	  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_2RANKS;
 80021b2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80021b6:	62fb      	str	r3, [r7, #44]	; 0x2c
	  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 80021b8:	2300      	movs	r3, #0
 80021ba:	633b      	str	r3, [r7, #48]	; 0x30
	  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_CONTINUOUS;
 80021bc:	2302      	movs	r3, #2
 80021be:	637b      	str	r3, [r7, #52]	; 0x34
	  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 80021c0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80021c4:	63bb      	str	r3, [r7, #56]	; 0x38
	  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 80021c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021ca:	4619      	mov	r1, r3
 80021cc:	4817      	ldr	r0, [pc, #92]	; (800222c <_ZN8UHAL_ADC11initialize2Ev+0x17c>)
 80021ce:	f001 fa8f 	bl	80036f0 <LL_ADC_REG_Init>
	  LL_ADC_REG_SetFlagEndOfConversion(ADC1, LL_ADC_REG_FLAG_EOC_SEQUENCE_CONV);
 80021d2:	2100      	movs	r1, #0
 80021d4:	4815      	ldr	r0, [pc, #84]	; (800222c <_ZN8UHAL_ADC11initialize2Ev+0x17c>)
 80021d6:	f7ff fe7b 	bl	8001ed0 <LL_ADC_REG_SetFlagEndOfConversion>
	  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_SYNC_PCLK_DIV2;
 80021da:	2300      	movs	r3, #0
 80021dc:	61bb      	str	r3, [r7, #24]
	  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 80021de:	2300      	movs	r3, #0
 80021e0:	61fb      	str	r3, [r7, #28]
	  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 80021e2:	f107 0318 	add.w	r3, r7, #24
 80021e6:	4619      	mov	r1, r3
 80021e8:	4811      	ldr	r0, [pc, #68]	; (8002230 <_ZN8UHAL_ADC11initialize2Ev+0x180>)
 80021ea:	f001 fa0d 	bl	8003608 <LL_ADC_CommonInit>
	  /** Configure Regular Channel
	  */
	  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_2);
 80021ee:	4a11      	ldr	r2, [pc, #68]	; (8002234 <_ZN8UHAL_ADC11initialize2Ev+0x184>)
 80021f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80021f4:	480d      	ldr	r0, [pc, #52]	; (800222c <_ZN8UHAL_ADC11initialize2Ev+0x17c>)
 80021f6:	f7ff fe35 	bl	8001e64 <LL_ADC_REG_SetSequencerRanks>
	  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_2, LL_ADC_SAMPLINGTIME_3CYCLES);
 80021fa:	2200      	movs	r2, #0
 80021fc:	490d      	ldr	r1, [pc, #52]	; (8002234 <_ZN8UHAL_ADC11initialize2Ev+0x184>)
 80021fe:	480b      	ldr	r0, [pc, #44]	; (800222c <_ZN8UHAL_ADC11initialize2Ev+0x17c>)
 8002200:	f7ff fe79 	bl	8001ef6 <LL_ADC_SetChannelSamplingTime>
	  /** Configure Regular Channel
	  */
	  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_3);
 8002204:	4a0c      	ldr	r2, [pc, #48]	; (8002238 <_ZN8UHAL_ADC11initialize2Ev+0x188>)
 8002206:	f240 2105 	movw	r1, #517	; 0x205
 800220a:	4808      	ldr	r0, [pc, #32]	; (800222c <_ZN8UHAL_ADC11initialize2Ev+0x17c>)
 800220c:	f7ff fe2a 	bl	8001e64 <LL_ADC_REG_SetSequencerRanks>
	  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_3, LL_ADC_SAMPLINGTIME_3CYCLES);
 8002210:	2200      	movs	r2, #0
 8002212:	4909      	ldr	r1, [pc, #36]	; (8002238 <_ZN8UHAL_ADC11initialize2Ev+0x188>)
 8002214:	4805      	ldr	r0, [pc, #20]	; (800222c <_ZN8UHAL_ADC11initialize2Ev+0x17c>)
 8002216:	f7ff fe6e 	bl	8001ef6 <LL_ADC_SetChannelSamplingTime>
	  /* USER CODE BEGIN ADC1_Init 2 */

	  /* USER CODE END ADC1_Init 2 */
}
 800221a:	bf00      	nop
 800221c:	3748      	adds	r7, #72	; 0x48
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	40020000 	.word	0x40020000
 8002228:	40026400 	.word	0x40026400
 800222c:	40012000 	.word	0x40012000
 8002230:	40012300 	.word	0x40012300
 8002234:	02600002 	.word	0x02600002
 8002238:	02900003 	.word	0x02900003

0800223c <__NVIC_GetPriorityGrouping>:
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002240:	4b04      	ldr	r3, [pc, #16]	; (8002254 <__NVIC_GetPriorityGrouping+0x18>)
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	0a1b      	lsrs	r3, r3, #8
 8002246:	f003 0307 	and.w	r3, r3, #7
}
 800224a:	4618      	mov	r0, r3
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr
 8002254:	e000ed00 	.word	0xe000ed00

08002258 <__NVIC_EnableIRQ>:
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	4603      	mov	r3, r0
 8002260:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002266:	2b00      	cmp	r3, #0
 8002268:	db0b      	blt.n	8002282 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800226a:	79fb      	ldrb	r3, [r7, #7]
 800226c:	f003 021f 	and.w	r2, r3, #31
 8002270:	4907      	ldr	r1, [pc, #28]	; (8002290 <__NVIC_EnableIRQ+0x38>)
 8002272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002276:	095b      	lsrs	r3, r3, #5
 8002278:	2001      	movs	r0, #1
 800227a:	fa00 f202 	lsl.w	r2, r0, r2
 800227e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002282:	bf00      	nop
 8002284:	370c      	adds	r7, #12
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	e000e100 	.word	0xe000e100

08002294 <__NVIC_SetPriority>:
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	4603      	mov	r3, r0
 800229c:	6039      	str	r1, [r7, #0]
 800229e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	db0a      	blt.n	80022be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	b2da      	uxtb	r2, r3
 80022ac:	490c      	ldr	r1, [pc, #48]	; (80022e0 <__NVIC_SetPriority+0x4c>)
 80022ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b2:	0112      	lsls	r2, r2, #4
 80022b4:	b2d2      	uxtb	r2, r2
 80022b6:	440b      	add	r3, r1
 80022b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80022bc:	e00a      	b.n	80022d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	b2da      	uxtb	r2, r3
 80022c2:	4908      	ldr	r1, [pc, #32]	; (80022e4 <__NVIC_SetPriority+0x50>)
 80022c4:	79fb      	ldrb	r3, [r7, #7]
 80022c6:	f003 030f 	and.w	r3, r3, #15
 80022ca:	3b04      	subs	r3, #4
 80022cc:	0112      	lsls	r2, r2, #4
 80022ce:	b2d2      	uxtb	r2, r2
 80022d0:	440b      	add	r3, r1
 80022d2:	761a      	strb	r2, [r3, #24]
}
 80022d4:	bf00      	nop
 80022d6:	370c      	adds	r7, #12
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr
 80022e0:	e000e100 	.word	0xe000e100
 80022e4:	e000ed00 	.word	0xe000ed00

080022e8 <NVIC_EncodePriority>:
{
 80022e8:	b480      	push	{r7}
 80022ea:	b089      	sub	sp, #36	; 0x24
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	60f8      	str	r0, [r7, #12]
 80022f0:	60b9      	str	r1, [r7, #8]
 80022f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	f003 0307 	and.w	r3, r3, #7
 80022fa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	f1c3 0307 	rsb	r3, r3, #7
 8002302:	2b04      	cmp	r3, #4
 8002304:	bf28      	it	cs
 8002306:	2304      	movcs	r3, #4
 8002308:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	3304      	adds	r3, #4
 800230e:	2b06      	cmp	r3, #6
 8002310:	d902      	bls.n	8002318 <NVIC_EncodePriority+0x30>
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	3b03      	subs	r3, #3
 8002316:	e000      	b.n	800231a <NVIC_EncodePriority+0x32>
 8002318:	2300      	movs	r3, #0
 800231a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800231c:	2201      	movs	r2, #1
 800231e:	69bb      	ldr	r3, [r7, #24]
 8002320:	fa02 f303 	lsl.w	r3, r2, r3
 8002324:	1e5a      	subs	r2, r3, #1
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	401a      	ands	r2, r3
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800232e:	2101      	movs	r1, #1
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	fa01 f303 	lsl.w	r3, r1, r3
 8002336:	1e59      	subs	r1, r3, #1
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	400b      	ands	r3, r1
         );
 800233c:	4313      	orrs	r3, r2
}
 800233e:	4618      	mov	r0, r3
 8002340:	3724      	adds	r7, #36	; 0x24
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
	...

0800234c <LL_DMA_EnableStream>:
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8002356:	4a0c      	ldr	r2, [pc, #48]	; (8002388 <LL_DMA_EnableStream+0x3c>)
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	4413      	add	r3, r2
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	461a      	mov	r2, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	4413      	add	r3, r2
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4908      	ldr	r1, [pc, #32]	; (8002388 <LL_DMA_EnableStream+0x3c>)
 8002368:	683a      	ldr	r2, [r7, #0]
 800236a:	440a      	add	r2, r1
 800236c:	7812      	ldrb	r2, [r2, #0]
 800236e:	4611      	mov	r1, r2
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	440a      	add	r2, r1
 8002374:	f043 0301 	orr.w	r3, r3, #1
 8002378:	6013      	str	r3, [r2, #0]
}
 800237a:	bf00      	nop
 800237c:	370c      	adds	r7, #12
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	08004f6c 	.word	0x08004f6c

0800238c <LL_DMA_DisableStream>:
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8002396:	4a0c      	ldr	r2, [pc, #48]	; (80023c8 <LL_DMA_DisableStream+0x3c>)
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	4413      	add	r3, r2
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	461a      	mov	r2, r3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	4413      	add	r3, r2
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4908      	ldr	r1, [pc, #32]	; (80023c8 <LL_DMA_DisableStream+0x3c>)
 80023a8:	683a      	ldr	r2, [r7, #0]
 80023aa:	440a      	add	r2, r1
 80023ac:	7812      	ldrb	r2, [r2, #0]
 80023ae:	4611      	mov	r1, r2
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	440a      	add	r2, r1
 80023b4:	f023 0301 	bic.w	r3, r3, #1
 80023b8:	6013      	str	r3, [r2, #0]
}
 80023ba:	bf00      	nop
 80023bc:	370c      	adds	r7, #12
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop
 80023c8:	08004f6c 	.word	0x08004f6c

080023cc <LL_DMA_IsEnabledStream>:
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN) == (DMA_SxCR_EN));
 80023d6:	4a0a      	ldr	r2, [pc, #40]	; (8002400 <LL_DMA_IsEnabledStream+0x34>)
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	4413      	add	r3, r2
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	461a      	mov	r2, r3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	4413      	add	r3, r2
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	bf0c      	ite	eq
 80023ee:	2301      	moveq	r3, #1
 80023f0:	2300      	movne	r3, #0
 80023f2:	b2db      	uxtb	r3, r3
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr
 8002400:	08004f6c 	.word	0x08004f6c

08002404 <LL_DMA_SetDataLength>:
{
 8002404:	b480      	push	{r7}
 8002406:	b085      	sub	sp, #20
 8002408:	af00      	add	r7, sp, #0
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	60b9      	str	r1, [r7, #8]
 800240e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 8002410:	4a0d      	ldr	r2, [pc, #52]	; (8002448 <LL_DMA_SetDataLength+0x44>)
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	4413      	add	r3, r2
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	461a      	mov	r2, r3
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	4413      	add	r3, r2
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	0c1b      	lsrs	r3, r3, #16
 8002422:	041b      	lsls	r3, r3, #16
 8002424:	4908      	ldr	r1, [pc, #32]	; (8002448 <LL_DMA_SetDataLength+0x44>)
 8002426:	68ba      	ldr	r2, [r7, #8]
 8002428:	440a      	add	r2, r1
 800242a:	7812      	ldrb	r2, [r2, #0]
 800242c:	4611      	mov	r1, r2
 800242e:	68fa      	ldr	r2, [r7, #12]
 8002430:	440a      	add	r2, r1
 8002432:	4611      	mov	r1, r2
 8002434:	687a      	ldr	r2, [r7, #4]
 8002436:	4313      	orrs	r3, r2
 8002438:	604b      	str	r3, [r1, #4]
}
 800243a:	bf00      	nop
 800243c:	3714      	adds	r7, #20
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	08004f6c 	.word	0x08004f6c

0800244c <LL_DMA_SetMemoryAddress>:
{
 800244c:	b480      	push	{r7}
 800244e:	b085      	sub	sp, #20
 8002450:	af00      	add	r7, sp, #0
 8002452:	60f8      	str	r0, [r7, #12]
 8002454:	60b9      	str	r1, [r7, #8]
 8002456:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, MemoryAddress);
 8002458:	4a07      	ldr	r2, [pc, #28]	; (8002478 <LL_DMA_SetMemoryAddress+0x2c>)
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	4413      	add	r3, r2
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	461a      	mov	r2, r3
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	4413      	add	r3, r2
 8002466:	461a      	mov	r2, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	60d3      	str	r3, [r2, #12]
}
 800246c:	bf00      	nop
 800246e:	3714      	adds	r7, #20
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr
 8002478:	08004f6c 	.word	0x08004f6c

0800247c <LL_DMA_SetPeriphAddress>:
{
 800247c:	b480      	push	{r7}
 800247e:	b085      	sub	sp, #20
 8002480:	af00      	add	r7, sp, #0
 8002482:	60f8      	str	r0, [r7, #12]
 8002484:	60b9      	str	r1, [r7, #8]
 8002486:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, PeriphAddress);
 8002488:	4a07      	ldr	r2, [pc, #28]	; (80024a8 <LL_DMA_SetPeriphAddress+0x2c>)
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	4413      	add	r3, r2
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	461a      	mov	r2, r3
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	4413      	add	r3, r2
 8002496:	461a      	mov	r2, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6093      	str	r3, [r2, #8]
}
 800249c:	bf00      	nop
 800249e:	3714      	adds	r7, #20
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr
 80024a8:	08004f6c 	.word	0x08004f6c

080024ac <LL_DMA_EnableIT_HT>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_HT(DMA_TypeDef *DMAx, uint32_t Stream)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_HTIE);
 80024b6:	4a0c      	ldr	r2, [pc, #48]	; (80024e8 <LL_DMA_EnableIT_HT+0x3c>)
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	4413      	add	r3, r2
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	461a      	mov	r2, r3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	4413      	add	r3, r2
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4908      	ldr	r1, [pc, #32]	; (80024e8 <LL_DMA_EnableIT_HT+0x3c>)
 80024c8:	683a      	ldr	r2, [r7, #0]
 80024ca:	440a      	add	r2, r1
 80024cc:	7812      	ldrb	r2, [r2, #0]
 80024ce:	4611      	mov	r1, r2
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	440a      	add	r2, r1
 80024d4:	f043 0308 	orr.w	r3, r3, #8
 80024d8:	6013      	str	r3, [r2, #0]
}
 80024da:	bf00      	nop
 80024dc:	370c      	adds	r7, #12
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop
 80024e8:	08004f6c 	.word	0x08004f6c

080024ec <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Stream)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TEIE);
 80024f6:	4a0c      	ldr	r2, [pc, #48]	; (8002528 <LL_DMA_EnableIT_TE+0x3c>)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	4413      	add	r3, r2
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	461a      	mov	r2, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	4413      	add	r3, r2
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4908      	ldr	r1, [pc, #32]	; (8002528 <LL_DMA_EnableIT_TE+0x3c>)
 8002508:	683a      	ldr	r2, [r7, #0]
 800250a:	440a      	add	r2, r1
 800250c:	7812      	ldrb	r2, [r2, #0]
 800250e:	4611      	mov	r1, r2
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	440a      	add	r2, r1
 8002514:	f043 0304 	orr.w	r3, r3, #4
 8002518:	6013      	str	r3, [r2, #0]
}
 800251a:	bf00      	nop
 800251c:	370c      	adds	r7, #12
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	08004f6c 	.word	0x08004f6c

0800252c <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Stream)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TCIE);
 8002536:	4a0c      	ldr	r2, [pc, #48]	; (8002568 <LL_DMA_EnableIT_TC+0x3c>)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	4413      	add	r3, r2
 800253c:	781b      	ldrb	r3, [r3, #0]
 800253e:	461a      	mov	r2, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	4413      	add	r3, r2
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4908      	ldr	r1, [pc, #32]	; (8002568 <LL_DMA_EnableIT_TC+0x3c>)
 8002548:	683a      	ldr	r2, [r7, #0]
 800254a:	440a      	add	r2, r1
 800254c:	7812      	ldrb	r2, [r2, #0]
 800254e:	4611      	mov	r1, r2
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	440a      	add	r2, r1
 8002554:	f043 0310 	orr.w	r3, r3, #16
 8002558:	6013      	str	r3, [r2, #0]
}
 800255a:	bf00      	nop
 800255c:	370c      	adds	r7, #12
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	08004f6c 	.word	0x08004f6c

0800256c <LL_DMA_EnableIT_DME>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_DME(DMA_TypeDef *DMAx, uint32_t Stream)
{
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DMEIE);
 8002576:	4a0c      	ldr	r2, [pc, #48]	; (80025a8 <LL_DMA_EnableIT_DME+0x3c>)
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	4413      	add	r3, r2
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	461a      	mov	r2, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	4413      	add	r3, r2
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4908      	ldr	r1, [pc, #32]	; (80025a8 <LL_DMA_EnableIT_DME+0x3c>)
 8002588:	683a      	ldr	r2, [r7, #0]
 800258a:	440a      	add	r2, r1
 800258c:	7812      	ldrb	r2, [r2, #0]
 800258e:	4611      	mov	r1, r2
 8002590:	687a      	ldr	r2, [r7, #4]
 8002592:	440a      	add	r2, r1
 8002594:	f043 0302 	orr.w	r3, r3, #2
 8002598:	6013      	str	r3, [r2, #0]
}
 800259a:	bf00      	nop
 800259c:	370c      	adds	r7, #12
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	08004f6c 	.word	0x08004f6c

080025ac <LL_DMA_EnableIT_FE>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_FE(DMA_TypeDef *DMAx, uint32_t Stream)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_FEIE);
 80025b6:	4a0c      	ldr	r2, [pc, #48]	; (80025e8 <LL_DMA_EnableIT_FE+0x3c>)
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	4413      	add	r3, r2
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	461a      	mov	r2, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	4413      	add	r3, r2
 80025c4:	695b      	ldr	r3, [r3, #20]
 80025c6:	4908      	ldr	r1, [pc, #32]	; (80025e8 <LL_DMA_EnableIT_FE+0x3c>)
 80025c8:	683a      	ldr	r2, [r7, #0]
 80025ca:	440a      	add	r2, r1
 80025cc:	7812      	ldrb	r2, [r2, #0]
 80025ce:	4611      	mov	r1, r2
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	440a      	add	r2, r1
 80025d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025d8:	6153      	str	r3, [r2, #20]
}
 80025da:	bf00      	nop
 80025dc:	370c      	adds	r7, #12
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	08004f6c 	.word	0x08004f6c

080025ec <LL_AHB1_GRP1_EnableClock>:
{
 80025ec:	b480      	push	{r7}
 80025ee:	b085      	sub	sp, #20
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80025f4:	4b08      	ldr	r3, [pc, #32]	; (8002618 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80025f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025f8:	4907      	ldr	r1, [pc, #28]	; (8002618 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002600:	4b05      	ldr	r3, [pc, #20]	; (8002618 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002602:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	4013      	ands	r3, r2
 8002608:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800260a:	68fb      	ldr	r3, [r7, #12]
}
 800260c:	bf00      	nop
 800260e:	3714      	adds	r7, #20
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr
 8002618:	40023800 	.word	0x40023800

0800261c <_ZN9UHAL_DMA28DMA_ADC116setBufferAddressEj>:

// DMA2 ADC1
void UHAL_DMA2::DMA_ADC1::enablePerihClock() {
    LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA2);
}
void UHAL_DMA2::DMA_ADC1::setBufferAddress(uintptr_t bufferAddress) {
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
    LL_DMA_SetMemoryAddress(thisInstance, thisStream, bufferAddress);
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	2100      	movs	r1, #0
 8002628:	4803      	ldr	r0, [pc, #12]	; (8002638 <_ZN9UHAL_DMA28DMA_ADC116setBufferAddressEj+0x1c>)
 800262a:	f7ff ff0f 	bl	800244c <LL_DMA_SetMemoryAddress>
}
 800262e:	bf00      	nop
 8002630:	3708      	adds	r7, #8
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	40026400 	.word	0x40026400

0800263c <_ZN9UHAL_DMA28DMA_ADC111initialize2Ev>:

void UHAL_DMA2::DMA_ADC1::initialize2()
{
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
	
	  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA2);
 8002640:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8002644:	f7ff ffd2 	bl	80025ec <LL_AHB1_GRP1_EnableClock>

	  NVIC_SetPriority(thisIRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 1));
 8002648:	f7ff fdf8 	bl	800223c <__NVIC_GetPriorityGrouping>
 800264c:	4603      	mov	r3, r0
 800264e:	2201      	movs	r2, #1
 8002650:	2101      	movs	r1, #1
 8002652:	4618      	mov	r0, r3
 8002654:	f7ff fe48 	bl	80022e8 <NVIC_EncodePriority>
 8002658:	4603      	mov	r3, r0
 800265a:	4619      	mov	r1, r3
 800265c:	2038      	movs	r0, #56	; 0x38
 800265e:	f7ff fe19 	bl	8002294 <__NVIC_SetPriority>
	  NVIC_EnableIRQ(thisIRQn);
 8002662:	2038      	movs	r0, #56	; 0x38
 8002664:	f7ff fdf8 	bl	8002258 <__NVIC_EnableIRQ>
	
}
 8002668:	bf00      	nop
 800266a:	bd80      	pop	{r7, pc}

0800266c <_ZN9UHAL_DMA28DMA_ADC16enableEv>:

void UHAL_DMA2::DMA_ADC1::enable() {
 800266c:	b580      	push	{r7, lr}
 800266e:	af00      	add	r7, sp, #0
    LL_DMA_EnableStream(thisInstance, thisStream);
 8002670:	2100      	movs	r1, #0
 8002672:	4802      	ldr	r0, [pc, #8]	; (800267c <_ZN9UHAL_DMA28DMA_ADC16enableEv+0x10>)
 8002674:	f7ff fe6a 	bl	800234c <LL_DMA_EnableStream>
}
 8002678:	bf00      	nop
 800267a:	bd80      	pop	{r7, pc}
 800267c:	40026400 	.word	0x40026400

08002680 <_ZN9UHAL_DMA28DMA_ADC123setNumberOfDataTransferEt>:

void UHAL_DMA2::DMA_ADC1::setNumberOfDataTransfer(uint16_t numb) {
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	4603      	mov	r3, r0
 8002688:	80fb      	strh	r3, [r7, #6]
    LL_DMA_SetDataLength(thisInstance, thisStream, numb);
 800268a:	88fb      	ldrh	r3, [r7, #6]
 800268c:	461a      	mov	r2, r3
 800268e:	2100      	movs	r1, #0
 8002690:	4803      	ldr	r0, [pc, #12]	; (80026a0 <_ZN9UHAL_DMA28DMA_ADC123setNumberOfDataTransferEt+0x20>)
 8002692:	f7ff feb7 	bl	8002404 <LL_DMA_SetDataLength>
}
 8002696:	bf00      	nop
 8002698:	3708      	adds	r7, #8
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	40026400 	.word	0x40026400

080026a4 <_ZN9UHAL_DMA28DMA_ADC120setPeripheralADDressEj>:

void UHAL_DMA2::DMA_ADC1::setPeripheralADDress(const uintptr_t address) {
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
    LL_DMA_SetPeriphAddress(thisInstance, thisStream, address);
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	2100      	movs	r1, #0
 80026b0:	4803      	ldr	r0, [pc, #12]	; (80026c0 <_ZN9UHAL_DMA28DMA_ADC120setPeripheralADDressEj+0x1c>)
 80026b2:	f7ff fee3 	bl	800247c <LL_DMA_SetPeriphAddress>
}
 80026b6:	bf00      	nop
 80026b8:	3708      	adds	r7, #8
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	40026400 	.word	0x40026400

080026c4 <_ZN9UHAL_DMA28DMA_ADC115enableInterruptEv>:

void UHAL_DMA2::DMA_ADC1::enableInterrupt()
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	af00      	add	r7, sp, #0
            {
                LL_DMA_ClearFlag_DME0(thisInstance);
            }       
            __SFI auto enableInterrupt()
            {
                LL_DMA_EnableIT_DME(thisInstance, thisStream);
 80026c8:	2100      	movs	r1, #0
 80026ca:	480d      	ldr	r0, [pc, #52]	; (8002700 <_ZN9UHAL_DMA28DMA_ADC115enableInterruptEv+0x3c>)
 80026cc:	f7ff ff4e 	bl	800256c <LL_DMA_EnableIT_DME>
            }
 80026d0:	bf00      	nop
                LL_DMA_EnableIT_FE(thisInstance, thisStream);
 80026d2:	2100      	movs	r1, #0
 80026d4:	480a      	ldr	r0, [pc, #40]	; (8002700 <_ZN9UHAL_DMA28DMA_ADC115enableInterruptEv+0x3c>)
 80026d6:	f7ff ff69 	bl	80025ac <LL_DMA_EnableIT_FE>
            }
 80026da:	bf00      	nop
               LL_DMA_EnableIT_HT(thisInstance, thisStream);
 80026dc:	2100      	movs	r1, #0
 80026de:	4808      	ldr	r0, [pc, #32]	; (8002700 <_ZN9UHAL_DMA28DMA_ADC115enableInterruptEv+0x3c>)
 80026e0:	f7ff fee4 	bl	80024ac <LL_DMA_EnableIT_HT>
            }
 80026e4:	bf00      	nop
                LL_DMA_EnableIT_TC(thisInstance, thisStream);
 80026e6:	2100      	movs	r1, #0
 80026e8:	4805      	ldr	r0, [pc, #20]	; (8002700 <_ZN9UHAL_DMA28DMA_ADC115enableInterruptEv+0x3c>)
 80026ea:	f7ff ff1f 	bl	800252c <LL_DMA_EnableIT_TC>
            }
 80026ee:	bf00      	nop
                LL_DMA_EnableIT_TE(thisInstance, thisStream);
 80026f0:	2100      	movs	r1, #0
 80026f2:	4803      	ldr	r0, [pc, #12]	; (8002700 <_ZN9UHAL_DMA28DMA_ADC115enableInterruptEv+0x3c>)
 80026f4:	f7ff fefa 	bl	80024ec <LL_DMA_EnableIT_TE>
            }
 80026f8:	bf00      	nop
    flag_IT::DMEIF::enableInterrupt();
    flag_IT::FEIF::enableInterrupt();
    flag_IT::HTIF::enableInterrupt();
    flag_IT::TCIF::enableInterrupt();
    flag_IT::TEIF::enableInterrupt();
}
 80026fa:	bf00      	nop
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	40026400 	.word	0x40026400

08002704 <_ZN9UHAL_DMA210DMA_USART616setBufferAddressEj>:
// DMA2 USART6

void UHAL_DMA2::DMA_USART6::enablePerihClock() {
    LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA2);
}
void UHAL_DMA2::DMA_USART6::setBufferAddress(uintptr_t bufferAddress) {
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
    LL_DMA_SetMemoryAddress(thisInstance, thisStream, bufferAddress);
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	2101      	movs	r1, #1
 8002710:	4803      	ldr	r0, [pc, #12]	; (8002720 <_ZN9UHAL_DMA210DMA_USART616setBufferAddressEj+0x1c>)
 8002712:	f7ff fe9b 	bl	800244c <LL_DMA_SetMemoryAddress>
}
 8002716:	bf00      	nop
 8002718:	3708      	adds	r7, #8
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	40026400 	.word	0x40026400

08002724 <_ZN9UHAL_DMA210DMA_USART66enableEv>:
	  NVIC_EnableIRQ(thisIRQn);
	
}


void UHAL_DMA2::DMA_USART6::enable() {
 8002724:	b580      	push	{r7, lr}
 8002726:	af00      	add	r7, sp, #0
    LL_DMA_EnableStream(thisInstance, thisStream);
 8002728:	2101      	movs	r1, #1
 800272a:	4802      	ldr	r0, [pc, #8]	; (8002734 <_ZN9UHAL_DMA210DMA_USART66enableEv+0x10>)
 800272c:	f7ff fe0e 	bl	800234c <LL_DMA_EnableStream>
}
 8002730:	bf00      	nop
 8002732:	bd80      	pop	{r7, pc}
 8002734:	40026400 	.word	0x40026400

08002738 <_ZN9UHAL_DMA210DMA_USART623setNumberOfDataTransferEt>:

void UHAL_DMA2::DMA_USART6::setNumberOfDataTransfer(uint16_t numb) {
 8002738:	b580      	push	{r7, lr}
 800273a:	b082      	sub	sp, #8
 800273c:	af00      	add	r7, sp, #0
 800273e:	4603      	mov	r3, r0
 8002740:	80fb      	strh	r3, [r7, #6]
    LL_DMA_SetDataLength(thisInstance, thisStream, numb);
 8002742:	88fb      	ldrh	r3, [r7, #6]
 8002744:	461a      	mov	r2, r3
 8002746:	2101      	movs	r1, #1
 8002748:	4803      	ldr	r0, [pc, #12]	; (8002758 <_ZN9UHAL_DMA210DMA_USART623setNumberOfDataTransferEt+0x20>)
 800274a:	f7ff fe5b 	bl	8002404 <LL_DMA_SetDataLength>
}
 800274e:	bf00      	nop
 8002750:	3708      	adds	r7, #8
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	40026400 	.word	0x40026400

0800275c <_ZN9UHAL_DMA210DMA_USART620setPeripheralADDressEj>:

void UHAL_DMA2::DMA_USART6::setPeripheralADDress(const uintptr_t address) {
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
    LL_DMA_SetPeriphAddress(thisInstance, thisStream, address);
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	2101      	movs	r1, #1
 8002768:	4803      	ldr	r0, [pc, #12]	; (8002778 <_ZN9UHAL_DMA210DMA_USART620setPeripheralADDressEj+0x1c>)
 800276a:	f7ff fe87 	bl	800247c <LL_DMA_SetPeriphAddress>
}
 800276e:	bf00      	nop
 8002770:	3708      	adds	r7, #8
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	40026400 	.word	0x40026400

0800277c <_ZN9UHAL_DMA210DMA_USART610initializeEv>:
    flag_IT::HTIF::enableInterrupt();
    flag_IT::TCIF::enableInterrupt();
    flag_IT::TEIF::enableInterrupt();
}

void UHAL_DMA2::DMA_USART6::initialize() {
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
    LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA2);
 8002780:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8002784:	f7ff ff32 	bl	80025ec <LL_AHB1_GRP1_EnableClock>
    NVIC_SetPriority(thisIRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002788:	f7ff fd58 	bl	800223c <__NVIC_GetPriorityGrouping>
 800278c:	4603      	mov	r3, r0
 800278e:	2200      	movs	r2, #0
 8002790:	2100      	movs	r1, #0
 8002792:	4618      	mov	r0, r3
 8002794:	f7ff fda8 	bl	80022e8 <NVIC_EncodePriority>
 8002798:	4603      	mov	r3, r0
 800279a:	4619      	mov	r1, r3
 800279c:	2039      	movs	r0, #57	; 0x39
 800279e:	f7ff fd79 	bl	8002294 <__NVIC_SetPriority>
    NVIC_EnableIRQ(thisIRQn);
 80027a2:	2039      	movs	r0, #57	; 0x39
 80027a4:	f7ff fd58 	bl	8002258 <__NVIC_EnableIRQ>
}
 80027a8:	bf00      	nop
 80027aa:	bd80      	pop	{r7, pc}

080027ac <_ZN9UHAL_DMA210DMA_USART67disableEv>:

void UHAL_DMA2::DMA_USART6::disable() {
 80027ac:	b580      	push	{r7, lr}
 80027ae:	af00      	add	r7, sp, #0
    LL_DMA_DisableStream(thisInstance, thisStream);
 80027b0:	2101      	movs	r1, #1
 80027b2:	4802      	ldr	r0, [pc, #8]	; (80027bc <_ZN9UHAL_DMA210DMA_USART67disableEv+0x10>)
 80027b4:	f7ff fdea 	bl	800238c <LL_DMA_DisableStream>
}
 80027b8:	bf00      	nop
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	40026400 	.word	0x40026400

080027c0 <_ZN9UHAL_DMA210DMA_USART610isDisabledEv>:

uint8_t UHAL_DMA2::DMA_USART6::isDisabled()
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	af00      	add	r7, sp, #0
	return !LL_DMA_IsEnabledStream(thisInstance, thisStream);
 80027c4:	2101      	movs	r1, #1
 80027c6:	4805      	ldr	r0, [pc, #20]	; (80027dc <_ZN9UHAL_DMA210DMA_USART610isDisabledEv+0x1c>)
 80027c8:	f7ff fe00 	bl	80023cc <LL_DMA_IsEnabledStream>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	bf0c      	ite	eq
 80027d2:	2301      	moveq	r3, #1
 80027d4:	2300      	movne	r3, #0
 80027d6:	b2db      	uxtb	r3, r3
}
 80027d8:	4618      	mov	r0, r3
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	40026400 	.word	0x40026400

080027e0 <_ZNSt14_Function_baseC1Ev>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2200      	movs	r2, #0
 80027ec:	609a      	str	r2, [r3, #8]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4618      	mov	r0, r3
 80027f2:	370c      	adds	r7, #12
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr

080027fc <_ZNSt14_Function_baseD1Ev>:

    ~_Function_base()
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d005      	beq.n	8002818 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	6879      	ldr	r1, [r7, #4]
 8002814:	2203      	movs	r2, #3
 8002816:	4798      	blx	r3
    }
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	4618      	mov	r0, r3
 800281c:	3708      	adds	r7, #8
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}

08002822 <_ZNSt8functionIFvvEEC1Ev>:

      /**
       *  @brief Default construct creates an empty function call wrapper.
       *  @post @c !(bool)*this
       */
      function() noexcept
 8002822:	b580      	push	{r7, lr}
 8002824:	b082      	sub	sp, #8
 8002826:	af00      	add	r7, sp, #0
 8002828:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4618      	mov	r0, r3
 800282e:	f7ff ffd7 	bl	80027e0 <_ZNSt14_Function_baseC1Ev>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4618      	mov	r0, r3
 8002836:	3708      	adds	r7, #8
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}

0800283c <_ZNSt8functionIFvvEED1Ev>:
    class function<_Res(_ArgTypes...)>
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	4618      	mov	r0, r3
 8002848:	f7ff ffd8 	bl	80027fc <_ZNSt14_Function_baseD1Ev>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	4618      	mov	r0, r3
 8002850:	3708      	adds	r7, #8
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
	...

08002858 <_Z41__static_initialization_and_destruction_0ii>:
#define CARMOTIONSIM_SAMPLER_UHAL_INTERRUPT_HANDLER_HPP

#include <functional>
#include "main_cpp.hpp"

std::function<void(void)> interruptCallback;
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	6039      	str	r1, [r7, #0]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2b01      	cmp	r3, #1
 8002866:	d107      	bne.n	8002878 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800286e:	4293      	cmp	r3, r2
 8002870:	d102      	bne.n	8002878 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8002872:	4809      	ldr	r0, [pc, #36]	; (8002898 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8002874:	f7ff ffd5 	bl	8002822 <_ZNSt8functionIFvvEEC1Ev>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d107      	bne.n	800288e <_Z41__static_initialization_and_destruction_0ii+0x36>
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002884:	4293      	cmp	r3, r2
 8002886:	d102      	bne.n	800288e <_Z41__static_initialization_and_destruction_0ii+0x36>
 8002888:	4803      	ldr	r0, [pc, #12]	; (8002898 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800288a:	f7ff ffd7 	bl	800283c <_ZNSt8functionIFvvEED1Ev>
 800288e:	bf00      	nop
 8002890:	3708      	adds	r7, #8
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	200000ec 	.word	0x200000ec

0800289c <_GLOBAL__sub_I_interruptCallback>:
 800289c:	b580      	push	{r7, lr}
 800289e:	af00      	add	r7, sp, #0
 80028a0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80028a4:	2001      	movs	r0, #1
 80028a6:	f7ff ffd7 	bl	8002858 <_Z41__static_initialization_and_destruction_0ii>
 80028aa:	bd80      	pop	{r7, pc}

080028ac <_GLOBAL__sub_D_interruptCallback>:
 80028ac:	b580      	push	{r7, lr}
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80028b4:	2000      	movs	r0, #0
 80028b6:	f7ff ffcf 	bl	8002858 <_Z41__static_initialization_and_destruction_0ii>
 80028ba:	bd80      	pop	{r7, pc}

080028bc <__NVIC_GetPriorityGrouping>:
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028c0:	4b04      	ldr	r3, [pc, #16]	; (80028d4 <__NVIC_GetPriorityGrouping+0x18>)
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	0a1b      	lsrs	r3, r3, #8
 80028c6:	f003 0307 	and.w	r3, r3, #7
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr
 80028d4:	e000ed00 	.word	0xe000ed00

080028d8 <__NVIC_EnableIRQ>:
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	4603      	mov	r3, r0
 80028e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	db0b      	blt.n	8002902 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028ea:	79fb      	ldrb	r3, [r7, #7]
 80028ec:	f003 021f 	and.w	r2, r3, #31
 80028f0:	4907      	ldr	r1, [pc, #28]	; (8002910 <__NVIC_EnableIRQ+0x38>)
 80028f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028f6:	095b      	lsrs	r3, r3, #5
 80028f8:	2001      	movs	r0, #1
 80028fa:	fa00 f202 	lsl.w	r2, r0, r2
 80028fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002902:	bf00      	nop
 8002904:	370c      	adds	r7, #12
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop
 8002910:	e000e100 	.word	0xe000e100

08002914 <__NVIC_SetPriority>:
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	4603      	mov	r3, r0
 800291c:	6039      	str	r1, [r7, #0]
 800291e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002920:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002924:	2b00      	cmp	r3, #0
 8002926:	db0a      	blt.n	800293e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	b2da      	uxtb	r2, r3
 800292c:	490c      	ldr	r1, [pc, #48]	; (8002960 <__NVIC_SetPriority+0x4c>)
 800292e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002932:	0112      	lsls	r2, r2, #4
 8002934:	b2d2      	uxtb	r2, r2
 8002936:	440b      	add	r3, r1
 8002938:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800293c:	e00a      	b.n	8002954 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	b2da      	uxtb	r2, r3
 8002942:	4908      	ldr	r1, [pc, #32]	; (8002964 <__NVIC_SetPriority+0x50>)
 8002944:	79fb      	ldrb	r3, [r7, #7]
 8002946:	f003 030f 	and.w	r3, r3, #15
 800294a:	3b04      	subs	r3, #4
 800294c:	0112      	lsls	r2, r2, #4
 800294e:	b2d2      	uxtb	r2, r2
 8002950:	440b      	add	r3, r1
 8002952:	761a      	strb	r2, [r3, #24]
}
 8002954:	bf00      	nop
 8002956:	370c      	adds	r7, #12
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr
 8002960:	e000e100 	.word	0xe000e100
 8002964:	e000ed00 	.word	0xe000ed00

08002968 <NVIC_EncodePriority>:
{
 8002968:	b480      	push	{r7}
 800296a:	b089      	sub	sp, #36	; 0x24
 800296c:	af00      	add	r7, sp, #0
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	60b9      	str	r1, [r7, #8]
 8002972:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	f003 0307 	and.w	r3, r3, #7
 800297a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	f1c3 0307 	rsb	r3, r3, #7
 8002982:	2b04      	cmp	r3, #4
 8002984:	bf28      	it	cs
 8002986:	2304      	movcs	r3, #4
 8002988:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	3304      	adds	r3, #4
 800298e:	2b06      	cmp	r3, #6
 8002990:	d902      	bls.n	8002998 <NVIC_EncodePriority+0x30>
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	3b03      	subs	r3, #3
 8002996:	e000      	b.n	800299a <NVIC_EncodePriority+0x32>
 8002998:	2300      	movs	r3, #0
 800299a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800299c:	2201      	movs	r2, #1
 800299e:	69bb      	ldr	r3, [r7, #24]
 80029a0:	fa02 f303 	lsl.w	r3, r2, r3
 80029a4:	1e5a      	subs	r2, r3, #1
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	401a      	ands	r2, r3
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029ae:	2101      	movs	r1, #1
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	fa01 f303 	lsl.w	r3, r1, r3
 80029b6:	1e59      	subs	r1, r3, #1
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	400b      	ands	r3, r1
         );
 80029bc:	4313      	orrs	r3, r2
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3724      	adds	r7, #36	; 0x24
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
	...

080029cc <LL_AHB1_GRP1_EnableClock>:
{
 80029cc:	b480      	push	{r7}
 80029ce:	b085      	sub	sp, #20
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80029d4:	4b08      	ldr	r3, [pc, #32]	; (80029f8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80029d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029d8:	4907      	ldr	r1, [pc, #28]	; (80029f8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4313      	orrs	r3, r2
 80029de:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80029e0:	4b05      	ldr	r3, [pc, #20]	; (80029f8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80029e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	4013      	ands	r3, r2
 80029e8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80029ea:	68fb      	ldr	r3, [r7, #12]
}
 80029ec:	bf00      	nop
 80029ee:	3714      	adds	r7, #20
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr
 80029f8:	40023800 	.word	0x40023800

080029fc <LL_APB2_GRP1_EnableClock>:
{
 80029fc:	b480      	push	{r7}
 80029fe:	b085      	sub	sp, #20
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002a04:	4b08      	ldr	r3, [pc, #32]	; (8002a28 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002a06:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a08:	4907      	ldr	r1, [pc, #28]	; (8002a28 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002a10:	4b05      	ldr	r3, [pc, #20]	; (8002a28 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002a12:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	4013      	ands	r3, r2
 8002a18:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
}
 8002a1c:	bf00      	nop
 8002a1e:	3714      	adds	r7, #20
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr
 8002a28:	40023800 	.word	0x40023800

08002a2c <LL_APB2_GRP1_IsEnabledClock>:
  *
  *         (*) value not defined in all devices.
  * @retval State of Periphs (1 or 0).
*/
__STATIC_INLINE uint32_t LL_APB2_GRP1_IsEnabledClock(uint32_t Periphs)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  return (READ_BIT(RCC->APB2ENR, Periphs) == Periphs);
 8002a34:	4b07      	ldr	r3, [pc, #28]	; (8002a54 <LL_APB2_GRP1_IsEnabledClock+0x28>)
 8002a36:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	bf0c      	ite	eq
 8002a42:	2301      	moveq	r3, #1
 8002a44:	2300      	movne	r3, #0
 8002a46:	b2db      	uxtb	r3, r3
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	370c      	adds	r7, #12
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr
 8002a54:	40023800 	.word	0x40023800

08002a58 <LL_DMA_SetDataTransferDirection>:
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b085      	sub	sp, #20
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	60f8      	str	r0, [r7, #12]
 8002a60:	60b9      	str	r1, [r7, #8]
 8002a62:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 8002a64:	4a0d      	ldr	r2, [pc, #52]	; (8002a9c <LL_DMA_SetDataTransferDirection+0x44>)
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	4413      	add	r3, r2
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	4413      	add	r3, r2
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002a78:	4908      	ldr	r1, [pc, #32]	; (8002a9c <LL_DMA_SetDataTransferDirection+0x44>)
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	440b      	add	r3, r1
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	4619      	mov	r1, r3
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	440b      	add	r3, r1
 8002a86:	4619      	mov	r1, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	600b      	str	r3, [r1, #0]
}
 8002a8e:	bf00      	nop
 8002a90:	3714      	adds	r7, #20
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	08004f74 	.word	0x08004f74

08002aa0 <LL_DMA_SetMode>:
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b085      	sub	sp, #20
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	60b9      	str	r1, [r7, #8]
 8002aaa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 8002aac:	4a0d      	ldr	r2, [pc, #52]	; (8002ae4 <LL_DMA_SetMode+0x44>)
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	4413      	add	r3, r2
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	4413      	add	r3, r2
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f423 7290 	bic.w	r2, r3, #288	; 0x120
 8002ac0:	4908      	ldr	r1, [pc, #32]	; (8002ae4 <LL_DMA_SetMode+0x44>)
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	440b      	add	r3, r1
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	4619      	mov	r1, r3
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	440b      	add	r3, r1
 8002ace:	4619      	mov	r1, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	600b      	str	r3, [r1, #0]
}
 8002ad6:	bf00      	nop
 8002ad8:	3714      	adds	r7, #20
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	08004f74 	.word	0x08004f74

08002ae8 <LL_DMA_SetPeriphIncMode>:
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b085      	sub	sp, #20
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	60f8      	str	r0, [r7, #12]
 8002af0:	60b9      	str	r1, [r7, #8]
 8002af2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 8002af4:	4a0d      	ldr	r2, [pc, #52]	; (8002b2c <LL_DMA_SetPeriphIncMode+0x44>)
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	4413      	add	r3, r2
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	461a      	mov	r2, r3
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	4413      	add	r3, r2
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002b08:	4908      	ldr	r1, [pc, #32]	; (8002b2c <LL_DMA_SetPeriphIncMode+0x44>)
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	440b      	add	r3, r1
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	4619      	mov	r1, r3
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	440b      	add	r3, r1
 8002b16:	4619      	mov	r1, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	600b      	str	r3, [r1, #0]
}
 8002b1e:	bf00      	nop
 8002b20:	3714      	adds	r7, #20
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr
 8002b2a:	bf00      	nop
 8002b2c:	08004f74 	.word	0x08004f74

08002b30 <LL_DMA_SetMemoryIncMode>:
{
 8002b30:	b480      	push	{r7}
 8002b32:	b085      	sub	sp, #20
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	60b9      	str	r1, [r7, #8]
 8002b3a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 8002b3c:	4a0d      	ldr	r2, [pc, #52]	; (8002b74 <LL_DMA_SetMemoryIncMode+0x44>)
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	4413      	add	r3, r2
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	461a      	mov	r2, r3
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	4413      	add	r3, r2
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002b50:	4908      	ldr	r1, [pc, #32]	; (8002b74 <LL_DMA_SetMemoryIncMode+0x44>)
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	440b      	add	r3, r1
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	4619      	mov	r1, r3
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	440b      	add	r3, r1
 8002b5e:	4619      	mov	r1, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	600b      	str	r3, [r1, #0]
}
 8002b66:	bf00      	nop
 8002b68:	3714      	adds	r7, #20
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	08004f74 	.word	0x08004f74

08002b78 <LL_DMA_SetPeriphSize>:
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b085      	sub	sp, #20
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	60b9      	str	r1, [r7, #8]
 8002b82:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 8002b84:	4a0d      	ldr	r2, [pc, #52]	; (8002bbc <LL_DMA_SetPeriphSize+0x44>)
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	4413      	add	r3, r2
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	4413      	add	r3, r2
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8002b98:	4908      	ldr	r1, [pc, #32]	; (8002bbc <LL_DMA_SetPeriphSize+0x44>)
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	440b      	add	r3, r1
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	440b      	add	r3, r1
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	600b      	str	r3, [r1, #0]
}
 8002bae:	bf00      	nop
 8002bb0:	3714      	adds	r7, #20
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr
 8002bba:	bf00      	nop
 8002bbc:	08004f74 	.word	0x08004f74

08002bc0 <LL_DMA_SetMemorySize>:
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b085      	sub	sp, #20
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	60f8      	str	r0, [r7, #12]
 8002bc8:	60b9      	str	r1, [r7, #8]
 8002bca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 8002bcc:	4a0d      	ldr	r2, [pc, #52]	; (8002c04 <LL_DMA_SetMemorySize+0x44>)
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	4413      	add	r3, r2
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	4413      	add	r3, r2
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 8002be0:	4908      	ldr	r1, [pc, #32]	; (8002c04 <LL_DMA_SetMemorySize+0x44>)
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	440b      	add	r3, r1
 8002be6:	781b      	ldrb	r3, [r3, #0]
 8002be8:	4619      	mov	r1, r3
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	440b      	add	r3, r1
 8002bee:	4619      	mov	r1, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	600b      	str	r3, [r1, #0]
}
 8002bf6:	bf00      	nop
 8002bf8:	3714      	adds	r7, #20
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr
 8002c02:	bf00      	nop
 8002c04:	08004f74 	.word	0x08004f74

08002c08 <LL_DMA_SetStreamPriorityLevel>:
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b085      	sub	sp, #20
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	60f8      	str	r0, [r7, #12]
 8002c10:	60b9      	str	r1, [r7, #8]
 8002c12:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 8002c14:	4a0d      	ldr	r2, [pc, #52]	; (8002c4c <LL_DMA_SetStreamPriorityLevel+0x44>)
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	4413      	add	r3, r2
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	4413      	add	r3, r2
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c28:	4908      	ldr	r1, [pc, #32]	; (8002c4c <LL_DMA_SetStreamPriorityLevel+0x44>)
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	440b      	add	r3, r1
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	4619      	mov	r1, r3
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	440b      	add	r3, r1
 8002c36:	4619      	mov	r1, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	600b      	str	r3, [r1, #0]
}
 8002c3e:	bf00      	nop
 8002c40:	3714      	adds	r7, #20
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop
 8002c4c:	08004f74 	.word	0x08004f74

08002c50 <LL_DMA_SetChannelSelection>:
{
 8002c50:	b480      	push	{r7}
 8002c52:	b085      	sub	sp, #20
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	60f8      	str	r0, [r7, #12]
 8002c58:	60b9      	str	r1, [r7, #8]
 8002c5a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 8002c5c:	4a0d      	ldr	r2, [pc, #52]	; (8002c94 <LL_DMA_SetChannelSelection+0x44>)
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	4413      	add	r3, r2
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	461a      	mov	r2, r3
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	4413      	add	r3, r2
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8002c70:	4908      	ldr	r1, [pc, #32]	; (8002c94 <LL_DMA_SetChannelSelection+0x44>)
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	440b      	add	r3, r1
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	4619      	mov	r1, r3
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	440b      	add	r3, r1
 8002c7e:	4619      	mov	r1, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	600b      	str	r3, [r1, #0]
}
 8002c86:	bf00      	nop
 8002c88:	3714      	adds	r7, #20
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop
 8002c94:	08004f74 	.word	0x08004f74

08002c98 <LL_DMA_SetMemoryBurstxfer>:
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b085      	sub	sp, #20
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	60f8      	str	r0, [r7, #12]
 8002ca0:	60b9      	str	r1, [r7, #8]
 8002ca2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MBURST, Mburst);
 8002ca4:	4a0d      	ldr	r2, [pc, #52]	; (8002cdc <LL_DMA_SetMemoryBurstxfer+0x44>)
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	4413      	add	r3, r2
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	461a      	mov	r2, r3
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	4413      	add	r3, r2
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f023 72c0 	bic.w	r2, r3, #25165824	; 0x1800000
 8002cb8:	4908      	ldr	r1, [pc, #32]	; (8002cdc <LL_DMA_SetMemoryBurstxfer+0x44>)
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	440b      	add	r3, r1
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	440b      	add	r3, r1
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	600b      	str	r3, [r1, #0]
}
 8002cce:	bf00      	nop
 8002cd0:	3714      	adds	r7, #20
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop
 8002cdc:	08004f74 	.word	0x08004f74

08002ce0 <LL_DMA_SetPeriphBurstxfer>:
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b085      	sub	sp, #20
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	60f8      	str	r0, [r7, #12]
 8002ce8:	60b9      	str	r1, [r7, #8]
 8002cea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PBURST, Pburst);
 8002cec:	4a0d      	ldr	r2, [pc, #52]	; (8002d24 <LL_DMA_SetPeriphBurstxfer+0x44>)
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	4413      	add	r3, r2
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	4413      	add	r3, r2
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f423 02c0 	bic.w	r2, r3, #6291456	; 0x600000
 8002d00:	4908      	ldr	r1, [pc, #32]	; (8002d24 <LL_DMA_SetPeriphBurstxfer+0x44>)
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	440b      	add	r3, r1
 8002d06:	781b      	ldrb	r3, [r3, #0]
 8002d08:	4619      	mov	r1, r3
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	440b      	add	r3, r1
 8002d0e:	4619      	mov	r1, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	600b      	str	r3, [r1, #0]
}
 8002d16:	bf00      	nop
 8002d18:	3714      	adds	r7, #20
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop
 8002d24:	08004f74 	.word	0x08004f74

08002d28 <LL_DMA_EnableFifoMode>:
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 8002d32:	4a0c      	ldr	r2, [pc, #48]	; (8002d64 <LL_DMA_EnableFifoMode+0x3c>)
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	4413      	add	r3, r2
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	4413      	add	r3, r2
 8002d40:	695b      	ldr	r3, [r3, #20]
 8002d42:	4908      	ldr	r1, [pc, #32]	; (8002d64 <LL_DMA_EnableFifoMode+0x3c>)
 8002d44:	683a      	ldr	r2, [r7, #0]
 8002d46:	440a      	add	r2, r1
 8002d48:	7812      	ldrb	r2, [r2, #0]
 8002d4a:	4611      	mov	r1, r2
 8002d4c:	687a      	ldr	r2, [r7, #4]
 8002d4e:	440a      	add	r2, r1
 8002d50:	f043 0304 	orr.w	r3, r3, #4
 8002d54:	6153      	str	r3, [r2, #20]
}
 8002d56:	bf00      	nop
 8002d58:	370c      	adds	r7, #12
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr
 8002d62:	bf00      	nop
 8002d64:	08004f74 	.word	0x08004f74

08002d68 <LL_DMA_SetFIFOThreshold>:
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b085      	sub	sp, #20
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	60f8      	str	r0, [r7, #12]
 8002d70:	60b9      	str	r1, [r7, #8]
 8002d72:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_FTH, Threshold);
 8002d74:	4a0d      	ldr	r2, [pc, #52]	; (8002dac <LL_DMA_SetFIFOThreshold+0x44>)
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	4413      	add	r3, r2
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	4413      	add	r3, r2
 8002d82:	695b      	ldr	r3, [r3, #20]
 8002d84:	f023 0203 	bic.w	r2, r3, #3
 8002d88:	4908      	ldr	r1, [pc, #32]	; (8002dac <LL_DMA_SetFIFOThreshold+0x44>)
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	440b      	add	r3, r1
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	4619      	mov	r1, r3
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	440b      	add	r3, r1
 8002d96:	4619      	mov	r1, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	614b      	str	r3, [r1, #20]
}
 8002d9e:	bf00      	nop
 8002da0:	3714      	adds	r7, #20
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr
 8002daa:	bf00      	nop
 8002dac:	08004f74 	.word	0x08004f74

08002db0 <LL_DMA_EnableIT_HT>:
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_HTIE);
 8002dba:	4a0c      	ldr	r2, [pc, #48]	; (8002dec <LL_DMA_EnableIT_HT+0x3c>)
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	4413      	add	r3, r2
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	4413      	add	r3, r2
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4908      	ldr	r1, [pc, #32]	; (8002dec <LL_DMA_EnableIT_HT+0x3c>)
 8002dcc:	683a      	ldr	r2, [r7, #0]
 8002dce:	440a      	add	r2, r1
 8002dd0:	7812      	ldrb	r2, [r2, #0]
 8002dd2:	4611      	mov	r1, r2
 8002dd4:	687a      	ldr	r2, [r7, #4]
 8002dd6:	440a      	add	r2, r1
 8002dd8:	f043 0308 	orr.w	r3, r3, #8
 8002ddc:	6013      	str	r3, [r2, #0]
}
 8002dde:	bf00      	nop
 8002de0:	370c      	adds	r7, #12
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr
 8002dea:	bf00      	nop
 8002dec:	08004f74 	.word	0x08004f74

08002df0 <LL_DMA_EnableIT_TE>:
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TEIE);
 8002dfa:	4a0c      	ldr	r2, [pc, #48]	; (8002e2c <LL_DMA_EnableIT_TE+0x3c>)
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	4413      	add	r3, r2
 8002e00:	781b      	ldrb	r3, [r3, #0]
 8002e02:	461a      	mov	r2, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	4413      	add	r3, r2
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4908      	ldr	r1, [pc, #32]	; (8002e2c <LL_DMA_EnableIT_TE+0x3c>)
 8002e0c:	683a      	ldr	r2, [r7, #0]
 8002e0e:	440a      	add	r2, r1
 8002e10:	7812      	ldrb	r2, [r2, #0]
 8002e12:	4611      	mov	r1, r2
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	440a      	add	r2, r1
 8002e18:	f043 0304 	orr.w	r3, r3, #4
 8002e1c:	6013      	str	r3, [r2, #0]
}
 8002e1e:	bf00      	nop
 8002e20:	370c      	adds	r7, #12
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr
 8002e2a:	bf00      	nop
 8002e2c:	08004f74 	.word	0x08004f74

08002e30 <LL_DMA_EnableIT_TC>:
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TCIE);
 8002e3a:	4a0c      	ldr	r2, [pc, #48]	; (8002e6c <LL_DMA_EnableIT_TC+0x3c>)
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	4413      	add	r3, r2
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	461a      	mov	r2, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	4413      	add	r3, r2
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4908      	ldr	r1, [pc, #32]	; (8002e6c <LL_DMA_EnableIT_TC+0x3c>)
 8002e4c:	683a      	ldr	r2, [r7, #0]
 8002e4e:	440a      	add	r2, r1
 8002e50:	7812      	ldrb	r2, [r2, #0]
 8002e52:	4611      	mov	r1, r2
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	440a      	add	r2, r1
 8002e58:	f043 0310 	orr.w	r3, r3, #16
 8002e5c:	6013      	str	r3, [r2, #0]
}
 8002e5e:	bf00      	nop
 8002e60:	370c      	adds	r7, #12
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr
 8002e6a:	bf00      	nop
 8002e6c:	08004f74 	.word	0x08004f74

08002e70 <LL_DMA_EnableIT_DME>:
{
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DMEIE);
 8002e7a:	4a0c      	ldr	r2, [pc, #48]	; (8002eac <LL_DMA_EnableIT_DME+0x3c>)
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	4413      	add	r3, r2
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	461a      	mov	r2, r3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	4413      	add	r3, r2
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4908      	ldr	r1, [pc, #32]	; (8002eac <LL_DMA_EnableIT_DME+0x3c>)
 8002e8c:	683a      	ldr	r2, [r7, #0]
 8002e8e:	440a      	add	r2, r1
 8002e90:	7812      	ldrb	r2, [r2, #0]
 8002e92:	4611      	mov	r1, r2
 8002e94:	687a      	ldr	r2, [r7, #4]
 8002e96:	440a      	add	r2, r1
 8002e98:	f043 0302 	orr.w	r3, r3, #2
 8002e9c:	6013      	str	r3, [r2, #0]
}
 8002e9e:	bf00      	nop
 8002ea0:	370c      	adds	r7, #12
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	08004f74 	.word	0x08004f74

08002eb0 <LL_DMA_EnableIT_FE>:
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_FEIE);
 8002eba:	4a0c      	ldr	r2, [pc, #48]	; (8002eec <LL_DMA_EnableIT_FE+0x3c>)
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	4413      	add	r3, r2
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	4413      	add	r3, r2
 8002ec8:	695b      	ldr	r3, [r3, #20]
 8002eca:	4908      	ldr	r1, [pc, #32]	; (8002eec <LL_DMA_EnableIT_FE+0x3c>)
 8002ecc:	683a      	ldr	r2, [r7, #0]
 8002ece:	440a      	add	r2, r1
 8002ed0:	7812      	ldrb	r2, [r2, #0]
 8002ed2:	4611      	mov	r1, r2
 8002ed4:	687a      	ldr	r2, [r7, #4]
 8002ed6:	440a      	add	r2, r1
 8002ed8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002edc:	6153      	str	r3, [r2, #20]
}
 8002ede:	bf00      	nop
 8002ee0:	370c      	adds	r7, #12
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
 8002eea:	bf00      	nop
 8002eec:	08004f74 	.word	0x08004f74

08002ef0 <LL_USART_Enable>:
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	60da      	str	r2, [r3, #12]
}
 8002f04:	bf00      	nop
 8002f06:	370c      	adds	r7, #12
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr

08002f10 <LL_USART_EnableDirectionRx>:
{
 8002f10:	b480      	push	{r7}
 8002f12:	b089      	sub	sp, #36	; 0x24
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RE);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	330c      	adds	r3, #12
 8002f1c:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	e853 3f00 	ldrex	r3, [r3]
 8002f24:	60bb      	str	r3, [r7, #8]
   return(result);
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	f043 0304 	orr.w	r3, r3, #4
 8002f2c:	61fb      	str	r3, [r7, #28]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	330c      	adds	r3, #12
 8002f32:	69fa      	ldr	r2, [r7, #28]
 8002f34:	61ba      	str	r2, [r7, #24]
 8002f36:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f38:	6979      	ldr	r1, [r7, #20]
 8002f3a:	69ba      	ldr	r2, [r7, #24]
 8002f3c:	e841 2300 	strex	r3, r2, [r1]
 8002f40:	613b      	str	r3, [r7, #16]
   return(result);
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	bf14      	ite	ne
 8002f48:	2301      	movne	r3, #1
 8002f4a:	2300      	moveq	r3, #0
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d000      	beq.n	8002f54 <LL_USART_EnableDirectionRx+0x44>
 8002f52:	e7e1      	b.n	8002f18 <LL_USART_EnableDirectionRx+0x8>
}
 8002f54:	bf00      	nop
 8002f56:	3724      	adds	r7, #36	; 0x24
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr

08002f60 <LL_USART_EnableDirectionTx>:
{
 8002f60:	b480      	push	{r7}
 8002f62:	b089      	sub	sp, #36	; 0x24
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TE);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	330c      	adds	r3, #12
 8002f6c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	e853 3f00 	ldrex	r3, [r3]
 8002f74:	60bb      	str	r3, [r7, #8]
   return(result);
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	f043 0308 	orr.w	r3, r3, #8
 8002f7c:	61fb      	str	r3, [r7, #28]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	330c      	adds	r3, #12
 8002f82:	69fa      	ldr	r2, [r7, #28]
 8002f84:	61ba      	str	r2, [r7, #24]
 8002f86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f88:	6979      	ldr	r1, [r7, #20]
 8002f8a:	69ba      	ldr	r2, [r7, #24]
 8002f8c:	e841 2300 	strex	r3, r2, [r1]
 8002f90:	613b      	str	r3, [r7, #16]
   return(result);
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	bf14      	ite	ne
 8002f98:	2301      	movne	r3, #1
 8002f9a:	2300      	moveq	r3, #0
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d000      	beq.n	8002fa4 <LL_USART_EnableDirectionTx+0x44>
 8002fa2:	e7e1      	b.n	8002f68 <LL_USART_EnableDirectionTx+0x8>
}
 8002fa4:	bf00      	nop
 8002fa6:	3724      	adds	r7, #36	; 0x24
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr

08002fb0 <LL_USART_ConfigAsyncMode>:
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	691b      	ldr	r3, [r3, #16]
 8002fbc:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	695b      	ldr	r3, [r3, #20]
 8002fc8:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	615a      	str	r2, [r3, #20]
}
 8002fd0:	bf00      	nop
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr

08002fdc <LL_USART_IsActiveFlag_TC>:
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fec:	2b40      	cmp	r3, #64	; 0x40
 8002fee:	bf0c      	ite	eq
 8002ff0:	2301      	moveq	r3, #1
 8002ff2:	2300      	movne	r3, #0
 8002ff4:	b2db      	uxtb	r3, r3
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	370c      	adds	r7, #12
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr

08003002 <LL_USART_IsActiveFlag_TXE>:
{
 8003002:	b480      	push	{r7}
 8003004:	b083      	sub	sp, #12
 8003006:	af00      	add	r7, sp, #0
 8003008:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003012:	2b80      	cmp	r3, #128	; 0x80
 8003014:	bf0c      	ite	eq
 8003016:	2301      	moveq	r3, #1
 8003018:	2300      	movne	r3, #0
 800301a:	b2db      	uxtb	r3, r3
}
 800301c:	4618      	mov	r0, r3
 800301e:	370c      	adds	r7, #12
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr

08003028 <LL_USART_EnableIT_IDLE>:
  * @rmtoll CR1          IDLEIE        LL_USART_EnableIT_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
{
 8003028:	b480      	push	{r7}
 800302a:	b089      	sub	sp, #36	; 0x24
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	330c      	adds	r3, #12
 8003034:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	e853 3f00 	ldrex	r3, [r3]
 800303c:	60bb      	str	r3, [r7, #8]
   return(result);
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	f043 0310 	orr.w	r3, r3, #16
 8003044:	61fb      	str	r3, [r7, #28]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	330c      	adds	r3, #12
 800304a:	69fa      	ldr	r2, [r7, #28]
 800304c:	61ba      	str	r2, [r7, #24]
 800304e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003050:	6979      	ldr	r1, [r7, #20]
 8003052:	69ba      	ldr	r2, [r7, #24]
 8003054:	e841 2300 	strex	r3, r2, [r1]
 8003058:	613b      	str	r3, [r7, #16]
   return(result);
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	2b00      	cmp	r3, #0
 800305e:	bf14      	ite	ne
 8003060:	2301      	movne	r3, #1
 8003062:	2300      	moveq	r3, #0
 8003064:	b2db      	uxtb	r3, r3
 8003066:	2b00      	cmp	r3, #0
 8003068:	d000      	beq.n	800306c <LL_USART_EnableIT_IDLE+0x44>
 800306a:	e7e1      	b.n	8003030 <LL_USART_EnableIT_IDLE+0x8>
}
 800306c:	bf00      	nop
 800306e:	3724      	adds	r7, #36	; 0x24
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr

08003078 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8003078:	b480      	push	{r7}
 800307a:	b089      	sub	sp, #36	; 0x24
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	330c      	adds	r3, #12
 8003084:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	e853 3f00 	ldrex	r3, [r3]
 800308c:	60bb      	str	r3, [r7, #8]
   return(result);
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	f043 0320 	orr.w	r3, r3, #32
 8003094:	61fb      	str	r3, [r7, #28]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	330c      	adds	r3, #12
 800309a:	69fa      	ldr	r2, [r7, #28]
 800309c:	61ba      	str	r2, [r7, #24]
 800309e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030a0:	6979      	ldr	r1, [r7, #20]
 80030a2:	69ba      	ldr	r2, [r7, #24]
 80030a4:	e841 2300 	strex	r3, r2, [r1]
 80030a8:	613b      	str	r3, [r7, #16]
   return(result);
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	bf14      	ite	ne
 80030b0:	2301      	movne	r3, #1
 80030b2:	2300      	moveq	r3, #0
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d000      	beq.n	80030bc <LL_USART_EnableIT_RXNE+0x44>
 80030ba:	e7e1      	b.n	8003080 <LL_USART_EnableIT_RXNE+0x8>
}
 80030bc:	bf00      	nop
 80030be:	3724      	adds	r7, #36	; 0x24
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr

080030c8 <LL_USART_EnableIT_PE>:
  * @rmtoll CR1          PEIE          LL_USART_EnableIT_PE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_PE(USART_TypeDef *USARTx)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b089      	sub	sp, #36	; 0x24
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_PEIE);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	330c      	adds	r3, #12
 80030d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	e853 3f00 	ldrex	r3, [r3]
 80030dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030e4:	61fb      	str	r3, [r7, #28]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	330c      	adds	r3, #12
 80030ea:	69fa      	ldr	r2, [r7, #28]
 80030ec:	61ba      	str	r2, [r7, #24]
 80030ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030f0:	6979      	ldr	r1, [r7, #20]
 80030f2:	69ba      	ldr	r2, [r7, #24]
 80030f4:	e841 2300 	strex	r3, r2, [r1]
 80030f8:	613b      	str	r3, [r7, #16]
   return(result);
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	bf14      	ite	ne
 8003100:	2301      	movne	r3, #1
 8003102:	2300      	moveq	r3, #0
 8003104:	b2db      	uxtb	r3, r3
 8003106:	2b00      	cmp	r3, #0
 8003108:	d000      	beq.n	800310c <LL_USART_EnableIT_PE+0x44>
 800310a:	e7e1      	b.n	80030d0 <LL_USART_EnableIT_PE+0x8>
}
 800310c:	bf00      	nop
 800310e:	3724      	adds	r7, #36	; 0x24
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr

08003118 <LL_USART_EnableIT_ERROR>:
  * @rmtoll CR3          EIE           LL_USART_EnableIT_ERROR
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
 8003118:	b480      	push	{r7}
 800311a:	b089      	sub	sp, #36	; 0x24
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	3314      	adds	r3, #20
 8003124:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	e853 3f00 	ldrex	r3, [r3]
 800312c:	60bb      	str	r3, [r7, #8]
   return(result);
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	f043 0301 	orr.w	r3, r3, #1
 8003134:	61fb      	str	r3, [r7, #28]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	3314      	adds	r3, #20
 800313a:	69fa      	ldr	r2, [r7, #28]
 800313c:	61ba      	str	r2, [r7, #24]
 800313e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003140:	6979      	ldr	r1, [r7, #20]
 8003142:	69ba      	ldr	r2, [r7, #24]
 8003144:	e841 2300 	strex	r3, r2, [r1]
 8003148:	613b      	str	r3, [r7, #16]
   return(result);
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	2b00      	cmp	r3, #0
 800314e:	bf14      	ite	ne
 8003150:	2301      	movne	r3, #1
 8003152:	2300      	moveq	r3, #0
 8003154:	b2db      	uxtb	r3, r3
 8003156:	2b00      	cmp	r3, #0
 8003158:	d000      	beq.n	800315c <LL_USART_EnableIT_ERROR+0x44>
 800315a:	e7e1      	b.n	8003120 <LL_USART_EnableIT_ERROR+0x8>
}
 800315c:	bf00      	nop
 800315e:	3724      	adds	r7, #36	; 0x24
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr

08003168 <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 8003168:	b480      	push	{r7}
 800316a:	b089      	sub	sp, #36	; 0x24
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	3314      	adds	r3, #20
 8003174:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	e853 3f00 	ldrex	r3, [r3]
 800317c:	60bb      	str	r3, [r7, #8]
   return(result);
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003184:	61fb      	str	r3, [r7, #28]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	3314      	adds	r3, #20
 800318a:	69fa      	ldr	r2, [r7, #28]
 800318c:	61ba      	str	r2, [r7, #24]
 800318e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003190:	6979      	ldr	r1, [r7, #20]
 8003192:	69ba      	ldr	r2, [r7, #24]
 8003194:	e841 2300 	strex	r3, r2, [r1]
 8003198:	613b      	str	r3, [r7, #16]
   return(result);
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	2b00      	cmp	r3, #0
 800319e:	bf14      	ite	ne
 80031a0:	2301      	movne	r3, #1
 80031a2:	2300      	moveq	r3, #0
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d000      	beq.n	80031ac <LL_USART_EnableDMAReq_RX+0x44>
 80031aa:	e7e1      	b.n	8003170 <LL_USART_EnableDMAReq_RX+0x8>
}
 80031ac:	bf00      	nop
 80031ae:	3724      	adds	r7, #36	; 0x24
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr

080031b8 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	460b      	mov	r3, r1
 80031c2:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 80031c4:	78fa      	ldrb	r2, [r7, #3]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	605a      	str	r2, [r3, #4]
}
 80031ca:	bf00      	nop
 80031cc:	370c      	adds	r7, #12
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr
	...

080031d8 <_ZN11UHAL_USART610initializeEm>:

#include "uhal_usart.hpp"
#include "cstring"


void UHAL_USART6::initialize(uint32_t baudRate) {
 80031d8:	b580      	push	{r7, lr}
 80031da:	b090      	sub	sp, #64	; 0x40
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]


    // DMA clock
    UHAL_DMA2::DMA_USART6::initialize();
 80031e0:	f7ff facc 	bl	800277c <_ZN9UHAL_DMA210DMA_USART610initializeEv>


    LL_USART_InitTypeDef USART_InitStruct = {0};
 80031e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031e8:	2200      	movs	r2, #0
 80031ea:	601a      	str	r2, [r3, #0]
 80031ec:	605a      	str	r2, [r3, #4]
 80031ee:	609a      	str	r2, [r3, #8]
 80031f0:	60da      	str	r2, [r3, #12]
 80031f2:	611a      	str	r2, [r3, #16]
 80031f4:	615a      	str	r2, [r3, #20]
 80031f6:	619a      	str	r2, [r3, #24]

    LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031f8:	f107 030c 	add.w	r3, r7, #12
 80031fc:	2200      	movs	r2, #0
 80031fe:	601a      	str	r2, [r3, #0]
 8003200:	605a      	str	r2, [r3, #4]
 8003202:	609a      	str	r2, [r3, #8]
 8003204:	60da      	str	r2, [r3, #12]
 8003206:	611a      	str	r2, [r3, #16]
 8003208:	615a      	str	r2, [r3, #20]


    LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART6);
 800320a:	2020      	movs	r0, #32
 800320c:	f7ff fbf6 	bl	80029fc <LL_APB2_GRP1_EnableClock>

    LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8003210:	2004      	movs	r0, #4
 8003212:	f7ff fbdb 	bl	80029cc <LL_AHB1_GRP1_EnableClock>


    GPIO_InitStruct.Pin = LL_GPIO_PIN_6 | LL_GPIO_PIN_7;
 8003216:	23c0      	movs	r3, #192	; 0xc0
 8003218:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800321a:	2302      	movs	r3, #2
 800321c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800321e:	2303      	movs	r3, #3
 8003220:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003222:	2300      	movs	r3, #0
 8003224:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003226:	2300      	movs	r3, #0
 8003228:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 800322a:	2308      	movs	r3, #8
 800322c:	623b      	str	r3, [r7, #32]
    LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800322e:	f107 030c 	add.w	r3, r7, #12
 8003232:	4619      	mov	r1, r3
 8003234:	483c      	ldr	r0, [pc, #240]	; (8003328 <_ZN11UHAL_USART610initializeEm+0x150>)
 8003236:	f000 fba2 	bl	800397e <LL_GPIO_Init>


    LL_DMA_SetChannelSelection(DMA2, LL_DMA_STREAM_1, LL_DMA_CHANNEL_5);
 800323a:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800323e:	2101      	movs	r1, #1
 8003240:	483a      	ldr	r0, [pc, #232]	; (800332c <_ZN11UHAL_USART610initializeEm+0x154>)
 8003242:	f7ff fd05 	bl	8002c50 <LL_DMA_SetChannelSelection>

    LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_STREAM_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8003246:	2200      	movs	r2, #0
 8003248:	2101      	movs	r1, #1
 800324a:	4838      	ldr	r0, [pc, #224]	; (800332c <_ZN11UHAL_USART610initializeEm+0x154>)
 800324c:	f7ff fc04 	bl	8002a58 <LL_DMA_SetDataTransferDirection>

    LL_DMA_SetStreamPriorityLevel(DMA2, LL_DMA_STREAM_1, LL_DMA_PRIORITY_VERYHIGH);
 8003250:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003254:	2101      	movs	r1, #1
 8003256:	4835      	ldr	r0, [pc, #212]	; (800332c <_ZN11UHAL_USART610initializeEm+0x154>)
 8003258:	f7ff fcd6 	bl	8002c08 <LL_DMA_SetStreamPriorityLevel>

    LL_DMA_SetMode(DMA2, LL_DMA_STREAM_1, LL_DMA_MODE_NORMAL);
 800325c:	2200      	movs	r2, #0
 800325e:	2101      	movs	r1, #1
 8003260:	4832      	ldr	r0, [pc, #200]	; (800332c <_ZN11UHAL_USART610initializeEm+0x154>)
 8003262:	f7ff fc1d 	bl	8002aa0 <LL_DMA_SetMode>

    LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_STREAM_1, LL_DMA_PERIPH_NOINCREMENT);
 8003266:	2200      	movs	r2, #0
 8003268:	2101      	movs	r1, #1
 800326a:	4830      	ldr	r0, [pc, #192]	; (800332c <_ZN11UHAL_USART610initializeEm+0x154>)
 800326c:	f7ff fc3c 	bl	8002ae8 <LL_DMA_SetPeriphIncMode>

    LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_STREAM_1, LL_DMA_MEMORY_INCREMENT);
 8003270:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003274:	2101      	movs	r1, #1
 8003276:	482d      	ldr	r0, [pc, #180]	; (800332c <_ZN11UHAL_USART610initializeEm+0x154>)
 8003278:	f7ff fc5a 	bl	8002b30 <LL_DMA_SetMemoryIncMode>

    LL_DMA_SetPeriphSize(DMA2, LL_DMA_STREAM_1, LL_DMA_PDATAALIGN_BYTE);
 800327c:	2200      	movs	r2, #0
 800327e:	2101      	movs	r1, #1
 8003280:	482a      	ldr	r0, [pc, #168]	; (800332c <_ZN11UHAL_USART610initializeEm+0x154>)
 8003282:	f7ff fc79 	bl	8002b78 <LL_DMA_SetPeriphSize>

    LL_DMA_SetMemorySize(DMA2, LL_DMA_STREAM_1, LL_DMA_MDATAALIGN_BYTE);
 8003286:	2200      	movs	r2, #0
 8003288:	2101      	movs	r1, #1
 800328a:	4828      	ldr	r0, [pc, #160]	; (800332c <_ZN11UHAL_USART610initializeEm+0x154>)
 800328c:	f7ff fc98 	bl	8002bc0 <LL_DMA_SetMemorySize>

    LL_DMA_EnableFifoMode(DMA2, LL_DMA_STREAM_1);
 8003290:	2101      	movs	r1, #1
 8003292:	4826      	ldr	r0, [pc, #152]	; (800332c <_ZN11UHAL_USART610initializeEm+0x154>)
 8003294:	f7ff fd48 	bl	8002d28 <LL_DMA_EnableFifoMode>

    LL_DMA_SetFIFOThreshold(DMA2, LL_DMA_STREAM_1, LL_DMA_FIFOTHRESHOLD_1_4);
 8003298:	2200      	movs	r2, #0
 800329a:	2101      	movs	r1, #1
 800329c:	4823      	ldr	r0, [pc, #140]	; (800332c <_ZN11UHAL_USART610initializeEm+0x154>)
 800329e:	f7ff fd63 	bl	8002d68 <LL_DMA_SetFIFOThreshold>

   LL_DMA_SetMemoryBurstxfer(DMA2, LL_DMA_STREAM_1, LL_DMA_MBURST_SINGLE);
 80032a2:	2200      	movs	r2, #0
 80032a4:	2101      	movs	r1, #1
 80032a6:	4821      	ldr	r0, [pc, #132]	; (800332c <_ZN11UHAL_USART610initializeEm+0x154>)
 80032a8:	f7ff fcf6 	bl	8002c98 <LL_DMA_SetMemoryBurstxfer>

    LL_DMA_SetPeriphBurstxfer(DMA2, LL_DMA_STREAM_1, LL_DMA_PBURST_SINGLE);
 80032ac:	2200      	movs	r2, #0
 80032ae:	2101      	movs	r1, #1
 80032b0:	481e      	ldr	r0, [pc, #120]	; (800332c <_ZN11UHAL_USART610initializeEm+0x154>)
 80032b2:	f7ff fd15 	bl	8002ce0 <LL_DMA_SetPeriphBurstxfer>
                LL_DMA_ClearFlag_FE1(thisInstance);

            }       
            __SFI auto enableInterrupt()
            {
                LL_DMA_EnableIT_FE(thisInstance, thisStream);
 80032b6:	2101      	movs	r1, #1
 80032b8:	481c      	ldr	r0, [pc, #112]	; (800332c <_ZN11UHAL_USART610initializeEm+0x154>)
 80032ba:	f7ff fdf9 	bl	8002eb0 <LL_DMA_EnableIT_FE>
            }
 80032be:	bf00      	nop
            {
                LL_DMA_ClearFlag_DME0(thisInstance);
            }       
            __SFI auto enableInterrupt()
            {
                LL_DMA_EnableIT_DME(thisInstance, thisStream);
 80032c0:	2101      	movs	r1, #1
 80032c2:	481a      	ldr	r0, [pc, #104]	; (800332c <_ZN11UHAL_USART610initializeEm+0x154>)
 80032c4:	f7ff fdd4 	bl	8002e70 <LL_DMA_EnableIT_DME>
            }
 80032c8:	bf00      	nop
               LL_DMA_EnableIT_HT(thisInstance, thisStream);
 80032ca:	2101      	movs	r1, #1
 80032cc:	4817      	ldr	r0, [pc, #92]	; (800332c <_ZN11UHAL_USART610initializeEm+0x154>)
 80032ce:	f7ff fd6f 	bl	8002db0 <LL_DMA_EnableIT_HT>
            }
 80032d2:	bf00      	nop
                LL_DMA_EnableIT_TC(thisInstance, thisStream);
 80032d4:	2101      	movs	r1, #1
 80032d6:	4815      	ldr	r0, [pc, #84]	; (800332c <_ZN11UHAL_USART610initializeEm+0x154>)
 80032d8:	f7ff fdaa 	bl	8002e30 <LL_DMA_EnableIT_TC>
            }
 80032dc:	bf00      	nop
                LL_DMA_EnableIT_TE(thisInstance, thisStream);
 80032de:	2101      	movs	r1, #1
 80032e0:	4812      	ldr	r0, [pc, #72]	; (800332c <_ZN11UHAL_USART610initializeEm+0x154>)
 80032e2:	f7ff fd85 	bl	8002df0 <LL_DMA_EnableIT_TE>
            }
 80032e6:	bf00      	nop
    UHAL_DMA2::DMA_USART6::flag_IT::TCIF::enableInterrupt();
    UHAL_DMA2::DMA_USART6::flag_IT::TEIF::enableInterrupt();



    USART_InitStruct.BaudRate = baudRate;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	627b      	str	r3, [r7, #36]	; 0x24
    USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_9B;
 80032ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032f0:	62bb      	str	r3, [r7, #40]	; 0x28
    USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80032f2:	2300      	movs	r3, #0
 80032f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    USART_InitStruct.Parity = LL_USART_PARITY_EVEN;
 80032f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032fa:	633b      	str	r3, [r7, #48]	; 0x30
    USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80032fc:	230c      	movs	r3, #12
 80032fe:	637b      	str	r3, [r7, #52]	; 0x34
    USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8003300:	2300      	movs	r3, #0
 8003302:	63bb      	str	r3, [r7, #56]	; 0x38
    USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8003304:	2300      	movs	r3, #0
 8003306:	63fb      	str	r3, [r7, #60]	; 0x3c
    LL_USART_Init(USART6, &USART_InitStruct);
 8003308:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800330c:	4619      	mov	r1, r3
 800330e:	4808      	ldr	r0, [pc, #32]	; (8003330 <_ZN11UHAL_USART610initializeEm+0x158>)
 8003310:	f000 feac 	bl	800406c <LL_USART_Init>
    LL_USART_ConfigAsyncMode(USART6);
 8003314:	4806      	ldr	r0, [pc, #24]	; (8003330 <_ZN11UHAL_USART610initializeEm+0x158>)
 8003316:	f7ff fe4b 	bl	8002fb0 <LL_USART_ConfigAsyncMode>

  LL_USART_EnableDMAReq_RX(thisInstance);
 800331a:	4805      	ldr	r0, [pc, #20]	; (8003330 <_ZN11UHAL_USART610initializeEm+0x158>)
 800331c:	f7ff ff24 	bl	8003168 <LL_USART_EnableDMAReq_RX>
 //   LL_USART_Enable(USART6);

}
 8003320:	bf00      	nop
 8003322:	3740      	adds	r7, #64	; 0x40
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}
 8003328:	40020800 	.word	0x40020800
 800332c:	40026400 	.word	0x40026400
 8003330:	40011400 	.word	0x40011400

08003334 <_ZN11UHAL_USART64sendERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
            waitUntil(TXE::isSet());

}


void UHAL_USART6::send(const std::string &str) {
 8003334:	b580      	push	{r7, lr}
 8003336:	b086      	sub	sp, #24
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
    using namespace UHAL_USART6::flag_IT;
    enable();
 800333c:	f000 f8a4 	bl	8003488 <_ZN11UHAL_USART66enableEv>
    enableTransmitter();
 8003340:	f000 f8bc 	bl	80034bc <_ZN11UHAL_USART617enableTransmitterEv>
{
	return UHAL_ERROR::DEPRECATED;
}
auto UHAL_USART6::flag_IT::TXE::isSet()
{
	return LL_USART_IsActiveFlag_TXE(thisInstance);
 8003344:	4823      	ldr	r0, [pc, #140]	; (80033d4 <_ZN11UHAL_USART64sendERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xa0>)
 8003346:	f7ff fe5c 	bl	8003002 <LL_USART_IsActiveFlag_TXE>
 800334a:	4603      	mov	r3, r0
 800334c:	bf00      	nop
            waitUntil(TXE::isSet());
 800334e:	2b00      	cmp	r3, #0
 8003350:	bf0c      	ite	eq
 8003352:	2301      	moveq	r3, #1
 8003354:	2300      	movne	r3, #0
 8003356:	b2db      	uxtb	r3, r3
 8003358:	2b00      	cmp	r3, #0
 800335a:	d000      	beq.n	800335e <_ZN11UHAL_USART64sendERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2a>
 800335c:	e7f2      	b.n	8003344 <_ZN11UHAL_USART64sendERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x10>
    for (decltype(static_cast<std::string>(str))::value_type eachCharOfStr: str) {
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	617b      	str	r3, [r7, #20]
 8003362:	6978      	ldr	r0, [r7, #20]
 8003364:	f001 f818 	bl	8004398 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5beginEv>
 8003368:	4603      	mov	r3, r0
 800336a:	60fb      	str	r3, [r7, #12]
 800336c:	6978      	ldr	r0, [r7, #20]
 800336e:	f001 f815 	bl	800439c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE3endEv>
 8003372:	4603      	mov	r3, r0
 8003374:	60bb      	str	r3, [r7, #8]
 8003376:	f107 0208 	add.w	r2, r7, #8
 800337a:	f107 030c 	add.w	r3, r7, #12
 800337e:	4611      	mov	r1, r2
 8003380:	4618      	mov	r0, r3
 8003382:	f000 f8db 	bl	800353c <_ZN9__gnu_cxxneIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKNS_17__normal_iteratorIT_T0_EESE_>
 8003386:	4603      	mov	r3, r0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d01e      	beq.n	80033ca <_ZN11UHAL_USART64sendERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x96>
 800338c:	f107 030c 	add.w	r3, r7, #12
 8003390:	4618      	mov	r0, r3
 8003392:	f000 f8fb 	bl	800358c <_ZNK9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv>
 8003396:	4603      	mov	r3, r0
 8003398:	781b      	ldrb	r3, [r3, #0]
 800339a:	74fb      	strb	r3, [r7, #19]
        transmitData(eachCharOfStr);
 800339c:	7cfb      	ldrb	r3, [r7, #19]
 800339e:	4618      	mov	r0, r3
 80033a0:	f000 f896 	bl	80034d0 <_ZN11UHAL_USART612transmitDataEh>
	return LL_USART_IsActiveFlag_TC(thisInstance);
 80033a4:	480b      	ldr	r0, [pc, #44]	; (80033d4 <_ZN11UHAL_USART64sendERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xa0>)
 80033a6:	f7ff fe19 	bl	8002fdc <LL_USART_IsActiveFlag_TC>
 80033aa:	4603      	mov	r3, r0
 80033ac:	bf00      	nop
                waitUntil(TC::isSet());
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	bf0c      	ite	eq
 80033b2:	2301      	moveq	r3, #1
 80033b4:	2300      	movne	r3, #0
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d000      	beq.n	80033be <_ZN11UHAL_USART64sendERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x8a>
 80033bc:	e7f2      	b.n	80033a4 <_ZN11UHAL_USART64sendERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x70>
    for (decltype(static_cast<std::string>(str))::value_type eachCharOfStr: str) {
 80033be:	f107 030c 	add.w	r3, r7, #12
 80033c2:	4618      	mov	r0, r3
 80033c4:	f000 f8d2 	bl	800356c <_ZN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv>
 80033c8:	e7d5      	b.n	8003376 <_ZN11UHAL_USART64sendERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x42>
    }

}
 80033ca:	bf00      	nop
 80033cc:	3718      	adds	r7, #24
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	40011400 	.word	0x40011400

080033d8 <_ZN11UHAL_USART620interruptReceiveInitEv>:
    enable();
    enableTransmitter();
    enableInterruptHandle();
}

void UHAL_USART6::interruptReceiveInit() {
 80033d8:	b580      	push	{r7, lr}
 80033da:	b082      	sub	sp, #8
 80033dc:	af00      	add	r7, sp, #0
		return LL_APB2_GRP1_IsEnabledClock(LL_APB2_GRP1_PERIPH_USART6);
 80033de:	2020      	movs	r0, #32
 80033e0:	f7ff fb24 	bl	8002a2c <LL_APB2_GRP1_IsEnabledClock>
 80033e4:	4603      	mov	r3, r0
 80033e6:	bf00      	nop

    if constexpr(systemDebug == debug_T::debugOn) {
        auto posAssert = isPeripheralClKEnabled();
 80033e8:	607b      	str	r3, [r7, #4]
        assert_param(posAssert);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d103      	bne.n	80033f8 <_ZN11UHAL_USART620interruptReceiveInitEv+0x20>
 80033f0:	2190      	movs	r1, #144	; 0x90
 80033f2:	4810      	ldr	r0, [pc, #64]	; (8003434 <_ZN11UHAL_USART620interruptReceiveInitEv+0x5c>)
 80033f4:	f7fd ff92 	bl	800131c <assert_failed>
				LL_USART_EnableIT_ERROR(thisInstance);
 80033f8:	480f      	ldr	r0, [pc, #60]	; (8003438 <_ZN11UHAL_USART620interruptReceiveInitEv+0x60>)
 80033fa:	f7ff fe8d 	bl	8003118 <LL_USART_EnableIT_ERROR>
			}
 80033fe:	bf00      	nop
				LL_USART_EnableIT_RXNE(thisInstance);
 8003400:	480d      	ldr	r0, [pc, #52]	; (8003438 <_ZN11UHAL_USART620interruptReceiveInitEv+0x60>)
 8003402:	f7ff fe39 	bl	8003078 <LL_USART_EnableIT_RXNE>
			}
 8003406:	bf00      	nop
				LL_USART_EnableIT_PE(thisInstance);
 8003408:	480b      	ldr	r0, [pc, #44]	; (8003438 <_ZN11UHAL_USART620interruptReceiveInitEv+0x60>)
 800340a:	f7ff fe5d 	bl	80030c8 <LL_USART_EnableIT_PE>
			}
 800340e:	bf00      	nop
				LL_USART_EnableIT_IDLE(thisInstance);
 8003410:	4809      	ldr	r0, [pc, #36]	; (8003438 <_ZN11UHAL_USART620interruptReceiveInitEv+0x60>)
 8003412:	f7ff fe09 	bl	8003028 <LL_USART_EnableIT_IDLE>
			}
 8003416:	bf00      	nop
				LL_USART_EnableIT_ERROR(thisInstance);
 8003418:	4807      	ldr	r0, [pc, #28]	; (8003438 <_ZN11UHAL_USART620interruptReceiveInitEv+0x60>)
 800341a:	f7ff fe7d 	bl	8003118 <LL_USART_EnableIT_ERROR>
			}
 800341e:	bf00      	nop
    FE::enableIT();
    ORE::enableIT();
    PE::enableIT();
    IDLE::enableIT();
    NF::enableIT();
    enableReceiver();
 8003420:	f000 f882 	bl	8003528 <_ZN11UHAL_USART614enableReceiverEv>
    enableInterruptHandle(0,0);
 8003424:	2100      	movs	r1, #0
 8003426:	2000      	movs	r0, #0
 8003428:	f000 f862 	bl	80034f0 <_ZN11UHAL_USART621enableInterruptHandleEhh>
}
 800342c:	bf00      	nop
 800342e:	3708      	adds	r7, #8
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}
 8003434:	08004f1c 	.word	0x08004f1c
 8003438:	40011400 	.word	0x40011400

0800343c <_ZN11UHAL_USART610developing8fristRunEjt>:

void UHAL_USART6::developing::fristRun(uintptr_t addressBuffer, uint16_t numberOfData) {
 800343c:	b580      	push	{r7, lr}
 800343e:	b082      	sub	sp, #8
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	460b      	mov	r3, r1
 8003446:	807b      	strh	r3, [r7, #2]

    initialize(115200);
 8003448:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 800344c:	f7ff fec4 	bl	80031d8 <_ZN11UHAL_USART610initializeEm>
    enableTransmitter();
 8003450:	f000 f834 	bl	80034bc <_ZN11UHAL_USART617enableTransmitterEv>
    enableReceiver();
 8003454:	f000 f868 	bl	8003528 <_ZN11UHAL_USART614enableReceiverEv>
    UHAL_DMA2::DMA_USART6::setPeripheralADDress(reinterpret_cast<uintptr_t>(&thisInstance->DR));
 8003458:	4b0a      	ldr	r3, [pc, #40]	; (8003484 <_ZN11UHAL_USART610developing8fristRunEjt+0x48>)
 800345a:	3304      	adds	r3, #4
 800345c:	4618      	mov	r0, r3
 800345e:	f7ff f97d 	bl	800275c <_ZN9UHAL_DMA210DMA_USART620setPeripheralADDressEj>
    UHAL_DMA2::DMA_USART6::setBufferAddress(addressBuffer);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f7ff f94e 	bl	8002704 <_ZN9UHAL_DMA210DMA_USART616setBufferAddressEj>
    UHAL_DMA2::DMA_USART6::setNumberOfDataTransfer(numberOfData);
 8003468:	887b      	ldrh	r3, [r7, #2]
 800346a:	4618      	mov	r0, r3
 800346c:	f7ff f964 	bl	8002738 <_ZN9UHAL_DMA210DMA_USART623setNumberOfDataTransferEt>
    UHAL_DMA2::DMA_USART6::enable();
 8003470:	f7ff f958 	bl	8002724 <_ZN9UHAL_DMA210DMA_USART66enableEv>
    interruptReceiveInit();
 8003474:	f7ff ffb0 	bl	80033d8 <_ZN11UHAL_USART620interruptReceiveInitEv>
    enable();
 8003478:	f000 f806 	bl	8003488 <_ZN11UHAL_USART66enableEv>
}
 800347c:	bf00      	nop
 800347e:	3708      	adds	r7, #8
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}
 8003484:	40011400 	.word	0x40011400

08003488 <_ZN11UHAL_USART66enableEv>:
void UHAL_USART6::enablePerihClock() {
    LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART6);
}


void UHAL_USART6::enable() {
 8003488:	b580      	push	{r7, lr}
 800348a:	b082      	sub	sp, #8
 800348c:	af00      	add	r7, sp, #0

    if constexpr (systemDebug == debug_T::debugOn) {
        auto posAssert = LL_APB2_GRP1_IsEnabledClock(
 800348e:	2020      	movs	r0, #32
 8003490:	f7ff facc 	bl	8002a2c <LL_APB2_GRP1_IsEnabledClock>
 8003494:	6078      	str	r0, [r7, #4]
                LL_APB2_GRP1_PERIPH_USART6);
        assert_param(posAssert);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d103      	bne.n	80034a4 <_ZN11UHAL_USART66enableEv+0x1c>
 800349c:	21b7      	movs	r1, #183	; 0xb7
 800349e:	4805      	ldr	r0, [pc, #20]	; (80034b4 <_ZN11UHAL_USART66enableEv+0x2c>)
 80034a0:	f7fd ff3c 	bl	800131c <assert_failed>
    }
    LL_USART_Enable(thisInstance);
 80034a4:	4804      	ldr	r0, [pc, #16]	; (80034b8 <_ZN11UHAL_USART66enableEv+0x30>)
 80034a6:	f7ff fd23 	bl	8002ef0 <LL_USART_Enable>
}
 80034aa:	bf00      	nop
 80034ac:	3708      	adds	r7, #8
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	08004f1c 	.word	0x08004f1c
 80034b8:	40011400 	.word	0x40011400

080034bc <_ZN11UHAL_USART617enableTransmitterEv>:

void UHAL_USART6::enableTransmitter() {
 80034bc:	b580      	push	{r7, lr}
 80034be:	af00      	add	r7, sp, #0
    LL_USART_EnableDirectionTx(thisInstance);
 80034c0:	4802      	ldr	r0, [pc, #8]	; (80034cc <_ZN11UHAL_USART617enableTransmitterEv+0x10>)
 80034c2:	f7ff fd4d 	bl	8002f60 <LL_USART_EnableDirectionTx>
}
 80034c6:	bf00      	nop
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	40011400 	.word	0x40011400

080034d0 <_ZN11UHAL_USART612transmitDataEh>:

void UHAL_USART6::transmitData(const data_T data) {
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b082      	sub	sp, #8
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	4603      	mov	r3, r0
 80034d8:	71fb      	strb	r3, [r7, #7]
    LL_USART_TransmitData8(thisInstance, data);
 80034da:	79fb      	ldrb	r3, [r7, #7]
 80034dc:	4619      	mov	r1, r3
 80034de:	4803      	ldr	r0, [pc, #12]	; (80034ec <_ZN11UHAL_USART612transmitDataEh+0x1c>)
 80034e0:	f7ff fe6a 	bl	80031b8 <LL_USART_TransmitData8>
}
 80034e4:	bf00      	nop
 80034e6:	3708      	adds	r7, #8
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	40011400 	.word	0x40011400

080034f0 <_ZN11UHAL_USART621enableInterruptHandleEhh>:
void UHAL_USART6::disable() {
    LL_USART_Disable(thisInstance);
}

void UHAL_USART6::enableInterruptHandle(const uint8_t PreemptPriority,
                                        const uint8_t SubPriority) {
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	4603      	mov	r3, r0
 80034f8:	460a      	mov	r2, r1
 80034fa:	71fb      	strb	r3, [r7, #7]
 80034fc:	4613      	mov	r3, r2
 80034fe:	71bb      	strb	r3, [r7, #6]
    NVIC_SetPriority(USART6_IRQn,
 8003500:	f7ff f9dc 	bl	80028bc <__NVIC_GetPriorityGrouping>
 8003504:	79fb      	ldrb	r3, [r7, #7]
 8003506:	79ba      	ldrb	r2, [r7, #6]
 8003508:	4619      	mov	r1, r3
 800350a:	f7ff fa2d 	bl	8002968 <NVIC_EncodePriority>
 800350e:	4603      	mov	r3, r0
 8003510:	4619      	mov	r1, r3
 8003512:	2047      	movs	r0, #71	; 0x47
 8003514:	f7ff f9fe 	bl	8002914 <__NVIC_SetPriority>
                     NVIC_EncodePriority(NVIC_GetPriorityGrouping(), PreemptPriority,
                                         SubPriority));
    NVIC_EnableIRQ(USART6_IRQn);
 8003518:	2047      	movs	r0, #71	; 0x47
 800351a:	f7ff f9dd 	bl	80028d8 <__NVIC_EnableIRQ>
}
 800351e:	bf00      	nop
 8003520:	3708      	adds	r7, #8
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
	...

08003528 <_ZN11UHAL_USART614enableReceiverEv>:

void UHAL_USART6::enableReceiver()
{
 8003528:	b580      	push	{r7, lr}
 800352a:	af00      	add	r7, sp, #0
    LL_USART_EnableDirectionRx(thisInstance);
 800352c:	4802      	ldr	r0, [pc, #8]	; (8003538 <_ZN11UHAL_USART614enableReceiverEv+0x10>)
 800352e:	f7ff fcef 	bl	8002f10 <LL_USART_EnableDirectionRx>
}
 8003532:	bf00      	nop
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	40011400 	.word	0x40011400

0800353c <_ZN9__gnu_cxxneIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKNS_17__normal_iteratorIT_T0_EESE_>:
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 800353c:	b590      	push	{r4, r7, lr}
 800353e:	b083      	sub	sp, #12
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f000 f82c 	bl	80035a4 <_ZNK9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>
 800354c:	4603      	mov	r3, r0
 800354e:	681c      	ldr	r4, [r3, #0]
 8003550:	6838      	ldr	r0, [r7, #0]
 8003552:	f000 f827 	bl	80035a4 <_ZNK9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>
 8003556:	4603      	mov	r3, r0
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	429c      	cmp	r4, r3
 800355c:	bf14      	ite	ne
 800355e:	2301      	movne	r3, #1
 8003560:	2300      	moveq	r3, #0
 8003562:	b2db      	uxtb	r3, r3
 8003564:	4618      	mov	r0, r3
 8003566:	370c      	adds	r7, #12
 8003568:	46bd      	mov	sp, r7
 800356a:	bd90      	pop	{r4, r7, pc}

0800356c <_ZN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800356c:	b480      	push	{r7}
 800356e:	b083      	sub	sp, #12
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
	++_M_current;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	1c5a      	adds	r2, r3, #1
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	601a      	str	r2, [r3, #0]
	return *this;
 800357e:	687b      	ldr	r3, [r7, #4]
      }
 8003580:	4618      	mov	r0, r3
 8003582:	370c      	adds	r7, #12
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr

0800358c <_ZNK9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800358c:	b480      	push	{r7}
 800358e:	b083      	sub	sp, #12
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4618      	mov	r0, r3
 800359a:	370c      	adds	r7, #12
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr

080035a4 <_ZNK9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80035a4:	b480      	push	{r7}
 80035a6:	b083      	sub	sp, #12
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	4618      	mov	r0, r3
 80035b0:	370c      	adds	r7, #12
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr

080035ba <LL_ADC_REG_SetSequencerLength>:
{
 80035ba:	b480      	push	{r7}
 80035bc:	b083      	sub	sp, #12
 80035be:	af00      	add	r7, sp, #0
 80035c0:	6078      	str	r0, [r7, #4]
 80035c2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c8:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	431a      	orrs	r2, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80035d4:	bf00      	nop
 80035d6:	370c      	adds	r7, #12
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr

080035e0 <LL_ADC_IsEnabled>:
{
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	f003 0301 	and.w	r3, r3, #1
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	bf0c      	ite	eq
 80035f4:	2301      	moveq	r3, #1
 80035f6:	2300      	movne	r3, #0
 80035f8:	b2db      	uxtb	r3, r3
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	370c      	adds	r7, #12
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr
	...

08003608 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8003608:	b590      	push	{r4, r7, lr}
 800360a:	b085      	sub	sp, #20
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8003612:	2300      	movs	r3, #0
 8003614:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to  */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 8003616:	481c      	ldr	r0, [pc, #112]	; (8003688 <LL_ADC_CommonInit+0x80>)
 8003618:	f7ff ffe2 	bl	80035e0 <LL_ADC_IsEnabled>
 800361c:	4604      	mov	r4, r0
 800361e:	481b      	ldr	r0, [pc, #108]	; (800368c <LL_ADC_CommonInit+0x84>)
 8003620:	f7ff ffde 	bl	80035e0 <LL_ADC_IsEnabled>
 8003624:	4603      	mov	r3, r0
 8003626:	431c      	orrs	r4, r3
 8003628:	4819      	ldr	r0, [pc, #100]	; (8003690 <LL_ADC_CommonInit+0x88>)
 800362a:	f7ff ffd9 	bl	80035e0 <LL_ADC_IsEnabled>
 800362e:	4603      	mov	r3, r0
 8003630:	4323      	orrs	r3, r4
 8003632:	2b00      	cmp	r3, #0
 8003634:	d120      	bne.n	8003678 <LL_ADC_CommonInit+0x70>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d012      	beq.n	8003664 <LL_ADC_CommonInit+0x5c>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685a      	ldr	r2, [r3, #4]
 8003642:	4b14      	ldr	r3, [pc, #80]	; (8003694 <LL_ADC_CommonInit+0x8c>)
 8003644:	4013      	ands	r3, r2
 8003646:	683a      	ldr	r2, [r7, #0]
 8003648:	6811      	ldr	r1, [r2, #0]
 800364a:	683a      	ldr	r2, [r7, #0]
 800364c:	6852      	ldr	r2, [r2, #4]
 800364e:	4311      	orrs	r1, r2
 8003650:	683a      	ldr	r2, [r7, #0]
 8003652:	6892      	ldr	r2, [r2, #8]
 8003654:	4311      	orrs	r1, r2
 8003656:	683a      	ldr	r2, [r7, #0]
 8003658:	68d2      	ldr	r2, [r2, #12]
 800365a:	430a      	orrs	r2, r1
 800365c:	431a      	orrs	r2, r3
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	605a      	str	r2, [r3, #4]
 8003662:	e00b      	b.n	800367c <LL_ADC_CommonInit+0x74>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	685a      	ldr	r2, [r3, #4]
 8003668:	4b0a      	ldr	r3, [pc, #40]	; (8003694 <LL_ADC_CommonInit+0x8c>)
 800366a:	4013      	ands	r3, r2
 800366c:	683a      	ldr	r2, [r7, #0]
 800366e:	6812      	ldr	r2, [r2, #0]
 8003670:	431a      	orrs	r2, r3
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	605a      	str	r2, [r3, #4]
 8003676:	e001      	b.n	800367c <LL_ADC_CommonInit+0x74>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 800367c:	7bfb      	ldrb	r3, [r7, #15]
}
 800367e:	4618      	mov	r0, r3
 8003680:	3714      	adds	r7, #20
 8003682:	46bd      	mov	sp, r7
 8003684:	bd90      	pop	{r4, r7, pc}
 8003686:	bf00      	nop
 8003688:	40012000 	.word	0x40012000
 800368c:	40012100 	.word	0x40012100
 8003690:	40012200 	.word	0x40012200
 8003694:	fffc10e0 	.word	0xfffc10e0

08003698 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b084      	sub	sp, #16
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80036a2:	2300      	movs	r3, #0
 80036a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0UL)
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f7ff ff9a 	bl	80035e0 <LL_ADC_IsEnabled>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d117      	bne.n	80036e2 <LL_ADC_Init+0x4a>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80036ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036be:	683a      	ldr	r2, [r7, #0]
 80036c0:	6811      	ldr	r1, [r2, #0]
 80036c2:	683a      	ldr	r2, [r7, #0]
 80036c4:	6892      	ldr	r2, [r2, #8]
 80036c6:	430a      	orrs	r2, r1
 80036c8:	431a      	orrs	r2, r3
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	605a      	str	r2, [r3, #4]
              ,
                 ADC_InitStruct->Resolution
               | ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	431a      	orrs	r2, r3
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	609a      	str	r2, [r3, #8]
 80036e0:	e001      	b.n	80036e6 <LL_ADC_Init+0x4e>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 80036e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3710      	adds	r7, #16
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}

080036f0 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80036fa:	2300      	movs	r3, #0
 80036fc:	73fb      	strb	r3, [r7, #15]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0UL)
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f7ff ff6e 	bl	80035e0 <LL_ADC_IsEnabled>
 8003704:	4603      	mov	r3, r0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d12b      	bne.n	8003762 <LL_ADC_REG_Init+0x72>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 series, ADC trigger edge is set when starting      */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d009      	beq.n	8003726 <LL_ADC_REG_Init+0x36>
    {
      MODIFY_REG(ADCx->CR1,
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	431a      	orrs	r2, r3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	605a      	str	r2, [r3, #4]
 8003724:	e005      	b.n	8003732 <LL_ADC_REG_Init+0x42>
                   ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	605a      	str	r2, [r3, #4]
                ,
                   LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	689a      	ldr	r2, [r3, #8]
 8003736:	4b0e      	ldr	r3, [pc, #56]	; (8003770 <LL_ADC_REG_Init+0x80>)
 8003738:	4013      	ands	r3, r2
 800373a:	683a      	ldr	r2, [r7, #0]
 800373c:	6812      	ldr	r2, [r2, #0]
 800373e:	f002 6170 	and.w	r1, r2, #251658240	; 0xf000000
 8003742:	683a      	ldr	r2, [r7, #0]
 8003744:	68d2      	ldr	r2, [r2, #12]
 8003746:	4311      	orrs	r1, r2
 8003748:	683a      	ldr	r2, [r7, #0]
 800374a:	6912      	ldr	r2, [r2, #16]
 800374c:	430a      	orrs	r2, r1
 800374e:	431a      	orrs	r2, r3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	4619      	mov	r1, r3
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f7ff ff2d 	bl	80035ba <LL_ADC_REG_SetSequencerLength>
 8003760:	e001      	b.n	8003766 <LL_ADC_REG_Init+0x76>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8003766:	7bfb      	ldrb	r3, [r7, #15]
}
 8003768:	4618      	mov	r0, r3
 800376a:	3710      	adds	r7, #16
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}
 8003770:	c0fffcfd 	.word	0xc0fffcfd

08003774 <LL_GPIO_SetPinMode>:
{
 8003774:	b480      	push	{r7}
 8003776:	b089      	sub	sp, #36	; 0x24
 8003778:	af00      	add	r7, sp, #0
 800377a:	60f8      	str	r0, [r7, #12]
 800377c:	60b9      	str	r1, [r7, #8]
 800377e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	fa93 f3a3 	rbit	r3, r3
 800378e:	613b      	str	r3, [r7, #16]
  return result;
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	fab3 f383 	clz	r3, r3
 8003796:	b2db      	uxtb	r3, r3
 8003798:	005b      	lsls	r3, r3, #1
 800379a:	2103      	movs	r1, #3
 800379c:	fa01 f303 	lsl.w	r3, r1, r3
 80037a0:	43db      	mvns	r3, r3
 80037a2:	401a      	ands	r2, r3
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a8:	69fb      	ldr	r3, [r7, #28]
 80037aa:	fa93 f3a3 	rbit	r3, r3
 80037ae:	61bb      	str	r3, [r7, #24]
  return result;
 80037b0:	69bb      	ldr	r3, [r7, #24]
 80037b2:	fab3 f383 	clz	r3, r3
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	005b      	lsls	r3, r3, #1
 80037ba:	6879      	ldr	r1, [r7, #4]
 80037bc:	fa01 f303 	lsl.w	r3, r1, r3
 80037c0:	431a      	orrs	r2, r3
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	601a      	str	r2, [r3, #0]
}
 80037c6:	bf00      	nop
 80037c8:	3724      	adds	r7, #36	; 0x24
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr

080037d2 <LL_GPIO_SetPinOutputType>:
{
 80037d2:	b480      	push	{r7}
 80037d4:	b085      	sub	sp, #20
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	60f8      	str	r0, [r7, #12]
 80037da:	60b9      	str	r1, [r7, #8]
 80037dc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	685a      	ldr	r2, [r3, #4]
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	43db      	mvns	r3, r3
 80037e6:	401a      	ands	r2, r3
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	6879      	ldr	r1, [r7, #4]
 80037ec:	fb01 f303 	mul.w	r3, r1, r3
 80037f0:	431a      	orrs	r2, r3
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	605a      	str	r2, [r3, #4]
}
 80037f6:	bf00      	nop
 80037f8:	3714      	adds	r7, #20
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr

08003802 <LL_GPIO_SetPinSpeed>:
{
 8003802:	b480      	push	{r7}
 8003804:	b089      	sub	sp, #36	; 0x24
 8003806:	af00      	add	r7, sp, #0
 8003808:	60f8      	str	r0, [r7, #12]
 800380a:	60b9      	str	r1, [r7, #8]
 800380c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	689a      	ldr	r2, [r3, #8]
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	fa93 f3a3 	rbit	r3, r3
 800381c:	613b      	str	r3, [r7, #16]
  return result;
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	fab3 f383 	clz	r3, r3
 8003824:	b2db      	uxtb	r3, r3
 8003826:	005b      	lsls	r3, r3, #1
 8003828:	2103      	movs	r1, #3
 800382a:	fa01 f303 	lsl.w	r3, r1, r3
 800382e:	43db      	mvns	r3, r3
 8003830:	401a      	ands	r2, r3
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	fa93 f3a3 	rbit	r3, r3
 800383c:	61bb      	str	r3, [r7, #24]
  return result;
 800383e:	69bb      	ldr	r3, [r7, #24]
 8003840:	fab3 f383 	clz	r3, r3
 8003844:	b2db      	uxtb	r3, r3
 8003846:	005b      	lsls	r3, r3, #1
 8003848:	6879      	ldr	r1, [r7, #4]
 800384a:	fa01 f303 	lsl.w	r3, r1, r3
 800384e:	431a      	orrs	r2, r3
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	609a      	str	r2, [r3, #8]
}
 8003854:	bf00      	nop
 8003856:	3724      	adds	r7, #36	; 0x24
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr

08003860 <LL_GPIO_SetPinPull>:
{
 8003860:	b480      	push	{r7}
 8003862:	b089      	sub	sp, #36	; 0x24
 8003864:	af00      	add	r7, sp, #0
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	60b9      	str	r1, [r7, #8]
 800386a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	68da      	ldr	r2, [r3, #12]
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	fa93 f3a3 	rbit	r3, r3
 800387a:	613b      	str	r3, [r7, #16]
  return result;
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	fab3 f383 	clz	r3, r3
 8003882:	b2db      	uxtb	r3, r3
 8003884:	005b      	lsls	r3, r3, #1
 8003886:	2103      	movs	r1, #3
 8003888:	fa01 f303 	lsl.w	r3, r1, r3
 800388c:	43db      	mvns	r3, r3
 800388e:	401a      	ands	r2, r3
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003894:	69fb      	ldr	r3, [r7, #28]
 8003896:	fa93 f3a3 	rbit	r3, r3
 800389a:	61bb      	str	r3, [r7, #24]
  return result;
 800389c:	69bb      	ldr	r3, [r7, #24]
 800389e:	fab3 f383 	clz	r3, r3
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	005b      	lsls	r3, r3, #1
 80038a6:	6879      	ldr	r1, [r7, #4]
 80038a8:	fa01 f303 	lsl.w	r3, r1, r3
 80038ac:	431a      	orrs	r2, r3
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	60da      	str	r2, [r3, #12]
}
 80038b2:	bf00      	nop
 80038b4:	3724      	adds	r7, #36	; 0x24
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr

080038be <LL_GPIO_SetAFPin_0_7>:
{
 80038be:	b480      	push	{r7}
 80038c0:	b089      	sub	sp, #36	; 0x24
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	60f8      	str	r0, [r7, #12]
 80038c6:	60b9      	str	r1, [r7, #8]
 80038c8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	6a1a      	ldr	r2, [r3, #32]
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	fa93 f3a3 	rbit	r3, r3
 80038d8:	613b      	str	r3, [r7, #16]
  return result;
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	fab3 f383 	clz	r3, r3
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	210f      	movs	r1, #15
 80038e6:	fa01 f303 	lsl.w	r3, r1, r3
 80038ea:	43db      	mvns	r3, r3
 80038ec:	401a      	ands	r2, r3
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	fa93 f3a3 	rbit	r3, r3
 80038f8:	61bb      	str	r3, [r7, #24]
  return result;
 80038fa:	69bb      	ldr	r3, [r7, #24]
 80038fc:	fab3 f383 	clz	r3, r3
 8003900:	b2db      	uxtb	r3, r3
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	6879      	ldr	r1, [r7, #4]
 8003906:	fa01 f303 	lsl.w	r3, r1, r3
 800390a:	431a      	orrs	r2, r3
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	621a      	str	r2, [r3, #32]
}
 8003910:	bf00      	nop
 8003912:	3724      	adds	r7, #36	; 0x24
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr

0800391c <LL_GPIO_SetAFPin_8_15>:
{
 800391c:	b480      	push	{r7}
 800391e:	b089      	sub	sp, #36	; 0x24
 8003920:	af00      	add	r7, sp, #0
 8003922:	60f8      	str	r0, [r7, #12]
 8003924:	60b9      	str	r1, [r7, #8]
 8003926:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	0a1b      	lsrs	r3, r3, #8
 8003930:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	fa93 f3a3 	rbit	r3, r3
 8003938:	613b      	str	r3, [r7, #16]
  return result;
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	fab3 f383 	clz	r3, r3
 8003940:	b2db      	uxtb	r3, r3
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	210f      	movs	r1, #15
 8003946:	fa01 f303 	lsl.w	r3, r1, r3
 800394a:	43db      	mvns	r3, r3
 800394c:	401a      	ands	r2, r3
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	0a1b      	lsrs	r3, r3, #8
 8003952:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	fa93 f3a3 	rbit	r3, r3
 800395a:	61bb      	str	r3, [r7, #24]
  return result;
 800395c:	69bb      	ldr	r3, [r7, #24]
 800395e:	fab3 f383 	clz	r3, r3
 8003962:	b2db      	uxtb	r3, r3
 8003964:	009b      	lsls	r3, r3, #2
 8003966:	6879      	ldr	r1, [r7, #4]
 8003968:	fa01 f303 	lsl.w	r3, r1, r3
 800396c:	431a      	orrs	r2, r3
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003972:	bf00      	nop
 8003974:	3724      	adds	r7, #36	; 0x24
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr

0800397e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800397e:	b580      	push	{r7, lr}
 8003980:	b088      	sub	sp, #32
 8003982:	af00      	add	r7, sp, #0
 8003984:	6078      	str	r0, [r7, #4]
 8003986:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8003988:	2300      	movs	r3, #0
 800398a:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 800398c:	2300      	movs	r3, #0
 800398e:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	fa93 f3a3 	rbit	r3, r3
 800399c:	613b      	str	r3, [r7, #16]
  return result;
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	fab3 f383 	clz	r3, r3
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80039a8:	e050      	b.n	8003a4c <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	2101      	movs	r1, #1
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	fa01 f303 	lsl.w	r3, r1, r3
 80039b6:	4013      	ands	r3, r2
 80039b8:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 80039ba:	69bb      	ldr	r3, [r7, #24]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d042      	beq.n	8003a46 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d003      	beq.n	80039d0 <LL_GPIO_Init+0x52>
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d10d      	bne.n	80039ec <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	461a      	mov	r2, r3
 80039d6:	69b9      	ldr	r1, [r7, #24]
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f7ff ff12 	bl	8003802 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	461a      	mov	r2, r3
 80039e4:	69b9      	ldr	r1, [r7, #24]
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f7ff fef3 	bl	80037d2 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	691b      	ldr	r3, [r3, #16]
 80039f0:	461a      	mov	r2, r3
 80039f2:	69b9      	ldr	r1, [r7, #24]
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f7ff ff33 	bl	8003860 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	2b02      	cmp	r3, #2
 8003a00:	d11a      	bne.n	8003a38 <LL_GPIO_Init+0xba>
 8003a02:	69bb      	ldr	r3, [r7, #24]
 8003a04:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	fa93 f3a3 	rbit	r3, r3
 8003a0c:	60bb      	str	r3, [r7, #8]
  return result;
 8003a0e:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8003a10:	fab3 f383 	clz	r3, r3
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	2b07      	cmp	r3, #7
 8003a18:	d807      	bhi.n	8003a2a <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	695b      	ldr	r3, [r3, #20]
 8003a1e:	461a      	mov	r2, r3
 8003a20:	69b9      	ldr	r1, [r7, #24]
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f7ff ff4b 	bl	80038be <LL_GPIO_SetAFPin_0_7>
 8003a28:	e006      	b.n	8003a38 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	695b      	ldr	r3, [r3, #20]
 8003a2e:	461a      	mov	r2, r3
 8003a30:	69b9      	ldr	r1, [r7, #24]
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f7ff ff72 	bl	800391c <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	69b9      	ldr	r1, [r7, #24]
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f7ff fe97 	bl	8003774 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	3301      	adds	r3, #1
 8003a4a:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	fa22 f303 	lsr.w	r3, r2, r3
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d1a7      	bne.n	80039aa <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8003a5a:	2300      	movs	r3, #0
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3720      	adds	r7, #32
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <LL_RCC_GetSysClkSource>:
{
 8003a64:	b480      	push	{r7}
 8003a66:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003a68:	4b04      	ldr	r3, [pc, #16]	; (8003a7c <LL_RCC_GetSysClkSource+0x18>)
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	f003 030c 	and.w	r3, r3, #12
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr
 8003a7a:	bf00      	nop
 8003a7c:	40023800 	.word	0x40023800

08003a80 <LL_RCC_GetAHBPrescaler>:
{
 8003a80:	b480      	push	{r7}
 8003a82:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003a84:	4b04      	ldr	r3, [pc, #16]	; (8003a98 <LL_RCC_GetAHBPrescaler+0x18>)
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr
 8003a96:	bf00      	nop
 8003a98:	40023800 	.word	0x40023800

08003a9c <LL_RCC_GetAPB1Prescaler>:
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003aa0:	4b04      	ldr	r3, [pc, #16]	; (8003ab4 <LL_RCC_GetAPB1Prescaler+0x18>)
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop
 8003ab4:	40023800 	.word	0x40023800

08003ab8 <LL_RCC_GetAPB2Prescaler>:
{
 8003ab8:	b480      	push	{r7}
 8003aba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003abc:	4b04      	ldr	r3, [pc, #16]	; (8003ad0 <LL_RCC_GetAPB2Prescaler+0x18>)
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr
 8003ace:	bf00      	nop
 8003ad0:	40023800 	.word	0x40023800

08003ad4 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003ad8:	4b04      	ldr	r3, [pc, #16]	; (8003aec <LL_RCC_PLL_GetMainSource+0x18>)
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr
 8003aea:	bf00      	nop
 8003aec:	40023800 	.word	0x40023800

08003af0 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003af0:	b480      	push	{r7}
 8003af2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003af4:	4b04      	ldr	r3, [pc, #16]	; (8003b08 <LL_RCC_PLL_GetN+0x18>)
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	099b      	lsrs	r3, r3, #6
 8003afa:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr
 8003b08:	40023800 	.word	0x40023800

08003b0c <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8003b10:	4b04      	ldr	r3, [pc, #16]	; (8003b24 <LL_RCC_PLL_GetP+0x18>)
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr
 8003b22:	bf00      	nop
 8003b24:	40023800 	.word	0x40023800

08003b28 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003b2c:	4b04      	ldr	r3, [pc, #16]	; (8003b40 <LL_RCC_PLL_GetDivider+0x18>)
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr
 8003b3e:	bf00      	nop
 8003b40:	40023800 	.word	0x40023800

08003b44 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b082      	sub	sp, #8
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8003b4c:	f000 f820 	bl	8003b90 <RCC_GetSystemClockFreq>
 8003b50:	4602      	mov	r2, r0
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f000 f840 	bl	8003be0 <RCC_GetHCLKClockFreq>
 8003b60:	4602      	mov	r2, r0
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f000 f84e 	bl	8003c0c <RCC_GetPCLK1ClockFreq>
 8003b70:	4602      	mov	r2, r0
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f000 f85a 	bl	8003c34 <RCC_GetPCLK2ClockFreq>
 8003b80:	4602      	mov	r2, r0
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	60da      	str	r2, [r3, #12]
}
 8003b86:	bf00      	nop
 8003b88:	3708      	adds	r7, #8
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
	...

08003b90 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b082      	sub	sp, #8
 8003b94:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8003b96:	2300      	movs	r3, #0
 8003b98:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8003b9a:	f7ff ff63 	bl	8003a64 <LL_RCC_GetSysClkSource>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b08      	cmp	r3, #8
 8003ba2:	d00c      	beq.n	8003bbe <RCC_GetSystemClockFreq+0x2e>
 8003ba4:	2b08      	cmp	r3, #8
 8003ba6:	d80f      	bhi.n	8003bc8 <RCC_GetSystemClockFreq+0x38>
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d002      	beq.n	8003bb2 <RCC_GetSystemClockFreq+0x22>
 8003bac:	2b04      	cmp	r3, #4
 8003bae:	d003      	beq.n	8003bb8 <RCC_GetSystemClockFreq+0x28>
 8003bb0:	e00a      	b.n	8003bc8 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8003bb2:	4b09      	ldr	r3, [pc, #36]	; (8003bd8 <RCC_GetSystemClockFreq+0x48>)
 8003bb4:	607b      	str	r3, [r7, #4]
      break;
 8003bb6:	e00a      	b.n	8003bce <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8003bb8:	4b08      	ldr	r3, [pc, #32]	; (8003bdc <RCC_GetSystemClockFreq+0x4c>)
 8003bba:	607b      	str	r3, [r7, #4]
      break;
 8003bbc:	e007      	b.n	8003bce <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8003bbe:	2008      	movs	r0, #8
 8003bc0:	f000 f84c 	bl	8003c5c <RCC_PLL_GetFreqDomain_SYS>
 8003bc4:	6078      	str	r0, [r7, #4]
      break;
 8003bc6:	e002      	b.n	8003bce <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8003bc8:	4b03      	ldr	r3, [pc, #12]	; (8003bd8 <RCC_GetSystemClockFreq+0x48>)
 8003bca:	607b      	str	r3, [r7, #4]
      break;
 8003bcc:	bf00      	nop
  }

  return frequency;
 8003bce:	687b      	ldr	r3, [r7, #4]
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3708      	adds	r7, #8
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	00f42400 	.word	0x00f42400
 8003bdc:	007a1200 	.word	0x007a1200

08003be0 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b082      	sub	sp, #8
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8003be8:	f7ff ff4a 	bl	8003a80 <LL_RCC_GetAHBPrescaler>
 8003bec:	4603      	mov	r3, r0
 8003bee:	091b      	lsrs	r3, r3, #4
 8003bf0:	f003 030f 	and.w	r3, r3, #15
 8003bf4:	4a04      	ldr	r2, [pc, #16]	; (8003c08 <RCC_GetHCLKClockFreq+0x28>)
 8003bf6:	5cd3      	ldrb	r3, [r2, r3]
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	40d3      	lsrs	r3, r2
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3708      	adds	r7, #8
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	bf00      	nop
 8003c08:	08004f4c 	.word	0x08004f4c

08003c0c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b082      	sub	sp, #8
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8003c14:	f7ff ff42 	bl	8003a9c <LL_RCC_GetAPB1Prescaler>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	0a9b      	lsrs	r3, r3, #10
 8003c1c:	4a04      	ldr	r2, [pc, #16]	; (8003c30 <RCC_GetPCLK1ClockFreq+0x24>)
 8003c1e:	5cd3      	ldrb	r3, [r2, r3]
 8003c20:	461a      	mov	r2, r3
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	40d3      	lsrs	r3, r2
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3708      	adds	r7, #8
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	08004f5c 	.word	0x08004f5c

08003c34 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b082      	sub	sp, #8
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8003c3c:	f7ff ff3c 	bl	8003ab8 <LL_RCC_GetAPB2Prescaler>
 8003c40:	4603      	mov	r3, r0
 8003c42:	0b5b      	lsrs	r3, r3, #13
 8003c44:	4a04      	ldr	r2, [pc, #16]	; (8003c58 <RCC_GetPCLK2ClockFreq+0x24>)
 8003c46:	5cd3      	ldrb	r3, [r2, r3]
 8003c48:	461a      	mov	r2, r3
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	40d3      	lsrs	r3, r2
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3708      	adds	r7, #8
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	08004f5c 	.word	0x08004f5c

08003c5c <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8003c5c:	b590      	push	{r4, r7, lr}
 8003c5e:	b087      	sub	sp, #28
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8003c64:	2300      	movs	r3, #0
 8003c66:	617b      	str	r3, [r7, #20]
 8003c68:	2300      	movs	r3, #0
 8003c6a:	60fb      	str	r3, [r7, #12]
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8003c70:	f7ff ff30 	bl	8003ad4 <LL_RCC_PLL_GetMainSource>
 8003c74:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d004      	beq.n	8003c86 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c82:	d003      	beq.n	8003c8c <RCC_PLL_GetFreqDomain_SYS+0x30>
 8003c84:	e005      	b.n	8003c92 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8003c86:	4b12      	ldr	r3, [pc, #72]	; (8003cd0 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8003c88:	617b      	str	r3, [r7, #20]
      break;
 8003c8a:	e005      	b.n	8003c98 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8003c8c:	4b11      	ldr	r3, [pc, #68]	; (8003cd4 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8003c8e:	617b      	str	r3, [r7, #20]
      break;
 8003c90:	e002      	b.n	8003c98 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8003c92:	4b0f      	ldr	r3, [pc, #60]	; (8003cd0 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8003c94:	617b      	str	r3, [r7, #20]
      break;
 8003c96:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2b08      	cmp	r3, #8
 8003c9c:	d113      	bne.n	8003cc6 <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003c9e:	f7ff ff43 	bl	8003b28 <LL_RCC_PLL_GetDivider>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	fbb3 f4f2 	udiv	r4, r3, r2
 8003caa:	f7ff ff21 	bl	8003af0 <LL_RCC_PLL_GetN>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	fb03 f404 	mul.w	r4, r3, r4
 8003cb4:	f7ff ff2a 	bl	8003b0c <LL_RCC_PLL_GetP>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	0c1b      	lsrs	r3, r3, #16
 8003cbc:	3301      	adds	r3, #1
 8003cbe:	005b      	lsls	r3, r3, #1
 8003cc0:	fbb4 f3f3 	udiv	r3, r4, r3
 8003cc4:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8003cc6:	693b      	ldr	r3, [r7, #16]
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	371c      	adds	r7, #28
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd90      	pop	{r4, r7, pc}
 8003cd0:	00f42400 	.word	0x00f42400
 8003cd4:	007a1200 	.word	0x007a1200

08003cd8 <LL_USART_IsEnabled>:
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b083      	sub	sp, #12
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ce8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cec:	bf0c      	ite	eq
 8003cee:	2301      	moveq	r3, #1
 8003cf0:	2300      	movne	r3, #0
 8003cf2:	b2db      	uxtb	r3, r3
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	370c      	adds	r7, #12
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr

08003d00 <LL_USART_SetStopBitsLength>:
{
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	691b      	ldr	r3, [r3, #16]
 8003d0e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	431a      	orrs	r2, r3
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	611a      	str	r2, [r3, #16]
}
 8003d1a:	bf00      	nop
 8003d1c:	370c      	adds	r7, #12
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr

08003d26 <LL_USART_SetHWFlowCtrl>:
{
 8003d26:	b480      	push	{r7}
 8003d28:	b083      	sub	sp, #12
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
 8003d2e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	695b      	ldr	r3, [r3, #20]
 8003d34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	431a      	orrs	r2, r3
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	615a      	str	r2, [r3, #20]
}
 8003d40:	bf00      	nop
 8003d42:	370c      	adds	r7, #12
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr

08003d4c <LL_USART_SetBaudRate>:
{
 8003d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d50:	b09f      	sub	sp, #124	; 0x7c
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	6778      	str	r0, [r7, #116]	; 0x74
 8003d56:	6739      	str	r1, [r7, #112]	; 0x70
 8003d58:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003d5a:	66bb      	str	r3, [r7, #104]	; 0x68
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8003d5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d62:	f040 80bc 	bne.w	8003ede <LL_USART_SetBaudRate+0x192>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8003d66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d68:	461c      	mov	r4, r3
 8003d6a:	f04f 0500 	mov.w	r5, #0
 8003d6e:	4622      	mov	r2, r4
 8003d70:	462b      	mov	r3, r5
 8003d72:	eb12 0a02 	adds.w	sl, r2, r2
 8003d76:	eb43 0b03 	adc.w	fp, r3, r3
 8003d7a:	4652      	mov	r2, sl
 8003d7c:	465b      	mov	r3, fp
 8003d7e:	1912      	adds	r2, r2, r4
 8003d80:	eb45 0303 	adc.w	r3, r5, r3
 8003d84:	f04f 0000 	mov.w	r0, #0
 8003d88:	f04f 0100 	mov.w	r1, #0
 8003d8c:	00d9      	lsls	r1, r3, #3
 8003d8e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003d92:	00d0      	lsls	r0, r2, #3
 8003d94:	4602      	mov	r2, r0
 8003d96:	460b      	mov	r3, r1
 8003d98:	1911      	adds	r1, r2, r4
 8003d9a:	6639      	str	r1, [r7, #96]	; 0x60
 8003d9c:	416b      	adcs	r3, r5
 8003d9e:	667b      	str	r3, [r7, #100]	; 0x64
 8003da0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003da2:	461a      	mov	r2, r3
 8003da4:	f04f 0300 	mov.w	r3, #0
 8003da8:	1891      	adds	r1, r2, r2
 8003daa:	6339      	str	r1, [r7, #48]	; 0x30
 8003dac:	415b      	adcs	r3, r3
 8003dae:	637b      	str	r3, [r7, #52]	; 0x34
 8003db0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003db4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003db8:	f7fc fa62 	bl	8000280 <__aeabi_uldivmod>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	460b      	mov	r3, r1
 8003dc0:	4ba9      	ldr	r3, [pc, #676]	; (8004068 <LL_USART_SetBaudRate+0x31c>)
 8003dc2:	fba3 2302 	umull	r2, r3, r3, r2
 8003dc6:	095b      	lsrs	r3, r3, #5
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	011b      	lsls	r3, r3, #4
 8003dcc:	b29e      	uxth	r6, r3
 8003dce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003dd0:	461c      	mov	r4, r3
 8003dd2:	f04f 0500 	mov.w	r5, #0
 8003dd6:	4622      	mov	r2, r4
 8003dd8:	462b      	mov	r3, r5
 8003dda:	1891      	adds	r1, r2, r2
 8003ddc:	62b9      	str	r1, [r7, #40]	; 0x28
 8003dde:	415b      	adcs	r3, r3
 8003de0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003de2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003de6:	1912      	adds	r2, r2, r4
 8003de8:	eb45 0303 	adc.w	r3, r5, r3
 8003dec:	f04f 0000 	mov.w	r0, #0
 8003df0:	f04f 0100 	mov.w	r1, #0
 8003df4:	00d9      	lsls	r1, r3, #3
 8003df6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003dfa:	00d0      	lsls	r0, r2, #3
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	460b      	mov	r3, r1
 8003e00:	1911      	adds	r1, r2, r4
 8003e02:	65b9      	str	r1, [r7, #88]	; 0x58
 8003e04:	416b      	adcs	r3, r5
 8003e06:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e08:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	f04f 0300 	mov.w	r3, #0
 8003e10:	1891      	adds	r1, r2, r2
 8003e12:	6239      	str	r1, [r7, #32]
 8003e14:	415b      	adcs	r3, r3
 8003e16:	627b      	str	r3, [r7, #36]	; 0x24
 8003e18:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003e1c:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003e20:	f7fc fa2e 	bl	8000280 <__aeabi_uldivmod>
 8003e24:	4602      	mov	r2, r0
 8003e26:	460b      	mov	r3, r1
 8003e28:	4b8f      	ldr	r3, [pc, #572]	; (8004068 <LL_USART_SetBaudRate+0x31c>)
 8003e2a:	fba3 1302 	umull	r1, r3, r3, r2
 8003e2e:	095b      	lsrs	r3, r3, #5
 8003e30:	2164      	movs	r1, #100	; 0x64
 8003e32:	fb01 f303 	mul.w	r3, r1, r3
 8003e36:	1ad3      	subs	r3, r2, r3
 8003e38:	00db      	lsls	r3, r3, #3
 8003e3a:	3332      	adds	r3, #50	; 0x32
 8003e3c:	4a8a      	ldr	r2, [pc, #552]	; (8004068 <LL_USART_SetBaudRate+0x31c>)
 8003e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e42:	095b      	lsrs	r3, r3, #5
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	005b      	lsls	r3, r3, #1
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	4433      	add	r3, r6
 8003e52:	b29e      	uxth	r6, r3
 8003e54:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e56:	4618      	mov	r0, r3
 8003e58:	f04f 0100 	mov.w	r1, #0
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	460b      	mov	r3, r1
 8003e60:	1894      	adds	r4, r2, r2
 8003e62:	61bc      	str	r4, [r7, #24]
 8003e64:	415b      	adcs	r3, r3
 8003e66:	61fb      	str	r3, [r7, #28]
 8003e68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e6c:	1812      	adds	r2, r2, r0
 8003e6e:	eb41 0303 	adc.w	r3, r1, r3
 8003e72:	f04f 0400 	mov.w	r4, #0
 8003e76:	f04f 0500 	mov.w	r5, #0
 8003e7a:	00dd      	lsls	r5, r3, #3
 8003e7c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003e80:	00d4      	lsls	r4, r2, #3
 8003e82:	4622      	mov	r2, r4
 8003e84:	462b      	mov	r3, r5
 8003e86:	1814      	adds	r4, r2, r0
 8003e88:	653c      	str	r4, [r7, #80]	; 0x50
 8003e8a:	414b      	adcs	r3, r1
 8003e8c:	657b      	str	r3, [r7, #84]	; 0x54
 8003e8e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e90:	461a      	mov	r2, r3
 8003e92:	f04f 0300 	mov.w	r3, #0
 8003e96:	1891      	adds	r1, r2, r2
 8003e98:	6139      	str	r1, [r7, #16]
 8003e9a:	415b      	adcs	r3, r3
 8003e9c:	617b      	str	r3, [r7, #20]
 8003e9e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003ea2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003ea6:	f7fc f9eb 	bl	8000280 <__aeabi_uldivmod>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	460b      	mov	r3, r1
 8003eae:	4b6e      	ldr	r3, [pc, #440]	; (8004068 <LL_USART_SetBaudRate+0x31c>)
 8003eb0:	fba3 1302 	umull	r1, r3, r3, r2
 8003eb4:	095b      	lsrs	r3, r3, #5
 8003eb6:	2164      	movs	r1, #100	; 0x64
 8003eb8:	fb01 f303 	mul.w	r3, r1, r3
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	00db      	lsls	r3, r3, #3
 8003ec0:	3332      	adds	r3, #50	; 0x32
 8003ec2:	4a69      	ldr	r2, [pc, #420]	; (8004068 <LL_USART_SetBaudRate+0x31c>)
 8003ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ec8:	095b      	lsrs	r3, r3, #5
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	f003 0307 	and.w	r3, r3, #7
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	4433      	add	r3, r6
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003eda:	609a      	str	r2, [r3, #8]
}
 8003edc:	e0be      	b.n	800405c <LL_USART_SetBaudRate+0x310>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8003ede:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ee0:	461c      	mov	r4, r3
 8003ee2:	f04f 0500 	mov.w	r5, #0
 8003ee6:	4622      	mov	r2, r4
 8003ee8:	462b      	mov	r3, r5
 8003eea:	eb12 0802 	adds.w	r8, r2, r2
 8003eee:	eb43 0903 	adc.w	r9, r3, r3
 8003ef2:	4642      	mov	r2, r8
 8003ef4:	464b      	mov	r3, r9
 8003ef6:	1912      	adds	r2, r2, r4
 8003ef8:	eb45 0303 	adc.w	r3, r5, r3
 8003efc:	f04f 0000 	mov.w	r0, #0
 8003f00:	f04f 0100 	mov.w	r1, #0
 8003f04:	00d9      	lsls	r1, r3, #3
 8003f06:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003f0a:	00d0      	lsls	r0, r2, #3
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	460b      	mov	r3, r1
 8003f10:	1911      	adds	r1, r2, r4
 8003f12:	64b9      	str	r1, [r7, #72]	; 0x48
 8003f14:	416b      	adcs	r3, r5
 8003f16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f04f 0100 	mov.w	r1, #0
 8003f20:	f04f 0200 	mov.w	r2, #0
 8003f24:	f04f 0300 	mov.w	r3, #0
 8003f28:	008b      	lsls	r3, r1, #2
 8003f2a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003f2e:	0082      	lsls	r2, r0, #2
 8003f30:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003f34:	f7fc f9a4 	bl	8000280 <__aeabi_uldivmod>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	460b      	mov	r3, r1
 8003f3c:	4b4a      	ldr	r3, [pc, #296]	; (8004068 <LL_USART_SetBaudRate+0x31c>)
 8003f3e:	fba3 2302 	umull	r2, r3, r3, r2
 8003f42:	095b      	lsrs	r3, r3, #5
 8003f44:	b29b      	uxth	r3, r3
 8003f46:	011b      	lsls	r3, r3, #4
 8003f48:	b29e      	uxth	r6, r3
 8003f4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f04f 0100 	mov.w	r1, #0
 8003f52:	4602      	mov	r2, r0
 8003f54:	460b      	mov	r3, r1
 8003f56:	1894      	adds	r4, r2, r2
 8003f58:	60bc      	str	r4, [r7, #8]
 8003f5a:	415b      	adcs	r3, r3
 8003f5c:	60fb      	str	r3, [r7, #12]
 8003f5e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f62:	1812      	adds	r2, r2, r0
 8003f64:	eb41 0303 	adc.w	r3, r1, r3
 8003f68:	f04f 0400 	mov.w	r4, #0
 8003f6c:	f04f 0500 	mov.w	r5, #0
 8003f70:	00dd      	lsls	r5, r3, #3
 8003f72:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003f76:	00d4      	lsls	r4, r2, #3
 8003f78:	4622      	mov	r2, r4
 8003f7a:	462b      	mov	r3, r5
 8003f7c:	1814      	adds	r4, r2, r0
 8003f7e:	643c      	str	r4, [r7, #64]	; 0x40
 8003f80:	414b      	adcs	r3, r1
 8003f82:	647b      	str	r3, [r7, #68]	; 0x44
 8003f84:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f86:	4618      	mov	r0, r3
 8003f88:	f04f 0100 	mov.w	r1, #0
 8003f8c:	f04f 0200 	mov.w	r2, #0
 8003f90:	f04f 0300 	mov.w	r3, #0
 8003f94:	008b      	lsls	r3, r1, #2
 8003f96:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003f9a:	0082      	lsls	r2, r0, #2
 8003f9c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8003fa0:	f7fc f96e 	bl	8000280 <__aeabi_uldivmod>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	460b      	mov	r3, r1
 8003fa8:	4b2f      	ldr	r3, [pc, #188]	; (8004068 <LL_USART_SetBaudRate+0x31c>)
 8003faa:	fba3 1302 	umull	r1, r3, r3, r2
 8003fae:	095b      	lsrs	r3, r3, #5
 8003fb0:	2164      	movs	r1, #100	; 0x64
 8003fb2:	fb01 f303 	mul.w	r3, r1, r3
 8003fb6:	1ad3      	subs	r3, r2, r3
 8003fb8:	011b      	lsls	r3, r3, #4
 8003fba:	3332      	adds	r3, #50	; 0x32
 8003fbc:	4a2a      	ldr	r2, [pc, #168]	; (8004068 <LL_USART_SetBaudRate+0x31c>)
 8003fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8003fc2:	095b      	lsrs	r3, r3, #5
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	4433      	add	r3, r6
 8003fce:	b29e      	uxth	r6, r3
 8003fd0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f04f 0100 	mov.w	r1, #0
 8003fd8:	4602      	mov	r2, r0
 8003fda:	460b      	mov	r3, r1
 8003fdc:	1894      	adds	r4, r2, r2
 8003fde:	603c      	str	r4, [r7, #0]
 8003fe0:	415b      	adcs	r3, r3
 8003fe2:	607b      	str	r3, [r7, #4]
 8003fe4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003fe8:	1812      	adds	r2, r2, r0
 8003fea:	eb41 0303 	adc.w	r3, r1, r3
 8003fee:	f04f 0400 	mov.w	r4, #0
 8003ff2:	f04f 0500 	mov.w	r5, #0
 8003ff6:	00dd      	lsls	r5, r3, #3
 8003ff8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003ffc:	00d4      	lsls	r4, r2, #3
 8003ffe:	4622      	mov	r2, r4
 8004000:	462b      	mov	r3, r5
 8004002:	1814      	adds	r4, r2, r0
 8004004:	63bc      	str	r4, [r7, #56]	; 0x38
 8004006:	414b      	adcs	r3, r1
 8004008:	63fb      	str	r3, [r7, #60]	; 0x3c
 800400a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800400c:	4618      	mov	r0, r3
 800400e:	f04f 0100 	mov.w	r1, #0
 8004012:	f04f 0200 	mov.w	r2, #0
 8004016:	f04f 0300 	mov.w	r3, #0
 800401a:	008b      	lsls	r3, r1, #2
 800401c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004020:	0082      	lsls	r2, r0, #2
 8004022:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8004026:	f7fc f92b 	bl	8000280 <__aeabi_uldivmod>
 800402a:	4602      	mov	r2, r0
 800402c:	460b      	mov	r3, r1
 800402e:	4b0e      	ldr	r3, [pc, #56]	; (8004068 <LL_USART_SetBaudRate+0x31c>)
 8004030:	fba3 1302 	umull	r1, r3, r3, r2
 8004034:	095b      	lsrs	r3, r3, #5
 8004036:	2164      	movs	r1, #100	; 0x64
 8004038:	fb01 f303 	mul.w	r3, r1, r3
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	011b      	lsls	r3, r3, #4
 8004040:	3332      	adds	r3, #50	; 0x32
 8004042:	4a09      	ldr	r2, [pc, #36]	; (8004068 <LL_USART_SetBaudRate+0x31c>)
 8004044:	fba2 2303 	umull	r2, r3, r2, r3
 8004048:	095b      	lsrs	r3, r3, #5
 800404a:	b29b      	uxth	r3, r3
 800404c:	f003 030f 	and.w	r3, r3, #15
 8004050:	b29b      	uxth	r3, r3
 8004052:	4433      	add	r3, r6
 8004054:	b29b      	uxth	r3, r3
 8004056:	461a      	mov	r2, r3
 8004058:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800405a:	609a      	str	r2, [r3, #8]
}
 800405c:	bf00      	nop
 800405e:	377c      	adds	r7, #124	; 0x7c
 8004060:	46bd      	mov	sp, r7
 8004062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004066:	bf00      	nop
 8004068:	51eb851f 	.word	0x51eb851f

0800406c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b088      	sub	sp, #32
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
 8004074:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800407a:	2300      	movs	r3, #0
 800407c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f7ff fe2a 	bl	8003cd8 <LL_USART_IsEnabled>
 8004084:	4603      	mov	r3, r0
 8004086:	2b00      	cmp	r3, #0
 8004088:	d15e      	bne.n	8004148 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004092:	f023 030c 	bic.w	r3, r3, #12
 8004096:	683a      	ldr	r2, [r7, #0]
 8004098:	6851      	ldr	r1, [r2, #4]
 800409a:	683a      	ldr	r2, [r7, #0]
 800409c:	68d2      	ldr	r2, [r2, #12]
 800409e:	4311      	orrs	r1, r2
 80040a0:	683a      	ldr	r2, [r7, #0]
 80040a2:	6912      	ldr	r2, [r2, #16]
 80040a4:	4311      	orrs	r1, r2
 80040a6:	683a      	ldr	r2, [r7, #0]
 80040a8:	6992      	ldr	r2, [r2, #24]
 80040aa:	430a      	orrs	r2, r1
 80040ac:	431a      	orrs	r2, r3
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	4619      	mov	r1, r3
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f7ff fe21 	bl	8003d00 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	695b      	ldr	r3, [r3, #20]
 80040c2:	4619      	mov	r1, r3
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f7ff fe2e 	bl	8003d26 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80040ca:	f107 0308 	add.w	r3, r7, #8
 80040ce:	4618      	mov	r0, r3
 80040d0:	f7ff fd38 	bl	8003b44 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	4a1f      	ldr	r2, [pc, #124]	; (8004154 <LL_USART_Init+0xe8>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d102      	bne.n	80040e2 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	61bb      	str	r3, [r7, #24]
 80040e0:	e021      	b.n	8004126 <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	4a1c      	ldr	r2, [pc, #112]	; (8004158 <LL_USART_Init+0xec>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d102      	bne.n	80040f0 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	61bb      	str	r3, [r7, #24]
 80040ee:	e01a      	b.n	8004126 <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	4a1a      	ldr	r2, [pc, #104]	; (800415c <LL_USART_Init+0xf0>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d102      	bne.n	80040fe <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	61bb      	str	r3, [r7, #24]
 80040fc:	e013      	b.n	8004126 <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4a17      	ldr	r2, [pc, #92]	; (8004160 <LL_USART_Init+0xf4>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d102      	bne.n	800410c <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	61bb      	str	r3, [r7, #24]
 800410a:	e00c      	b.n	8004126 <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	4a15      	ldr	r2, [pc, #84]	; (8004164 <LL_USART_Init+0xf8>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d102      	bne.n	800411a <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	61bb      	str	r3, [r7, #24]
 8004118:	e005      	b.n	8004126 <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	4a12      	ldr	r2, [pc, #72]	; (8004168 <LL_USART_Init+0xfc>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d101      	bne.n	8004126 <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8004126:	69bb      	ldr	r3, [r7, #24]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d00d      	beq.n	8004148 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d009      	beq.n	8004148 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 8004134:	2300      	movs	r3, #0
 8004136:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	699a      	ldr	r2, [r3, #24]
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	69b9      	ldr	r1, [r7, #24]
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f7ff fe02 	bl	8003d4c <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8004148:	7ffb      	ldrb	r3, [r7, #31]
}
 800414a:	4618      	mov	r0, r3
 800414c:	3720      	adds	r7, #32
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}
 8004152:	bf00      	nop
 8004154:	40011000 	.word	0x40011000
 8004158:	40004400 	.word	0x40004400
 800415c:	40004800 	.word	0x40004800
 8004160:	40011400 	.word	0x40011400
 8004164:	40004c00 	.word	0x40004c00
 8004168:	40005000 	.word	0x40005000

0800416c <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 800416c:	b480      	push	{r7}
 800416e:	b083      	sub	sp, #12
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	fbb2 f3f3 	udiv	r3, r2, r3
 800417e:	4a07      	ldr	r2, [pc, #28]	; (800419c <LL_InitTick+0x30>)
 8004180:	3b01      	subs	r3, #1
 8004182:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8004184:	4b05      	ldr	r3, [pc, #20]	; (800419c <LL_InitTick+0x30>)
 8004186:	2200      	movs	r2, #0
 8004188:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800418a:	4b04      	ldr	r3, [pc, #16]	; (800419c <LL_InitTick+0x30>)
 800418c:	2205      	movs	r2, #5
 800418e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8004190:	bf00      	nop
 8004192:	370c      	adds	r7, #12
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr
 800419c:	e000e010 	.word	0xe000e010

080041a0 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b082      	sub	sp, #8
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80041a8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f7ff ffdd 	bl	800416c <LL_InitTick>
}
 80041b2:	bf00      	nop
 80041b4:	3708      	adds	r7, #8
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}
	...

080041bc <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80041bc:	b480      	push	{r7}
 80041be:	b083      	sub	sp, #12
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80041c4:	4a04      	ldr	r2, [pc, #16]	; (80041d8 <LL_SetSystemCoreClock+0x1c>)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6013      	str	r3, [r2, #0]
}
 80041ca:	bf00      	nop
 80041cc:	370c      	adds	r7, #12
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr
 80041d6:	bf00      	nop
 80041d8:	20000000 	.word	0x20000000

080041dc <_ZNSaIcEC1Ev>:
 80041dc:	4770      	bx	lr

080041de <_ZNSaIcED1Ev>:
 80041de:	4770      	bx	lr

080041e0 <_ZSt17__throw_bad_allocv>:
 80041e0:	b508      	push	{r3, lr}
 80041e2:	f000 f97d 	bl	80044e0 <abort>

080041e6 <_ZSt19__throw_logic_errorPKc>:
 80041e6:	b508      	push	{r3, lr}
 80041e8:	f000 f97a 	bl	80044e0 <abort>

080041ec <_ZSt20__throw_length_errorPKc>:
 80041ec:	b508      	push	{r3, lr}
 80041ee:	f000 f977 	bl	80044e0 <abort>

080041f2 <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 80041f2:	b10a      	cbz	r2, 80041f8 <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 80041f4:	f000 b9b6 	b.w	8004564 <memcpy>
 80041f8:	4770      	bx	lr

080041fa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>:
 80041fa:	6001      	str	r1, [r0, #0]
 80041fc:	4770      	bx	lr

080041fe <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>:
 80041fe:	6800      	ldr	r0, [r0, #0]
 8004200:	4770      	bx	lr

08004202 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>:
 8004202:	3008      	adds	r0, #8
 8004204:	4770      	bx	lr

08004206 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>:
 8004206:	6081      	str	r1, [r0, #8]
 8004208:	4770      	bx	lr

0800420a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>:
 800420a:	6803      	ldr	r3, [r0, #0]
 800420c:	6041      	str	r1, [r0, #4]
 800420e:	2200      	movs	r2, #0
 8004210:	545a      	strb	r2, [r3, r1]
 8004212:	4770      	bx	lr

08004214 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8004214:	b508      	push	{r3, lr}
 8004216:	680b      	ldr	r3, [r1, #0]
 8004218:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800421c:	d302      	bcc.n	8004224 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 800421e:	480d      	ldr	r0, [pc, #52]	; (8004254 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 8004220:	f7ff ffe4 	bl	80041ec <_ZSt20__throw_length_errorPKc>
 8004224:	4293      	cmp	r3, r2
 8004226:	d90b      	bls.n	8004240 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8004228:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 800422c:	ea4f 0042 	mov.w	r0, r2, lsl #1
 8004230:	d206      	bcs.n	8004240 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8004232:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004236:	bf2a      	itet	cs
 8004238:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 800423c:	6008      	strcc	r0, [r1, #0]
 800423e:	600b      	strcs	r3, [r1, #0]
 8004240:	6808      	ldr	r0, [r1, #0]
 8004242:	3001      	adds	r0, #1
 8004244:	d501      	bpl.n	800424a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 8004246:	f7ff ffcb 	bl	80041e0 <_ZSt17__throw_bad_allocv>
 800424a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800424e:	f000 b92e 	b.w	80044ae <_Znwj>
 8004252:	bf00      	nop
 8004254:	08004f7c 	.word	0x08004f7c

08004258 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8004258:	f850 3b08 	ldr.w	r3, [r0], #8
 800425c:	4283      	cmp	r3, r0
 800425e:	d002      	beq.n	8004266 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 8004260:	4618      	mov	r0, r3
 8004262:	f000 b922 	b.w	80044aa <_ZdlPv>
 8004266:	4770      	bx	lr

08004268 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 8004268:	6840      	ldr	r0, [r0, #4]
 800426a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800426e:	3901      	subs	r1, #1
 8004270:	1a09      	subs	r1, r1, r0
 8004272:	4291      	cmp	r1, r2
 8004274:	b508      	push	{r3, lr}
 8004276:	d202      	bcs.n	800427e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 8004278:	4618      	mov	r0, r3
 800427a:	f7ff ffb7 	bl	80041ec <_ZSt20__throw_length_errorPKc>
 800427e:	bd08      	pop	{r3, pc}

08004280 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8004280:	2a01      	cmp	r2, #1
 8004282:	b510      	push	{r4, lr}
 8004284:	d102      	bne.n	800428c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 8004286:	780a      	ldrb	r2, [r1, #0]
 8004288:	7002      	strb	r2, [r0, #0]
 800428a:	bd10      	pop	{r4, pc}
 800428c:	f7ff ffb1 	bl	80041f2 <_ZNSt11char_traitsIcE4copyEPcPKcj>
 8004290:	e7fb      	b.n	800428a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

08004292 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 8004292:	2a01      	cmp	r2, #1
 8004294:	b430      	push	{r4, r5}
 8004296:	d103      	bne.n	80042a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 8004298:	780b      	ldrb	r3, [r1, #0]
 800429a:	7003      	strb	r3, [r0, #0]
 800429c:	bc30      	pop	{r4, r5}
 800429e:	4770      	bx	lr
 80042a0:	2a00      	cmp	r2, #0
 80042a2:	d0fb      	beq.n	800429c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 80042a4:	bc30      	pop	{r4, r5}
 80042a6:	f000 b96b 	b.w	8004580 <memmove>

080042aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>:
 80042aa:	460b      	mov	r3, r1
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	b410      	push	{r4}
 80042b0:	4611      	mov	r1, r2
 80042b2:	4604      	mov	r4, r0
 80042b4:	d103      	bne.n	80042be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0x14>
 80042b6:	7022      	strb	r2, [r4, #0]
 80042b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80042bc:	4770      	bx	lr
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d0fa      	beq.n	80042b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0xe>
 80042c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80042c6:	461a      	mov	r2, r3
 80042c8:	f000 b974 	b.w	80045b4 <memset>

080042cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 80042cc:	b508      	push	{r3, lr}
 80042ce:	1a52      	subs	r2, r2, r1
 80042d0:	f7ff ffd6 	bl	8004280 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80042d4:	bd08      	pop	{r3, pc}

080042d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 80042d6:	b508      	push	{r3, lr}
 80042d8:	1a52      	subs	r2, r2, r1
 80042da:	f7ff ffd1 	bl	8004280 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80042de:	bd08      	pop	{r3, pc}

080042e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 80042e0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80042e4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80042e6:	461f      	mov	r7, r3
 80042e8:	6843      	ldr	r3, [r0, #4]
 80042ea:	eb01 0802 	add.w	r8, r1, r2
 80042ee:	1ab2      	subs	r2, r6, r2
 80042f0:	441a      	add	r2, r3
 80042f2:	eba3 0908 	sub.w	r9, r3, r8
 80042f6:	4603      	mov	r3, r0
 80042f8:	9201      	str	r2, [sp, #4]
 80042fa:	f853 2b08 	ldr.w	r2, [r3], #8
 80042fe:	429a      	cmp	r2, r3
 8004300:	bf18      	it	ne
 8004302:	6882      	ldrne	r2, [r0, #8]
 8004304:	460d      	mov	r5, r1
 8004306:	bf08      	it	eq
 8004308:	220f      	moveq	r2, #15
 800430a:	a901      	add	r1, sp, #4
 800430c:	4604      	mov	r4, r0
 800430e:	f7ff ff81 	bl	8004214 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8004312:	4682      	mov	sl, r0
 8004314:	b11d      	cbz	r5, 800431e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
 8004316:	6821      	ldr	r1, [r4, #0]
 8004318:	462a      	mov	r2, r5
 800431a:	f7ff ffb1 	bl	8004280 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800431e:	b137      	cbz	r7, 800432e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 8004320:	b12e      	cbz	r6, 800432e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 8004322:	4632      	mov	r2, r6
 8004324:	4639      	mov	r1, r7
 8004326:	eb0a 0005 	add.w	r0, sl, r5
 800432a:	f7ff ffa9 	bl	8004280 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800432e:	f1b9 0f00 	cmp.w	r9, #0
 8004332:	d007      	beq.n	8004344 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x64>
 8004334:	6821      	ldr	r1, [r4, #0]
 8004336:	4435      	add	r5, r6
 8004338:	464a      	mov	r2, r9
 800433a:	4441      	add	r1, r8
 800433c:	eb0a 0005 	add.w	r0, sl, r5
 8004340:	f7ff ff9e 	bl	8004280 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8004344:	4620      	mov	r0, r4
 8004346:	f7ff ff87 	bl	8004258 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800434a:	9b01      	ldr	r3, [sp, #4]
 800434c:	f8c4 a000 	str.w	sl, [r4]
 8004350:	60a3      	str	r3, [r4, #8]
 8004352:	b002      	add	sp, #8
 8004354:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004358 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>:
 8004358:	b570      	push	{r4, r5, r6, lr}
 800435a:	4604      	mov	r4, r0
 800435c:	460e      	mov	r6, r1
 800435e:	3008      	adds	r0, #8
 8004360:	6020      	str	r0, [r4, #0]
 8004362:	f856 3b08 	ldr.w	r3, [r6], #8
 8004366:	429e      	cmp	r6, r3
 8004368:	460d      	mov	r5, r1
 800436a:	d10b      	bne.n	8004384 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x2c>
 800436c:	2210      	movs	r2, #16
 800436e:	4631      	mov	r1, r6
 8004370:	f7ff ff3f 	bl	80041f2 <_ZNSt11char_traitsIcE4copyEPcPKcj>
 8004374:	686b      	ldr	r3, [r5, #4]
 8004376:	6063      	str	r3, [r4, #4]
 8004378:	2300      	movs	r3, #0
 800437a:	602e      	str	r6, [r5, #0]
 800437c:	606b      	str	r3, [r5, #4]
 800437e:	722b      	strb	r3, [r5, #8]
 8004380:	4620      	mov	r0, r4
 8004382:	bd70      	pop	{r4, r5, r6, pc}
 8004384:	6023      	str	r3, [r4, #0]
 8004386:	688b      	ldr	r3, [r1, #8]
 8004388:	60a3      	str	r3, [r4, #8]
 800438a:	e7f3      	b.n	8004374 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x1c>

0800438c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 800438c:	b510      	push	{r4, lr}
 800438e:	4604      	mov	r4, r0
 8004390:	f7ff ff62 	bl	8004258 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8004394:	4620      	mov	r0, r4
 8004396:	bd10      	pop	{r4, pc}

08004398 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5beginEv>:
 8004398:	6800      	ldr	r0, [r0, #0]
 800439a:	4770      	bx	lr

0800439c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE3endEv>:
 800439c:	e9d0 2000 	ldrd	r2, r0, [r0]
 80043a0:	4410      	add	r0, r2
 80043a2:	4770      	bx	lr

080043a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc>:
 80043a4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80043a8:	4616      	mov	r6, r2
 80043aa:	461d      	mov	r5, r3
 80043ac:	4604      	mov	r4, r0
 80043ae:	4b1c      	ldr	r3, [pc, #112]	; (8004420 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x7c>)
 80043b0:	462a      	mov	r2, r5
 80043b2:	460f      	mov	r7, r1
 80043b4:	4631      	mov	r1, r6
 80043b6:	f7ff ff57 	bl	8004268 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 80043ba:	4623      	mov	r3, r4
 80043bc:	6862      	ldr	r2, [r4, #4]
 80043be:	f853 0b08 	ldr.w	r0, [r3], #8
 80043c2:	4298      	cmp	r0, r3
 80043c4:	bf18      	it	ne
 80043c6:	68a3      	ldrne	r3, [r4, #8]
 80043c8:	eba5 0806 	sub.w	r8, r5, r6
 80043cc:	4490      	add	r8, r2
 80043ce:	bf08      	it	eq
 80043d0:	230f      	moveq	r3, #15
 80043d2:	4543      	cmp	r3, r8
 80043d4:	d31b      	bcc.n	800440e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x6a>
 80043d6:	19f3      	adds	r3, r6, r7
 80043d8:	1ad2      	subs	r2, r2, r3
 80043da:	d006      	beq.n	80043ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x46>
 80043dc:	42ae      	cmp	r6, r5
 80043de:	d004      	beq.n	80043ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x46>
 80043e0:	4438      	add	r0, r7
 80043e2:	1981      	adds	r1, r0, r6
 80043e4:	4428      	add	r0, r5
 80043e6:	f7ff ff54 	bl	8004292 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80043ea:	b135      	cbz	r5, 80043fa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x56>
 80043ec:	6820      	ldr	r0, [r4, #0]
 80043ee:	f89d 2020 	ldrb.w	r2, [sp, #32]
 80043f2:	4629      	mov	r1, r5
 80043f4:	4438      	add	r0, r7
 80043f6:	f7ff ff58 	bl	80042aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>
 80043fa:	6823      	ldr	r3, [r4, #0]
 80043fc:	f8c4 8004 	str.w	r8, [r4, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	4620      	mov	r0, r4
 8004404:	f803 2008 	strb.w	r2, [r3, r8]
 8004408:	b002      	add	sp, #8
 800440a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800440e:	9500      	str	r5, [sp, #0]
 8004410:	2300      	movs	r3, #0
 8004412:	4632      	mov	r2, r6
 8004414:	4639      	mov	r1, r7
 8004416:	4620      	mov	r0, r4
 8004418:	f7ff ff62 	bl	80042e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 800441c:	e7e5      	b.n	80043ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x46>
 800441e:	bf00      	nop
 8004420:	08004f94 	.word	0x08004f94

08004424 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEjc>:
 8004424:	b507      	push	{r0, r1, r2, lr}
 8004426:	9200      	str	r2, [sp, #0]
 8004428:	460b      	mov	r3, r1
 800442a:	2200      	movs	r2, #0
 800442c:	6841      	ldr	r1, [r0, #4]
 800442e:	f7ff ffb9 	bl	80043a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc>
 8004432:	b003      	add	sp, #12
 8004434:	f85d fb04 	ldr.w	pc, [sp], #4

08004438 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>:
 8004438:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800443a:	4604      	mov	r4, r0
 800443c:	4623      	mov	r3, r4
 800443e:	6840      	ldr	r0, [r0, #4]
 8004440:	f853 6b08 	ldr.w	r6, [r3], #8
 8004444:	429e      	cmp	r6, r3
 8004446:	bf18      	it	ne
 8004448:	68a3      	ldrne	r3, [r4, #8]
 800444a:	eb00 0502 	add.w	r5, r0, r2
 800444e:	bf08      	it	eq
 8004450:	230f      	moveq	r3, #15
 8004452:	429d      	cmp	r5, r3
 8004454:	d80a      	bhi.n	800446c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x34>
 8004456:	b112      	cbz	r2, 800445e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>
 8004458:	4430      	add	r0, r6
 800445a:	f7ff ff11 	bl	8004280 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800445e:	6823      	ldr	r3, [r4, #0]
 8004460:	6065      	str	r5, [r4, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	4620      	mov	r0, r4
 8004466:	555a      	strb	r2, [r3, r5]
 8004468:	b002      	add	sp, #8
 800446a:	bd70      	pop	{r4, r5, r6, pc}
 800446c:	9200      	str	r2, [sp, #0]
 800446e:	460b      	mov	r3, r1
 8004470:	2200      	movs	r2, #0
 8004472:	4601      	mov	r1, r0
 8004474:	4620      	mov	r0, r4
 8004476:	f7ff ff33 	bl	80042e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 800447a:	e7f0      	b.n	800445e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>

0800447c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>:
 800447c:	b508      	push	{r3, lr}
 800447e:	e9d1 1200 	ldrd	r1, r2, [r1]
 8004482:	f7ff ffd9 	bl	8004438 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 8004486:	bd08      	pop	{r3, pc}

08004488 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>:
 8004488:	6001      	str	r1, [r0, #0]
 800448a:	4770      	bx	lr

0800448c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 800448c:	b538      	push	{r3, r4, r5, lr}
 800448e:	f100 0308 	add.w	r3, r0, #8
 8004492:	6003      	str	r3, [r0, #0]
 8004494:	e9d1 5200 	ldrd	r5, r2, [r1]
 8004498:	4604      	mov	r4, r0
 800449a:	f04f 0300 	mov.w	r3, #0
 800449e:	442a      	add	r2, r5
 80044a0:	4629      	mov	r1, r5
 80044a2:	f7fd f91b 	bl	80016dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 80044a6:	4620      	mov	r0, r4
 80044a8:	bd38      	pop	{r3, r4, r5, pc}

080044aa <_ZdlPv>:
 80044aa:	f000 b853 	b.w	8004554 <free>

080044ae <_Znwj>:
 80044ae:	2801      	cmp	r0, #1
 80044b0:	bf38      	it	cc
 80044b2:	2001      	movcc	r0, #1
 80044b4:	b510      	push	{r4, lr}
 80044b6:	4604      	mov	r4, r0
 80044b8:	4620      	mov	r0, r4
 80044ba:	f000 f843 	bl	8004544 <malloc>
 80044be:	b930      	cbnz	r0, 80044ce <_Znwj+0x20>
 80044c0:	f000 f806 	bl	80044d0 <_ZSt15get_new_handlerv>
 80044c4:	b908      	cbnz	r0, 80044ca <_Znwj+0x1c>
 80044c6:	f000 f80b 	bl	80044e0 <abort>
 80044ca:	4780      	blx	r0
 80044cc:	e7f4      	b.n	80044b8 <_Znwj+0xa>
 80044ce:	bd10      	pop	{r4, pc}

080044d0 <_ZSt15get_new_handlerv>:
 80044d0:	4b02      	ldr	r3, [pc, #8]	; (80044dc <_ZSt15get_new_handlerv+0xc>)
 80044d2:	6818      	ldr	r0, [r3, #0]
 80044d4:	f3bf 8f5b 	dmb	ish
 80044d8:	4770      	bx	lr
 80044da:	bf00      	nop
 80044dc:	200000fc 	.word	0x200000fc

080044e0 <abort>:
 80044e0:	b508      	push	{r3, lr}
 80044e2:	2006      	movs	r0, #6
 80044e4:	f000 f950 	bl	8004788 <raise>
 80044e8:	2001      	movs	r0, #1
 80044ea:	f7fd f9db 	bl	80018a4 <_exit>
	...

080044f0 <__errno>:
 80044f0:	4b01      	ldr	r3, [pc, #4]	; (80044f8 <__errno+0x8>)
 80044f2:	6818      	ldr	r0, [r3, #0]
 80044f4:	4770      	bx	lr
 80044f6:	bf00      	nop
 80044f8:	20000004 	.word	0x20000004

080044fc <__libc_init_array>:
 80044fc:	b570      	push	{r4, r5, r6, lr}
 80044fe:	4d0d      	ldr	r5, [pc, #52]	; (8004534 <__libc_init_array+0x38>)
 8004500:	4c0d      	ldr	r4, [pc, #52]	; (8004538 <__libc_init_array+0x3c>)
 8004502:	1b64      	subs	r4, r4, r5
 8004504:	10a4      	asrs	r4, r4, #2
 8004506:	2600      	movs	r6, #0
 8004508:	42a6      	cmp	r6, r4
 800450a:	d109      	bne.n	8004520 <__libc_init_array+0x24>
 800450c:	4d0b      	ldr	r5, [pc, #44]	; (800453c <__libc_init_array+0x40>)
 800450e:	4c0c      	ldr	r4, [pc, #48]	; (8004540 <__libc_init_array+0x44>)
 8004510:	f000 fcbc 	bl	8004e8c <_init>
 8004514:	1b64      	subs	r4, r4, r5
 8004516:	10a4      	asrs	r4, r4, #2
 8004518:	2600      	movs	r6, #0
 800451a:	42a6      	cmp	r6, r4
 800451c:	d105      	bne.n	800452a <__libc_init_array+0x2e>
 800451e:	bd70      	pop	{r4, r5, r6, pc}
 8004520:	f855 3b04 	ldr.w	r3, [r5], #4
 8004524:	4798      	blx	r3
 8004526:	3601      	adds	r6, #1
 8004528:	e7ee      	b.n	8004508 <__libc_init_array+0xc>
 800452a:	f855 3b04 	ldr.w	r3, [r5], #4
 800452e:	4798      	blx	r3
 8004530:	3601      	adds	r6, #1
 8004532:	e7f2      	b.n	800451a <__libc_init_array+0x1e>
 8004534:	08004fec 	.word	0x08004fec
 8004538:	08004fec 	.word	0x08004fec
 800453c:	08004fec 	.word	0x08004fec
 8004540:	08004ff4 	.word	0x08004ff4

08004544 <malloc>:
 8004544:	4b02      	ldr	r3, [pc, #8]	; (8004550 <malloc+0xc>)
 8004546:	4601      	mov	r1, r0
 8004548:	6818      	ldr	r0, [r3, #0]
 800454a:	f000 b88b 	b.w	8004664 <_malloc_r>
 800454e:	bf00      	nop
 8004550:	20000004 	.word	0x20000004

08004554 <free>:
 8004554:	4b02      	ldr	r3, [pc, #8]	; (8004560 <free+0xc>)
 8004556:	4601      	mov	r1, r0
 8004558:	6818      	ldr	r0, [r3, #0]
 800455a:	f000 b833 	b.w	80045c4 <_free_r>
 800455e:	bf00      	nop
 8004560:	20000004 	.word	0x20000004

08004564 <memcpy>:
 8004564:	440a      	add	r2, r1
 8004566:	4291      	cmp	r1, r2
 8004568:	f100 33ff 	add.w	r3, r0, #4294967295
 800456c:	d100      	bne.n	8004570 <memcpy+0xc>
 800456e:	4770      	bx	lr
 8004570:	b510      	push	{r4, lr}
 8004572:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004576:	f803 4f01 	strb.w	r4, [r3, #1]!
 800457a:	4291      	cmp	r1, r2
 800457c:	d1f9      	bne.n	8004572 <memcpy+0xe>
 800457e:	bd10      	pop	{r4, pc}

08004580 <memmove>:
 8004580:	4288      	cmp	r0, r1
 8004582:	b510      	push	{r4, lr}
 8004584:	eb01 0402 	add.w	r4, r1, r2
 8004588:	d902      	bls.n	8004590 <memmove+0x10>
 800458a:	4284      	cmp	r4, r0
 800458c:	4623      	mov	r3, r4
 800458e:	d807      	bhi.n	80045a0 <memmove+0x20>
 8004590:	1e43      	subs	r3, r0, #1
 8004592:	42a1      	cmp	r1, r4
 8004594:	d008      	beq.n	80045a8 <memmove+0x28>
 8004596:	f811 2b01 	ldrb.w	r2, [r1], #1
 800459a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800459e:	e7f8      	b.n	8004592 <memmove+0x12>
 80045a0:	4402      	add	r2, r0
 80045a2:	4601      	mov	r1, r0
 80045a4:	428a      	cmp	r2, r1
 80045a6:	d100      	bne.n	80045aa <memmove+0x2a>
 80045a8:	bd10      	pop	{r4, pc}
 80045aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80045ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80045b2:	e7f7      	b.n	80045a4 <memmove+0x24>

080045b4 <memset>:
 80045b4:	4402      	add	r2, r0
 80045b6:	4603      	mov	r3, r0
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d100      	bne.n	80045be <memset+0xa>
 80045bc:	4770      	bx	lr
 80045be:	f803 1b01 	strb.w	r1, [r3], #1
 80045c2:	e7f9      	b.n	80045b8 <memset+0x4>

080045c4 <_free_r>:
 80045c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80045c6:	2900      	cmp	r1, #0
 80045c8:	d048      	beq.n	800465c <_free_r+0x98>
 80045ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045ce:	9001      	str	r0, [sp, #4]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	f1a1 0404 	sub.w	r4, r1, #4
 80045d6:	bfb8      	it	lt
 80045d8:	18e4      	addlt	r4, r4, r3
 80045da:	f000 f92b 	bl	8004834 <__malloc_lock>
 80045de:	4a20      	ldr	r2, [pc, #128]	; (8004660 <_free_r+0x9c>)
 80045e0:	9801      	ldr	r0, [sp, #4]
 80045e2:	6813      	ldr	r3, [r2, #0]
 80045e4:	4615      	mov	r5, r2
 80045e6:	b933      	cbnz	r3, 80045f6 <_free_r+0x32>
 80045e8:	6063      	str	r3, [r4, #4]
 80045ea:	6014      	str	r4, [r2, #0]
 80045ec:	b003      	add	sp, #12
 80045ee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80045f2:	f000 b925 	b.w	8004840 <__malloc_unlock>
 80045f6:	42a3      	cmp	r3, r4
 80045f8:	d90b      	bls.n	8004612 <_free_r+0x4e>
 80045fa:	6821      	ldr	r1, [r4, #0]
 80045fc:	1862      	adds	r2, r4, r1
 80045fe:	4293      	cmp	r3, r2
 8004600:	bf04      	itt	eq
 8004602:	681a      	ldreq	r2, [r3, #0]
 8004604:	685b      	ldreq	r3, [r3, #4]
 8004606:	6063      	str	r3, [r4, #4]
 8004608:	bf04      	itt	eq
 800460a:	1852      	addeq	r2, r2, r1
 800460c:	6022      	streq	r2, [r4, #0]
 800460e:	602c      	str	r4, [r5, #0]
 8004610:	e7ec      	b.n	80045ec <_free_r+0x28>
 8004612:	461a      	mov	r2, r3
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	b10b      	cbz	r3, 800461c <_free_r+0x58>
 8004618:	42a3      	cmp	r3, r4
 800461a:	d9fa      	bls.n	8004612 <_free_r+0x4e>
 800461c:	6811      	ldr	r1, [r2, #0]
 800461e:	1855      	adds	r5, r2, r1
 8004620:	42a5      	cmp	r5, r4
 8004622:	d10b      	bne.n	800463c <_free_r+0x78>
 8004624:	6824      	ldr	r4, [r4, #0]
 8004626:	4421      	add	r1, r4
 8004628:	1854      	adds	r4, r2, r1
 800462a:	42a3      	cmp	r3, r4
 800462c:	6011      	str	r1, [r2, #0]
 800462e:	d1dd      	bne.n	80045ec <_free_r+0x28>
 8004630:	681c      	ldr	r4, [r3, #0]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	6053      	str	r3, [r2, #4]
 8004636:	4421      	add	r1, r4
 8004638:	6011      	str	r1, [r2, #0]
 800463a:	e7d7      	b.n	80045ec <_free_r+0x28>
 800463c:	d902      	bls.n	8004644 <_free_r+0x80>
 800463e:	230c      	movs	r3, #12
 8004640:	6003      	str	r3, [r0, #0]
 8004642:	e7d3      	b.n	80045ec <_free_r+0x28>
 8004644:	6825      	ldr	r5, [r4, #0]
 8004646:	1961      	adds	r1, r4, r5
 8004648:	428b      	cmp	r3, r1
 800464a:	bf04      	itt	eq
 800464c:	6819      	ldreq	r1, [r3, #0]
 800464e:	685b      	ldreq	r3, [r3, #4]
 8004650:	6063      	str	r3, [r4, #4]
 8004652:	bf04      	itt	eq
 8004654:	1949      	addeq	r1, r1, r5
 8004656:	6021      	streq	r1, [r4, #0]
 8004658:	6054      	str	r4, [r2, #4]
 800465a:	e7c7      	b.n	80045ec <_free_r+0x28>
 800465c:	b003      	add	sp, #12
 800465e:	bd30      	pop	{r4, r5, pc}
 8004660:	20000100 	.word	0x20000100

08004664 <_malloc_r>:
 8004664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004666:	1ccd      	adds	r5, r1, #3
 8004668:	f025 0503 	bic.w	r5, r5, #3
 800466c:	3508      	adds	r5, #8
 800466e:	2d0c      	cmp	r5, #12
 8004670:	bf38      	it	cc
 8004672:	250c      	movcc	r5, #12
 8004674:	2d00      	cmp	r5, #0
 8004676:	4606      	mov	r6, r0
 8004678:	db01      	blt.n	800467e <_malloc_r+0x1a>
 800467a:	42a9      	cmp	r1, r5
 800467c:	d903      	bls.n	8004686 <_malloc_r+0x22>
 800467e:	230c      	movs	r3, #12
 8004680:	6033      	str	r3, [r6, #0]
 8004682:	2000      	movs	r0, #0
 8004684:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004686:	f000 f8d5 	bl	8004834 <__malloc_lock>
 800468a:	4921      	ldr	r1, [pc, #132]	; (8004710 <_malloc_r+0xac>)
 800468c:	680a      	ldr	r2, [r1, #0]
 800468e:	4614      	mov	r4, r2
 8004690:	b99c      	cbnz	r4, 80046ba <_malloc_r+0x56>
 8004692:	4f20      	ldr	r7, [pc, #128]	; (8004714 <_malloc_r+0xb0>)
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	b923      	cbnz	r3, 80046a2 <_malloc_r+0x3e>
 8004698:	4621      	mov	r1, r4
 800469a:	4630      	mov	r0, r6
 800469c:	f000 f83c 	bl	8004718 <_sbrk_r>
 80046a0:	6038      	str	r0, [r7, #0]
 80046a2:	4629      	mov	r1, r5
 80046a4:	4630      	mov	r0, r6
 80046a6:	f000 f837 	bl	8004718 <_sbrk_r>
 80046aa:	1c43      	adds	r3, r0, #1
 80046ac:	d123      	bne.n	80046f6 <_malloc_r+0x92>
 80046ae:	230c      	movs	r3, #12
 80046b0:	6033      	str	r3, [r6, #0]
 80046b2:	4630      	mov	r0, r6
 80046b4:	f000 f8c4 	bl	8004840 <__malloc_unlock>
 80046b8:	e7e3      	b.n	8004682 <_malloc_r+0x1e>
 80046ba:	6823      	ldr	r3, [r4, #0]
 80046bc:	1b5b      	subs	r3, r3, r5
 80046be:	d417      	bmi.n	80046f0 <_malloc_r+0x8c>
 80046c0:	2b0b      	cmp	r3, #11
 80046c2:	d903      	bls.n	80046cc <_malloc_r+0x68>
 80046c4:	6023      	str	r3, [r4, #0]
 80046c6:	441c      	add	r4, r3
 80046c8:	6025      	str	r5, [r4, #0]
 80046ca:	e004      	b.n	80046d6 <_malloc_r+0x72>
 80046cc:	6863      	ldr	r3, [r4, #4]
 80046ce:	42a2      	cmp	r2, r4
 80046d0:	bf0c      	ite	eq
 80046d2:	600b      	streq	r3, [r1, #0]
 80046d4:	6053      	strne	r3, [r2, #4]
 80046d6:	4630      	mov	r0, r6
 80046d8:	f000 f8b2 	bl	8004840 <__malloc_unlock>
 80046dc:	f104 000b 	add.w	r0, r4, #11
 80046e0:	1d23      	adds	r3, r4, #4
 80046e2:	f020 0007 	bic.w	r0, r0, #7
 80046e6:	1ac2      	subs	r2, r0, r3
 80046e8:	d0cc      	beq.n	8004684 <_malloc_r+0x20>
 80046ea:	1a1b      	subs	r3, r3, r0
 80046ec:	50a3      	str	r3, [r4, r2]
 80046ee:	e7c9      	b.n	8004684 <_malloc_r+0x20>
 80046f0:	4622      	mov	r2, r4
 80046f2:	6864      	ldr	r4, [r4, #4]
 80046f4:	e7cc      	b.n	8004690 <_malloc_r+0x2c>
 80046f6:	1cc4      	adds	r4, r0, #3
 80046f8:	f024 0403 	bic.w	r4, r4, #3
 80046fc:	42a0      	cmp	r0, r4
 80046fe:	d0e3      	beq.n	80046c8 <_malloc_r+0x64>
 8004700:	1a21      	subs	r1, r4, r0
 8004702:	4630      	mov	r0, r6
 8004704:	f000 f808 	bl	8004718 <_sbrk_r>
 8004708:	3001      	adds	r0, #1
 800470a:	d1dd      	bne.n	80046c8 <_malloc_r+0x64>
 800470c:	e7cf      	b.n	80046ae <_malloc_r+0x4a>
 800470e:	bf00      	nop
 8004710:	20000100 	.word	0x20000100
 8004714:	20000104 	.word	0x20000104

08004718 <_sbrk_r>:
 8004718:	b538      	push	{r3, r4, r5, lr}
 800471a:	4d06      	ldr	r5, [pc, #24]	; (8004734 <_sbrk_r+0x1c>)
 800471c:	2300      	movs	r3, #0
 800471e:	4604      	mov	r4, r0
 8004720:	4608      	mov	r0, r1
 8004722:	602b      	str	r3, [r5, #0]
 8004724:	f7fd f8c8 	bl	80018b8 <_sbrk>
 8004728:	1c43      	adds	r3, r0, #1
 800472a:	d102      	bne.n	8004732 <_sbrk_r+0x1a>
 800472c:	682b      	ldr	r3, [r5, #0]
 800472e:	b103      	cbz	r3, 8004732 <_sbrk_r+0x1a>
 8004730:	6023      	str	r3, [r4, #0]
 8004732:	bd38      	pop	{r3, r4, r5, pc}
 8004734:	20000108 	.word	0x20000108

08004738 <_raise_r>:
 8004738:	291f      	cmp	r1, #31
 800473a:	b538      	push	{r3, r4, r5, lr}
 800473c:	4604      	mov	r4, r0
 800473e:	460d      	mov	r5, r1
 8004740:	d904      	bls.n	800474c <_raise_r+0x14>
 8004742:	2316      	movs	r3, #22
 8004744:	6003      	str	r3, [r0, #0]
 8004746:	f04f 30ff 	mov.w	r0, #4294967295
 800474a:	bd38      	pop	{r3, r4, r5, pc}
 800474c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800474e:	b112      	cbz	r2, 8004756 <_raise_r+0x1e>
 8004750:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004754:	b94b      	cbnz	r3, 800476a <_raise_r+0x32>
 8004756:	4620      	mov	r0, r4
 8004758:	f000 f830 	bl	80047bc <_getpid_r>
 800475c:	462a      	mov	r2, r5
 800475e:	4601      	mov	r1, r0
 8004760:	4620      	mov	r0, r4
 8004762:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004766:	f000 b817 	b.w	8004798 <_kill_r>
 800476a:	2b01      	cmp	r3, #1
 800476c:	d00a      	beq.n	8004784 <_raise_r+0x4c>
 800476e:	1c59      	adds	r1, r3, #1
 8004770:	d103      	bne.n	800477a <_raise_r+0x42>
 8004772:	2316      	movs	r3, #22
 8004774:	6003      	str	r3, [r0, #0]
 8004776:	2001      	movs	r0, #1
 8004778:	e7e7      	b.n	800474a <_raise_r+0x12>
 800477a:	2400      	movs	r4, #0
 800477c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004780:	4628      	mov	r0, r5
 8004782:	4798      	blx	r3
 8004784:	2000      	movs	r0, #0
 8004786:	e7e0      	b.n	800474a <_raise_r+0x12>

08004788 <raise>:
 8004788:	4b02      	ldr	r3, [pc, #8]	; (8004794 <raise+0xc>)
 800478a:	4601      	mov	r1, r0
 800478c:	6818      	ldr	r0, [r3, #0]
 800478e:	f7ff bfd3 	b.w	8004738 <_raise_r>
 8004792:	bf00      	nop
 8004794:	20000004 	.word	0x20000004

08004798 <_kill_r>:
 8004798:	b538      	push	{r3, r4, r5, lr}
 800479a:	4d07      	ldr	r5, [pc, #28]	; (80047b8 <_kill_r+0x20>)
 800479c:	2300      	movs	r3, #0
 800479e:	4604      	mov	r4, r0
 80047a0:	4608      	mov	r0, r1
 80047a2:	4611      	mov	r1, r2
 80047a4:	602b      	str	r3, [r5, #0]
 80047a6:	f7fd f86d 	bl	8001884 <_kill>
 80047aa:	1c43      	adds	r3, r0, #1
 80047ac:	d102      	bne.n	80047b4 <_kill_r+0x1c>
 80047ae:	682b      	ldr	r3, [r5, #0]
 80047b0:	b103      	cbz	r3, 80047b4 <_kill_r+0x1c>
 80047b2:	6023      	str	r3, [r4, #0]
 80047b4:	bd38      	pop	{r3, r4, r5, pc}
 80047b6:	bf00      	nop
 80047b8:	20000108 	.word	0x20000108

080047bc <_getpid_r>:
 80047bc:	f7fd b85a 	b.w	8001874 <_getpid>

080047c0 <_vsniprintf_r>:
 80047c0:	b530      	push	{r4, r5, lr}
 80047c2:	1e14      	subs	r4, r2, #0
 80047c4:	4605      	mov	r5, r0
 80047c6:	b09b      	sub	sp, #108	; 0x6c
 80047c8:	4618      	mov	r0, r3
 80047ca:	da05      	bge.n	80047d8 <_vsniprintf_r+0x18>
 80047cc:	238b      	movs	r3, #139	; 0x8b
 80047ce:	602b      	str	r3, [r5, #0]
 80047d0:	f04f 30ff 	mov.w	r0, #4294967295
 80047d4:	b01b      	add	sp, #108	; 0x6c
 80047d6:	bd30      	pop	{r4, r5, pc}
 80047d8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80047dc:	f8ad 300c 	strh.w	r3, [sp, #12]
 80047e0:	bf14      	ite	ne
 80047e2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80047e6:	4623      	moveq	r3, r4
 80047e8:	9302      	str	r3, [sp, #8]
 80047ea:	9305      	str	r3, [sp, #20]
 80047ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80047f0:	9100      	str	r1, [sp, #0]
 80047f2:	9104      	str	r1, [sp, #16]
 80047f4:	f8ad 300e 	strh.w	r3, [sp, #14]
 80047f8:	4602      	mov	r2, r0
 80047fa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80047fc:	4669      	mov	r1, sp
 80047fe:	4628      	mov	r0, r5
 8004800:	f000 f880 	bl	8004904 <_svfiprintf_r>
 8004804:	1c43      	adds	r3, r0, #1
 8004806:	bfbc      	itt	lt
 8004808:	238b      	movlt	r3, #139	; 0x8b
 800480a:	602b      	strlt	r3, [r5, #0]
 800480c:	2c00      	cmp	r4, #0
 800480e:	d0e1      	beq.n	80047d4 <_vsniprintf_r+0x14>
 8004810:	9b00      	ldr	r3, [sp, #0]
 8004812:	2200      	movs	r2, #0
 8004814:	701a      	strb	r2, [r3, #0]
 8004816:	e7dd      	b.n	80047d4 <_vsniprintf_r+0x14>

08004818 <vsniprintf>:
 8004818:	b507      	push	{r0, r1, r2, lr}
 800481a:	9300      	str	r3, [sp, #0]
 800481c:	4613      	mov	r3, r2
 800481e:	460a      	mov	r2, r1
 8004820:	4601      	mov	r1, r0
 8004822:	4803      	ldr	r0, [pc, #12]	; (8004830 <vsniprintf+0x18>)
 8004824:	6800      	ldr	r0, [r0, #0]
 8004826:	f7ff ffcb 	bl	80047c0 <_vsniprintf_r>
 800482a:	b003      	add	sp, #12
 800482c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004830:	20000004 	.word	0x20000004

08004834 <__malloc_lock>:
 8004834:	4801      	ldr	r0, [pc, #4]	; (800483c <__malloc_lock+0x8>)
 8004836:	f000 baf9 	b.w	8004e2c <__retarget_lock_acquire_recursive>
 800483a:	bf00      	nop
 800483c:	20000110 	.word	0x20000110

08004840 <__malloc_unlock>:
 8004840:	4801      	ldr	r0, [pc, #4]	; (8004848 <__malloc_unlock+0x8>)
 8004842:	f000 baf4 	b.w	8004e2e <__retarget_lock_release_recursive>
 8004846:	bf00      	nop
 8004848:	20000110 	.word	0x20000110

0800484c <__ssputs_r>:
 800484c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004850:	688e      	ldr	r6, [r1, #8]
 8004852:	429e      	cmp	r6, r3
 8004854:	4682      	mov	sl, r0
 8004856:	460c      	mov	r4, r1
 8004858:	4690      	mov	r8, r2
 800485a:	461f      	mov	r7, r3
 800485c:	d838      	bhi.n	80048d0 <__ssputs_r+0x84>
 800485e:	898a      	ldrh	r2, [r1, #12]
 8004860:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004864:	d032      	beq.n	80048cc <__ssputs_r+0x80>
 8004866:	6825      	ldr	r5, [r4, #0]
 8004868:	6909      	ldr	r1, [r1, #16]
 800486a:	eba5 0901 	sub.w	r9, r5, r1
 800486e:	6965      	ldr	r5, [r4, #20]
 8004870:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004874:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004878:	3301      	adds	r3, #1
 800487a:	444b      	add	r3, r9
 800487c:	106d      	asrs	r5, r5, #1
 800487e:	429d      	cmp	r5, r3
 8004880:	bf38      	it	cc
 8004882:	461d      	movcc	r5, r3
 8004884:	0553      	lsls	r3, r2, #21
 8004886:	d531      	bpl.n	80048ec <__ssputs_r+0xa0>
 8004888:	4629      	mov	r1, r5
 800488a:	f7ff feeb 	bl	8004664 <_malloc_r>
 800488e:	4606      	mov	r6, r0
 8004890:	b950      	cbnz	r0, 80048a8 <__ssputs_r+0x5c>
 8004892:	230c      	movs	r3, #12
 8004894:	f8ca 3000 	str.w	r3, [sl]
 8004898:	89a3      	ldrh	r3, [r4, #12]
 800489a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800489e:	81a3      	strh	r3, [r4, #12]
 80048a0:	f04f 30ff 	mov.w	r0, #4294967295
 80048a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048a8:	6921      	ldr	r1, [r4, #16]
 80048aa:	464a      	mov	r2, r9
 80048ac:	f7ff fe5a 	bl	8004564 <memcpy>
 80048b0:	89a3      	ldrh	r3, [r4, #12]
 80048b2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80048b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048ba:	81a3      	strh	r3, [r4, #12]
 80048bc:	6126      	str	r6, [r4, #16]
 80048be:	6165      	str	r5, [r4, #20]
 80048c0:	444e      	add	r6, r9
 80048c2:	eba5 0509 	sub.w	r5, r5, r9
 80048c6:	6026      	str	r6, [r4, #0]
 80048c8:	60a5      	str	r5, [r4, #8]
 80048ca:	463e      	mov	r6, r7
 80048cc:	42be      	cmp	r6, r7
 80048ce:	d900      	bls.n	80048d2 <__ssputs_r+0x86>
 80048d0:	463e      	mov	r6, r7
 80048d2:	4632      	mov	r2, r6
 80048d4:	6820      	ldr	r0, [r4, #0]
 80048d6:	4641      	mov	r1, r8
 80048d8:	f7ff fe52 	bl	8004580 <memmove>
 80048dc:	68a3      	ldr	r3, [r4, #8]
 80048de:	6822      	ldr	r2, [r4, #0]
 80048e0:	1b9b      	subs	r3, r3, r6
 80048e2:	4432      	add	r2, r6
 80048e4:	60a3      	str	r3, [r4, #8]
 80048e6:	6022      	str	r2, [r4, #0]
 80048e8:	2000      	movs	r0, #0
 80048ea:	e7db      	b.n	80048a4 <__ssputs_r+0x58>
 80048ec:	462a      	mov	r2, r5
 80048ee:	f000 fa9f 	bl	8004e30 <_realloc_r>
 80048f2:	4606      	mov	r6, r0
 80048f4:	2800      	cmp	r0, #0
 80048f6:	d1e1      	bne.n	80048bc <__ssputs_r+0x70>
 80048f8:	6921      	ldr	r1, [r4, #16]
 80048fa:	4650      	mov	r0, sl
 80048fc:	f7ff fe62 	bl	80045c4 <_free_r>
 8004900:	e7c7      	b.n	8004892 <__ssputs_r+0x46>
	...

08004904 <_svfiprintf_r>:
 8004904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004908:	4698      	mov	r8, r3
 800490a:	898b      	ldrh	r3, [r1, #12]
 800490c:	061b      	lsls	r3, r3, #24
 800490e:	b09d      	sub	sp, #116	; 0x74
 8004910:	4607      	mov	r7, r0
 8004912:	460d      	mov	r5, r1
 8004914:	4614      	mov	r4, r2
 8004916:	d50e      	bpl.n	8004936 <_svfiprintf_r+0x32>
 8004918:	690b      	ldr	r3, [r1, #16]
 800491a:	b963      	cbnz	r3, 8004936 <_svfiprintf_r+0x32>
 800491c:	2140      	movs	r1, #64	; 0x40
 800491e:	f7ff fea1 	bl	8004664 <_malloc_r>
 8004922:	6028      	str	r0, [r5, #0]
 8004924:	6128      	str	r0, [r5, #16]
 8004926:	b920      	cbnz	r0, 8004932 <_svfiprintf_r+0x2e>
 8004928:	230c      	movs	r3, #12
 800492a:	603b      	str	r3, [r7, #0]
 800492c:	f04f 30ff 	mov.w	r0, #4294967295
 8004930:	e0d1      	b.n	8004ad6 <_svfiprintf_r+0x1d2>
 8004932:	2340      	movs	r3, #64	; 0x40
 8004934:	616b      	str	r3, [r5, #20]
 8004936:	2300      	movs	r3, #0
 8004938:	9309      	str	r3, [sp, #36]	; 0x24
 800493a:	2320      	movs	r3, #32
 800493c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004940:	f8cd 800c 	str.w	r8, [sp, #12]
 8004944:	2330      	movs	r3, #48	; 0x30
 8004946:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004af0 <_svfiprintf_r+0x1ec>
 800494a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800494e:	f04f 0901 	mov.w	r9, #1
 8004952:	4623      	mov	r3, r4
 8004954:	469a      	mov	sl, r3
 8004956:	f813 2b01 	ldrb.w	r2, [r3], #1
 800495a:	b10a      	cbz	r2, 8004960 <_svfiprintf_r+0x5c>
 800495c:	2a25      	cmp	r2, #37	; 0x25
 800495e:	d1f9      	bne.n	8004954 <_svfiprintf_r+0x50>
 8004960:	ebba 0b04 	subs.w	fp, sl, r4
 8004964:	d00b      	beq.n	800497e <_svfiprintf_r+0x7a>
 8004966:	465b      	mov	r3, fp
 8004968:	4622      	mov	r2, r4
 800496a:	4629      	mov	r1, r5
 800496c:	4638      	mov	r0, r7
 800496e:	f7ff ff6d 	bl	800484c <__ssputs_r>
 8004972:	3001      	adds	r0, #1
 8004974:	f000 80aa 	beq.w	8004acc <_svfiprintf_r+0x1c8>
 8004978:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800497a:	445a      	add	r2, fp
 800497c:	9209      	str	r2, [sp, #36]	; 0x24
 800497e:	f89a 3000 	ldrb.w	r3, [sl]
 8004982:	2b00      	cmp	r3, #0
 8004984:	f000 80a2 	beq.w	8004acc <_svfiprintf_r+0x1c8>
 8004988:	2300      	movs	r3, #0
 800498a:	f04f 32ff 	mov.w	r2, #4294967295
 800498e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004992:	f10a 0a01 	add.w	sl, sl, #1
 8004996:	9304      	str	r3, [sp, #16]
 8004998:	9307      	str	r3, [sp, #28]
 800499a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800499e:	931a      	str	r3, [sp, #104]	; 0x68
 80049a0:	4654      	mov	r4, sl
 80049a2:	2205      	movs	r2, #5
 80049a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049a8:	4851      	ldr	r0, [pc, #324]	; (8004af0 <_svfiprintf_r+0x1ec>)
 80049aa:	f7fb fc11 	bl	80001d0 <memchr>
 80049ae:	9a04      	ldr	r2, [sp, #16]
 80049b0:	b9d8      	cbnz	r0, 80049ea <_svfiprintf_r+0xe6>
 80049b2:	06d0      	lsls	r0, r2, #27
 80049b4:	bf44      	itt	mi
 80049b6:	2320      	movmi	r3, #32
 80049b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80049bc:	0711      	lsls	r1, r2, #28
 80049be:	bf44      	itt	mi
 80049c0:	232b      	movmi	r3, #43	; 0x2b
 80049c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80049c6:	f89a 3000 	ldrb.w	r3, [sl]
 80049ca:	2b2a      	cmp	r3, #42	; 0x2a
 80049cc:	d015      	beq.n	80049fa <_svfiprintf_r+0xf6>
 80049ce:	9a07      	ldr	r2, [sp, #28]
 80049d0:	4654      	mov	r4, sl
 80049d2:	2000      	movs	r0, #0
 80049d4:	f04f 0c0a 	mov.w	ip, #10
 80049d8:	4621      	mov	r1, r4
 80049da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80049de:	3b30      	subs	r3, #48	; 0x30
 80049e0:	2b09      	cmp	r3, #9
 80049e2:	d94e      	bls.n	8004a82 <_svfiprintf_r+0x17e>
 80049e4:	b1b0      	cbz	r0, 8004a14 <_svfiprintf_r+0x110>
 80049e6:	9207      	str	r2, [sp, #28]
 80049e8:	e014      	b.n	8004a14 <_svfiprintf_r+0x110>
 80049ea:	eba0 0308 	sub.w	r3, r0, r8
 80049ee:	fa09 f303 	lsl.w	r3, r9, r3
 80049f2:	4313      	orrs	r3, r2
 80049f4:	9304      	str	r3, [sp, #16]
 80049f6:	46a2      	mov	sl, r4
 80049f8:	e7d2      	b.n	80049a0 <_svfiprintf_r+0x9c>
 80049fa:	9b03      	ldr	r3, [sp, #12]
 80049fc:	1d19      	adds	r1, r3, #4
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	9103      	str	r1, [sp, #12]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	bfbb      	ittet	lt
 8004a06:	425b      	neglt	r3, r3
 8004a08:	f042 0202 	orrlt.w	r2, r2, #2
 8004a0c:	9307      	strge	r3, [sp, #28]
 8004a0e:	9307      	strlt	r3, [sp, #28]
 8004a10:	bfb8      	it	lt
 8004a12:	9204      	strlt	r2, [sp, #16]
 8004a14:	7823      	ldrb	r3, [r4, #0]
 8004a16:	2b2e      	cmp	r3, #46	; 0x2e
 8004a18:	d10c      	bne.n	8004a34 <_svfiprintf_r+0x130>
 8004a1a:	7863      	ldrb	r3, [r4, #1]
 8004a1c:	2b2a      	cmp	r3, #42	; 0x2a
 8004a1e:	d135      	bne.n	8004a8c <_svfiprintf_r+0x188>
 8004a20:	9b03      	ldr	r3, [sp, #12]
 8004a22:	1d1a      	adds	r2, r3, #4
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	9203      	str	r2, [sp, #12]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	bfb8      	it	lt
 8004a2c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004a30:	3402      	adds	r4, #2
 8004a32:	9305      	str	r3, [sp, #20]
 8004a34:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004b00 <_svfiprintf_r+0x1fc>
 8004a38:	7821      	ldrb	r1, [r4, #0]
 8004a3a:	2203      	movs	r2, #3
 8004a3c:	4650      	mov	r0, sl
 8004a3e:	f7fb fbc7 	bl	80001d0 <memchr>
 8004a42:	b140      	cbz	r0, 8004a56 <_svfiprintf_r+0x152>
 8004a44:	2340      	movs	r3, #64	; 0x40
 8004a46:	eba0 000a 	sub.w	r0, r0, sl
 8004a4a:	fa03 f000 	lsl.w	r0, r3, r0
 8004a4e:	9b04      	ldr	r3, [sp, #16]
 8004a50:	4303      	orrs	r3, r0
 8004a52:	3401      	adds	r4, #1
 8004a54:	9304      	str	r3, [sp, #16]
 8004a56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a5a:	4826      	ldr	r0, [pc, #152]	; (8004af4 <_svfiprintf_r+0x1f0>)
 8004a5c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004a60:	2206      	movs	r2, #6
 8004a62:	f7fb fbb5 	bl	80001d0 <memchr>
 8004a66:	2800      	cmp	r0, #0
 8004a68:	d038      	beq.n	8004adc <_svfiprintf_r+0x1d8>
 8004a6a:	4b23      	ldr	r3, [pc, #140]	; (8004af8 <_svfiprintf_r+0x1f4>)
 8004a6c:	bb1b      	cbnz	r3, 8004ab6 <_svfiprintf_r+0x1b2>
 8004a6e:	9b03      	ldr	r3, [sp, #12]
 8004a70:	3307      	adds	r3, #7
 8004a72:	f023 0307 	bic.w	r3, r3, #7
 8004a76:	3308      	adds	r3, #8
 8004a78:	9303      	str	r3, [sp, #12]
 8004a7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a7c:	4433      	add	r3, r6
 8004a7e:	9309      	str	r3, [sp, #36]	; 0x24
 8004a80:	e767      	b.n	8004952 <_svfiprintf_r+0x4e>
 8004a82:	fb0c 3202 	mla	r2, ip, r2, r3
 8004a86:	460c      	mov	r4, r1
 8004a88:	2001      	movs	r0, #1
 8004a8a:	e7a5      	b.n	80049d8 <_svfiprintf_r+0xd4>
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	3401      	adds	r4, #1
 8004a90:	9305      	str	r3, [sp, #20]
 8004a92:	4619      	mov	r1, r3
 8004a94:	f04f 0c0a 	mov.w	ip, #10
 8004a98:	4620      	mov	r0, r4
 8004a9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a9e:	3a30      	subs	r2, #48	; 0x30
 8004aa0:	2a09      	cmp	r2, #9
 8004aa2:	d903      	bls.n	8004aac <_svfiprintf_r+0x1a8>
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d0c5      	beq.n	8004a34 <_svfiprintf_r+0x130>
 8004aa8:	9105      	str	r1, [sp, #20]
 8004aaa:	e7c3      	b.n	8004a34 <_svfiprintf_r+0x130>
 8004aac:	fb0c 2101 	mla	r1, ip, r1, r2
 8004ab0:	4604      	mov	r4, r0
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e7f0      	b.n	8004a98 <_svfiprintf_r+0x194>
 8004ab6:	ab03      	add	r3, sp, #12
 8004ab8:	9300      	str	r3, [sp, #0]
 8004aba:	462a      	mov	r2, r5
 8004abc:	4b0f      	ldr	r3, [pc, #60]	; (8004afc <_svfiprintf_r+0x1f8>)
 8004abe:	a904      	add	r1, sp, #16
 8004ac0:	4638      	mov	r0, r7
 8004ac2:	f3af 8000 	nop.w
 8004ac6:	1c42      	adds	r2, r0, #1
 8004ac8:	4606      	mov	r6, r0
 8004aca:	d1d6      	bne.n	8004a7a <_svfiprintf_r+0x176>
 8004acc:	89ab      	ldrh	r3, [r5, #12]
 8004ace:	065b      	lsls	r3, r3, #25
 8004ad0:	f53f af2c 	bmi.w	800492c <_svfiprintf_r+0x28>
 8004ad4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004ad6:	b01d      	add	sp, #116	; 0x74
 8004ad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004adc:	ab03      	add	r3, sp, #12
 8004ade:	9300      	str	r3, [sp, #0]
 8004ae0:	462a      	mov	r2, r5
 8004ae2:	4b06      	ldr	r3, [pc, #24]	; (8004afc <_svfiprintf_r+0x1f8>)
 8004ae4:	a904      	add	r1, sp, #16
 8004ae6:	4638      	mov	r0, r7
 8004ae8:	f000 f87a 	bl	8004be0 <_printf_i>
 8004aec:	e7eb      	b.n	8004ac6 <_svfiprintf_r+0x1c2>
 8004aee:	bf00      	nop
 8004af0:	08004fb1 	.word	0x08004fb1
 8004af4:	08004fbb 	.word	0x08004fbb
 8004af8:	00000000 	.word	0x00000000
 8004afc:	0800484d 	.word	0x0800484d
 8004b00:	08004fb7 	.word	0x08004fb7

08004b04 <_printf_common>:
 8004b04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b08:	4616      	mov	r6, r2
 8004b0a:	4699      	mov	r9, r3
 8004b0c:	688a      	ldr	r2, [r1, #8]
 8004b0e:	690b      	ldr	r3, [r1, #16]
 8004b10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004b14:	4293      	cmp	r3, r2
 8004b16:	bfb8      	it	lt
 8004b18:	4613      	movlt	r3, r2
 8004b1a:	6033      	str	r3, [r6, #0]
 8004b1c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004b20:	4607      	mov	r7, r0
 8004b22:	460c      	mov	r4, r1
 8004b24:	b10a      	cbz	r2, 8004b2a <_printf_common+0x26>
 8004b26:	3301      	adds	r3, #1
 8004b28:	6033      	str	r3, [r6, #0]
 8004b2a:	6823      	ldr	r3, [r4, #0]
 8004b2c:	0699      	lsls	r1, r3, #26
 8004b2e:	bf42      	ittt	mi
 8004b30:	6833      	ldrmi	r3, [r6, #0]
 8004b32:	3302      	addmi	r3, #2
 8004b34:	6033      	strmi	r3, [r6, #0]
 8004b36:	6825      	ldr	r5, [r4, #0]
 8004b38:	f015 0506 	ands.w	r5, r5, #6
 8004b3c:	d106      	bne.n	8004b4c <_printf_common+0x48>
 8004b3e:	f104 0a19 	add.w	sl, r4, #25
 8004b42:	68e3      	ldr	r3, [r4, #12]
 8004b44:	6832      	ldr	r2, [r6, #0]
 8004b46:	1a9b      	subs	r3, r3, r2
 8004b48:	42ab      	cmp	r3, r5
 8004b4a:	dc26      	bgt.n	8004b9a <_printf_common+0x96>
 8004b4c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004b50:	1e13      	subs	r3, r2, #0
 8004b52:	6822      	ldr	r2, [r4, #0]
 8004b54:	bf18      	it	ne
 8004b56:	2301      	movne	r3, #1
 8004b58:	0692      	lsls	r2, r2, #26
 8004b5a:	d42b      	bmi.n	8004bb4 <_printf_common+0xb0>
 8004b5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b60:	4649      	mov	r1, r9
 8004b62:	4638      	mov	r0, r7
 8004b64:	47c0      	blx	r8
 8004b66:	3001      	adds	r0, #1
 8004b68:	d01e      	beq.n	8004ba8 <_printf_common+0xa4>
 8004b6a:	6823      	ldr	r3, [r4, #0]
 8004b6c:	68e5      	ldr	r5, [r4, #12]
 8004b6e:	6832      	ldr	r2, [r6, #0]
 8004b70:	f003 0306 	and.w	r3, r3, #6
 8004b74:	2b04      	cmp	r3, #4
 8004b76:	bf08      	it	eq
 8004b78:	1aad      	subeq	r5, r5, r2
 8004b7a:	68a3      	ldr	r3, [r4, #8]
 8004b7c:	6922      	ldr	r2, [r4, #16]
 8004b7e:	bf0c      	ite	eq
 8004b80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b84:	2500      	movne	r5, #0
 8004b86:	4293      	cmp	r3, r2
 8004b88:	bfc4      	itt	gt
 8004b8a:	1a9b      	subgt	r3, r3, r2
 8004b8c:	18ed      	addgt	r5, r5, r3
 8004b8e:	2600      	movs	r6, #0
 8004b90:	341a      	adds	r4, #26
 8004b92:	42b5      	cmp	r5, r6
 8004b94:	d11a      	bne.n	8004bcc <_printf_common+0xc8>
 8004b96:	2000      	movs	r0, #0
 8004b98:	e008      	b.n	8004bac <_printf_common+0xa8>
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	4652      	mov	r2, sl
 8004b9e:	4649      	mov	r1, r9
 8004ba0:	4638      	mov	r0, r7
 8004ba2:	47c0      	blx	r8
 8004ba4:	3001      	adds	r0, #1
 8004ba6:	d103      	bne.n	8004bb0 <_printf_common+0xac>
 8004ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8004bac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bb0:	3501      	adds	r5, #1
 8004bb2:	e7c6      	b.n	8004b42 <_printf_common+0x3e>
 8004bb4:	18e1      	adds	r1, r4, r3
 8004bb6:	1c5a      	adds	r2, r3, #1
 8004bb8:	2030      	movs	r0, #48	; 0x30
 8004bba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004bbe:	4422      	add	r2, r4
 8004bc0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004bc4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004bc8:	3302      	adds	r3, #2
 8004bca:	e7c7      	b.n	8004b5c <_printf_common+0x58>
 8004bcc:	2301      	movs	r3, #1
 8004bce:	4622      	mov	r2, r4
 8004bd0:	4649      	mov	r1, r9
 8004bd2:	4638      	mov	r0, r7
 8004bd4:	47c0      	blx	r8
 8004bd6:	3001      	adds	r0, #1
 8004bd8:	d0e6      	beq.n	8004ba8 <_printf_common+0xa4>
 8004bda:	3601      	adds	r6, #1
 8004bdc:	e7d9      	b.n	8004b92 <_printf_common+0x8e>
	...

08004be0 <_printf_i>:
 8004be0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004be4:	460c      	mov	r4, r1
 8004be6:	4691      	mov	r9, r2
 8004be8:	7e27      	ldrb	r7, [r4, #24]
 8004bea:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004bec:	2f78      	cmp	r7, #120	; 0x78
 8004bee:	4680      	mov	r8, r0
 8004bf0:	469a      	mov	sl, r3
 8004bf2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004bf6:	d807      	bhi.n	8004c08 <_printf_i+0x28>
 8004bf8:	2f62      	cmp	r7, #98	; 0x62
 8004bfa:	d80a      	bhi.n	8004c12 <_printf_i+0x32>
 8004bfc:	2f00      	cmp	r7, #0
 8004bfe:	f000 80d8 	beq.w	8004db2 <_printf_i+0x1d2>
 8004c02:	2f58      	cmp	r7, #88	; 0x58
 8004c04:	f000 80a3 	beq.w	8004d4e <_printf_i+0x16e>
 8004c08:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004c0c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004c10:	e03a      	b.n	8004c88 <_printf_i+0xa8>
 8004c12:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004c16:	2b15      	cmp	r3, #21
 8004c18:	d8f6      	bhi.n	8004c08 <_printf_i+0x28>
 8004c1a:	a001      	add	r0, pc, #4	; (adr r0, 8004c20 <_printf_i+0x40>)
 8004c1c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004c20:	08004c79 	.word	0x08004c79
 8004c24:	08004c8d 	.word	0x08004c8d
 8004c28:	08004c09 	.word	0x08004c09
 8004c2c:	08004c09 	.word	0x08004c09
 8004c30:	08004c09 	.word	0x08004c09
 8004c34:	08004c09 	.word	0x08004c09
 8004c38:	08004c8d 	.word	0x08004c8d
 8004c3c:	08004c09 	.word	0x08004c09
 8004c40:	08004c09 	.word	0x08004c09
 8004c44:	08004c09 	.word	0x08004c09
 8004c48:	08004c09 	.word	0x08004c09
 8004c4c:	08004d99 	.word	0x08004d99
 8004c50:	08004cbd 	.word	0x08004cbd
 8004c54:	08004d7b 	.word	0x08004d7b
 8004c58:	08004c09 	.word	0x08004c09
 8004c5c:	08004c09 	.word	0x08004c09
 8004c60:	08004dbb 	.word	0x08004dbb
 8004c64:	08004c09 	.word	0x08004c09
 8004c68:	08004cbd 	.word	0x08004cbd
 8004c6c:	08004c09 	.word	0x08004c09
 8004c70:	08004c09 	.word	0x08004c09
 8004c74:	08004d83 	.word	0x08004d83
 8004c78:	680b      	ldr	r3, [r1, #0]
 8004c7a:	1d1a      	adds	r2, r3, #4
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	600a      	str	r2, [r1, #0]
 8004c80:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004c84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c88:	2301      	movs	r3, #1
 8004c8a:	e0a3      	b.n	8004dd4 <_printf_i+0x1f4>
 8004c8c:	6825      	ldr	r5, [r4, #0]
 8004c8e:	6808      	ldr	r0, [r1, #0]
 8004c90:	062e      	lsls	r6, r5, #24
 8004c92:	f100 0304 	add.w	r3, r0, #4
 8004c96:	d50a      	bpl.n	8004cae <_printf_i+0xce>
 8004c98:	6805      	ldr	r5, [r0, #0]
 8004c9a:	600b      	str	r3, [r1, #0]
 8004c9c:	2d00      	cmp	r5, #0
 8004c9e:	da03      	bge.n	8004ca8 <_printf_i+0xc8>
 8004ca0:	232d      	movs	r3, #45	; 0x2d
 8004ca2:	426d      	negs	r5, r5
 8004ca4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ca8:	485e      	ldr	r0, [pc, #376]	; (8004e24 <_printf_i+0x244>)
 8004caa:	230a      	movs	r3, #10
 8004cac:	e019      	b.n	8004ce2 <_printf_i+0x102>
 8004cae:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004cb2:	6805      	ldr	r5, [r0, #0]
 8004cb4:	600b      	str	r3, [r1, #0]
 8004cb6:	bf18      	it	ne
 8004cb8:	b22d      	sxthne	r5, r5
 8004cba:	e7ef      	b.n	8004c9c <_printf_i+0xbc>
 8004cbc:	680b      	ldr	r3, [r1, #0]
 8004cbe:	6825      	ldr	r5, [r4, #0]
 8004cc0:	1d18      	adds	r0, r3, #4
 8004cc2:	6008      	str	r0, [r1, #0]
 8004cc4:	0628      	lsls	r0, r5, #24
 8004cc6:	d501      	bpl.n	8004ccc <_printf_i+0xec>
 8004cc8:	681d      	ldr	r5, [r3, #0]
 8004cca:	e002      	b.n	8004cd2 <_printf_i+0xf2>
 8004ccc:	0669      	lsls	r1, r5, #25
 8004cce:	d5fb      	bpl.n	8004cc8 <_printf_i+0xe8>
 8004cd0:	881d      	ldrh	r5, [r3, #0]
 8004cd2:	4854      	ldr	r0, [pc, #336]	; (8004e24 <_printf_i+0x244>)
 8004cd4:	2f6f      	cmp	r7, #111	; 0x6f
 8004cd6:	bf0c      	ite	eq
 8004cd8:	2308      	moveq	r3, #8
 8004cda:	230a      	movne	r3, #10
 8004cdc:	2100      	movs	r1, #0
 8004cde:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004ce2:	6866      	ldr	r6, [r4, #4]
 8004ce4:	60a6      	str	r6, [r4, #8]
 8004ce6:	2e00      	cmp	r6, #0
 8004ce8:	bfa2      	ittt	ge
 8004cea:	6821      	ldrge	r1, [r4, #0]
 8004cec:	f021 0104 	bicge.w	r1, r1, #4
 8004cf0:	6021      	strge	r1, [r4, #0]
 8004cf2:	b90d      	cbnz	r5, 8004cf8 <_printf_i+0x118>
 8004cf4:	2e00      	cmp	r6, #0
 8004cf6:	d04d      	beq.n	8004d94 <_printf_i+0x1b4>
 8004cf8:	4616      	mov	r6, r2
 8004cfa:	fbb5 f1f3 	udiv	r1, r5, r3
 8004cfe:	fb03 5711 	mls	r7, r3, r1, r5
 8004d02:	5dc7      	ldrb	r7, [r0, r7]
 8004d04:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004d08:	462f      	mov	r7, r5
 8004d0a:	42bb      	cmp	r3, r7
 8004d0c:	460d      	mov	r5, r1
 8004d0e:	d9f4      	bls.n	8004cfa <_printf_i+0x11a>
 8004d10:	2b08      	cmp	r3, #8
 8004d12:	d10b      	bne.n	8004d2c <_printf_i+0x14c>
 8004d14:	6823      	ldr	r3, [r4, #0]
 8004d16:	07df      	lsls	r7, r3, #31
 8004d18:	d508      	bpl.n	8004d2c <_printf_i+0x14c>
 8004d1a:	6923      	ldr	r3, [r4, #16]
 8004d1c:	6861      	ldr	r1, [r4, #4]
 8004d1e:	4299      	cmp	r1, r3
 8004d20:	bfde      	ittt	le
 8004d22:	2330      	movle	r3, #48	; 0x30
 8004d24:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004d28:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004d2c:	1b92      	subs	r2, r2, r6
 8004d2e:	6122      	str	r2, [r4, #16]
 8004d30:	f8cd a000 	str.w	sl, [sp]
 8004d34:	464b      	mov	r3, r9
 8004d36:	aa03      	add	r2, sp, #12
 8004d38:	4621      	mov	r1, r4
 8004d3a:	4640      	mov	r0, r8
 8004d3c:	f7ff fee2 	bl	8004b04 <_printf_common>
 8004d40:	3001      	adds	r0, #1
 8004d42:	d14c      	bne.n	8004dde <_printf_i+0x1fe>
 8004d44:	f04f 30ff 	mov.w	r0, #4294967295
 8004d48:	b004      	add	sp, #16
 8004d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d4e:	4835      	ldr	r0, [pc, #212]	; (8004e24 <_printf_i+0x244>)
 8004d50:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004d54:	6823      	ldr	r3, [r4, #0]
 8004d56:	680e      	ldr	r6, [r1, #0]
 8004d58:	061f      	lsls	r7, r3, #24
 8004d5a:	f856 5b04 	ldr.w	r5, [r6], #4
 8004d5e:	600e      	str	r6, [r1, #0]
 8004d60:	d514      	bpl.n	8004d8c <_printf_i+0x1ac>
 8004d62:	07d9      	lsls	r1, r3, #31
 8004d64:	bf44      	itt	mi
 8004d66:	f043 0320 	orrmi.w	r3, r3, #32
 8004d6a:	6023      	strmi	r3, [r4, #0]
 8004d6c:	b91d      	cbnz	r5, 8004d76 <_printf_i+0x196>
 8004d6e:	6823      	ldr	r3, [r4, #0]
 8004d70:	f023 0320 	bic.w	r3, r3, #32
 8004d74:	6023      	str	r3, [r4, #0]
 8004d76:	2310      	movs	r3, #16
 8004d78:	e7b0      	b.n	8004cdc <_printf_i+0xfc>
 8004d7a:	6823      	ldr	r3, [r4, #0]
 8004d7c:	f043 0320 	orr.w	r3, r3, #32
 8004d80:	6023      	str	r3, [r4, #0]
 8004d82:	2378      	movs	r3, #120	; 0x78
 8004d84:	4828      	ldr	r0, [pc, #160]	; (8004e28 <_printf_i+0x248>)
 8004d86:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004d8a:	e7e3      	b.n	8004d54 <_printf_i+0x174>
 8004d8c:	065e      	lsls	r6, r3, #25
 8004d8e:	bf48      	it	mi
 8004d90:	b2ad      	uxthmi	r5, r5
 8004d92:	e7e6      	b.n	8004d62 <_printf_i+0x182>
 8004d94:	4616      	mov	r6, r2
 8004d96:	e7bb      	b.n	8004d10 <_printf_i+0x130>
 8004d98:	680b      	ldr	r3, [r1, #0]
 8004d9a:	6826      	ldr	r6, [r4, #0]
 8004d9c:	6960      	ldr	r0, [r4, #20]
 8004d9e:	1d1d      	adds	r5, r3, #4
 8004da0:	600d      	str	r5, [r1, #0]
 8004da2:	0635      	lsls	r5, r6, #24
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	d501      	bpl.n	8004dac <_printf_i+0x1cc>
 8004da8:	6018      	str	r0, [r3, #0]
 8004daa:	e002      	b.n	8004db2 <_printf_i+0x1d2>
 8004dac:	0671      	lsls	r1, r6, #25
 8004dae:	d5fb      	bpl.n	8004da8 <_printf_i+0x1c8>
 8004db0:	8018      	strh	r0, [r3, #0]
 8004db2:	2300      	movs	r3, #0
 8004db4:	6123      	str	r3, [r4, #16]
 8004db6:	4616      	mov	r6, r2
 8004db8:	e7ba      	b.n	8004d30 <_printf_i+0x150>
 8004dba:	680b      	ldr	r3, [r1, #0]
 8004dbc:	1d1a      	adds	r2, r3, #4
 8004dbe:	600a      	str	r2, [r1, #0]
 8004dc0:	681e      	ldr	r6, [r3, #0]
 8004dc2:	6862      	ldr	r2, [r4, #4]
 8004dc4:	2100      	movs	r1, #0
 8004dc6:	4630      	mov	r0, r6
 8004dc8:	f7fb fa02 	bl	80001d0 <memchr>
 8004dcc:	b108      	cbz	r0, 8004dd2 <_printf_i+0x1f2>
 8004dce:	1b80      	subs	r0, r0, r6
 8004dd0:	6060      	str	r0, [r4, #4]
 8004dd2:	6863      	ldr	r3, [r4, #4]
 8004dd4:	6123      	str	r3, [r4, #16]
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ddc:	e7a8      	b.n	8004d30 <_printf_i+0x150>
 8004dde:	6923      	ldr	r3, [r4, #16]
 8004de0:	4632      	mov	r2, r6
 8004de2:	4649      	mov	r1, r9
 8004de4:	4640      	mov	r0, r8
 8004de6:	47d0      	blx	sl
 8004de8:	3001      	adds	r0, #1
 8004dea:	d0ab      	beq.n	8004d44 <_printf_i+0x164>
 8004dec:	6823      	ldr	r3, [r4, #0]
 8004dee:	079b      	lsls	r3, r3, #30
 8004df0:	d413      	bmi.n	8004e1a <_printf_i+0x23a>
 8004df2:	68e0      	ldr	r0, [r4, #12]
 8004df4:	9b03      	ldr	r3, [sp, #12]
 8004df6:	4298      	cmp	r0, r3
 8004df8:	bfb8      	it	lt
 8004dfa:	4618      	movlt	r0, r3
 8004dfc:	e7a4      	b.n	8004d48 <_printf_i+0x168>
 8004dfe:	2301      	movs	r3, #1
 8004e00:	4632      	mov	r2, r6
 8004e02:	4649      	mov	r1, r9
 8004e04:	4640      	mov	r0, r8
 8004e06:	47d0      	blx	sl
 8004e08:	3001      	adds	r0, #1
 8004e0a:	d09b      	beq.n	8004d44 <_printf_i+0x164>
 8004e0c:	3501      	adds	r5, #1
 8004e0e:	68e3      	ldr	r3, [r4, #12]
 8004e10:	9903      	ldr	r1, [sp, #12]
 8004e12:	1a5b      	subs	r3, r3, r1
 8004e14:	42ab      	cmp	r3, r5
 8004e16:	dcf2      	bgt.n	8004dfe <_printf_i+0x21e>
 8004e18:	e7eb      	b.n	8004df2 <_printf_i+0x212>
 8004e1a:	2500      	movs	r5, #0
 8004e1c:	f104 0619 	add.w	r6, r4, #25
 8004e20:	e7f5      	b.n	8004e0e <_printf_i+0x22e>
 8004e22:	bf00      	nop
 8004e24:	08004fc2 	.word	0x08004fc2
 8004e28:	08004fd3 	.word	0x08004fd3

08004e2c <__retarget_lock_acquire_recursive>:
 8004e2c:	4770      	bx	lr

08004e2e <__retarget_lock_release_recursive>:
 8004e2e:	4770      	bx	lr

08004e30 <_realloc_r>:
 8004e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e32:	4607      	mov	r7, r0
 8004e34:	4614      	mov	r4, r2
 8004e36:	460e      	mov	r6, r1
 8004e38:	b921      	cbnz	r1, 8004e44 <_realloc_r+0x14>
 8004e3a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004e3e:	4611      	mov	r1, r2
 8004e40:	f7ff bc10 	b.w	8004664 <_malloc_r>
 8004e44:	b922      	cbnz	r2, 8004e50 <_realloc_r+0x20>
 8004e46:	f7ff fbbd 	bl	80045c4 <_free_r>
 8004e4a:	4625      	mov	r5, r4
 8004e4c:	4628      	mov	r0, r5
 8004e4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e50:	f000 f814 	bl	8004e7c <_malloc_usable_size_r>
 8004e54:	42a0      	cmp	r0, r4
 8004e56:	d20f      	bcs.n	8004e78 <_realloc_r+0x48>
 8004e58:	4621      	mov	r1, r4
 8004e5a:	4638      	mov	r0, r7
 8004e5c:	f7ff fc02 	bl	8004664 <_malloc_r>
 8004e60:	4605      	mov	r5, r0
 8004e62:	2800      	cmp	r0, #0
 8004e64:	d0f2      	beq.n	8004e4c <_realloc_r+0x1c>
 8004e66:	4631      	mov	r1, r6
 8004e68:	4622      	mov	r2, r4
 8004e6a:	f7ff fb7b 	bl	8004564 <memcpy>
 8004e6e:	4631      	mov	r1, r6
 8004e70:	4638      	mov	r0, r7
 8004e72:	f7ff fba7 	bl	80045c4 <_free_r>
 8004e76:	e7e9      	b.n	8004e4c <_realloc_r+0x1c>
 8004e78:	4635      	mov	r5, r6
 8004e7a:	e7e7      	b.n	8004e4c <_realloc_r+0x1c>

08004e7c <_malloc_usable_size_r>:
 8004e7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e80:	1f18      	subs	r0, r3, #4
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	bfbc      	itt	lt
 8004e86:	580b      	ldrlt	r3, [r1, r0]
 8004e88:	18c0      	addlt	r0, r0, r3
 8004e8a:	4770      	bx	lr

08004e8c <_init>:
 8004e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e8e:	bf00      	nop
 8004e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e92:	bc08      	pop	{r3}
 8004e94:	469e      	mov	lr, r3
 8004e96:	4770      	bx	lr

08004e98 <_fini>:
 8004e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e9a:	bf00      	nop
 8004e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e9e:	bc08      	pop	{r3}
 8004ea0:	469e      	mov	lr, r3
 8004ea2:	4770      	bx	lr
