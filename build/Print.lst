ARM GAS  C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s 			page 1


   1              		.cpu arm7tdmi
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"Print.cpp"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text._ZN5Print17availableForWriteEv,"axG",%progbits,_ZN5Print17availableForWriteEv,comda
  16              		.align	1
  17              		.weak	_ZN5Print17availableForWriteEv
  18              		.arch armv4t
  19              		.syntax unified
  20              		.code	16
  21              		.thumb_func
  22              		.fpu softvfp
  24              	_ZN5Print17availableForWriteEv:
  25              		.fnstart
  26              	.LVL0:
  27              	.LFB1249:
  28              		.file 1 "Core/Inc/Print.h"
   1:Core/Inc/Print.h **** /*
   2:Core/Inc/Print.h ****   Print.h - Base class that provides print() and println()
   3:Core/Inc/Print.h ****   Copyright (c) 2008 David A. Mellis.  All right reserved.
   4:Core/Inc/Print.h **** 
   5:Core/Inc/Print.h ****   This library is free software; you can redistribute it and/or
   6:Core/Inc/Print.h ****   modify it under the terms of the GNU Lesser General Public
   7:Core/Inc/Print.h ****   License as published by the Free Software Foundation; either
   8:Core/Inc/Print.h ****   version 2.1 of the License, or (at your option) any later version.
   9:Core/Inc/Print.h **** 
  10:Core/Inc/Print.h ****   This library is distributed in the hope that it will be useful,
  11:Core/Inc/Print.h ****   but WITHOUT ANY WARRANTY; without even the implied warranty of
  12:Core/Inc/Print.h ****   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  13:Core/Inc/Print.h ****   Lesser General Public License for more details.
  14:Core/Inc/Print.h **** 
  15:Core/Inc/Print.h ****   You should have received a copy of the GNU Lesser General Public
  16:Core/Inc/Print.h ****   License along with this library; if not, write to the Free Software
  17:Core/Inc/Print.h ****   Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
  18:Core/Inc/Print.h **** */
  19:Core/Inc/Print.h **** 
  20:Core/Inc/Print.h **** #ifndef Print_h
  21:Core/Inc/Print.h **** #define Print_h
  22:Core/Inc/Print.h **** 
  23:Core/Inc/Print.h **** #include <cinttypes>
  24:Core/Inc/Print.h **** #include <cstdio> // for size_t
  25:Core/Inc/Print.h **** #include <cstring>
  26:Core/Inc/Print.h **** #include <string>
  27:Core/Inc/Print.h **** //#include "WString"
  28:Core/Inc/Print.h **** 
  29:Core/Inc/Print.h **** using std::string;
  30:Core/Inc/Print.h **** typedef string String;
ARM GAS  C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s 			page 2


  31:Core/Inc/Print.h **** 
  32:Core/Inc/Print.h **** 
  33:Core/Inc/Print.h **** #define DEC 10
  34:Core/Inc/Print.h **** #define HEX 16
  35:Core/Inc/Print.h **** #define OCT 8
  36:Core/Inc/Print.h **** #ifdef BIN // Prevent warnings if BIN is previously defined in "iotnx4.h" or similar
  37:Core/Inc/Print.h **** #undef BIN
  38:Core/Inc/Print.h **** #endif
  39:Core/Inc/Print.h **** #define BIN 2
  40:Core/Inc/Print.h **** 
  41:Core/Inc/Print.h **** class Print
  42:Core/Inc/Print.h **** {
  43:Core/Inc/Print.h ****   private:
  44:Core/Inc/Print.h ****     int write_error;
  45:Core/Inc/Print.h ****     size_t printNumber(unsigned long, uint8_t);
  46:Core/Inc/Print.h ****     size_t printFloat(double, uint8_t);
  47:Core/Inc/Print.h ****   protected:
  48:Core/Inc/Print.h ****     void setWriteError(int err = 1) { write_error = err; }
  49:Core/Inc/Print.h ****   public:
  50:Core/Inc/Print.h ****     Print() : write_error(0) {}
  51:Core/Inc/Print.h ****   
  52:Core/Inc/Print.h ****     int getWriteError() { return write_error; }
  53:Core/Inc/Print.h ****     void clearWriteError() { setWriteError(0); }
  54:Core/Inc/Print.h ****     virtual size_t write(uint8_t) = 0;
  55:Core/Inc/Print.h **** 
  56:Core/Inc/Print.h ****     size_t write(const char *str) {
  57:Core/Inc/Print.h ****       if (str == NULL) return 0;
  58:Core/Inc/Print.h ****       return write((const uint8_t *)str, strlen(str));
  59:Core/Inc/Print.h ****     }
  60:Core/Inc/Print.h ****     virtual size_t write(const uint8_t *buffer, size_t size);
  61:Core/Inc/Print.h ****     size_t write(const char *buffer, size_t size) {
  62:Core/Inc/Print.h ****       return write((const uint8_t *)buffer, size);
  63:Core/Inc/Print.h ****     }
  64:Core/Inc/Print.h **** 
  65:Core/Inc/Print.h ****     // default to zero, meaning "a single write may block"
  66:Core/Inc/Print.h ****     // should be overriden by subclasses with buffering
  67:Core/Inc/Print.h ****     virtual int availableForWrite() { return 0; }
  29              		.loc 1 67 17 view -0
  30              		.cfi_startproc
  31              		@ Function supports interworking.
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
  35              		.loc 1 67 39 view .LVU1
  36              		.loc 1 67 49 is_stmt 0 view .LVU2
  37 0000 0020     		movs	r0, #0
  38              	.LVL1:
  39              		.loc 1 67 49 view .LVU3
  40              		@ sp needed
  41 0002 7047     		bx	lr
  42              		.cfi_endproc
  43              	.LFE1249:
  44              		.cantunwind
  45              		.fnend
  47              		.section	.text._ZN5Print5flushEv,"axG",%progbits,_ZN5Print5flushEv,comdat
  48              		.align	1
  49              		.weak	_ZN5Print5flushEv
ARM GAS  C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s 			page 3


  50              		.syntax unified
  51              		.code	16
  52              		.thumb_func
  53              		.fpu softvfp
  55              	_ZN5Print5flushEv:
  56              		.fnstart
  57              	.LVL2:
  58              	.LFB1250:
  68:Core/Inc/Print.h **** 
  69:Core/Inc/Print.h ****     size_t print(const String &);
  70:Core/Inc/Print.h ****     size_t print(const char[]);
  71:Core/Inc/Print.h ****     size_t print(char);
  72:Core/Inc/Print.h ****     size_t print(unsigned char, int = DEC);
  73:Core/Inc/Print.h ****     size_t print(int, int = DEC);
  74:Core/Inc/Print.h ****     size_t print(unsigned int, int = DEC);
  75:Core/Inc/Print.h ****     size_t print(long, int = DEC);
  76:Core/Inc/Print.h ****     size_t print(unsigned long, int = DEC);
  77:Core/Inc/Print.h ****     size_t print(double, int = 2);
  78:Core/Inc/Print.h **** 
  79:Core/Inc/Print.h **** 
  80:Core/Inc/Print.h **** 
  81:Core/Inc/Print.h ****     size_t println(const String &s);
  82:Core/Inc/Print.h ****     size_t println(const char[]);
  83:Core/Inc/Print.h ****     size_t println(char);
  84:Core/Inc/Print.h ****     size_t println(unsigned char, int = DEC);
  85:Core/Inc/Print.h ****     size_t println(int, int = DEC);
  86:Core/Inc/Print.h ****     size_t println(unsigned int, int = DEC);
  87:Core/Inc/Print.h ****     size_t println(long, int = DEC);
  88:Core/Inc/Print.h ****     size_t println(unsigned long, int = DEC);
  89:Core/Inc/Print.h ****     size_t println(double, int = 2);
  90:Core/Inc/Print.h ****     size_t println(void);
  91:Core/Inc/Print.h **** 
  92:Core/Inc/Print.h ****     virtual void flush() { /* Empty implementation for backward compatibility */ }
  59              		.loc 1 92 18 is_stmt 1 view -0
  60              		.cfi_startproc
  61              		@ Function supports interworking.
  62              		@ args = 0, pretend = 0, frame = 0
  63              		@ frame_needed = 0, uses_anonymous_args = 0
  64              		@ link register save eliminated.
  65              		.loc 1 92 82 is_stmt 0 view .LVU5
  66              		@ sp needed
  67 0000 7047     		bx	lr
  68              		.cfi_endproc
  69              	.LFE1250:
  70              		.cantunwind
  71              		.fnend
  73              		.section	.text._ZN5Print5writeEPKhj,"ax",%progbits
  74              		.align	1
  75              		.global	_ZN5Print5writeEPKhj
  76              		.syntax unified
  77              		.code	16
  78              		.thumb_func
  79              		.fpu softvfp
  81              	_ZN5Print5writeEPKhj:
  82              		.fnstart
  83              	.LVL3:
  84              	.LFB1251:
ARM GAS  C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s 			page 4


  85              		.file 2 "Core/Src/Print.cpp"
   1:Core/Src/Print.cpp **** /*
   2:Core/Src/Print.cpp ****  Print.cpp - Base class that provides print() and println()
   3:Core/Src/Print.cpp ****  Copyright (c) 2008 David A. Mellis.  All right reserved.
   4:Core/Src/Print.cpp ****  
   5:Core/Src/Print.cpp ****  This library is free software; you can redistribute it and/or
   6:Core/Src/Print.cpp ****  modify it under the terms of the GNU Lesser General Public
   7:Core/Src/Print.cpp ****  License as published by the Free Software Foundation; either
   8:Core/Src/Print.cpp ****  version 2.1 of the License, or (at your option) any later version.
   9:Core/Src/Print.cpp ****  
  10:Core/Src/Print.cpp ****  This library is distributed in the hope that it will be useful,
  11:Core/Src/Print.cpp ****  but WITHOUT ANY WARRANTY; without even the implied warranty of
  12:Core/Src/Print.cpp ****  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  13:Core/Src/Print.cpp ****  Lesser General Public License for more details.
  14:Core/Src/Print.cpp ****  
  15:Core/Src/Print.cpp ****  You should have received a copy of the GNU Lesser General Public
  16:Core/Src/Print.cpp ****  License along with this library; if not, write to the Free Software
  17:Core/Src/Print.cpp ****  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
  18:Core/Src/Print.cpp ****  
  19:Core/Src/Print.cpp ****  Modified 23 November 2006 by David A. Mellis
  20:Core/Src/Print.cpp ****  Modified 03 August 2015 by Chuck Todd
  21:Core/Src/Print.cpp ****  */
  22:Core/Src/Print.cpp **** 
  23:Core/Src/Print.cpp **** #include <stdlib.h>
  24:Core/Src/Print.cpp **** #include <stdio.h>
  25:Core/Src/Print.cpp **** #include <string>
  26:Core/Src/Print.cpp **** #include <math.h>
  27:Core/Src/Print.cpp **** 
  28:Core/Src/Print.cpp **** //#include "Arduino.h"
  29:Core/Src/Print.cpp **** 
  30:Core/Src/Print.cpp **** 
  31:Core/Src/Print.cpp **** #include "Print.h"
  32:Core/Src/Print.cpp **** 
  33:Core/Src/Print.cpp **** // Public Methods //////////////////////////////////////////////////////////////
  34:Core/Src/Print.cpp **** 
  35:Core/Src/Print.cpp **** /* default implementation: may be overridden */
  36:Core/Src/Print.cpp **** size_t Print::write(const uint8_t *buffer, size_t size)
  37:Core/Src/Print.cpp **** {
  86              		.loc 2 37 1 is_stmt 1 view -0
  87              		.cfi_startproc
  88              		@ Function supports interworking.
  89              		@ args = 0, pretend = 0, frame = 0
  90              		@ frame_needed = 0, uses_anonymous_args = 0
  91              		.loc 2 37 1 is_stmt 0 view .LVU7
  92 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
  93              		.save {r3, r4, r5, r6, r7, lr}
  94              	.LCFI0:
  95              		.cfi_def_cfa_offset 24
  96              		.cfi_offset 3, -24
  97              		.cfi_offset 4, -20
  98              		.cfi_offset 5, -16
  99              		.cfi_offset 6, -12
 100              		.cfi_offset 7, -8
 101              		.cfi_offset 14, -4
 102 0002 0400     		movs	r4, r0
  38:Core/Src/Print.cpp ****   size_t n = 0;
 103              		.loc 2 38 3 is_stmt 1 view .LVU8
ARM GAS  C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s 			page 5


 104              	.LVL4:
 105              		.loc 2 38 10 is_stmt 0 view .LVU9
 106 0004 0025     		movs	r5, #0
 107 0006 02E0     		b	.L5
 108              	.LVL5:
 109              	.L6:
  39:Core/Src/Print.cpp ****   while (size--) {
  40:Core/Src/Print.cpp ****     if (write(*buffer++)) n++;
 110              		.loc 2 40 27 is_stmt 1 discriminator 1 view .LVU10
 111              		.loc 2 40 28 is_stmt 0 discriminator 1 view .LVU11
 112 0008 0135     		adds	r5, r5, #1
 113              	.LVL6:
  39:Core/Src/Print.cpp ****   while (size--) {
 114              		.loc 2 39 14 discriminator 1 view .LVU12
 115 000a 3200     		movs	r2, r6
 116              		.loc 2 40 22 discriminator 1 view .LVU13
 117 000c 3900     		movs	r1, r7
 118              	.LVL7:
 119              	.L5:
  39:Core/Src/Print.cpp ****   while (size--) {
 120              		.loc 2 39 3 is_stmt 1 view .LVU14
  39:Core/Src/Print.cpp ****   while (size--) {
 121              		.loc 2 39 14 view .LVU15
 122 000e 561E     		subs	r6, r2, #1
 123              	.LVL8:
  39:Core/Src/Print.cpp ****   while (size--) {
 124              		.loc 2 39 14 is_stmt 0 view .LVU16
 125 0010 002A     		cmp	r2, #0
 126 0012 08D0     		beq	.L3
 127              		.loc 2 40 5 is_stmt 1 view .LVU17
 128              		.loc 2 40 24 is_stmt 0 view .LVU18
 129 0014 2368     		ldr	r3, [r4]
 130 0016 1B68     		ldr	r3, [r3]
 131              		.loc 2 40 22 view .LVU19
 132 0018 4F1C     		adds	r7, r1, #1
 133              	.LVL9:
 134              		.loc 2 40 14 view .LVU20
 135 001a 0978     		ldrb	r1, [r1]
 136 001c 2000     		movs	r0, r4
 137 001e 00F006F8 		bl	.L7
 138              	.LVL10:
 139              		.loc 2 40 5 view .LVU21
 140 0022 0028     		cmp	r0, #0
 141 0024 F0D1     		bne	.L6
 142              	.LVL11:
 143              	.L3:
  41:Core/Src/Print.cpp ****     else break;
  42:Core/Src/Print.cpp ****   }
  43:Core/Src/Print.cpp ****   return n;
  44:Core/Src/Print.cpp **** }
 144              		.loc 2 44 1 view .LVU22
 145 0026 2800     		movs	r0, r5
 146              		@ sp needed
 147              	.LVL12:
 148              	.LVL13:
 149              	.LVL14:
 150              		.loc 2 44 1 view .LVU23
ARM GAS  C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s 			page 6


 151 0028 F8BC     		pop	{r3, r4, r5, r6, r7}
 152 002a 02BC     		pop	{r1}
 153 002c 0847     		bx	r1
 154              	.L7:
 155 002e 1847     		bx	r3
 156              		.cfi_endproc
 157              	.LFE1251:
 158              		.fnend
 160              		.section	.text._ZN5Print5printERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE,"ax",%progbi
 161              		.align	1
 162              		.global	_ZN5Print5printERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
 163              		.syntax unified
 164              		.code	16
 165              		.thumb_func
 166              		.fpu softvfp
 168              	_ZN5Print5printERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE:
 169              		.fnstart
 170              	.LVL15:
 171              	.LFB1252:
  45:Core/Src/Print.cpp **** 
  46:Core/Src/Print.cpp **** size_t Print::print(const String &s)
  47:Core/Src/Print.cpp **** {
 172              		.loc 2 47 1 is_stmt 1 view -0
 173              		.cfi_startproc
 174              		@ Function supports interworking.
 175              		@ args = 0, pretend = 0, frame = 0
 176              		@ frame_needed = 0, uses_anonymous_args = 0
 177              		.loc 2 47 1 is_stmt 0 view .LVU25
 178 0000 10B5     		push	{r4, lr}
 179              		.save {r4, lr}
 180              	.LCFI1:
 181              		.cfi_def_cfa_offset 8
 182              		.cfi_offset 4, -8
 183              		.cfi_offset 14, -4
 184 0002 0B00     		movs	r3, r1
  48:Core/Src/Print.cpp ****   return write(s.c_str(), s.length());
 185              		.loc 2 48 3 is_stmt 1 view .LVU26
 186              	.LVL16:
 187              	.LBB18:
 188              	.LBI18:
 189              		.file 3 "c:\\gcc-arm-none-eabi-10-2020-q4-major-win32\\gcc-arm-none-eabi-10-2020-q4-major\\arm-non
   1:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** // Components for manipulating sequences of characters -*- C++ -*-
   2:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
   3:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** // Copyright (C) 1997-2020 Free Software Foundation, Inc.
   4:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** //
   5:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** // software; you can redistribute it and/or modify it under the
   7:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** // terms of the GNU General Public License as published by the
   8:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** // Free Software Foundation; either version 3, or (at your option)
   9:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** // any later version.
  10:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
  11:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** // This library is distributed in the hope that it will be useful,
  12:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** // GNU General Public License for more details.
  15:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
  16:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** // Under Section 7 of GPL version 3, you are granted additional
ARM GAS  C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s 			page 7


  17:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** // permissions described in the GCC Runtime Library Exception, version
  18:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** // 3.1, as published by the Free Software Foundation.
  19:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
  20:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** // You should have received a copy of the GNU General Public License and
  21:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** // <http://www.gnu.org/licenses/>.
  24:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
  25:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** /** @file bits/basic_string.h
  26:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****  *  This is an internal header file, included by other library headers.
  27:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****  *  Do not attempt to use it directly. @headername{string}
  28:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****  */
  29:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
  30:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** //
  31:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** // ISO C++ 14882: 21 Strings library
  32:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** //
  33:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
  34:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** #ifndef _BASIC_STRING_H
  35:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** #define _BASIC_STRING_H 1
  36:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
  37:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** #pragma GCC system_header
  38:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
  39:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** #include <ext/atomicity.h>
  40:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** #include <ext/alloc_traits.h>
  41:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** #include <debug/debug.h>
  42:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
  43:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** #if __cplusplus >= 201103L
  44:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** #include <initializer_list>
  45:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** #endif
  46:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
  47:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** #if __cplusplus >= 201703L
  48:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** # include <string_view>
  49:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** #endif
  50:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
  51:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
  52:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** namespace std _GLIBCXX_VISIBILITY(default)
  53:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** {
  54:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  55:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
  56:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** #if _GLIBCXX_USE_CXX11_ABI
  57:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** _GLIBCXX_BEGIN_NAMESPACE_CXX11
  58:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****   /**
  59:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****    *  @class basic_string basic_string.h <string>
  60:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****    *  @brief  Managing sequences of characters and character-like objects.
  61:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****    *
  62:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****    *  @ingroup strings
  63:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****    *  @ingroup sequences
  64:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****    *
  65:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****    *  @tparam _CharT  Type of character
  66:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****    *  @tparam _Traits  Traits for character type, defaults to
  67:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****    *                   char_traits<_CharT>.
  68:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****    *  @tparam _Alloc  Allocator type, defaults to allocator<_CharT>.
  69:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****    *
  70:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****    *  Meets the requirements of a <a href="tables.html#65">container</a>, a
  71:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****    *  <a href="tables.html#66">reversible container</a>, and a
  72:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****    *  <a href="tables.html#67">sequence</a>.  Of the
  73:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****    *  <a href="tables.html#68">optional sequence requirements</a>, only
ARM GAS  C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s 			page 8


  74:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****    *  @c push_back, @c at, and @c %array access are supported.
  75:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****    */
  76:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
  77:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****     class basic_string
  78:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****     {
  79:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
  80:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	rebind<_CharT>::other _Char_alloc_type;
  81:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       typedef __gnu_cxx::__alloc_traits<_Char_alloc_type> _Alloc_traits;
  82:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
  83:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       // Types:
  84:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****     public:
  85:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       typedef _Traits					traits_type;
  86:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       typedef typename _Traits::char_type		value_type;
  87:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       typedef _Char_alloc_type				allocator_type;
  88:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       typedef typename _Alloc_traits::size_type		size_type;
  89:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       typedef typename _Alloc_traits::difference_type	difference_type;
  90:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       typedef typename _Alloc_traits::reference		reference;
  91:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       typedef typename _Alloc_traits::const_reference	const_reference;
  92:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       typedef typename _Alloc_traits::pointer		pointer;
  93:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       typedef typename _Alloc_traits::const_pointer	const_pointer;
  94:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       typedef __gnu_cxx::__normal_iterator<pointer, basic_string>  iterator;
  95:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       typedef __gnu_cxx::__normal_iterator<const_pointer, basic_string>
  96:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 							const_iterator;
  97:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       typedef std::reverse_iterator<const_iterator>	const_reverse_iterator;
  98:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       typedef std::reverse_iterator<iterator>		reverse_iterator;
  99:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
 100:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       ///  Value returned by various member functions when they fail.
 101:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       static const size_type	npos = static_cast<size_type>(-1);
 102:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
 103:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****     protected:
 104:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       // type used for positions in insert, erase etc.
 105:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** #if __cplusplus < 201103L
 106:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       typedef iterator __const_iterator;
 107:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** #else
 108:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       typedef const_iterator __const_iterator;
 109:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** #endif
 110:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
 111:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****     private:
 112:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** #if __cplusplus >= 201703L
 113:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       // A helper type for avoiding boiler-plate.
 114:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       typedef basic_string_view<_CharT, _Traits> __sv_type;
 115:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
 116:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       template<typename _Tp, typename _Res>
 117:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	using _If_sv = enable_if_t<
 118:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	  __and_<is_convertible<const _Tp&, __sv_type>,
 119:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 		 __not_<is_convertible<const _Tp*, const basic_string*>>,
 120:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 		 __not_<is_convertible<const _Tp&, const _CharT*>>>::value,
 121:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	  _Res>;
 122:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
 123:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       // Allows an implicit conversion to __sv_type.
 124:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       static __sv_type
 125:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       _S_to_string_view(__sv_type __svt) noexcept
 126:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       { return __svt; }
 127:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
 128:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       // Wraps a string_view by explicit conversion and thus
 129:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       // allows to add an internal constructor that does not
 130:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       // participate in overload resolution when a string_view
ARM GAS  C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s 			page 9


 131:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       // is provided.
 132:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       struct __sv_wrapper
 133:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       {
 134:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	explicit __sv_wrapper(__sv_type __sv) noexcept : _M_sv(__sv) { }
 135:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	__sv_type _M_sv;
 136:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       };
 137:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
 138:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       /**
 139:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @brief  Only internally used: Construct string from a string view
 140:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *          wrapper.
 141:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param  __svw  string view wrapper.
 142:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param  __a  Allocator to use.
 143:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        */
 144:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       explicit
 145:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       basic_string(__sv_wrapper __svw, const _Alloc& __a)
 146:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       : basic_string(__svw._M_sv.data(), __svw._M_sv.size(), __a) { }
 147:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** #endif
 148:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
 149:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       // Use empty-base optimization: http://www.cantrip.org/emptyopt.html
 150:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       struct _Alloc_hider : allocator_type // TODO check __is_final
 151:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       {
 152:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** #if __cplusplus < 201103L
 153:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	_Alloc_hider(pointer __dat, const _Alloc& __a = _Alloc())
 154:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	: allocator_type(__a), _M_p(__dat) { }
 155:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** #else
 156:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	_Alloc_hider(pointer __dat, const _Alloc& __a)
 157:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	: allocator_type(__a), _M_p(__dat) { }
 158:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
 159:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	_Alloc_hider(pointer __dat, _Alloc&& __a = _Alloc())
 160:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	: allocator_type(std::move(__a)), _M_p(__dat) { }
 161:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** #endif
 162:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
 163:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	pointer _M_p; // The actual data.
 164:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       };
 165:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
 166:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       _Alloc_hider	_M_dataplus;
 167:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       size_type		_M_string_length;
 168:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
 169:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       enum { _S_local_capacity = 15 / sizeof(_CharT) };
 170:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
 171:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       union
 172:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       {
 173:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	_CharT           _M_local_buf[_S_local_capacity + 1];
 174:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	size_type        _M_allocated_capacity;
 175:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       };
 176:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
 177:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       void
 178:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       _M_data(pointer __p)
 179:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       { _M_dataplus._M_p = __p; }
 180:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
 181:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       void
 182:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       _M_length(size_type __length)
 183:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       { _M_string_length = __length; }
 184:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
 185:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       pointer
 186:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       _M_data() const
 187:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       { return _M_dataplus._M_p; }
ARM GAS  C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s 			page 10


 188:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
 189:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       pointer
 190:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       _M_local_data()
 191:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       {
 192:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** #if __cplusplus >= 201103L
 193:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
 194:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** #else
 195:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	return pointer(_M_local_buf);
 196:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** #endif
 197:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       }
 198:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
 199:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       const_pointer
 200:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       _M_local_data() const
 201:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       {
 202:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** #if __cplusplus >= 201103L
 203:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
 204:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** #else
 205:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	return const_pointer(_M_local_buf);
 206:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** #endif
 207:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       }
 208:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
 209:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       void
 210:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       _M_capacity(size_type __capacity)
 211:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       { _M_allocated_capacity = __capacity; }
 212:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
 213:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       void
 214:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       _M_set_length(size_type __n)
 215:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       {
 216:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	_M_length(__n);
 217:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	traits_type::assign(_M_data()[__n], _CharT());
 218:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       }
 219:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
 220:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       bool
 221:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       _M_is_local() const
 222:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       { return _M_data() == _M_local_data(); }
 223:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
 224:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       // Create & Destroy
 225:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       pointer
 226:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       _M_create(size_type&, size_type);
 227:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
 228:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       void
 229:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       _M_dispose()
 230:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       {
 231:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	if (!_M_is_local())
 232:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 233:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       }
 234:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
 235:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       void
 236:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       _M_destroy(size_type __size) throw()
 237:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 238:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
 239:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       // _M_construct_aux is used to implement the 21.3.1 para 15 which
 240:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       // requires special behaviour if _InIterator is an integral type
 241:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       template<typename _InIterator>
 242:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****         void
 243:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****         _M_construct_aux(_InIterator __beg, _InIterator __end,
 244:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 			 std::__false_type)
ARM GAS  C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s 			page 11


 245:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	{
 246:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****           typedef typename iterator_traits<_InIterator>::iterator_category _Tag;
 247:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****           _M_construct(__beg, __end, _Tag());
 248:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	}
 249:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
 250:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 251:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       // 438. Ambiguity in the "do the right thing" clause
 252:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       template<typename _Integer>
 253:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****         void
 254:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****         _M_construct_aux(_Integer __beg, _Integer __end, std::__true_type)
 255:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	{ _M_construct_aux_2(static_cast<size_type>(__beg), __end); }
 256:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
 257:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       void
 258:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       _M_construct_aux_2(size_type __req, _CharT __c)
 259:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       { _M_construct(__req, __c); }
 260:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
 261:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       template<typename _InIterator>
 262:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****         void
 263:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****         _M_construct(_InIterator __beg, _InIterator __end)
 264:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	{
 265:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	  typedef typename std::__is_integer<_InIterator>::__type _Integral;
 266:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	  _M_construct_aux(__beg, __end, _Integral());
 267:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****         }
 268:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
 269:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       // For Input Iterators, used in istreambuf_iterators, etc.
 270:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       template<typename _InIterator>
 271:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****         void
 272:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****         _M_construct(_InIterator __beg, _InIterator __end,
 273:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 		     std::input_iterator_tag);
 274:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
 275:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       // For forward_iterators up to random_access_iterators, used for
 276:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       // string::iterator, _CharT*, etc.
 277:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       template<typename _FwdIterator>
 278:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****         void
 279:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****         _M_construct(_FwdIterator __beg, _FwdIterator __end,
 280:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 		     std::forward_iterator_tag);
 281:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
 282:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       void
 283:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       _M_construct(size_type __req, _CharT __c);
 284:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
 285:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       allocator_type&
 286:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       _M_get_allocator()
 287:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       { return _M_dataplus; }
 288:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
 289:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       const allocator_type&
 290:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       _M_get_allocator() const
 291:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       { return _M_dataplus; }
 292:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
 293:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****     private:
 294:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
 295:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** #ifdef _GLIBCXX_DISAMBIGUATE_REPLACE_INST
 296:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       // The explicit instantiations in misc-inst.cc require this due to
 297:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       // https://gcc.gnu.org/bugzilla/show_bug.cgi?id=64063
 298:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       template<typename _Tp, bool _Requires =
 299:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	       !__are_same<_Tp, _CharT*>::__value
 300:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	       && !__are_same<_Tp, const _CharT*>::__value
 301:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	       && !__are_same<_Tp, iterator>::__value
ARM GAS  C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s 			page 12


 302:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	       && !__are_same<_Tp, const_iterator>::__value>
 303:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	struct __enable_if_not_native_iterator
 304:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	{ typedef basic_string& __type; };
 305:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       template<typename _Tp>
 306:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	struct __enable_if_not_native_iterator<_Tp, false> { };
 307:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** #endif
 308:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
 309:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       size_type
 310:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       _M_check(size_type __pos, const char* __s) const
 311:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       {
 312:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	if (__pos > this->size())
 313:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	  __throw_out_of_range_fmt(__N("%s: __pos (which is %zu) > "
 314:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 				       "this->size() (which is %zu)"),
 315:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 				   __s, __pos, this->size());
 316:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	return __pos;
 317:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       }
 318:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
 319:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       void
 320:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       _M_check_length(size_type __n1, size_type __n2, const char* __s) const
 321:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       {
 322:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	if (this->max_size() - (this->size() - __n1) < __n2)
 323:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	  __throw_length_error(__N(__s));
 324:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       }
 325:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
 326:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
 327:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       // NB: _M_limit doesn't check for a bad __pos value.
 328:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       size_type
 329:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       _M_limit(size_type __pos, size_type __off) const _GLIBCXX_NOEXCEPT
 330:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       {
 331:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	const bool __testoff =  __off < this->size() - __pos;
 332:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	return __testoff ? __off : this->size() - __pos;
 333:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       }
 334:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
 335:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       // True if _Rep and source do not overlap.
 336:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       bool
 337:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       _M_disjunct(const _CharT* __s) const _GLIBCXX_NOEXCEPT
 338:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       {
 339:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	return (less<const _CharT*>()(__s, _M_data())
 340:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 		|| less<const _CharT*>()(_M_data() + this->size(), __s));
 341:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       }
 342:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
 343:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       // When __n = 1 way faster than the general multichar
 344:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       // traits_type::copy/move/assign.
 345:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       static void
 346:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       _S_copy(_CharT* __d, const _CharT* __s, size_type __n)
 347:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       {
 348:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	if (__n == 1)
 349:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	  traits_type::assign(*__d, *__s);
 350:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	else
 351:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	  traits_type::copy(__d, __s, __n);
 352:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       }
 353:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
 354:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       static void
 355:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       _S_move(_CharT* __d, const _CharT* __s, size_type __n)
 356:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       {
 357:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	if (__n == 1)
 358:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	  traits_type::assign(*__d, *__s);
ARM GAS  C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s 			page 13


 359:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	else
 360:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	  traits_type::move(__d, __s, __n);
 361:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       }
 362:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
 363:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       static void
 364:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       _S_assign(_CharT* __d, size_type __n, _CharT __c)
 365:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       {
 366:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	if (__n == 1)
 367:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	  traits_type::assign(*__d, __c);
 368:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	else
 369:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	  traits_type::assign(__d, __n, __c);
 370:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       }
 371:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
 372:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       // _S_copy_chars is a separate template to permit specialization
 373:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       // to optimize for the common case of pointers as iterators.
 374:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       template<class _Iterator>
 375:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****         static void
 376:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****         _S_copy_chars(_CharT* __p, _Iterator __k1, _Iterator __k2)
 377:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****         {
 378:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	  for (; __k1 != __k2; ++__k1, (void)++__p)
 379:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	    traits_type::assign(*__p, *__k1); // These types are off.
 380:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	}
 381:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
 382:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       static void
 383:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       _S_copy_chars(_CharT* __p, iterator __k1, iterator __k2) _GLIBCXX_NOEXCEPT
 384:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       { _S_copy_chars(__p, __k1.base(), __k2.base()); }
 385:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
 386:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       static void
 387:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       _S_copy_chars(_CharT* __p, const_iterator __k1, const_iterator __k2)
 388:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       _GLIBCXX_NOEXCEPT
 389:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       { _S_copy_chars(__p, __k1.base(), __k2.base()); }
 390:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
 391:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       static void
 392:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       _S_copy_chars(_CharT* __p, _CharT* __k1, _CharT* __k2) _GLIBCXX_NOEXCEPT
 393:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       { _S_copy(__p, __k1, __k2 - __k1); }
 394:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
 395:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       static void
 396:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       _S_copy_chars(_CharT* __p, const _CharT* __k1, const _CharT* __k2)
 397:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       _GLIBCXX_NOEXCEPT
 398:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       { _S_copy(__p, __k1, __k2 - __k1); }
 399:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
 400:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       static int
 401:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       _S_compare(size_type __n1, size_type __n2) _GLIBCXX_NOEXCEPT
 402:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       {
 403:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	const difference_type __d = difference_type(__n1 - __n2);
 404:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
 405:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	if (__d > __gnu_cxx::__numeric_traits<int>::__max)
 406:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	  return __gnu_cxx::__numeric_traits<int>::__max;
 407:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	else if (__d < __gnu_cxx::__numeric_traits<int>::__min)
 408:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	  return __gnu_cxx::__numeric_traits<int>::__min;
 409:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	else
 410:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	  return int(__d);
 411:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       }
 412:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
 413:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       void
 414:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       _M_assign(const basic_string&);
 415:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
ARM GAS  C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s 			page 14


 416:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       void
 417:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       _M_mutate(size_type __pos, size_type __len1, const _CharT* __s,
 418:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 		size_type __len2);
 419:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
 420:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       void
 421:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       _M_erase(size_type __pos, size_type __n);
 422:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
 423:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****     public:
 424:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       // Construct/copy/destroy:
 425:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       // NB: We overload ctors in some cases instead of using default
 426:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       // arguments, per 17.4.4.4 para. 2 item 2.
 427:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
 428:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       /**
 429:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @brief  Default constructor creates an empty string.
 430:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        */
 431:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       basic_string()
 432:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       _GLIBCXX_NOEXCEPT_IF(is_nothrow_default_constructible<_Alloc>::value)
 433:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       : _M_dataplus(_M_local_data())
 434:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       { _M_set_length(0); }
 435:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
 436:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       /**
 437:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @brief  Construct an empty string using allocator @a a.
 438:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        */
 439:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       explicit
 440:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       basic_string(const _Alloc& __a) _GLIBCXX_NOEXCEPT
 441:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 442:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       { _M_set_length(0); }
 443:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
 444:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       /**
 445:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @brief  Construct string with copy of value of @a __str.
 446:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param  __str  Source string.
 447:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        */
 448:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       basic_string(const basic_string& __str)
 449:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       : _M_dataplus(_M_local_data(),
 450:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 		    _Alloc_traits::_S_select_on_copy(__str._M_get_allocator()))
 451:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
 452:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
 453:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 454:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       // 2583. no way to supply an allocator for basic_string(str, pos)
 455:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       /**
 456:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @brief  Construct string as copy of a substring.
 457:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param  __str  Source string.
 458:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param  __pos  Index of first character to copy from.
 459:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param  __a  Allocator to use.
 460:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        */
 461:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       basic_string(const basic_string& __str, size_type __pos,
 462:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 		   const _Alloc& __a = _Alloc())
 463:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 464:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       {
 465:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	const _CharT* __start = __str._M_data()
 466:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	  + __str._M_check(__pos, "basic_string::basic_string");
 467:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	_M_construct(__start, __start + __str._M_limit(__pos, npos));
 468:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       }
 469:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
 470:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       /**
 471:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @brief  Construct string as copy of a substring.
 472:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param  __str  Source string.
ARM GAS  C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s 			page 15


 473:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param  __pos  Index of first character to copy from.
 474:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param  __n  Number of characters to copy.
 475:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        */
 476:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       basic_string(const basic_string& __str, size_type __pos,
 477:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 		   size_type __n)
 478:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       : _M_dataplus(_M_local_data())
 479:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       {
 480:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	const _CharT* __start = __str._M_data()
 481:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	  + __str._M_check(__pos, "basic_string::basic_string");
 482:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	_M_construct(__start, __start + __str._M_limit(__pos, __n));
 483:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       }
 484:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
 485:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       /**
 486:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @brief  Construct string as copy of a substring.
 487:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param  __str  Source string.
 488:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param  __pos  Index of first character to copy from.
 489:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param  __n  Number of characters to copy.
 490:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param  __a  Allocator to use.
 491:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        */
 492:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       basic_string(const basic_string& __str, size_type __pos,
 493:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 		   size_type __n, const _Alloc& __a)
 494:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 495:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       {
 496:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	const _CharT* __start
 497:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	  = __str._M_data() + __str._M_check(__pos, "string::string");
 498:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	_M_construct(__start, __start + __str._M_limit(__pos, __n));
 499:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       }
 500:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
 501:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       /**
 502:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @brief  Construct string initialized by a character %array.
 503:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param  __s  Source character %array.
 504:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param  __n  Number of characters to copy.
 505:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
 506:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *
 507:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  NB: @a __s must have at least @a __n characters, &apos;\\0&apos;
 508:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  has no special meaning.
 509:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        */
 510:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       basic_string(const _CharT* __s, size_type __n,
 511:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 		   const _Alloc& __a = _Alloc())
 512:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 513:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       { _M_construct(__s, __s + __n); }
 514:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
 515:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       /**
 516:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @brief  Construct string as copy of a C string.
 517:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param  __s  Source C string.
 518:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
 519:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        */
 520:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** #if __cpp_deduction_guides && ! defined _GLIBCXX_DEFINING_STRING_INSTANTIATIONS
 521:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 522:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       // 3076. basic_string CTAD ambiguity
 523:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       template<typename = _RequireAllocator<_Alloc>>
 524:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** #endif
 525:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
 526:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 527:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }
 528:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
 529:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       /**
ARM GAS  C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s 			page 16


 530:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @brief  Construct string as multiple characters.
 531:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param  __n  Number of characters.
 532:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param  __c  Character to use.
 533:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
 534:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        */
 535:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** #if __cpp_deduction_guides && ! defined _GLIBCXX_DEFINING_STRING_INSTANTIATIONS
 536:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 537:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       // 3076. basic_string CTAD ambiguity
 538:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       template<typename = _RequireAllocator<_Alloc>>
 539:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** #endif
 540:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       basic_string(size_type __n, _CharT __c, const _Alloc& __a = _Alloc())
 541:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 542:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       { _M_construct(__n, __c); }
 543:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
 544:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** #if __cplusplus >= 201103L
 545:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       /**
 546:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @brief  Move construct string.
 547:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param  __str  Source string.
 548:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *
 549:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  The newly-created string contains the exact contents of @a __str.
 550:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @a __str is a valid, but unspecified string.
 551:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        **/
 552:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       basic_string(basic_string&& __str) noexcept
 553:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       : _M_dataplus(_M_local_data(), std::move(__str._M_get_allocator()))
 554:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       {
 555:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	if (__str._M_is_local())
 556:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	  {
 557:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	    traits_type::copy(_M_local_buf, __str._M_local_buf,
 558:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 			      _S_local_capacity + 1);
 559:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	  }
 560:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	else
 561:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	  {
 562:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	    _M_data(__str._M_data());
 563:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	    _M_capacity(__str._M_allocated_capacity);
 564:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	  }
 565:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
 566:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	// Must use _M_length() here not _M_set_length() because
 567:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	// basic_stringbuf relies on writing into unallocated capacity so
 568:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	// we mess up the contents if we put a '\0' in the string.
 569:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	_M_length(__str.length());
 570:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	__str._M_data(__str._M_local_data());
 571:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	__str._M_set_length(0);
 572:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       }
 573:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
 574:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       /**
 575:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @brief  Construct string from an initializer %list.
 576:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param  __l  std::initializer_list of characters.
 577:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
 578:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        */
 579:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       basic_string(initializer_list<_CharT> __l, const _Alloc& __a = _Alloc())
 580:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 581:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       { _M_construct(__l.begin(), __l.end()); }
 582:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
 583:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       basic_string(const basic_string& __str, const _Alloc& __a)
 584:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 585:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       { _M_construct(__str.begin(), __str.end()); }
 586:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
ARM GAS  C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s 			page 17


 587:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       basic_string(basic_string&& __str, const _Alloc& __a)
 588:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       noexcept(_Alloc_traits::_S_always_equal())
 589:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 590:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       {
 591:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	if (__str._M_is_local())
 592:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	  {
 593:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	    traits_type::copy(_M_local_buf, __str._M_local_buf,
 594:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 			      _S_local_capacity + 1);
 595:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	    _M_length(__str.length());
 596:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	    __str._M_set_length(0);
 597:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	  }
 598:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	else if (_Alloc_traits::_S_always_equal()
 599:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	    || __str.get_allocator() == __a)
 600:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	  {
 601:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	    _M_data(__str._M_data());
 602:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	    _M_length(__str.length());
 603:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	    _M_capacity(__str._M_allocated_capacity);
 604:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	    __str._M_data(__str._M_local_buf);
 605:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	    __str._M_set_length(0);
 606:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	  }
 607:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	else
 608:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	  _M_construct(__str.begin(), __str.end());
 609:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       }
 610:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
 611:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** #endif // C++11
 612:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
 613:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       /**
 614:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @brief  Construct string as copy of a range.
 615:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param  __beg  Start of range.
 616:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param  __end  End of range.
 617:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
 618:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        */
 619:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** #if __cplusplus >= 201103L
 620:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       template<typename _InputIterator,
 621:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
 622:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** #else
 623:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       template<typename _InputIterator>
 624:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** #endif
 625:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****         basic_string(_InputIterator __beg, _InputIterator __end,
 626:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 		     const _Alloc& __a = _Alloc())
 627:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	: _M_dataplus(_M_local_data(), __a)
 628:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	{ _M_construct(__beg, __end); }
 629:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
 630:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** #if __cplusplus >= 201703L
 631:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       /**
 632:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @brief  Construct string from a substring of a string_view.
 633:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param  __t   Source object convertible to string view.
 634:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param  __pos The index of the first character to copy from __t.
 635:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param  __n   The number of characters to copy from __t.
 636:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param  __a   Allocator to use.
 637:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        */
 638:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       template<typename _Tp, typename = _If_sv<_Tp, void>>
 639:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	basic_string(const _Tp& __t, size_type __pos, size_type __n,
 640:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 		     const _Alloc& __a = _Alloc())
 641:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	: basic_string(_S_to_string_view(__t).substr(__pos, __n), __a) { }
 642:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
 643:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       /**
ARM GAS  C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s 			page 18


 644:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @brief  Construct string from a string_view.
 645:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param  __t  Source object convertible to string view.
 646:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
 647:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        */
 648:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       template<typename _Tp, typename = _If_sv<_Tp, void>>
 649:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	explicit
 650:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	basic_string(const _Tp& __t, const _Alloc& __a = _Alloc())
 651:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	: basic_string(__sv_wrapper(_S_to_string_view(__t)), __a) { }
 652:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** #endif // C++17
 653:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
 654:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       /**
 655:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @brief  Destroy the string instance.
 656:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        */
 657:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       ~basic_string()
 658:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       { _M_dispose(); }
 659:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
 660:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       /**
 661:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @brief  Assign the value of @a str to this string.
 662:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param  __str  Source string.
 663:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        */
 664:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       basic_string&
 665:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       operator=(const basic_string& __str)
 666:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       {
 667:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	return this->assign(__str);
 668:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       }
 669:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
 670:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       /**
 671:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @brief  Copy contents of @a s into this string.
 672:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param  __s  Source null-terminated string.
 673:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        */
 674:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       basic_string&
 675:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       operator=(const _CharT* __s)
 676:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       { return this->assign(__s); }
 677:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
 678:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       /**
 679:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @brief  Set value to string of length 1.
 680:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param  __c  Source character.
 681:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *
 682:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  Assigning to a character makes this string length 1 and
 683:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  (*this)[0] == @a c.
 684:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        */
 685:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       basic_string&
 686:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       operator=(_CharT __c)
 687:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       {
 688:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	this->assign(1, __c);
 689:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	return *this;
 690:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       }
 691:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
 692:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** #if __cplusplus >= 201103L
 693:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       /**
 694:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @brief  Move assign the value of @a str to this string.
 695:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param  __str  Source string.
 696:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *
 697:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  The contents of @a str are moved into this string (without copying).
 698:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @a str is a valid, but unspecified string.
 699:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        **/
 700:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
ARM GAS  C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s 			page 19


 701:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       // 2063. Contradictory requirements for string move assignment
 702:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       basic_string&
 703:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       operator=(basic_string&& __str)
 704:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       noexcept(_Alloc_traits::_S_nothrow_move())
 705:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       {
 706:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	if (!_M_is_local() && _Alloc_traits::_S_propagate_on_move_assign()
 707:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	    && !_Alloc_traits::_S_always_equal()
 708:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	    && _M_get_allocator() != __str._M_get_allocator())
 709:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	  {
 710:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	    // Destroy existing storage before replacing allocator.
 711:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	    _M_destroy(_M_allocated_capacity);
 712:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	    _M_data(_M_local_data());
 713:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	    _M_set_length(0);
 714:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	  }
 715:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	// Replace allocator if POCMA is true.
 716:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	std::__alloc_on_move(_M_get_allocator(), __str._M_get_allocator());
 717:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
 718:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	if (__str._M_is_local())
 719:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	  {
 720:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	    // We've always got room for a short string, just copy it.
 721:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	    if (__str.size())
 722:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	      this->_S_copy(_M_data(), __str._M_data(), __str.size());
 723:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	    _M_set_length(__str.size());
 724:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	  }
 725:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	else if (_Alloc_traits::_S_propagate_on_move_assign()
 726:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	    || _Alloc_traits::_S_always_equal()
 727:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	    || _M_get_allocator() == __str._M_get_allocator())
 728:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	  {
 729:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	    // Just move the allocated pointer, our allocator can free it.
 730:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	    pointer __data = nullptr;
 731:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	    size_type __capacity;
 732:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	    if (!_M_is_local())
 733:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	      {
 734:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 		if (_Alloc_traits::_S_always_equal())
 735:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 		  {
 736:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 		    // __str can reuse our existing storage.
 737:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 		    __data = _M_data();
 738:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 		    __capacity = _M_allocated_capacity;
 739:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 		  }
 740:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 		else // __str can't use it, so free it.
 741:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 		  _M_destroy(_M_allocated_capacity);
 742:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	      }
 743:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
 744:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	    _M_data(__str._M_data());
 745:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	    _M_length(__str.length());
 746:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	    _M_capacity(__str._M_allocated_capacity);
 747:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	    if (__data)
 748:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	      {
 749:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 		__str._M_data(__data);
 750:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 		__str._M_capacity(__capacity);
 751:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	      }
 752:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	    else
 753:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	      __str._M_data(__str._M_local_buf);
 754:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	  }
 755:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	else // Need to do a deep copy
 756:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	  assign(__str);
 757:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	__str.clear();
ARM GAS  C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s 			page 20


 758:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	return *this;
 759:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       }
 760:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
 761:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       /**
 762:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @brief  Set value to string constructed from initializer %list.
 763:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param  __l  std::initializer_list.
 764:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        */
 765:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       basic_string&
 766:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       operator=(initializer_list<_CharT> __l)
 767:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       {
 768:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	this->assign(__l.begin(), __l.size());
 769:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	return *this;
 770:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       }
 771:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** #endif // C++11
 772:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
 773:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** #if __cplusplus >= 201703L
 774:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       /**
 775:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @brief  Set value to string constructed from a string_view.
 776:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param  __svt  An object convertible to string_view.
 777:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        */
 778:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****      template<typename _Tp>
 779:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        _If_sv<_Tp, basic_string&>
 780:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        operator=(const _Tp& __svt)
 781:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        { return this->assign(__svt); }
 782:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
 783:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       /**
 784:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @brief  Convert to a string_view.
 785:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @return A string_view.
 786:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        */
 787:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       operator __sv_type() const noexcept
 788:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       { return __sv_type(data(), size()); }
 789:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** #endif // C++17
 790:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
 791:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       // Iterators:
 792:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       /**
 793:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  Returns a read/write iterator that points to the first character in
 794:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  the %string.
 795:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        */
 796:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       iterator
 797:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       begin() _GLIBCXX_NOEXCEPT
 798:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       { return iterator(_M_data()); }
 799:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
 800:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       /**
 801:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  Returns a read-only (constant) iterator that points to the first
 802:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  character in the %string.
 803:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        */
 804:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       const_iterator
 805:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       begin() const _GLIBCXX_NOEXCEPT
 806:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       { return const_iterator(_M_data()); }
 807:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
 808:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       /**
 809:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  Returns a read/write iterator that points one past the last
 810:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  character in the %string.
 811:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        */
 812:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       iterator
 813:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       end() _GLIBCXX_NOEXCEPT
 814:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       { return iterator(_M_data() + this->size()); }
ARM GAS  C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s 			page 21


 815:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
 816:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       /**
 817:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  Returns a read-only (constant) iterator that points one past the
 818:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  last character in the %string.
 819:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        */
 820:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       const_iterator
 821:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       end() const _GLIBCXX_NOEXCEPT
 822:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       { return const_iterator(_M_data() + this->size()); }
 823:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
 824:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       /**
 825:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  Returns a read/write reverse iterator that points to the last
 826:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  character in the %string.  Iteration is done in reverse element
 827:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  order.
 828:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        */
 829:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       reverse_iterator
 830:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       rbegin() _GLIBCXX_NOEXCEPT
 831:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       { return reverse_iterator(this->end()); }
 832:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
 833:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       /**
 834:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  Returns a read-only (constant) reverse iterator that points
 835:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  to the last character in the %string.  Iteration is done in
 836:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  reverse element order.
 837:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        */
 838:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       const_reverse_iterator
 839:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       rbegin() const _GLIBCXX_NOEXCEPT
 840:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       { return const_reverse_iterator(this->end()); }
 841:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
 842:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       /**
 843:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  Returns a read/write reverse iterator that points to one before the
 844:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  first character in the %string.  Iteration is done in reverse
 845:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  element order.
 846:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        */
 847:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       reverse_iterator
 848:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       rend() _GLIBCXX_NOEXCEPT
 849:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       { return reverse_iterator(this->begin()); }
 850:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
 851:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       /**
 852:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  Returns a read-only (constant) reverse iterator that points
 853:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  to one before the first character in the %string.  Iteration
 854:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  is done in reverse element order.
 855:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        */
 856:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       const_reverse_iterator
 857:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       rend() const _GLIBCXX_NOEXCEPT
 858:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       { return const_reverse_iterator(this->begin()); }
 859:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
 860:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** #if __cplusplus >= 201103L
 861:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       /**
 862:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  Returns a read-only (constant) iterator that points to the first
 863:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  character in the %string.
 864:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        */
 865:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       const_iterator
 866:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       cbegin() const noexcept
 867:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       { return const_iterator(this->_M_data()); }
 868:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
 869:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       /**
 870:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  Returns a read-only (constant) iterator that points one past the
 871:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  last character in the %string.
ARM GAS  C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s 			page 22


 872:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        */
 873:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       const_iterator
 874:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       cend() const noexcept
 875:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       { return const_iterator(this->_M_data() + this->size()); }
 876:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
 877:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       /**
 878:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  Returns a read-only (constant) reverse iterator that points
 879:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  to the last character in the %string.  Iteration is done in
 880:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  reverse element order.
 881:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        */
 882:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       const_reverse_iterator
 883:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       crbegin() const noexcept
 884:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       { return const_reverse_iterator(this->end()); }
 885:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
 886:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       /**
 887:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  Returns a read-only (constant) reverse iterator that points
 888:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  to one before the first character in the %string.  Iteration
 889:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  is done in reverse element order.
 890:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        */
 891:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       const_reverse_iterator
 892:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       crend() const noexcept
 893:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       { return const_reverse_iterator(this->begin()); }
 894:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** #endif
 895:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
 896:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****     public:
 897:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       // Capacity:
 898:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       ///  Returns the number of characters in the string, not including any
 899:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       ///  null-termination.
 900:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       size_type
 901:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       size() const _GLIBCXX_NOEXCEPT
 902:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       { return _M_string_length; }
 903:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
 904:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       ///  Returns the number of characters in the string, not including any
 905:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       ///  null-termination.
 906:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       size_type
 907:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       length() const _GLIBCXX_NOEXCEPT
 908:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       { return _M_string_length; }
 909:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
 910:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       ///  Returns the size() of the largest possible %string.
 911:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       size_type
 912:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       max_size() const _GLIBCXX_NOEXCEPT
 913:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       { return (_Alloc_traits::max_size(_M_get_allocator()) - 1) / 2; }
 914:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
 915:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       /**
 916:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @brief  Resizes the %string to the specified number of characters.
 917:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param  __n  Number of characters the %string should contain.
 918:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param  __c  Character to fill any new elements.
 919:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *
 920:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  This function will %resize the %string to the specified
 921:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  number of characters.  If the number is smaller than the
 922:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  %string's current size the %string is truncated, otherwise
 923:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  the %string is extended and new elements are %set to @a __c.
 924:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        */
 925:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       void
 926:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       resize(size_type __n, _CharT __c);
 927:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
 928:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       /**
ARM GAS  C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s 			page 23


 929:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @brief  Resizes the %string to the specified number of characters.
 930:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param  __n  Number of characters the %string should contain.
 931:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *
 932:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  This function will resize the %string to the specified length.  If
 933:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  the new size is smaller than the %string's current size the %string
 934:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  is truncated, otherwise the %string is extended and new characters
 935:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  are default-constructed.  For basic types such as char, this means
 936:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  setting them to 0.
 937:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        */
 938:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       void
 939:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       resize(size_type __n)
 940:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       { this->resize(__n, _CharT()); }
 941:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
 942:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** #if __cplusplus >= 201103L
 943:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       ///  A non-binding request to reduce capacity() to size().
 944:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       void
 945:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       shrink_to_fit() noexcept
 946:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       {
 947:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** #if __cpp_exceptions
 948:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	if (capacity() > size())
 949:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	  {
 950:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	    try
 951:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	      { reserve(0); }
 952:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	    catch(...)
 953:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	      { }
 954:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	  }
 955:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** #endif
 956:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       }
 957:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** #endif
 958:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
 959:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       /**
 960:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  Returns the total number of characters that the %string can hold
 961:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  before needing to allocate more memory.
 962:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        */
 963:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       size_type
 964:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       capacity() const _GLIBCXX_NOEXCEPT
 965:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       {
 966:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	return _M_is_local() ? size_type(_S_local_capacity)
 967:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	                     : _M_allocated_capacity;
 968:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       }
 969:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
 970:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       /**
 971:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @brief  Attempt to preallocate enough memory for specified number of
 972:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *          characters.
 973:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param  __res_arg  Number of characters required.
 974:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @throw  std::length_error  If @a __res_arg exceeds @c max_size().
 975:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *
 976:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  This function attempts to reserve enough memory for the
 977:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  %string to hold the specified number of characters.  If the
 978:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  number requested is more than max_size(), length_error is
 979:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  thrown.
 980:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *
 981:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  The advantage of this function is that if optimal code is a
 982:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  necessity and the user can determine the string length that will be
 983:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  required, the user can reserve the memory in %advance, and thus
 984:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  prevent a possible reallocation of memory and copying of %string
 985:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  data.
ARM GAS  C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s 			page 24


 986:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        */
 987:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       void
 988:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       reserve(size_type __res_arg = 0);
 989:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
 990:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       /**
 991:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  Erases the string, making it empty.
 992:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        */
 993:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       void
 994:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       clear() _GLIBCXX_NOEXCEPT
 995:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       { _M_set_length(0); }
 996:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
 997:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       /**
 998:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  Returns true if the %string is empty.  Equivalent to 
 999:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  <code>*this == ""</code>.
1000:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        */
1001:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       _GLIBCXX_NODISCARD bool
1002:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       empty() const _GLIBCXX_NOEXCEPT
1003:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       { return this->size() == 0; }
1004:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
1005:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       // Element access:
1006:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       /**
1007:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @brief  Subscript access to the data contained in the %string.
1008:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param  __pos  The index of the character to access.
1009:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @return  Read-only (constant) reference to the character.
1010:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *
1011:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  This operator allows for easy, array-style, data access.
1012:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  Note that data access with this operator is unchecked and
1013:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  out_of_range lookups are not defined. (For checked lookups
1014:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  see at().)
1015:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        */
1016:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       const_reference
1017:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       operator[] (size_type __pos) const _GLIBCXX_NOEXCEPT
1018:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       {
1019:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	__glibcxx_assert(__pos <= size());
1020:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	return _M_data()[__pos];
1021:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       }
1022:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
1023:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       /**
1024:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @brief  Subscript access to the data contained in the %string.
1025:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param  __pos  The index of the character to access.
1026:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @return  Read/write reference to the character.
1027:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *
1028:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  This operator allows for easy, array-style, data access.
1029:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  Note that data access with this operator is unchecked and
1030:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  out_of_range lookups are not defined. (For checked lookups
1031:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  see at().)
1032:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        */
1033:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       reference
1034:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       operator[](size_type __pos)
1035:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       {
1036:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****         // Allow pos == size() both in C++98 mode, as v3 extension,
1037:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	// and in C++11 mode.
1038:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	__glibcxx_assert(__pos <= size());
1039:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****         // In pedantic mode be strict in C++98 mode.
1040:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(__cplusplus >= 201103L || __pos < size());
1041:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	return _M_data()[__pos];
1042:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       }
ARM GAS  C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s 			page 25


1043:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
1044:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       /**
1045:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @brief  Provides access to the data contained in the %string.
1046:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __n The index of the character to access.
1047:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @return  Read-only (const) reference to the character.
1048:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @throw  std::out_of_range  If @a n is an invalid index.
1049:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *
1050:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  This function provides for safer data access.  The parameter is
1051:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  first checked that it is in the range of the string.  The function
1052:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  throws out_of_range if the check fails.
1053:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        */
1054:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       const_reference
1055:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       at(size_type __n) const
1056:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       {
1057:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	if (__n >= this->size())
1058:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	  __throw_out_of_range_fmt(__N("basic_string::at: __n "
1059:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 				       "(which is %zu) >= this->size() "
1060:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 				       "(which is %zu)"),
1061:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 				   __n, this->size());
1062:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	return _M_data()[__n];
1063:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       }
1064:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
1065:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       /**
1066:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @brief  Provides access to the data contained in the %string.
1067:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __n The index of the character to access.
1068:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @return  Read/write reference to the character.
1069:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @throw  std::out_of_range  If @a n is an invalid index.
1070:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *
1071:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  This function provides for safer data access.  The parameter is
1072:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  first checked that it is in the range of the string.  The function
1073:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  throws out_of_range if the check fails.
1074:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        */
1075:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       reference
1076:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       at(size_type __n)
1077:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       {
1078:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	if (__n >= size())
1079:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	  __throw_out_of_range_fmt(__N("basic_string::at: __n "
1080:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 				       "(which is %zu) >= this->size() "
1081:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 				       "(which is %zu)"),
1082:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 				   __n, this->size());
1083:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	return _M_data()[__n];
1084:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       }
1085:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
1086:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** #if __cplusplus >= 201103L
1087:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       /**
1088:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  Returns a read/write reference to the data at the first
1089:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  element of the %string.
1090:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        */
1091:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       reference
1092:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       front() noexcept
1093:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       {
1094:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	__glibcxx_assert(!empty());
1095:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	return operator[](0);
1096:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       }
1097:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
1098:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       /**
1099:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  Returns a read-only (constant) reference to the data at the first
ARM GAS  C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s 			page 26


1100:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  element of the %string.
1101:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        */
1102:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       const_reference
1103:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       front() const noexcept
1104:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       {
1105:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	__glibcxx_assert(!empty());
1106:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	return operator[](0);
1107:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       }
1108:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
1109:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       /**
1110:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  Returns a read/write reference to the data at the last
1111:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  element of the %string.
1112:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        */
1113:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       reference
1114:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       back() noexcept
1115:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       {
1116:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	__glibcxx_assert(!empty());
1117:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	return operator[](this->size() - 1);
1118:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       }
1119:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
1120:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       /**
1121:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  Returns a read-only (constant) reference to the data at the
1122:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  last element of the %string.
1123:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        */
1124:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       const_reference
1125:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       back() const noexcept
1126:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       {
1127:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	__glibcxx_assert(!empty());
1128:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	return operator[](this->size() - 1);
1129:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       }
1130:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** #endif
1131:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
1132:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       // Modifiers:
1133:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       /**
1134:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @brief  Append a string to this string.
1135:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __str  The string to append.
1136:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @return  Reference to this string.
1137:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        */
1138:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       basic_string&
1139:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       operator+=(const basic_string& __str)
1140:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       { return this->append(__str); }
1141:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
1142:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       /**
1143:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @brief  Append a C string.
1144:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __s  The C string to append.
1145:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @return  Reference to this string.
1146:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        */
1147:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       basic_string&
1148:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       operator+=(const _CharT* __s)
1149:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       { return this->append(__s); }
1150:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
1151:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       /**
1152:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @brief  Append a character.
1153:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __c  The character to append.
1154:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @return  Reference to this string.
1155:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        */
1156:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       basic_string&
ARM GAS  C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s 			page 27


1157:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       operator+=(_CharT __c)
1158:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       {
1159:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	this->push_back(__c);
1160:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	return *this;
1161:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       }
1162:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
1163:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** #if __cplusplus >= 201103L
1164:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       /**
1165:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @brief  Append an initializer_list of characters.
1166:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __l  The initializer_list of characters to be appended.
1167:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @return  Reference to this string.
1168:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        */
1169:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       basic_string&
1170:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       operator+=(initializer_list<_CharT> __l)
1171:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       { return this->append(__l.begin(), __l.size()); }
1172:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** #endif // C++11
1173:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
1174:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** #if __cplusplus >= 201703L
1175:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       /**
1176:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @brief  Append a string_view.
1177:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __svt  An object convertible to string_view to be appended.
1178:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @return  Reference to this string.
1179:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        */
1180:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       template<typename _Tp>
1181:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	_If_sv<_Tp, basic_string&>
1182:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	operator+=(const _Tp& __svt)
1183:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	{ return this->append(__svt); }
1184:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** #endif // C++17
1185:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
1186:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       /**
1187:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @brief  Append a string to this string.
1188:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __str  The string to append.
1189:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @return  Reference to this string.
1190:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        */
1191:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       basic_string&
1192:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       append(const basic_string& __str)
1193:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       { return _M_append(__str._M_data(), __str.size()); }
1194:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
1195:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       /**
1196:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @brief  Append a substring.
1197:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __str  The string to append.
1198:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __pos  Index of the first character of str to append.
1199:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __n  The number of characters to append.
1200:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @return  Reference to this string.
1201:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @throw  std::out_of_range if @a __pos is not a valid index.
1202:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *
1203:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  This function appends @a __n characters from @a __str
1204:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  starting at @a __pos to this string.  If @a __n is is larger
1205:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  than the number of available characters in @a __str, the
1206:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  remainder of @a __str is appended.
1207:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        */
1208:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       basic_string&
1209:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       append(const basic_string& __str, size_type __pos, size_type __n = npos)
1210:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       { return _M_append(__str._M_data()
1211:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 			 + __str._M_check(__pos, "basic_string::append"),
1212:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 			 __str._M_limit(__pos, __n)); }
1213:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
ARM GAS  C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s 			page 28


1214:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       /**
1215:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @brief  Append a C substring.
1216:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __s  The C string to append.
1217:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __n  The number of characters to append.
1218:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @return  Reference to this string.
1219:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        */
1220:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       basic_string&
1221:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       append(const _CharT* __s, size_type __n)
1222:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       {
1223:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	__glibcxx_requires_string_len(__s, __n);
1224:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	_M_check_length(size_type(0), __n, "basic_string::append");
1225:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	return _M_append(__s, __n);
1226:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       }
1227:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
1228:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       /**
1229:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @brief  Append a C string.
1230:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __s  The C string to append.
1231:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @return  Reference to this string.
1232:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        */
1233:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       basic_string&
1234:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       append(const _CharT* __s)
1235:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       {
1236:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	__glibcxx_requires_string(__s);
1237:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	const size_type __n = traits_type::length(__s);
1238:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	_M_check_length(size_type(0), __n, "basic_string::append");
1239:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	return _M_append(__s, __n);
1240:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       }
1241:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
1242:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       /**
1243:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @brief  Append multiple characters.
1244:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __n  The number of characters to append.
1245:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __c  The character to use.
1246:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @return  Reference to this string.
1247:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *
1248:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  Appends __n copies of __c to this string.
1249:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        */
1250:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       basic_string&
1251:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       append(size_type __n, _CharT __c)
1252:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       { return _M_replace_aux(this->size(), size_type(0), __n, __c); }
1253:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
1254:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** #if __cplusplus >= 201103L
1255:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       /**
1256:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @brief  Append an initializer_list of characters.
1257:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __l  The initializer_list of characters to append.
1258:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @return  Reference to this string.
1259:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        */
1260:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       basic_string&
1261:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       append(initializer_list<_CharT> __l)
1262:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       { return this->append(__l.begin(), __l.size()); }
1263:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** #endif // C++11
1264:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
1265:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       /**
1266:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @brief  Append a range of characters.
1267:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __first  Iterator referencing the first character to append.
1268:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __last  Iterator marking the end of the range.
1269:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @return  Reference to this string.
1270:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *
ARM GAS  C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s 			page 29


1271:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  Appends characters in the range [__first,__last) to this string.
1272:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        */
1273:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** #if __cplusplus >= 201103L
1274:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       template<class _InputIterator,
1275:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
1276:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** #else
1277:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       template<class _InputIterator>
1278:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** #endif
1279:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****         basic_string&
1280:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****         append(_InputIterator __first, _InputIterator __last)
1281:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****         { return this->replace(end(), end(), __first, __last); }
1282:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
1283:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** #if __cplusplus >= 201703L
1284:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       /**
1285:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @brief  Append a string_view.
1286:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __svt  An object convertible to string_view to be appended.
1287:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @return  Reference to this string.
1288:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        */
1289:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       template<typename _Tp>
1290:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****         _If_sv<_Tp, basic_string&>
1291:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****         append(const _Tp& __svt)
1292:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****         {
1293:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****           __sv_type __sv = __svt;
1294:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****           return this->append(__sv.data(), __sv.size());
1295:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****         }
1296:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
1297:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       /**
1298:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @brief  Append a range of characters from a string_view.
1299:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __svt  An object convertible to string_view to be appended from.
1300:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __pos The position in the string_view to append from.
1301:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __n   The number of characters to append from the string_view.
1302:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @return  Reference to this string.
1303:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        */
1304:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       template<typename _Tp>
1305:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****         _If_sv<_Tp, basic_string&>
1306:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	append(const _Tp& __svt, size_type __pos, size_type __n = npos)
1307:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	{
1308:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	  __sv_type __sv = __svt;
1309:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	  return _M_append(__sv.data()
1310:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	      + std::__sv_check(__sv.size(), __pos, "basic_string::append"),
1311:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	      std::__sv_limit(__sv.size(), __pos, __n));
1312:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	}
1313:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** #endif // C++17
1314:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
1315:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       /**
1316:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @brief  Append a single character.
1317:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __c  Character to append.
1318:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        */
1319:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       void
1320:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       push_back(_CharT __c)
1321:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       {
1322:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	const size_type __size = this->size();
1323:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	if (__size + 1 > this->capacity())
1324:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	  this->_M_mutate(__size, size_type(0), 0, size_type(1));
1325:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	traits_type::assign(this->_M_data()[__size], __c);
1326:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	this->_M_set_length(__size + 1);
1327:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       }
ARM GAS  C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s 			page 30


1328:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
1329:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       /**
1330:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @brief  Set value to contents of another string.
1331:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param  __str  Source string to use.
1332:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @return  Reference to this string.
1333:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        */
1334:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       basic_string&
1335:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       assign(const basic_string& __str)
1336:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       {
1337:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** #if __cplusplus >= 201103L
1338:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	if (_Alloc_traits::_S_propagate_on_copy_assign())
1339:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	  {
1340:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	    if (!_Alloc_traits::_S_always_equal() && !_M_is_local()
1341:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 		&& _M_get_allocator() != __str._M_get_allocator())
1342:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	      {
1343:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 		// Propagating allocator cannot free existing storage so must
1344:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 		// deallocate it before replacing current allocator.
1345:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 		if (__str.size() <= _S_local_capacity)
1346:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 		  {
1347:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 		    _M_destroy(_M_allocated_capacity);
1348:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 		    _M_data(_M_local_data());
1349:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 		    _M_set_length(0);
1350:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 		  }
1351:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 		else
1352:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 		  {
1353:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 		    const auto __len = __str.size();
1354:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 		    auto __alloc = __str._M_get_allocator();
1355:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 		    // If this allocation throws there are no effects:
1356:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 		    auto __ptr = _Alloc_traits::allocate(__alloc, __len + 1);
1357:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 		    _M_destroy(_M_allocated_capacity);
1358:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 		    _M_data(__ptr);
1359:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 		    _M_capacity(__len);
1360:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 		    _M_set_length(__len);
1361:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 		  }
1362:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	      }
1363:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	    std::__alloc_on_copy(_M_get_allocator(), __str._M_get_allocator());
1364:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	  }
1365:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** #endif
1366:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	this->_M_assign(__str);
1367:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	return *this;
1368:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       }
1369:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
1370:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** #if __cplusplus >= 201103L
1371:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       /**
1372:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @brief  Set value to contents of another string.
1373:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param  __str  Source string to use.
1374:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @return  Reference to this string.
1375:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *
1376:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  This function sets this string to the exact contents of @a __str.
1377:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @a __str is a valid, but unspecified string.
1378:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        */
1379:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       basic_string&
1380:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       assign(basic_string&& __str)
1381:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       noexcept(_Alloc_traits::_S_nothrow_move())
1382:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       {
1383:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	// _GLIBCXX_RESOLVE_LIB_DEFECTS
1384:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	// 2063. Contradictory requirements for string move assignment
ARM GAS  C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s 			page 31


1385:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	return *this = std::move(__str);
1386:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       }
1387:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** #endif // C++11
1388:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
1389:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       /**
1390:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @brief  Set value to a substring of a string.
1391:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __str  The string to use.
1392:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __pos  Index of the first character of str.
1393:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __n  Number of characters to use.
1394:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @return  Reference to this string.
1395:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @throw  std::out_of_range if @a pos is not a valid index.
1396:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *
1397:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  This function sets this string to the substring of @a __str
1398:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  consisting of @a __n characters at @a __pos.  If @a __n is
1399:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  is larger than the number of available characters in @a
1400:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  __str, the remainder of @a __str is used.
1401:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        */
1402:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       basic_string&
1403:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       assign(const basic_string& __str, size_type __pos, size_type __n = npos)
1404:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       { return _M_replace(size_type(0), this->size(), __str._M_data()
1405:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 			  + __str._M_check(__pos, "basic_string::assign"),
1406:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 			  __str._M_limit(__pos, __n)); }
1407:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
1408:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       /**
1409:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @brief  Set value to a C substring.
1410:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __s  The C string to use.
1411:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __n  Number of characters to use.
1412:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @return  Reference to this string.
1413:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *
1414:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  This function sets the value of this string to the first @a __n
1415:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  characters of @a __s.  If @a __n is is larger than the number of
1416:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  available characters in @a __s, the remainder of @a __s is used.
1417:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        */
1418:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       basic_string&
1419:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       assign(const _CharT* __s, size_type __n)
1420:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       {
1421:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	__glibcxx_requires_string_len(__s, __n);
1422:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	return _M_replace(size_type(0), this->size(), __s, __n);
1423:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       }
1424:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
1425:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       /**
1426:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @brief  Set value to contents of a C string.
1427:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __s  The C string to use.
1428:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @return  Reference to this string.
1429:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *
1430:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  This function sets the value of this string to the value of @a __s.
1431:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  The data is copied, so there is no dependence on @a __s once the
1432:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  function returns.
1433:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        */
1434:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       basic_string&
1435:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       assign(const _CharT* __s)
1436:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       {
1437:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	__glibcxx_requires_string(__s);
1438:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	return _M_replace(size_type(0), this->size(), __s,
1439:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 			  traits_type::length(__s));
1440:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       }
1441:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
ARM GAS  C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s 			page 32


1442:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       /**
1443:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @brief  Set value to multiple characters.
1444:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __n  Length of the resulting string.
1445:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __c  The character to use.
1446:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @return  Reference to this string.
1447:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *
1448:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  This function sets the value of this string to @a __n copies of
1449:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  character @a __c.
1450:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        */
1451:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       basic_string&
1452:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       assign(size_type __n, _CharT __c)
1453:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       { return _M_replace_aux(size_type(0), this->size(), __n, __c); }
1454:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
1455:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       /**
1456:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @brief  Set value to a range of characters.
1457:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __first  Iterator referencing the first character to append.
1458:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __last  Iterator marking the end of the range.
1459:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @return  Reference to this string.
1460:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *
1461:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  Sets value of string to characters in the range [__first,__last).
1462:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       */
1463:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** #if __cplusplus >= 201103L
1464:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       template<class _InputIterator,
1465:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
1466:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** #else
1467:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       template<class _InputIterator>
1468:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** #endif
1469:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****         basic_string&
1470:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****         assign(_InputIterator __first, _InputIterator __last)
1471:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****         { return this->replace(begin(), end(), __first, __last); }
1472:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
1473:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** #if __cplusplus >= 201103L
1474:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       /**
1475:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @brief  Set value to an initializer_list of characters.
1476:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __l  The initializer_list of characters to assign.
1477:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @return  Reference to this string.
1478:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        */
1479:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       basic_string&
1480:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       assign(initializer_list<_CharT> __l)
1481:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       { return this->assign(__l.begin(), __l.size()); }
1482:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** #endif // C++11
1483:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
1484:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** #if __cplusplus >= 201703L
1485:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       /**
1486:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @brief  Set value from a string_view.
1487:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __svt  The source object convertible to string_view.
1488:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @return  Reference to this string.
1489:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        */
1490:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       template<typename _Tp>
1491:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	_If_sv<_Tp, basic_string&>
1492:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	assign(const _Tp& __svt)
1493:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	{
1494:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	  __sv_type __sv = __svt;
1495:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	  return this->assign(__sv.data(), __sv.size());
1496:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	}
1497:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
1498:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       /**
ARM GAS  C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s 			page 33


1499:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @brief  Set value from a range of characters in a string_view.
1500:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __svt  The source object convertible to string_view.
1501:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __pos  The position in the string_view to assign from.
1502:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __n  The number of characters to assign.
1503:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @return  Reference to this string.
1504:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        */
1505:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       template<typename _Tp>
1506:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	_If_sv<_Tp, basic_string&>
1507:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	assign(const _Tp& __svt, size_type __pos, size_type __n = npos)
1508:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	{
1509:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	  __sv_type __sv = __svt;
1510:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	  return _M_replace(size_type(0), this->size(),
1511:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	      __sv.data()
1512:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	      + std::__sv_check(__sv.size(), __pos, "basic_string::assign"),
1513:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	      std::__sv_limit(__sv.size(), __pos, __n));
1514:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	}
1515:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** #endif // C++17
1516:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
1517:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** #if __cplusplus >= 201103L
1518:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       /**
1519:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @brief  Insert multiple characters.
1520:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __p  Const_iterator referencing location in string to
1521:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *              insert at.
1522:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __n  Number of characters to insert
1523:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __c  The character to insert.
1524:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @return  Iterator referencing the first inserted char.
1525:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1526:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *
1527:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  Inserts @a __n copies of character @a __c starting at the
1528:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  position referenced by iterator @a __p.  If adding
1529:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  characters causes the length to exceed max_size(),
1530:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  length_error is thrown.  The value of the string doesn't
1531:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  change if an error is thrown.
1532:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       */
1533:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       iterator
1534:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       insert(const_iterator __p, size_type __n, _CharT __c)
1535:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       {
1536:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(__p >= begin() && __p <= end());
1537:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	const size_type __pos = __p - begin();
1538:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	this->replace(__p, __p, __n, __c);
1539:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	return iterator(this->_M_data() + __pos);
1540:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       }
1541:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** #else
1542:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       /**
1543:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @brief  Insert multiple characters.
1544:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __p  Iterator referencing location in string to insert at.
1545:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __n  Number of characters to insert
1546:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __c  The character to insert.
1547:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1548:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *
1549:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  Inserts @a __n copies of character @a __c starting at the
1550:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  position referenced by iterator @a __p.  If adding
1551:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  characters causes the length to exceed max_size(),
1552:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  length_error is thrown.  The value of the string doesn't
1553:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  change if an error is thrown.
1554:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       */
1555:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       void
ARM GAS  C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s 			page 34


1556:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       insert(iterator __p, size_type __n, _CharT __c)
1557:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       {	this->replace(__p, __p, __n, __c);  }
1558:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** #endif
1559:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
1560:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** #if __cplusplus >= 201103L
1561:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       /**
1562:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @brief  Insert a range of characters.
1563:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __p  Const_iterator referencing location in string to
1564:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *              insert at.
1565:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __beg  Start of range.
1566:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __end  End of range.
1567:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @return  Iterator referencing the first inserted char.
1568:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1569:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *
1570:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  Inserts characters in range [beg,end).  If adding characters
1571:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  causes the length to exceed max_size(), length_error is
1572:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  thrown.  The value of the string doesn't change if an error
1573:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  is thrown.
1574:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       */
1575:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       template<class _InputIterator,
1576:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
1577:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	iterator
1578:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****         insert(const_iterator __p, _InputIterator __beg, _InputIterator __end)
1579:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****         {
1580:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	  _GLIBCXX_DEBUG_PEDASSERT(__p >= begin() && __p <= end());
1581:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	  const size_type __pos = __p - begin();
1582:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	  this->replace(__p, __p, __beg, __end);
1583:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	  return iterator(this->_M_data() + __pos);
1584:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	}
1585:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** #else
1586:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       /**
1587:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @brief  Insert a range of characters.
1588:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __p  Iterator referencing location in string to insert at.
1589:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __beg  Start of range.
1590:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __end  End of range.
1591:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1592:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *
1593:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  Inserts characters in range [__beg,__end).  If adding
1594:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  characters causes the length to exceed max_size(),
1595:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  length_error is thrown.  The value of the string doesn't
1596:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  change if an error is thrown.
1597:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       */
1598:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       template<class _InputIterator>
1599:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****         void
1600:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****         insert(iterator __p, _InputIterator __beg, _InputIterator __end)
1601:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****         { this->replace(__p, __p, __beg, __end); }
1602:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** #endif
1603:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
1604:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** #if __cplusplus >= 201103L
1605:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       /**
1606:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @brief  Insert an initializer_list of characters.
1607:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __p  Iterator referencing location in string to insert at.
1608:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __l  The initializer_list of characters to insert.
1609:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1610:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        */
1611:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       iterator
1612:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       insert(const_iterator __p, initializer_list<_CharT> __l)
ARM GAS  C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s 			page 35


1613:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       { return this->insert(__p, __l.begin(), __l.end()); }
1614:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
1615:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** #ifdef _GLIBCXX_DEFINING_STRING_INSTANTIATIONS
1616:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       // See PR libstdc++/83328
1617:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       void
1618:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       insert(iterator __p, initializer_list<_CharT> __l)
1619:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       {
1620:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(__p >= begin() && __p <= end());
1621:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	this->insert(__p - begin(), __l.begin(), __l.size());
1622:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       }
1623:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** #endif
1624:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** #endif // C++11
1625:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
1626:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       /**
1627:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @brief  Insert value of a string.
1628:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __pos1 Position in string to insert at.
1629:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __str  The string to insert.
1630:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @return  Reference to this string.
1631:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1632:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *
1633:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  Inserts value of @a __str starting at @a __pos1.  If adding
1634:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  characters causes the length to exceed max_size(),
1635:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  length_error is thrown.  The value of the string doesn't
1636:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  change if an error is thrown.
1637:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       */
1638:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       basic_string&
1639:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       insert(size_type __pos1, const basic_string& __str)
1640:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       { return this->replace(__pos1, size_type(0),
1641:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 			     __str._M_data(), __str.size()); }
1642:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
1643:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       /**
1644:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @brief  Insert a substring.
1645:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __pos1  Position in string to insert at.
1646:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __str   The string to insert.
1647:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __pos2  Start of characters in str to insert.
1648:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __n  Number of characters to insert.
1649:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @return  Reference to this string.
1650:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1651:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @throw  std::out_of_range  If @a pos1 > size() or
1652:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @a __pos2 > @a str.size().
1653:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *
1654:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  Starting at @a pos1, insert @a __n character of @a __str
1655:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  beginning with @a __pos2.  If adding characters causes the
1656:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  length to exceed max_size(), length_error is thrown.  If @a
1657:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  __pos1 is beyond the end of this string or @a __pos2 is
1658:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  beyond the end of @a __str, out_of_range is thrown.  The
1659:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  value of the string doesn't change if an error is thrown.
1660:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       */
1661:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       basic_string&
1662:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       insert(size_type __pos1, const basic_string& __str,
1663:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	     size_type __pos2, size_type __n = npos)
1664:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       { return this->replace(__pos1, size_type(0), __str._M_data()
1665:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 			     + __str._M_check(__pos2, "basic_string::insert"),
1666:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 			     __str._M_limit(__pos2, __n)); }
1667:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
1668:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       /**
1669:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @brief  Insert a C substring.
ARM GAS  C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s 			page 36


1670:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __pos  Position in string to insert at.
1671:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __s  The C string to insert.
1672:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __n  The number of characters to insert.
1673:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @return  Reference to this string.
1674:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1675:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @throw  std::out_of_range  If @a __pos is beyond the end of this
1676:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  string.
1677:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *
1678:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  Inserts the first @a __n characters of @a __s starting at @a
1679:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  __pos.  If adding characters causes the length to exceed
1680:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  max_size(), length_error is thrown.  If @a __pos is beyond
1681:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  end(), out_of_range is thrown.  The value of the string
1682:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  doesn't change if an error is thrown.
1683:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       */
1684:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       basic_string&
1685:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       insert(size_type __pos, const _CharT* __s, size_type __n)
1686:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       { return this->replace(__pos, size_type(0), __s, __n); }
1687:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
1688:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       /**
1689:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @brief  Insert a C string.
1690:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __pos  Position in string to insert at.
1691:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __s  The C string to insert.
1692:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @return  Reference to this string.
1693:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1694:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @throw  std::out_of_range  If @a pos is beyond the end of this
1695:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  string.
1696:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *
1697:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  Inserts the first @a n characters of @a __s starting at @a __pos.  If
1698:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  adding characters causes the length to exceed max_size(),
1699:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  length_error is thrown.  If @a __pos is beyond end(), out_of_range is
1700:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  thrown.  The value of the string doesn't change if an error is
1701:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  thrown.
1702:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       */
1703:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       basic_string&
1704:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       insert(size_type __pos, const _CharT* __s)
1705:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       {
1706:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	__glibcxx_requires_string(__s);
1707:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	return this->replace(__pos, size_type(0), __s,
1708:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 			     traits_type::length(__s));
1709:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       }
1710:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
1711:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       /**
1712:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @brief  Insert multiple characters.
1713:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __pos  Index in string to insert at.
1714:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __n  Number of characters to insert
1715:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __c  The character to insert.
1716:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @return  Reference to this string.
1717:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1718:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @throw  std::out_of_range  If @a __pos is beyond the end of this
1719:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  string.
1720:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *
1721:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  Inserts @a __n copies of character @a __c starting at index
1722:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @a __pos.  If adding characters causes the length to exceed
1723:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  max_size(), length_error is thrown.  If @a __pos > length(),
1724:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  out_of_range is thrown.  The value of the string doesn't
1725:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  change if an error is thrown.
1726:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       */
ARM GAS  C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s 			page 37


1727:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       basic_string&
1728:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       insert(size_type __pos, size_type __n, _CharT __c)
1729:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       { return _M_replace_aux(_M_check(__pos, "basic_string::insert"),
1730:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 			      size_type(0), __n, __c); }
1731:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
1732:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       /**
1733:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @brief  Insert one character.
1734:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __p  Iterator referencing position in string to insert at.
1735:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __c  The character to insert.
1736:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @return  Iterator referencing newly inserted char.
1737:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1738:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *
1739:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  Inserts character @a __c at position referenced by @a __p.
1740:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  If adding character causes the length to exceed max_size(),
1741:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  length_error is thrown.  If @a __p is beyond end of string,
1742:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  out_of_range is thrown.  The value of the string doesn't
1743:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  change if an error is thrown.
1744:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       */
1745:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       iterator
1746:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       insert(__const_iterator __p, _CharT __c)
1747:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       {
1748:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(__p >= begin() && __p <= end());
1749:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	const size_type __pos = __p - begin();
1750:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	_M_replace_aux(__pos, size_type(0), size_type(1), __c);
1751:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	return iterator(_M_data() + __pos);
1752:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       }
1753:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
1754:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** #if __cplusplus >= 201703L
1755:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       /**
1756:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @brief  Insert a string_view.
1757:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __pos  Position in string to insert at.
1758:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __svt  The object convertible to string_view to insert.
1759:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @return  Reference to this string.
1760:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       */
1761:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       template<typename _Tp>
1762:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	_If_sv<_Tp, basic_string&>
1763:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	insert(size_type __pos, const _Tp& __svt)
1764:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	{
1765:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	  __sv_type __sv = __svt;
1766:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	  return this->insert(__pos, __sv.data(), __sv.size());
1767:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	}
1768:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
1769:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       /**
1770:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @brief  Insert a string_view.
1771:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __pos1  Position in string to insert at.
1772:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __svt   The object convertible to string_view to insert from.
1773:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __pos2  Start of characters in str to insert.
1774:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __n    The number of characters to insert.
1775:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @return  Reference to this string.
1776:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       */
1777:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       template<typename _Tp>
1778:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	_If_sv<_Tp, basic_string&>
1779:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	insert(size_type __pos1, const _Tp& __svt,
1780:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	       size_type __pos2, size_type __n = npos)
1781:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	{
1782:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	  __sv_type __sv = __svt;
1783:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	  return this->replace(__pos1, size_type(0),
ARM GAS  C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s 			page 38


1784:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	      __sv.data()
1785:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	      + std::__sv_check(__sv.size(), __pos2, "basic_string::insert"),
1786:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	      std::__sv_limit(__sv.size(), __pos2, __n));
1787:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	}
1788:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** #endif // C++17
1789:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
1790:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       /**
1791:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @brief  Remove characters.
1792:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __pos  Index of first character to remove (default 0).
1793:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __n  Number of characters to remove (default remainder).
1794:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @return  Reference to this string.
1795:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @throw  std::out_of_range  If @a pos is beyond the end of this
1796:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  string.
1797:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *
1798:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  Removes @a __n characters from this string starting at @a
1799:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  __pos.  The length of the string is reduced by @a __n.  If
1800:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  there are < @a __n characters to remove, the remainder of
1801:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  the string is truncated.  If @a __p is beyond end of string,
1802:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  out_of_range is thrown.  The value of the string doesn't
1803:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  change if an error is thrown.
1804:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       */
1805:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       basic_string&
1806:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       erase(size_type __pos = 0, size_type __n = npos)
1807:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       {
1808:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	_M_check(__pos, "basic_string::erase");
1809:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	if (__n == npos)
1810:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	  this->_M_set_length(__pos);
1811:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	else if (__n != 0)
1812:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	  this->_M_erase(__pos, _M_limit(__pos, __n));
1813:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	return *this;
1814:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       }
1815:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
1816:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       /**
1817:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @brief  Remove one character.
1818:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __position  Iterator referencing the character to remove.
1819:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @return  iterator referencing same location after removal.
1820:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *
1821:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  Removes the character at @a __position from this string. The value
1822:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  of the string doesn't change if an error is thrown.
1823:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       */
1824:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       iterator
1825:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       erase(__const_iterator __position)
1826:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       {
1827:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(__position >= begin()
1828:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 				 && __position < end());
1829:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	const size_type __pos = __position - begin();
1830:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	this->_M_erase(__pos, size_type(1));
1831:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	return iterator(_M_data() + __pos);
1832:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       }
1833:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
1834:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       /**
1835:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @brief  Remove a range of characters.
1836:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __first  Iterator referencing the first character to remove.
1837:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __last  Iterator referencing the end of the range.
1838:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @return  Iterator referencing location of first after removal.
1839:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *
1840:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  Removes the characters in the range [first,last) from this string.
ARM GAS  C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s 			page 39


1841:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  The value of the string doesn't change if an error is thrown.
1842:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       */
1843:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       iterator
1844:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       erase(__const_iterator __first, __const_iterator __last)
1845:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       {
1846:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(__first >= begin() && __first <= __last
1847:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 				 && __last <= end());
1848:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****         const size_type __pos = __first - begin();
1849:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	if (__last == end())
1850:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	  this->_M_set_length(__pos);
1851:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	else
1852:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	  this->_M_erase(__pos, __last - __first);
1853:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	return iterator(this->_M_data() + __pos);
1854:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       }
1855:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
1856:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** #if __cplusplus >= 201103L
1857:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       /**
1858:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @brief  Remove the last character.
1859:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *
1860:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  The string must be non-empty.
1861:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        */
1862:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       void
1863:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       pop_back() noexcept
1864:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       {
1865:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	__glibcxx_assert(!empty());
1866:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	_M_erase(size() - 1, 1);
1867:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       }
1868:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** #endif // C++11
1869:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
1870:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       /**
1871:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @brief  Replace characters with value from another string.
1872:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __pos  Index of first character to replace.
1873:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __n  Number of characters to be replaced.
1874:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __str  String to insert.
1875:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @return  Reference to this string.
1876:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @throw  std::out_of_range  If @a pos is beyond the end of this
1877:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  string.
1878:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1879:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *
1880:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  Removes the characters in the range [__pos,__pos+__n) from
1881:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  this string.  In place, the value of @a __str is inserted.
1882:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  If @a __pos is beyond end of string, out_of_range is thrown.
1883:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  If the length of the result exceeds max_size(), length_error
1884:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  is thrown.  The value of the string doesn't change if an
1885:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  error is thrown.
1886:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       */
1887:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       basic_string&
1888:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       replace(size_type __pos, size_type __n, const basic_string& __str)
1889:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       { return this->replace(__pos, __n, __str._M_data(), __str.size()); }
1890:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
1891:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       /**
1892:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @brief  Replace characters with value from another string.
1893:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __pos1  Index of first character to replace.
1894:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __n1  Number of characters to be replaced.
1895:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __str  String to insert.
1896:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __pos2  Index of first character of str to use.
1897:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __n2  Number of characters from str to use.
ARM GAS  C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s 			page 40


1898:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @return  Reference to this string.
1899:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @throw  std::out_of_range  If @a __pos1 > size() or @a __pos2 >
1900:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  __str.size().
1901:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1902:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *
1903:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  Removes the characters in the range [__pos1,__pos1 + n) from this
1904:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  string.  In place, the value of @a __str is inserted.  If @a __pos is
1905:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  beyond end of string, out_of_range is thrown.  If the length of the
1906:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  result exceeds max_size(), length_error is thrown.  The value of the
1907:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  string doesn't change if an error is thrown.
1908:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       */
1909:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       basic_string&
1910:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       replace(size_type __pos1, size_type __n1, const basic_string& __str,
1911:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	      size_type __pos2, size_type __n2 = npos)
1912:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       { return this->replace(__pos1, __n1, __str._M_data()
1913:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 			     + __str._M_check(__pos2, "basic_string::replace"),
1914:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 			     __str._M_limit(__pos2, __n2)); }
1915:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
1916:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       /**
1917:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @brief  Replace characters with value of a C substring.
1918:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __pos  Index of first character to replace.
1919:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __n1  Number of characters to be replaced.
1920:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __s  C string to insert.
1921:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __n2  Number of characters from @a s to use.
1922:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @return  Reference to this string.
1923:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @throw  std::out_of_range  If @a pos1 > size().
1924:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1925:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *
1926:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  Removes the characters in the range [__pos,__pos + __n1)
1927:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  from this string.  In place, the first @a __n2 characters of
1928:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @a __s are inserted, or all of @a __s if @a __n2 is too large.  If
1929:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @a __pos is beyond end of string, out_of_range is thrown.  If
1930:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  the length of result exceeds max_size(), length_error is
1931:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  thrown.  The value of the string doesn't change if an error
1932:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  is thrown.
1933:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       */
1934:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       basic_string&
1935:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       replace(size_type __pos, size_type __n1, const _CharT* __s,
1936:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	      size_type __n2)
1937:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       {
1938:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	__glibcxx_requires_string_len(__s, __n2);
1939:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	return _M_replace(_M_check(__pos, "basic_string::replace"),
1940:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 			  _M_limit(__pos, __n1), __s, __n2);
1941:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       }
1942:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
1943:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       /**
1944:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @brief  Replace characters with value of a C string.
1945:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __pos  Index of first character to replace.
1946:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __n1  Number of characters to be replaced.
1947:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __s  C string to insert.
1948:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @return  Reference to this string.
1949:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @throw  std::out_of_range  If @a pos > size().
1950:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1951:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *
1952:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  Removes the characters in the range [__pos,__pos + __n1)
1953:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  from this string.  In place, the characters of @a __s are
1954:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  inserted.  If @a __pos is beyond end of string, out_of_range
ARM GAS  C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s 			page 41


1955:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  is thrown.  If the length of result exceeds max_size(),
1956:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  length_error is thrown.  The value of the string doesn't
1957:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  change if an error is thrown.
1958:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       */
1959:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       basic_string&
1960:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       replace(size_type __pos, size_type __n1, const _CharT* __s)
1961:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       {
1962:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	__glibcxx_requires_string(__s);
1963:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	return this->replace(__pos, __n1, __s, traits_type::length(__s));
1964:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       }
1965:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
1966:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       /**
1967:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @brief  Replace characters with multiple characters.
1968:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __pos  Index of first character to replace.
1969:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __n1  Number of characters to be replaced.
1970:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __n2  Number of characters to insert.
1971:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __c  Character to insert.
1972:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @return  Reference to this string.
1973:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @throw  std::out_of_range  If @a __pos > size().
1974:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1975:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *
1976:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  Removes the characters in the range [pos,pos + n1) from this
1977:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  string.  In place, @a __n2 copies of @a __c are inserted.
1978:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  If @a __pos is beyond end of string, out_of_range is thrown.
1979:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  If the length of result exceeds max_size(), length_error is
1980:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  thrown.  The value of the string doesn't change if an error
1981:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  is thrown.
1982:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       */
1983:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       basic_string&
1984:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       replace(size_type __pos, size_type __n1, size_type __n2, _CharT __c)
1985:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       { return _M_replace_aux(_M_check(__pos, "basic_string::replace"),
1986:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 			      _M_limit(__pos, __n1), __n2, __c); }
1987:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
1988:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       /**
1989:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @brief  Replace range of characters with string.
1990:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
1991:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
1992:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __str  String value to insert.
1993:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @return  Reference to this string.
1994:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1995:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *
1996:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
1997:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  the value of @a __str is inserted.  If the length of result
1998:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  exceeds max_size(), length_error is thrown.  The value of
1999:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  the string doesn't change if an error is thrown.
2000:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       */
2001:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       basic_string&
2002:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       replace(__const_iterator __i1, __const_iterator __i2,
2003:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	      const basic_string& __str)
2004:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       { return this->replace(__i1, __i2, __str._M_data(), __str.size()); }
2005:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
2006:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       /**
2007:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @brief  Replace range of characters with C substring.
2008:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
2009:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
2010:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __s  C string value to insert.
2011:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __n  Number of characters from s to insert.
ARM GAS  C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s 			page 42


2012:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @return  Reference to this string.
2013:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
2014:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *
2015:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
2016:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  the first @a __n characters of @a __s are inserted.  If the
2017:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  length of result exceeds max_size(), length_error is thrown.
2018:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  The value of the string doesn't change if an error is
2019:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  thrown.
2020:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       */
2021:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       basic_string&
2022:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       replace(__const_iterator __i1, __const_iterator __i2,
2023:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	      const _CharT* __s, size_type __n)
2024:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       {
2025:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2
2026:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 				 && __i2 <= end());
2027:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	return this->replace(__i1 - begin(), __i2 - __i1, __s, __n);
2028:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       }
2029:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
2030:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       /**
2031:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @brief  Replace range of characters with C string.
2032:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
2033:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
2034:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __s  C string value to insert.
2035:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @return  Reference to this string.
2036:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
2037:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *
2038:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
2039:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  the characters of @a __s are inserted.  If the length of
2040:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  result exceeds max_size(), length_error is thrown.  The
2041:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  value of the string doesn't change if an error is thrown.
2042:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       */
2043:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       basic_string&
2044:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       replace(__const_iterator __i1, __const_iterator __i2, const _CharT* __s)
2045:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       {
2046:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	__glibcxx_requires_string(__s);
2047:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	return this->replace(__i1, __i2, __s, traits_type::length(__s));
2048:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       }
2049:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
2050:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       /**
2051:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @brief  Replace range of characters with multiple characters
2052:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
2053:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
2054:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __n  Number of characters to insert.
2055:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __c  Character to insert.
2056:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @return  Reference to this string.
2057:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
2058:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *
2059:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
2060:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @a __n copies of @a __c are inserted.  If the length of
2061:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  result exceeds max_size(), length_error is thrown.  The
2062:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  value of the string doesn't change if an error is thrown.
2063:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       */
2064:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       basic_string&
2065:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       replace(__const_iterator __i1, __const_iterator __i2, size_type __n,
2066:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	      _CharT __c)
2067:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       {
2068:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2
ARM GAS  C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s 			page 43


2069:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 				 && __i2 <= end());
2070:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	return _M_replace_aux(__i1 - begin(), __i2 - __i1, __n, __c);
2071:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       }
2072:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
2073:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       /**
2074:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @brief  Replace range of characters with range.
2075:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
2076:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
2077:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __k1  Iterator referencing start of range to insert.
2078:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __k2  Iterator referencing end of range to insert.
2079:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @return  Reference to this string.
2080:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
2081:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *
2082:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
2083:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  characters in the range [__k1,__k2) are inserted.  If the
2084:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  length of result exceeds max_size(), length_error is thrown.
2085:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  The value of the string doesn't change if an error is
2086:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  thrown.
2087:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       */
2088:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** #if __cplusplus >= 201103L
2089:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       template<class _InputIterator,
2090:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
2091:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****         basic_string&
2092:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****         replace(const_iterator __i1, const_iterator __i2,
2093:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 		_InputIterator __k1, _InputIterator __k2)
2094:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****         {
2095:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	  _GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2
2096:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 				   && __i2 <= end());
2097:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	  __glibcxx_requires_valid_range(__k1, __k2);
2098:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	  return this->_M_replace_dispatch(__i1, __i2, __k1, __k2,
2099:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 					   std::__false_type());
2100:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	}
2101:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** #else
2102:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       template<class _InputIterator>
2103:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** #ifdef _GLIBCXX_DISAMBIGUATE_REPLACE_INST
2104:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****         typename __enable_if_not_native_iterator<_InputIterator>::__type
2105:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** #else
2106:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****         basic_string&
2107:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** #endif
2108:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****         replace(iterator __i1, iterator __i2,
2109:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 		_InputIterator __k1, _InputIterator __k2)
2110:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****         {
2111:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	  _GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2
2112:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 				   && __i2 <= end());
2113:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	  __glibcxx_requires_valid_range(__k1, __k2);
2114:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
2115:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	  return _M_replace_dispatch(__i1, __i2, __k1, __k2, _Integral());
2116:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	}
2117:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** #endif
2118:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
2119:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       // Specializations for the common case of pointer and iterator:
2120:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       // useful to avoid the overhead of temporary buffering in _M_replace.
2121:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       basic_string&
2122:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       replace(__const_iterator __i1, __const_iterator __i2,
2123:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	      _CharT* __k1, _CharT* __k2)
2124:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       {
2125:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2
ARM GAS  C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s 			page 44


2126:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 				 && __i2 <= end());
2127:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	__glibcxx_requires_valid_range(__k1, __k2);
2128:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	return this->replace(__i1 - begin(), __i2 - __i1,
2129:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 			     __k1, __k2 - __k1);
2130:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       }
2131:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
2132:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       basic_string&
2133:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       replace(__const_iterator __i1, __const_iterator __i2,
2134:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	      const _CharT* __k1, const _CharT* __k2)
2135:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       {
2136:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2
2137:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 				 && __i2 <= end());
2138:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	__glibcxx_requires_valid_range(__k1, __k2);
2139:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	return this->replace(__i1 - begin(), __i2 - __i1,
2140:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 			     __k1, __k2 - __k1);
2141:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       }
2142:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
2143:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       basic_string&
2144:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       replace(__const_iterator __i1, __const_iterator __i2,
2145:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	      iterator __k1, iterator __k2)
2146:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       {
2147:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2
2148:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 				 && __i2 <= end());
2149:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	__glibcxx_requires_valid_range(__k1, __k2);
2150:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	return this->replace(__i1 - begin(), __i2 - __i1,
2151:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 			     __k1.base(), __k2 - __k1);
2152:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       }
2153:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
2154:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       basic_string&
2155:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       replace(__const_iterator __i1, __const_iterator __i2,
2156:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	      const_iterator __k1, const_iterator __k2)
2157:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       {
2158:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2
2159:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 				 && __i2 <= end());
2160:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	__glibcxx_requires_valid_range(__k1, __k2);
2161:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	return this->replace(__i1 - begin(), __i2 - __i1,
2162:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 			     __k1.base(), __k2 - __k1);
2163:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       }
2164:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
2165:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** #if __cplusplus >= 201103L
2166:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       /**
2167:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @brief  Replace range of characters with initializer_list.
2168:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
2169:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
2170:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __l  The initializer_list of characters to insert.
2171:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @return  Reference to this string.
2172:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
2173:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *
2174:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
2175:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  characters in the range [__k1,__k2) are inserted.  If the
2176:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  length of result exceeds max_size(), length_error is thrown.
2177:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  The value of the string doesn't change if an error is
2178:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  thrown.
2179:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       */
2180:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       basic_string& replace(const_iterator __i1, const_iterator __i2,
2181:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 			    initializer_list<_CharT> __l)
2182:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       { return this->replace(__i1, __i2, __l.begin(), __l.size()); }
ARM GAS  C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s 			page 45


2183:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** #endif // C++11
2184:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
2185:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** #if __cplusplus >= 201703L
2186:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       /**
2187:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @brief  Replace range of characters with string_view.
2188:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __pos  The position to replace at.
2189:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __n    The number of characters to replace.
2190:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __svt  The object convertible to string_view to insert.
2191:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @return  Reference to this string.
2192:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       */
2193:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       template<typename _Tp>
2194:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	_If_sv<_Tp, basic_string&>
2195:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	replace(size_type __pos, size_type __n, const _Tp& __svt)
2196:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	{
2197:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	  __sv_type __sv = __svt;
2198:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	  return this->replace(__pos, __n, __sv.data(), __sv.size());
2199:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	}
2200:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
2201:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       /**
2202:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @brief  Replace range of characters with string_view.
2203:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __pos1  The position to replace at.
2204:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __n1    The number of characters to replace.
2205:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __svt   The object convertible to string_view to insert from.
2206:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __pos2  The position in the string_view to insert from.
2207:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __n2    The number of characters to insert.
2208:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @return  Reference to this string.
2209:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       */
2210:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       template<typename _Tp>
2211:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	_If_sv<_Tp, basic_string&>
2212:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	replace(size_type __pos1, size_type __n1, const _Tp& __svt,
2213:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 		size_type __pos2, size_type __n2 = npos)
2214:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	{
2215:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	  __sv_type __sv = __svt;
2216:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	  return this->replace(__pos1, __n1,
2217:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	      __sv.data()
2218:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	      + std::__sv_check(__sv.size(), __pos2, "basic_string::replace"),
2219:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	      std::__sv_limit(__sv.size(), __pos2, __n2));
2220:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	}
2221:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
2222:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       /**
2223:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @brief  Replace range of characters with string_view.
2224:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __i1    An iterator referencing the start position
2225:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****           to replace at.
2226:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __i2    An iterator referencing the end position
2227:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****           for the replace.
2228:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __svt   The object convertible to string_view to insert from.
2229:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @return  Reference to this string.
2230:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       */
2231:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       template<typename _Tp>
2232:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	_If_sv<_Tp, basic_string&>
2233:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	replace(const_iterator __i1, const_iterator __i2, const _Tp& __svt)
2234:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	{
2235:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	  __sv_type __sv = __svt;
2236:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	  return this->replace(__i1 - begin(), __i2 - __i1, __sv);
2237:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	}
2238:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** #endif // C++17
2239:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
ARM GAS  C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s 			page 46


2240:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****     private:
2241:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       template<class _Integer>
2242:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	basic_string&
2243:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	_M_replace_dispatch(const_iterator __i1, const_iterator __i2,
2244:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 			    _Integer __n, _Integer __val, __true_type)
2245:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****         { return _M_replace_aux(__i1 - begin(), __i2 - __i1, __n, __val); }
2246:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
2247:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       template<class _InputIterator>
2248:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	basic_string&
2249:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 	_M_replace_dispatch(const_iterator __i1, const_iterator __i2,
2250:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 			    _InputIterator __k1, _InputIterator __k2,
2251:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 			    __false_type);
2252:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
2253:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       basic_string&
2254:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,
2255:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 		     _CharT __c);
2256:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
2257:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       basic_string&
2258:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       _M_replace(size_type __pos, size_type __len1, const _CharT* __s,
2259:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 		 const size_type __len2);
2260:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
2261:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       basic_string&
2262:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       _M_append(const _CharT* __s, size_type __n);
2263:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
2264:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****     public:
2265:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
2266:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       /**
2267:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @brief  Copy substring into C string.
2268:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __s  C string to copy value into.
2269:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __n  Number of characters to copy.
2270:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __pos  Index of first character to copy.
2271:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @return  Number of characters actually copied
2272:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @throw  std::out_of_range  If __pos > size().
2273:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *
2274:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  Copies up to @a __n characters starting at @a __pos into the
2275:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  C string @a __s.  If @a __pos is %greater than size(),
2276:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  out_of_range is thrown.
2277:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       */
2278:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       size_type
2279:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       copy(_CharT* __s, size_type __n, size_type __pos = 0) const;
2280:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
2281:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       /**
2282:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @brief  Swap contents with another string.
2283:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @param __s  String to swap with.
2284:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *
2285:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  Exchanges the contents of this string with that of @a __s in constant
2286:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  time.
2287:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       */
2288:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       void
2289:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       swap(basic_string& __s) _GLIBCXX_NOEXCEPT;
2290:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
2291:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       // String operations:
2292:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       /**
2293:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  @brief  Return const pointer to null-terminated contents.
2294:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *
2295:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  This is a handle to internal data.  Do not modify or dire things may
2296:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****        *  happen.
ARM GAS  C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s 			page 47


2297:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       */
2298:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       const _CharT*
2299:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       c_str() const _GLIBCXX_NOEXCEPT
 190              		.loc 3 2299 7 view .LVU27
 191              	.LBB19:
 192              	.LBI19:
 186:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       { return _M_dataplus._M_p; }
 193              		.loc 3 186 7 view .LVU28
 194              	.LBB20:
 187:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
 195              		.loc 3 187 28 is_stmt 0 view .LVU29
 196 0004 0968     		ldr	r1, [r1]
 197              	.LVL17:
 187:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
 198              		.loc 3 187 28 view .LVU30
 199              	.LBE20:
 200              	.LBE19:
 201              	.LBE18:
 202              	.LBB21:
 203              	.LBI21:
 907:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h ****       { return _M_string_length; }
 204              		.loc 3 907 7 is_stmt 1 view .LVU31
 205              	.LBB22:
 908:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
 206              		.loc 3 908 16 is_stmt 0 view .LVU32
 207 0006 5A68     		ldr	r2, [r3, #4]
 208              	.LVL18:
 908:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\basic_string.h **** 
 209              		.loc 3 908 16 view .LVU33
 210              	.LBE22:
 211              	.LBE21:
 212              	.LBB23:
 213              	.LBI23:
  61:Core/Inc/Print.h ****       return write((const uint8_t *)buffer, size);
 214              		.loc 1 61 12 is_stmt 1 view .LVU34
 215              	.LBB24:
  62:Core/Inc/Print.h ****     }
 216              		.loc 1 62 7 view .LVU35
  62:Core/Inc/Print.h ****     }
 217              		.loc 1 62 49 is_stmt 0 view .LVU36
 218 0008 0368     		ldr	r3, [r0]
 219              	.LVL19:
  62:Core/Inc/Print.h ****     }
 220              		.loc 1 62 49 view .LVU37
 221 000a 5B68     		ldr	r3, [r3, #4]
  62:Core/Inc/Print.h ****     }
 222              		.loc 1 62 19 view .LVU38
 223 000c 00F003F8 		bl	.L9
 224              	.LVL20:
  62:Core/Inc/Print.h ****     }
 225              		.loc 1 62 19 view .LVU39
 226              	.LBE24:
 227              	.LBE23:
  49:Core/Src/Print.cpp **** }
 228              		.loc 2 49 1 view .LVU40
 229              		@ sp needed
 230 0010 10BC     		pop	{r4}
ARM GAS  C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s 			page 48


 231 0012 02BC     		pop	{r1}
 232 0014 0847     		bx	r1
 233              	.L9:
 234 0016 1847     		bx	r3
 235              		.cfi_endproc
 236              	.LFE1252:
 237              		.fnend
 239              		.section	.text._ZN5Print5printEPKc,"ax",%progbits
 240              		.align	1
 241              		.global	_ZN5Print5printEPKc
 242              		.syntax unified
 243              		.code	16
 244              		.thumb_func
 245              		.fpu softvfp
 247              	_ZN5Print5printEPKc:
 248              		.fnstart
 249              	.LVL21:
 250              	.LFB1253:
  50:Core/Src/Print.cpp **** 
  51:Core/Src/Print.cpp **** size_t Print::print(const char str[])
  52:Core/Src/Print.cpp **** {
 251              		.loc 2 52 1 is_stmt 1 view -0
 252              		.cfi_startproc
 253              		@ Function supports interworking.
 254              		@ args = 0, pretend = 0, frame = 0
 255              		@ frame_needed = 0, uses_anonymous_args = 0
 256              		.loc 2 52 1 is_stmt 0 view .LVU42
 257 0000 70B5     		push	{r4, r5, r6, lr}
 258              		.save {r4, r5, r6, lr}
 259              	.LCFI2:
 260              		.cfi_def_cfa_offset 16
 261              		.cfi_offset 4, -16
 262              		.cfi_offset 5, -12
 263              		.cfi_offset 6, -8
 264              		.cfi_offset 14, -4
 265 0002 0500     		movs	r5, r0
 266 0004 0C1E     		subs	r4, r1, #0
  53:Core/Src/Print.cpp ****   return write(str);
 267              		.loc 2 53 3 is_stmt 1 view .LVU43
 268              	.LVL22:
 269              	.LBB27:
 270              	.LBI27:
  56:Core/Inc/Print.h ****       if (str == NULL) return 0;
 271              		.loc 1 56 12 view .LVU44
 272              	.LBB28:
  57:Core/Inc/Print.h ****       return write((const uint8_t *)str, strlen(str));
 273              		.loc 1 57 7 view .LVU45
 274 0006 0CD0     		beq	.L12
  58:Core/Inc/Print.h ****     }
 275              		.loc 1 58 7 view .LVU46
  58:Core/Inc/Print.h ****     }
 276              		.loc 1 58 53 is_stmt 0 view .LVU47
 277 0008 0368     		ldr	r3, [r0]
 278 000a 5E68     		ldr	r6, [r3, #4]
  58:Core/Inc/Print.h ****     }
 279              		.loc 1 58 19 view .LVU48
 280 000c 0800     		movs	r0, r1
ARM GAS  C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s 			page 49


 281              	.LVL23:
  58:Core/Inc/Print.h ****     }
 282              		.loc 1 58 19 view .LVU49
 283 000e FFF7FEFF 		bl	strlen
 284              	.LVL24:
  58:Core/Inc/Print.h ****     }
 285              		.loc 1 58 19 view .LVU50
 286 0012 0200     		movs	r2, r0
 287 0014 2100     		movs	r1, r4
 288 0016 2800     		movs	r0, r5
 289 0018 00F005F8 		bl	.L13
 290              	.LVL25:
 291              	.L10:
  58:Core/Inc/Print.h ****     }
 292              		.loc 1 58 19 view .LVU51
 293              	.LBE28:
 294              	.LBE27:
  54:Core/Src/Print.cpp **** }
 295              		.loc 2 54 1 view .LVU52
 296              		@ sp needed
 297              	.LVL26:
 298              	.LVL27:
 299              		.loc 2 54 1 view .LVU53
 300 001c 70BC     		pop	{r4, r5, r6}
 301 001e 02BC     		pop	{r1}
 302 0020 0847     		bx	r1
 303              	.LVL28:
 304              	.L12:
 305              	.LBB30:
 306              	.LBB29:
  57:Core/Inc/Print.h ****       return write((const uint8_t *)str, strlen(str));
 307              		.loc 1 57 31 view .LVU54
 308 0022 0020     		movs	r0, #0
 309              	.LVL29:
  57:Core/Inc/Print.h ****       return write((const uint8_t *)str, strlen(str));
 310              		.loc 1 57 31 view .LVU55
 311              	.LBE29:
 312              	.LBE30:
  53:Core/Src/Print.cpp **** }
 313              		.loc 2 53 19 view .LVU56
 314 0024 FAE7     		b	.L10
 315              	.L13:
 316 0026 3047     		bx	r6
 317              		.cfi_endproc
 318              	.LFE1253:
 319              		.fnend
 321              		.section	.text._ZN5Print5printEc,"ax",%progbits
 322              		.align	1
 323              		.global	_ZN5Print5printEc
 324              		.syntax unified
 325              		.code	16
 326              		.thumb_func
 327              		.fpu softvfp
 329              	_ZN5Print5printEc:
 330              		.fnstart
 331              	.LVL30:
 332              	.LFB1254:
ARM GAS  C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s 			page 50


  55:Core/Src/Print.cpp **** 
  56:Core/Src/Print.cpp **** size_t Print::print(char c)
  57:Core/Src/Print.cpp **** {
 333              		.loc 2 57 1 is_stmt 1 view -0
 334              		.cfi_startproc
 335              		@ Function supports interworking.
 336              		@ args = 0, pretend = 0, frame = 0
 337              		@ frame_needed = 0, uses_anonymous_args = 0
 338              		.loc 2 57 1 is_stmt 0 view .LVU58
 339 0000 10B5     		push	{r4, lr}
 340              		.save {r4, lr}
 341              	.LCFI3:
 342              		.cfi_def_cfa_offset 8
 343              		.cfi_offset 4, -8
 344              		.cfi_offset 14, -4
  58:Core/Src/Print.cpp ****   return write(c);
 345              		.loc 2 58 3 is_stmt 1 view .LVU59
 346              		.loc 2 58 17 is_stmt 0 view .LVU60
 347 0002 0368     		ldr	r3, [r0]
 348 0004 1B68     		ldr	r3, [r3]
 349              		.loc 2 58 15 view .LVU61
 350 0006 00F003F8 		bl	.L15
 351              	.LVL31:
  59:Core/Src/Print.cpp **** }
 352              		.loc 2 59 1 view .LVU62
 353              		@ sp needed
 354 000a 10BC     		pop	{r4}
 355 000c 02BC     		pop	{r1}
 356 000e 0847     		bx	r1
 357              	.L15:
 358 0010 1847     		bx	r3
 359              		.cfi_endproc
 360              	.LFE1254:
 361              		.fnend
 363              		.section	.rodata._ZN5Print7printlnEv.str1.4,"aMS",%progbits,1
 364              		.align	2
 365              	.LC0:
 366 0000 0D0A00   		.ascii	"\015\012\000"
 367              		.section	.text._ZN5Print7printlnEv,"ax",%progbits
 368              		.align	1
 369              		.global	_ZN5Print7printlnEv
 370              		.syntax unified
 371              		.code	16
 372              		.thumb_func
 373              		.fpu softvfp
 375              	_ZN5Print7printlnEv:
 376              		.fnstart
 377              	.LVL32:
 378              	.LFB1261:
  60:Core/Src/Print.cpp **** 
  61:Core/Src/Print.cpp **** size_t Print::print(unsigned char b, int base)
  62:Core/Src/Print.cpp **** {
  63:Core/Src/Print.cpp ****   return print((unsigned long) b, base);
  64:Core/Src/Print.cpp **** }
  65:Core/Src/Print.cpp **** 
  66:Core/Src/Print.cpp **** size_t Print::print(int n, int base)
  67:Core/Src/Print.cpp **** {
ARM GAS  C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s 			page 51


  68:Core/Src/Print.cpp ****   return print((long) n, base);
  69:Core/Src/Print.cpp **** }
  70:Core/Src/Print.cpp **** 
  71:Core/Src/Print.cpp **** size_t Print::print(unsigned int n, int base)
  72:Core/Src/Print.cpp **** {
  73:Core/Src/Print.cpp ****   return print((unsigned long) n, base);
  74:Core/Src/Print.cpp **** }
  75:Core/Src/Print.cpp **** 
  76:Core/Src/Print.cpp **** size_t Print::print(long n, int base)
  77:Core/Src/Print.cpp **** {
  78:Core/Src/Print.cpp ****   if (base == 0) {
  79:Core/Src/Print.cpp ****     return write(n);
  80:Core/Src/Print.cpp ****   } else if (base == 10) {
  81:Core/Src/Print.cpp ****     if (n < 0) {
  82:Core/Src/Print.cpp ****       int t = print('-');
  83:Core/Src/Print.cpp ****       n = -n;
  84:Core/Src/Print.cpp ****       return printNumber(n, 10) + t;
  85:Core/Src/Print.cpp ****     }
  86:Core/Src/Print.cpp ****     return printNumber(n, 10);
  87:Core/Src/Print.cpp ****   } else {
  88:Core/Src/Print.cpp ****     return printNumber(n, base);
  89:Core/Src/Print.cpp ****   }
  90:Core/Src/Print.cpp **** }
  91:Core/Src/Print.cpp **** 
  92:Core/Src/Print.cpp **** size_t Print::print(unsigned long n, int base)
  93:Core/Src/Print.cpp **** {
  94:Core/Src/Print.cpp ****   if (base == 0) return write(n);
  95:Core/Src/Print.cpp ****   else return printNumber(n, base);
  96:Core/Src/Print.cpp **** }
  97:Core/Src/Print.cpp **** 
  98:Core/Src/Print.cpp **** size_t Print::print(double n, int digits)
  99:Core/Src/Print.cpp **** {
 100:Core/Src/Print.cpp ****   return printFloat(n, digits);
 101:Core/Src/Print.cpp **** }
 102:Core/Src/Print.cpp **** 
 103:Core/Src/Print.cpp **** size_t Print::println(void)
 104:Core/Src/Print.cpp **** {
 379              		.loc 2 104 1 is_stmt 1 view -0
 380              		.cfi_startproc
 381              		@ Function supports interworking.
 382              		@ args = 0, pretend = 0, frame = 0
 383              		@ frame_needed = 0, uses_anonymous_args = 0
 384              		.loc 2 104 1 is_stmt 0 view .LVU64
 385 0000 10B5     		push	{r4, lr}
 386              		.save {r4, lr}
 387              	.LCFI4:
 388              		.cfi_def_cfa_offset 8
 389              		.cfi_offset 4, -8
 390              		.cfi_offset 14, -4
 105:Core/Src/Print.cpp ****   return write("\r\n");
 391              		.loc 2 105 3 is_stmt 1 view .LVU65
 392              	.LVL33:
 393              	.LBB33:
 394              	.LBI33:
  56:Core/Inc/Print.h ****       if (str == NULL) return 0;
 395              		.loc 1 56 12 view .LVU66
 396              	.LBB34:
ARM GAS  C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s 			page 52


  57:Core/Inc/Print.h ****       return write((const uint8_t *)str, strlen(str));
 397              		.loc 1 57 7 view .LVU67
  58:Core/Inc/Print.h ****     }
 398              		.loc 1 58 7 view .LVU68
  58:Core/Inc/Print.h ****     }
 399              		.loc 1 58 53 is_stmt 0 view .LVU69
 400 0002 0368     		ldr	r3, [r0]
 401 0004 5B68     		ldr	r3, [r3, #4]
  58:Core/Inc/Print.h ****     }
 402              		.loc 1 58 19 view .LVU70
 403 0006 0222     		movs	r2, #2
 404 0008 0249     		ldr	r1, .L17
 405 000a 00F005F8 		bl	.L19
 406              	.LVL34:
  58:Core/Inc/Print.h ****     }
 407              		.loc 1 58 19 view .LVU71
 408              	.LBE34:
 409              	.LBE33:
 106:Core/Src/Print.cpp **** }
 410              		.loc 2 106 1 view .LVU72
 411              		@ sp needed
 412 000e 10BC     		pop	{r4}
 413 0010 02BC     		pop	{r1}
 414 0012 0847     		bx	r1
 415              	.L18:
 416              		.align	2
 417              	.L17:
 418 0014 00000000 		.word	.LC0
 419              	.L19:
 420 0018 1847     		bx	r3
 421              		.cfi_endproc
 422              	.LFE1261:
 423              		.fnend
 425 001a C046     		.section	.text._ZN5Print7printlnERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE,"ax",%prog
 426              		.align	1
 427              		.global	_ZN5Print7printlnERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
 428              		.syntax unified
 429              		.code	16
 430              		.thumb_func
 431              		.fpu softvfp
 433              	_ZN5Print7printlnERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE:
 434              		.fnstart
 435              	.LVL35:
 436              	.LFB1262:
 107:Core/Src/Print.cpp **** 
 108:Core/Src/Print.cpp **** size_t Print::println(const String &s)
 109:Core/Src/Print.cpp **** {
 437              		.loc 2 109 1 is_stmt 1 view -0
 438              		.cfi_startproc
 439              		@ Function supports interworking.
 440              		@ args = 0, pretend = 0, frame = 0
 441              		@ frame_needed = 0, uses_anonymous_args = 0
 442              		.loc 2 109 1 is_stmt 0 view .LVU74
 443 0000 70B5     		push	{r4, r5, r6, lr}
 444              		.save {r4, r5, r6, lr}
 445              	.LCFI5:
 446              		.cfi_def_cfa_offset 16
ARM GAS  C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s 			page 53


 447              		.cfi_offset 4, -16
 448              		.cfi_offset 5, -12
 449              		.cfi_offset 6, -8
 450              		.cfi_offset 14, -4
 451 0002 0500     		movs	r5, r0
 110:Core/Src/Print.cpp ****   size_t n = print(s);
 452              		.loc 2 110 3 is_stmt 1 view .LVU75
 453              		.loc 2 110 19 is_stmt 0 view .LVU76
 454 0004 FFF7FEFF 		bl	_ZN5Print5printERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
 455              	.LVL36:
 456              		.loc 2 110 19 view .LVU77
 457 0008 0400     		movs	r4, r0
 458              	.LVL37:
 111:Core/Src/Print.cpp ****   n += println();
 459              		.loc 2 111 3 is_stmt 1 view .LVU78
 460              		.loc 2 111 15 is_stmt 0 view .LVU79
 461 000a 2800     		movs	r0, r5
 462              	.LVL38:
 463              		.loc 2 111 15 view .LVU80
 464 000c FFF7FEFF 		bl	_ZN5Print7printlnEv
 465              	.LVL39:
 466              		.loc 2 111 5 view .LVU81
 467 0010 2018     		adds	r0, r4, r0
 468              	.LVL40:
 112:Core/Src/Print.cpp ****   return n;
 469              		.loc 2 112 3 is_stmt 1 view .LVU82
 113:Core/Src/Print.cpp **** }
 470              		.loc 2 113 1 is_stmt 0 view .LVU83
 471              		@ sp needed
 472              	.LVL41:
 473              		.loc 2 113 1 view .LVU84
 474 0012 70BC     		pop	{r4, r5, r6}
 475 0014 02BC     		pop	{r1}
 476 0016 0847     		bx	r1
 477              		.cfi_endproc
 478              	.LFE1262:
 479              		.fnend
 481              		.section	.text._ZN5Print7printlnEPKc,"ax",%progbits
 482              		.align	1
 483              		.global	_ZN5Print7printlnEPKc
 484              		.syntax unified
 485              		.code	16
 486              		.thumb_func
 487              		.fpu softvfp
 489              	_ZN5Print7printlnEPKc:
 490              		.fnstart
 491              	.LVL42:
 492              	.LFB1263:
 114:Core/Src/Print.cpp **** 
 115:Core/Src/Print.cpp **** size_t Print::println(const char c[])
 116:Core/Src/Print.cpp **** {
 493              		.loc 2 116 1 is_stmt 1 view -0
 494              		.cfi_startproc
 495              		@ Function supports interworking.
 496              		@ args = 0, pretend = 0, frame = 0
 497              		@ frame_needed = 0, uses_anonymous_args = 0
 498              		.loc 2 116 1 is_stmt 0 view .LVU86
ARM GAS  C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s 			page 54


 499 0000 70B5     		push	{r4, r5, r6, lr}
 500              		.save {r4, r5, r6, lr}
 501              	.LCFI6:
 502              		.cfi_def_cfa_offset 16
 503              		.cfi_offset 4, -16
 504              		.cfi_offset 5, -12
 505              		.cfi_offset 6, -8
 506              		.cfi_offset 14, -4
 507 0002 0500     		movs	r5, r0
 117:Core/Src/Print.cpp ****   size_t n = print(c);
 508              		.loc 2 117 3 is_stmt 1 view .LVU87
 509              		.loc 2 117 19 is_stmt 0 view .LVU88
 510 0004 FFF7FEFF 		bl	_ZN5Print5printEPKc
 511              	.LVL43:
 512              		.loc 2 117 19 view .LVU89
 513 0008 0400     		movs	r4, r0
 514              	.LVL44:
 118:Core/Src/Print.cpp ****   n += println();
 515              		.loc 2 118 3 is_stmt 1 view .LVU90
 516              		.loc 2 118 15 is_stmt 0 view .LVU91
 517 000a 2800     		movs	r0, r5
 518              	.LVL45:
 519              		.loc 2 118 15 view .LVU92
 520 000c FFF7FEFF 		bl	_ZN5Print7printlnEv
 521              	.LVL46:
 522              		.loc 2 118 5 view .LVU93
 523 0010 2018     		adds	r0, r4, r0
 524              	.LVL47:
 119:Core/Src/Print.cpp ****   return n;
 525              		.loc 2 119 3 is_stmt 1 view .LVU94
 120:Core/Src/Print.cpp **** }
 526              		.loc 2 120 1 is_stmt 0 view .LVU95
 527              		@ sp needed
 528              	.LVL48:
 529              		.loc 2 120 1 view .LVU96
 530 0012 70BC     		pop	{r4, r5, r6}
 531 0014 02BC     		pop	{r1}
 532 0016 0847     		bx	r1
 533              		.cfi_endproc
 534              	.LFE1263:
 535              		.fnend
 537              		.section	.text._ZN5Print7printlnEc,"ax",%progbits
 538              		.align	1
 539              		.global	_ZN5Print7printlnEc
 540              		.syntax unified
 541              		.code	16
 542              		.thumb_func
 543              		.fpu softvfp
 545              	_ZN5Print7printlnEc:
 546              		.fnstart
 547              	.LVL49:
 548              	.LFB1264:
 121:Core/Src/Print.cpp **** 
 122:Core/Src/Print.cpp **** size_t Print::println(char c)
 123:Core/Src/Print.cpp **** {
 549              		.loc 2 123 1 is_stmt 1 view -0
 550              		.cfi_startproc
ARM GAS  C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s 			page 55


 551              		@ Function supports interworking.
 552              		@ args = 0, pretend = 0, frame = 0
 553              		@ frame_needed = 0, uses_anonymous_args = 0
 554              		.loc 2 123 1 is_stmt 0 view .LVU98
 555 0000 70B5     		push	{r4, r5, r6, lr}
 556              		.save {r4, r5, r6, lr}
 557              	.LCFI7:
 558              		.cfi_def_cfa_offset 16
 559              		.cfi_offset 4, -16
 560              		.cfi_offset 5, -12
 561              		.cfi_offset 6, -8
 562              		.cfi_offset 14, -4
 563 0002 0500     		movs	r5, r0
 124:Core/Src/Print.cpp ****   size_t n = print(c);
 564              		.loc 2 124 3 is_stmt 1 view .LVU99
 565              		.loc 2 124 19 is_stmt 0 view .LVU100
 566 0004 FFF7FEFF 		bl	_ZN5Print5printEc
 567              	.LVL50:
 568              		.loc 2 124 19 view .LVU101
 569 0008 0400     		movs	r4, r0
 570              	.LVL51:
 125:Core/Src/Print.cpp ****   n += println();
 571              		.loc 2 125 3 is_stmt 1 view .LVU102
 572              		.loc 2 125 15 is_stmt 0 view .LVU103
 573 000a 2800     		movs	r0, r5
 574              	.LVL52:
 575              		.loc 2 125 15 view .LVU104
 576 000c FFF7FEFF 		bl	_ZN5Print7printlnEv
 577              	.LVL53:
 578              		.loc 2 125 5 view .LVU105
 579 0010 2018     		adds	r0, r4, r0
 580              	.LVL54:
 126:Core/Src/Print.cpp ****   return n;
 581              		.loc 2 126 3 is_stmt 1 view .LVU106
 127:Core/Src/Print.cpp **** }
 582              		.loc 2 127 1 is_stmt 0 view .LVU107
 583              		@ sp needed
 584              	.LVL55:
 585              		.loc 2 127 1 view .LVU108
 586 0012 70BC     		pop	{r4, r5, r6}
 587 0014 02BC     		pop	{r1}
 588 0016 0847     		bx	r1
 589              		.cfi_endproc
 590              	.LFE1264:
 591              		.fnend
 593              		.global	__aeabi_uidivmod
 594              		.global	__aeabi_uidiv
 595              		.section	.text._ZN5Print11printNumberEmh,"ax",%progbits
 596              		.align	1
 597              		.global	_ZN5Print11printNumberEmh
 598              		.syntax unified
 599              		.code	16
 600              		.thumb_func
 601              		.fpu softvfp
 603              	_ZN5Print11printNumberEmh:
 604              		.fnstart
 605              	.LVL56:
ARM GAS  C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s 			page 56


 606              	.LFB1271:
 128:Core/Src/Print.cpp **** 
 129:Core/Src/Print.cpp **** size_t Print::println(unsigned char b, int base)
 130:Core/Src/Print.cpp **** {
 131:Core/Src/Print.cpp ****   size_t n = print(b, base);
 132:Core/Src/Print.cpp ****   n += println();
 133:Core/Src/Print.cpp ****   return n;
 134:Core/Src/Print.cpp **** }
 135:Core/Src/Print.cpp **** 
 136:Core/Src/Print.cpp **** size_t Print::println(int num, int base)
 137:Core/Src/Print.cpp **** {
 138:Core/Src/Print.cpp ****   size_t n = print(num, base);
 139:Core/Src/Print.cpp ****   n += println();
 140:Core/Src/Print.cpp ****   return n;
 141:Core/Src/Print.cpp **** }
 142:Core/Src/Print.cpp **** 
 143:Core/Src/Print.cpp **** size_t Print::println(unsigned int num, int base)
 144:Core/Src/Print.cpp **** {
 145:Core/Src/Print.cpp ****   size_t n = print(num, base);
 146:Core/Src/Print.cpp ****   n += println();
 147:Core/Src/Print.cpp ****   return n;
 148:Core/Src/Print.cpp **** }
 149:Core/Src/Print.cpp **** 
 150:Core/Src/Print.cpp **** size_t Print::println(long num, int base)
 151:Core/Src/Print.cpp **** {
 152:Core/Src/Print.cpp ****   size_t n = print(num, base);
 153:Core/Src/Print.cpp ****   n += println();
 154:Core/Src/Print.cpp ****   return n;
 155:Core/Src/Print.cpp **** }
 156:Core/Src/Print.cpp **** 
 157:Core/Src/Print.cpp **** size_t Print::println(unsigned long num, int base)
 158:Core/Src/Print.cpp **** {
 159:Core/Src/Print.cpp ****   size_t n = print(num, base);
 160:Core/Src/Print.cpp ****   n += println();
 161:Core/Src/Print.cpp ****   return n;
 162:Core/Src/Print.cpp **** }
 163:Core/Src/Print.cpp **** 
 164:Core/Src/Print.cpp **** size_t Print::println(double num, int digits)
 165:Core/Src/Print.cpp **** {
 166:Core/Src/Print.cpp ****   size_t n = print(num, digits);
 167:Core/Src/Print.cpp ****   n += println();
 168:Core/Src/Print.cpp ****   return n;
 169:Core/Src/Print.cpp **** }
 170:Core/Src/Print.cpp **** // Private Methods /////////////////////////////////////////////////////////////
 171:Core/Src/Print.cpp **** 
 172:Core/Src/Print.cpp **** size_t Print::printNumber(unsigned long n, uint8_t base)
 173:Core/Src/Print.cpp **** {
 607              		.loc 2 173 1 is_stmt 1 view -0
 608              		.cfi_startproc
 609              		@ Function supports interworking.
 610              		@ args = 0, pretend = 0, frame = 40
 611              		@ frame_needed = 0, uses_anonymous_args = 0
 612              		.loc 2 173 1 is_stmt 0 view .LVU110
 613 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 614              		.save {r4, r5, r6, r7, lr}
 615              	.LCFI8:
 616              		.cfi_def_cfa_offset 20
ARM GAS  C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s 			page 57


 617              		.cfi_offset 4, -20
 618              		.cfi_offset 5, -16
 619              		.cfi_offset 6, -12
 620              		.cfi_offset 7, -8
 621              		.cfi_offset 14, -4
 622 0002 D646     		mov	lr, r10
 623 0004 4F46     		mov	r7, r9
 624 0006 4646     		mov	r6, r8
 625 0008 C0B5     		push	{r6, r7, lr}
 626              		.save {r8, r9, r10}
 627              	.LCFI9:
 628              		.cfi_def_cfa_offset 32
 629              		.cfi_offset 8, -32
 630              		.cfi_offset 9, -28
 631              		.cfi_offset 10, -24
 632              		.pad #40
 633 000a 8AB0     		sub	sp, sp, #40
 634              	.LCFI10:
 635              		.cfi_def_cfa_offset 72
 636 000c 8146     		mov	r9, r0
 637 000e 0D00     		movs	r5, r1
 638 0010 1600     		movs	r6, r2
 174:Core/Src/Print.cpp ****   char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
 639              		.loc 2 174 3 is_stmt 1 view .LVU111
 175:Core/Src/Print.cpp ****   char *str = &buf[sizeof(buf) - 1];
 640              		.loc 2 175 3 view .LVU112
 641              	.LVL57:
 176:Core/Src/Print.cpp **** 
 177:Core/Src/Print.cpp ****   *str = '\0';
 642              		.loc 2 177 3 view .LVU113
 643              		.loc 2 177 8 is_stmt 0 view .LVU114
 644 0012 01AA     		add	r2, sp, #4
 645              	.LVL58:
 646              		.loc 2 177 8 view .LVU115
 647 0014 2023     		movs	r3, #32
 648 0016 0021     		movs	r1, #0
 649              	.LVL59:
 650              		.loc 2 177 8 view .LVU116
 651 0018 D154     		strb	r1, [r2, r3]
 178:Core/Src/Print.cpp **** 
 179:Core/Src/Print.cpp ****   // prevent crash if called with base == 1
 180:Core/Src/Print.cpp ****   if (base < 2) base = 10;
 652              		.loc 2 180 3 is_stmt 1 view .LVU117
 653 001a 012E     		cmp	r6, #1
 654 001c 01D9     		bls	.L31
 655              	.L24:
 656              	.LVL60:
 657              		.loc 2 180 22 is_stmt 0 view .LVU118
 658 001e 09AF     		add	r7, sp, #36
 659              	.LVL61:
 660              		.loc 2 180 22 view .LVU119
 661 0020 08E0     		b	.L27
 662              	.LVL62:
 663              	.L31:
 664              		.loc 2 180 22 view .LVU120
 665 0022 0A26     		movs	r6, #10
 666 0024 FBE7     		b	.L24
ARM GAS  C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s 			page 58


 667              	.LVL63:
 668              	.L33:
 669              	.LBB38:
 181:Core/Src/Print.cpp **** 
 182:Core/Src/Print.cpp ****   do {
 183:Core/Src/Print.cpp ****     char c = n % base;
 184:Core/Src/Print.cpp ****     n /= base;
 185:Core/Src/Print.cpp **** 
 186:Core/Src/Print.cpp ****     *--str = c < 10 ? c + '0' : c + 'A' - 10;
 670              		.loc 2 186 12 discriminator 1 view .LVU121
 671 0026 3034     		adds	r4, r4, #48
 672              	.LVL64:
 673              		.loc 2 186 12 discriminator 1 view .LVU122
 674 0028 2406     		lsls	r4, r4, #24
 675              	.LVL65:
 676              		.loc 2 186 12 discriminator 1 view .LVU123
 677 002a 240E     		lsrs	r4, r4, #24
 678              	.L26:
 679              		.loc 2 186 12 discriminator 4 view .LVU124
 680 002c 013F     		subs	r7, r7, #1
 681              	.LVL66:
 682              		.loc 2 186 12 discriminator 4 view .LVU125
 683 002e 3C70     		strb	r4, [r7]
 684              	.LBE38:
 187:Core/Src/Print.cpp ****   } while(n);
 685              		.loc 2 187 11 is_stmt 1 discriminator 4 view .LVU126
 686 0030 D045     		cmp	r8, r10
 687 0032 12D8     		bhi	.L32
 688              	.LVL67:
 689              	.L27:
 182:Core/Src/Print.cpp ****     char c = n % base;
 690              		.loc 2 182 3 view .LVU127
 691              	.LBB39:
 183:Core/Src/Print.cpp ****     n /= base;
 692              		.loc 2 183 5 view .LVU128
 183:Core/Src/Print.cpp ****     n /= base;
 693              		.loc 2 183 18 is_stmt 0 view .LVU129
 694 0034 B046     		mov	r8, r6
 183:Core/Src/Print.cpp ****     n /= base;
 695              		.loc 2 183 16 view .LVU130
 696 0036 3100     		movs	r1, r6
 697 0038 2800     		movs	r0, r5
 698 003a FFF7FEFF 		bl	__aeabi_uidivmod
 699              	.LVL68:
 183:Core/Src/Print.cpp ****     n /= base;
 700              		.loc 2 183 10 view .LVU131
 701 003e 0C06     		lsls	r4, r1, #24
 702 0040 240E     		lsrs	r4, r4, #24
 703              	.LVL69:
 184:Core/Src/Print.cpp **** 
 704              		.loc 2 184 5 is_stmt 1 view .LVU132
 705 0042 AA46     		mov	r10, r5
 184:Core/Src/Print.cpp **** 
 706              		.loc 2 184 7 is_stmt 0 view .LVU133
 707 0044 3100     		movs	r1, r6
 708 0046 2800     		movs	r0, r5
 709 0048 FFF7FEFF 		bl	__aeabi_uidiv
ARM GAS  C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s 			page 59


 710              	.LVL70:
 711 004c 0500     		movs	r5, r0
 712              	.LVL71:
 186:Core/Src/Print.cpp ****   } while(n);
 713              		.loc 2 186 5 is_stmt 1 view .LVU134
 186:Core/Src/Print.cpp ****   } while(n);
 714              		.loc 2 186 12 is_stmt 0 view .LVU135
 715 004e 092C     		cmp	r4, #9
 716 0050 E9D9     		bls	.L33
 186:Core/Src/Print.cpp ****   } while(n);
 717              		.loc 2 186 12 discriminator 2 view .LVU136
 718 0052 3734     		adds	r4, r4, #55
 719              	.LVL72:
 186:Core/Src/Print.cpp ****   } while(n);
 720              		.loc 2 186 12 discriminator 2 view .LVU137
 721 0054 2406     		lsls	r4, r4, #24
 722              	.LVL73:
 186:Core/Src/Print.cpp ****   } while(n);
 723              		.loc 2 186 12 discriminator 2 view .LVU138
 724 0056 240E     		lsrs	r4, r4, #24
 725 0058 E8E7     		b	.L26
 726              	.L32:
 186:Core/Src/Print.cpp ****   } while(n);
 727              		.loc 2 186 12 discriminator 2 view .LVU139
 728              	.LBE39:
 188:Core/Src/Print.cpp **** 
 189:Core/Src/Print.cpp ****   return write(str);
 729              		.loc 2 189 3 is_stmt 1 view .LVU140
 730              	.LVL74:
 731              	.LBB40:
 732              	.LBI40:
  56:Core/Inc/Print.h ****       if (str == NULL) return 0;
 733              		.loc 1 56 12 view .LVU141
 734              	.LBB41:
  57:Core/Inc/Print.h ****       return write((const uint8_t *)str, strlen(str));
 735              		.loc 1 57 7 view .LVU142
 736 005a 002F     		cmp	r7, #0
 737 005c 12D0     		beq	.L30
  58:Core/Inc/Print.h ****     }
 738              		.loc 1 58 7 view .LVU143
  58:Core/Inc/Print.h ****     }
 739              		.loc 1 58 53 is_stmt 0 view .LVU144
 740 005e 4B46     		mov	r3, r9
 741 0060 1B68     		ldr	r3, [r3]
 742 0062 5C68     		ldr	r4, [r3, #4]
  58:Core/Inc/Print.h ****     }
 743              		.loc 1 58 19 view .LVU145
 744 0064 3800     		movs	r0, r7
 745              	.LVL75:
  58:Core/Inc/Print.h ****     }
 746              		.loc 1 58 19 view .LVU146
 747 0066 FFF7FEFF 		bl	strlen
 748              	.LVL76:
 749 006a 0200     		movs	r2, r0
 750 006c 3900     		movs	r1, r7
 751 006e 4846     		mov	r0, r9
 752 0070 00F00AF8 		bl	.L34
ARM GAS  C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s 			page 60


 753              	.LVL77:
 754              	.L23:
  58:Core/Inc/Print.h ****     }
 755              		.loc 1 58 19 view .LVU147
 756              	.LBE41:
 757              	.LBE40:
 190:Core/Src/Print.cpp **** }
 758              		.loc 2 190 1 view .LVU148
 759 0074 0AB0     		add	sp, sp, #40
 760              		@ sp needed
 761              	.LVL78:
 762              	.LVL79:
 763              	.LVL80:
 764              	.LVL81:
 765              		.loc 2 190 1 view .LVU149
 766 0076 E0BC     		pop	{r5, r6, r7}
 767 0078 BA46     		mov	r10, r7
 768 007a B146     		mov	r9, r6
 769 007c A846     		mov	r8, r5
 770 007e F0BC     		pop	{r4, r5, r6, r7}
 771 0080 02BC     		pop	{r1}
 772 0082 0847     		bx	r1
 773              	.LVL82:
 774              	.L30:
 775              	.LBB43:
 776              	.LBB42:
  57:Core/Inc/Print.h ****       return write((const uint8_t *)str, strlen(str));
 777              		.loc 1 57 31 view .LVU150
 778 0084 0020     		movs	r0, #0
 779              	.LVL83:
  57:Core/Inc/Print.h ****       return write((const uint8_t *)str, strlen(str));
 780              		.loc 1 57 31 view .LVU151
 781              	.LBE42:
 782              	.LBE43:
 189:Core/Src/Print.cpp **** }
 783              		.loc 2 189 19 view .LVU152
 784 0086 F5E7     		b	.L23
 785              	.L34:
 786 0088 2047     		bx	r4
 787              		.cfi_endproc
 788              	.LFE1271:
 789              		.fnend
 791              		.section	.text._ZN5Print5printEli,"ax",%progbits
 792              		.align	1
 793              		.global	_ZN5Print5printEli
 794              		.syntax unified
 795              		.code	16
 796              		.thumb_func
 797              		.fpu softvfp
 799              	_ZN5Print5printEli:
 800              		.fnstart
 801              	.LVL84:
 802              	.LFB1258:
  77:Core/Src/Print.cpp ****   if (base == 0) {
 803              		.loc 2 77 1 is_stmt 1 view -0
 804              		.cfi_startproc
 805              		@ Function supports interworking.
ARM GAS  C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s 			page 61


 806              		@ args = 0, pretend = 0, frame = 0
 807              		@ frame_needed = 0, uses_anonymous_args = 0
  77:Core/Src/Print.cpp ****   if (base == 0) {
 808              		.loc 2 77 1 is_stmt 0 view .LVU154
 809 0000 70B5     		push	{r4, r5, r6, lr}
 810              		.save {r4, r5, r6, lr}
 811              	.LCFI11:
 812              		.cfi_def_cfa_offset 16
 813              		.cfi_offset 4, -16
 814              		.cfi_offset 5, -12
 815              		.cfi_offset 6, -8
 816              		.cfi_offset 14, -4
 817 0002 0500     		movs	r5, r0
 818 0004 0C00     		movs	r4, r1
  78:Core/Src/Print.cpp ****     return write(n);
 819              		.loc 2 78 3 is_stmt 1 view .LVU155
 820              	.LBB44:
 821 0006 002A     		cmp	r2, #0
 822 0008 08D1     		bne	.L36
  79:Core/Src/Print.cpp ****   } else if (base == 10) {
 823              		.loc 2 79 5 view .LVU156
  79:Core/Src/Print.cpp ****   } else if (base == 10) {
 824              		.loc 2 79 19 is_stmt 0 view .LVU157
 825 000a 0368     		ldr	r3, [r0]
 826 000c 1B68     		ldr	r3, [r3]
  79:Core/Src/Print.cpp ****   } else if (base == 10) {
 827              		.loc 2 79 17 view .LVU158
 828 000e 0906     		lsls	r1, r1, #24
 829              	.LVL85:
  79:Core/Src/Print.cpp ****   } else if (base == 10) {
 830              		.loc 2 79 17 view .LVU159
 831 0010 090E     		lsrs	r1, r1, #24
 832 0012 00F01BF8 		bl	.L41
 833              	.LVL86:
 834              	.L35:
  79:Core/Src/Print.cpp ****   } else if (base == 10) {
 835              		.loc 2 79 17 view .LVU160
 836              	.LBE44:
  90:Core/Src/Print.cpp **** 
 837              		.loc 2 90 1 view .LVU161
 838              		@ sp needed
 839              	.LVL87:
  90:Core/Src/Print.cpp **** 
 840              		.loc 2 90 1 view .LVU162
 841 0016 70BC     		pop	{r4, r5, r6}
 842 0018 02BC     		pop	{r1}
 843 001a 0847     		bx	r1
 844              	.LVL88:
 845              	.L36:
  80:Core/Src/Print.cpp ****     if (n < 0) {
 846              		.loc 2 80 10 is_stmt 1 view .LVU163
 847              	.LBB50:
 848              	.LBB45:
 849 001c 0A2A     		cmp	r2, #10
 850 001e 10D1     		bne	.L38
 851              	.LBB46:
  81:Core/Src/Print.cpp ****       int t = print('-');
ARM GAS  C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s 			page 62


 852              		.loc 2 81 5 view .LVU164
 853              	.LBB47:
 854 0020 0029     		cmp	r1, #0
 855 0022 03DB     		blt	.L40
 856              	.LBE47:
  86:Core/Src/Print.cpp ****   } else {
 857              		.loc 2 86 5 view .LVU165
  86:Core/Src/Print.cpp ****   } else {
 858              		.loc 2 86 23 is_stmt 0 view .LVU166
 859 0024 0A22     		movs	r2, #10
 860              	.LVL89:
  86:Core/Src/Print.cpp ****   } else {
 861              		.loc 2 86 23 view .LVU167
 862 0026 FFF7FEFF 		bl	_ZN5Print11printNumberEmh
 863              	.LVL90:
  86:Core/Src/Print.cpp ****   } else {
 864              		.loc 2 86 29 view .LVU168
 865 002a F4E7     		b	.L35
 866              	.LVL91:
 867              	.L40:
 868              	.LBB49:
 869              	.LBB48:
  82:Core/Src/Print.cpp ****       n = -n;
 870              		.loc 2 82 7 is_stmt 1 view .LVU169
  82:Core/Src/Print.cpp ****       n = -n;
 871              		.loc 2 82 20 is_stmt 0 view .LVU170
 872 002c 2D21     		movs	r1, #45
 873              	.LVL92:
  82:Core/Src/Print.cpp ****       n = -n;
 874              		.loc 2 82 20 view .LVU171
 875 002e FFF7FEFF 		bl	_ZN5Print5printEc
 876              	.LVL93:
  82:Core/Src/Print.cpp ****       n = -n;
 877              		.loc 2 82 20 view .LVU172
 878 0032 0600     		movs	r6, r0
 879              	.LVL94:
  83:Core/Src/Print.cpp ****       return printNumber(n, 10) + t;
 880              		.loc 2 83 7 is_stmt 1 view .LVU173
  83:Core/Src/Print.cpp ****       return printNumber(n, 10) + t;
 881              		.loc 2 83 9 is_stmt 0 view .LVU174
 882 0034 6142     		rsbs	r1, r4, #0
 883              	.LVL95:
  84:Core/Src/Print.cpp ****     }
 884              		.loc 2 84 7 is_stmt 1 view .LVU175
  84:Core/Src/Print.cpp ****     }
 885              		.loc 2 84 25 is_stmt 0 view .LVU176
 886 0036 0A22     		movs	r2, #10
 887 0038 2800     		movs	r0, r5
 888              	.LVL96:
  84:Core/Src/Print.cpp ****     }
 889              		.loc 2 84 25 view .LVU177
 890 003a FFF7FEFF 		bl	_ZN5Print11printNumberEmh
 891              	.LVL97:
  84:Core/Src/Print.cpp ****     }
 892              		.loc 2 84 35 view .LVU178
 893 003e 3018     		adds	r0, r6, r0
 894 0040 E9E7     		b	.L35
ARM GAS  C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s 			page 63


 895              	.LVL98:
 896              	.L38:
  84:Core/Src/Print.cpp ****     }
 897              		.loc 2 84 35 view .LVU179
 898              	.LBE48:
 899              	.LBE49:
 900              	.LBE46:
  88:Core/Src/Print.cpp ****   }
 901              		.loc 2 88 5 is_stmt 1 view .LVU180
  88:Core/Src/Print.cpp ****   }
 902              		.loc 2 88 23 is_stmt 0 view .LVU181
 903 0042 1206     		lsls	r2, r2, #24
 904              	.LVL99:
  88:Core/Src/Print.cpp ****   }
 905              		.loc 2 88 23 view .LVU182
 906 0044 120E     		lsrs	r2, r2, #24
 907 0046 FFF7FEFF 		bl	_ZN5Print11printNumberEmh
 908              	.LVL100:
  88:Core/Src/Print.cpp ****   }
 909              		.loc 2 88 31 view .LVU183
 910 004a E4E7     		b	.L35
 911              	.LBE45:
 912              	.LBE50:
 913              	.L41:
 914 004c 1847     		bx	r3
 915              		.cfi_endproc
 916              	.LFE1258:
 917              		.fnend
 919              		.section	.text._ZN5Print5printEii,"ax",%progbits
 920              		.align	1
 921              		.global	_ZN5Print5printEii
 922              		.syntax unified
 923              		.code	16
 924              		.thumb_func
 925              		.fpu softvfp
 927              	_ZN5Print5printEii:
 928              		.fnstart
 929              	.LVL101:
 930              	.LFB1256:
  67:Core/Src/Print.cpp ****   return print((long) n, base);
 931              		.loc 2 67 1 is_stmt 1 view -0
 932              		.cfi_startproc
 933              		@ Function supports interworking.
 934              		@ args = 0, pretend = 0, frame = 0
 935              		@ frame_needed = 0, uses_anonymous_args = 0
  67:Core/Src/Print.cpp ****   return print((long) n, base);
 936              		.loc 2 67 1 is_stmt 0 view .LVU185
 937 0000 10B5     		push	{r4, lr}
 938              		.save {r4, lr}
 939              	.LCFI12:
 940              		.cfi_def_cfa_offset 8
 941              		.cfi_offset 4, -8
 942              		.cfi_offset 14, -4
  68:Core/Src/Print.cpp **** }
 943              		.loc 2 68 3 is_stmt 1 view .LVU186
  68:Core/Src/Print.cpp **** }
 944              		.loc 2 68 15 is_stmt 0 view .LVU187
ARM GAS  C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s 			page 64


 945 0002 FFF7FEFF 		bl	_ZN5Print5printEli
 946              	.LVL102:
  69:Core/Src/Print.cpp **** 
 947              		.loc 2 69 1 view .LVU188
 948              		@ sp needed
 949 0006 10BC     		pop	{r4}
 950 0008 02BC     		pop	{r1}
 951 000a 0847     		bx	r1
 952              		.cfi_endproc
 953              	.LFE1256:
 954              		.fnend
 956              		.section	.text._ZN5Print7printlnEii,"ax",%progbits
 957              		.align	1
 958              		.global	_ZN5Print7printlnEii
 959              		.syntax unified
 960              		.code	16
 961              		.thumb_func
 962              		.fpu softvfp
 964              	_ZN5Print7printlnEii:
 965              		.fnstart
 966              	.LVL103:
 967              	.LFB1266:
 137:Core/Src/Print.cpp ****   size_t n = print(num, base);
 968              		.loc 2 137 1 is_stmt 1 view -0
 969              		.cfi_startproc
 970              		@ Function supports interworking.
 971              		@ args = 0, pretend = 0, frame = 0
 972              		@ frame_needed = 0, uses_anonymous_args = 0
 137:Core/Src/Print.cpp ****   size_t n = print(num, base);
 973              		.loc 2 137 1 is_stmt 0 view .LVU190
 974 0000 70B5     		push	{r4, r5, r6, lr}
 975              		.save {r4, r5, r6, lr}
 976              	.LCFI13:
 977              		.cfi_def_cfa_offset 16
 978              		.cfi_offset 4, -16
 979              		.cfi_offset 5, -12
 980              		.cfi_offset 6, -8
 981              		.cfi_offset 14, -4
 982 0002 0500     		movs	r5, r0
 138:Core/Src/Print.cpp ****   n += println();
 983              		.loc 2 138 3 is_stmt 1 view .LVU191
 138:Core/Src/Print.cpp ****   n += println();
 984              		.loc 2 138 19 is_stmt 0 view .LVU192
 985 0004 FFF7FEFF 		bl	_ZN5Print5printEii
 986              	.LVL104:
 138:Core/Src/Print.cpp ****   n += println();
 987              		.loc 2 138 19 view .LVU193
 988 0008 0400     		movs	r4, r0
 989              	.LVL105:
 139:Core/Src/Print.cpp ****   return n;
 990              		.loc 2 139 3 is_stmt 1 view .LVU194
 139:Core/Src/Print.cpp ****   return n;
 991              		.loc 2 139 15 is_stmt 0 view .LVU195
 992 000a 2800     		movs	r0, r5
 993              	.LVL106:
 139:Core/Src/Print.cpp ****   return n;
 994              		.loc 2 139 15 view .LVU196
ARM GAS  C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s 			page 65


 995 000c FFF7FEFF 		bl	_ZN5Print7printlnEv
 996              	.LVL107:
 139:Core/Src/Print.cpp ****   return n;
 997              		.loc 2 139 5 view .LVU197
 998 0010 2018     		adds	r0, r4, r0
 999              	.LVL108:
 140:Core/Src/Print.cpp **** }
 1000              		.loc 2 140 3 is_stmt 1 view .LVU198
 141:Core/Src/Print.cpp **** 
 1001              		.loc 2 141 1 is_stmt 0 view .LVU199
 1002              		@ sp needed
 1003              	.LVL109:
 141:Core/Src/Print.cpp **** 
 1004              		.loc 2 141 1 view .LVU200
 1005 0012 70BC     		pop	{r4, r5, r6}
 1006 0014 02BC     		pop	{r1}
 1007 0016 0847     		bx	r1
 1008              		.cfi_endproc
 1009              	.LFE1266:
 1010              		.fnend
 1012              		.section	.text._ZN5Print7printlnEli,"ax",%progbits
 1013              		.align	1
 1014              		.global	_ZN5Print7printlnEli
 1015              		.syntax unified
 1016              		.code	16
 1017              		.thumb_func
 1018              		.fpu softvfp
 1020              	_ZN5Print7printlnEli:
 1021              		.fnstart
 1022              	.LVL110:
 1023              	.LFB1268:
 151:Core/Src/Print.cpp ****   size_t n = print(num, base);
 1024              		.loc 2 151 1 is_stmt 1 view -0
 1025              		.cfi_startproc
 1026              		@ Function supports interworking.
 1027              		@ args = 0, pretend = 0, frame = 0
 1028              		@ frame_needed = 0, uses_anonymous_args = 0
 151:Core/Src/Print.cpp ****   size_t n = print(num, base);
 1029              		.loc 2 151 1 is_stmt 0 view .LVU202
 1030 0000 70B5     		push	{r4, r5, r6, lr}
 1031              		.save {r4, r5, r6, lr}
 1032              	.LCFI14:
 1033              		.cfi_def_cfa_offset 16
 1034              		.cfi_offset 4, -16
 1035              		.cfi_offset 5, -12
 1036              		.cfi_offset 6, -8
 1037              		.cfi_offset 14, -4
 1038 0002 0500     		movs	r5, r0
 152:Core/Src/Print.cpp ****   n += println();
 1039              		.loc 2 152 3 is_stmt 1 view .LVU203
 152:Core/Src/Print.cpp ****   n += println();
 1040              		.loc 2 152 19 is_stmt 0 view .LVU204
 1041 0004 FFF7FEFF 		bl	_ZN5Print5printEli
 1042              	.LVL111:
 152:Core/Src/Print.cpp ****   n += println();
 1043              		.loc 2 152 19 view .LVU205
 1044 0008 0400     		movs	r4, r0
ARM GAS  C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s 			page 66


 1045              	.LVL112:
 153:Core/Src/Print.cpp ****   return n;
 1046              		.loc 2 153 3 is_stmt 1 view .LVU206
 153:Core/Src/Print.cpp ****   return n;
 1047              		.loc 2 153 15 is_stmt 0 view .LVU207
 1048 000a 2800     		movs	r0, r5
 1049              	.LVL113:
 153:Core/Src/Print.cpp ****   return n;
 1050              		.loc 2 153 15 view .LVU208
 1051 000c FFF7FEFF 		bl	_ZN5Print7printlnEv
 1052              	.LVL114:
 153:Core/Src/Print.cpp ****   return n;
 1053              		.loc 2 153 5 view .LVU209
 1054 0010 2018     		adds	r0, r4, r0
 1055              	.LVL115:
 154:Core/Src/Print.cpp **** }
 1056              		.loc 2 154 3 is_stmt 1 view .LVU210
 155:Core/Src/Print.cpp **** 
 1057              		.loc 2 155 1 is_stmt 0 view .LVU211
 1058              		@ sp needed
 1059              	.LVL116:
 155:Core/Src/Print.cpp **** 
 1060              		.loc 2 155 1 view .LVU212
 1061 0012 70BC     		pop	{r4, r5, r6}
 1062 0014 02BC     		pop	{r1}
 1063 0016 0847     		bx	r1
 1064              		.cfi_endproc
 1065              	.LFE1268:
 1066              		.fnend
 1068              		.section	.text._ZN5Print5printEmi,"ax",%progbits
 1069              		.align	1
 1070              		.global	_ZN5Print5printEmi
 1071              		.syntax unified
 1072              		.code	16
 1073              		.thumb_func
 1074              		.fpu softvfp
 1076              	_ZN5Print5printEmi:
 1077              		.fnstart
 1078              	.LVL117:
 1079              	.LFB1259:
  93:Core/Src/Print.cpp ****   if (base == 0) return write(n);
 1080              		.loc 2 93 1 is_stmt 1 view -0
 1081              		.cfi_startproc
 1082              		@ Function supports interworking.
 1083              		@ args = 0, pretend = 0, frame = 0
 1084              		@ frame_needed = 0, uses_anonymous_args = 0
  93:Core/Src/Print.cpp ****   if (base == 0) return write(n);
 1085              		.loc 2 93 1 is_stmt 0 view .LVU214
 1086 0000 10B5     		push	{r4, lr}
 1087              		.save {r4, lr}
 1088              	.LCFI15:
 1089              		.cfi_def_cfa_offset 8
 1090              		.cfi_offset 4, -8
 1091              		.cfi_offset 14, -4
  94:Core/Src/Print.cpp ****   else return printNumber(n, base);
 1092              		.loc 2 94 3 is_stmt 1 view .LVU215
 1093 0002 002A     		cmp	r2, #0
ARM GAS  C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s 			page 67


 1094 0004 08D1     		bne	.L46
  94:Core/Src/Print.cpp ****   else return printNumber(n, base);
 1095              		.loc 2 94 18 discriminator 1 view .LVU216
  94:Core/Src/Print.cpp ****   else return printNumber(n, base);
 1096              		.loc 2 94 32 is_stmt 0 discriminator 1 view .LVU217
 1097 0006 0368     		ldr	r3, [r0]
 1098 0008 1B68     		ldr	r3, [r3]
  94:Core/Src/Print.cpp ****   else return printNumber(n, base);
 1099              		.loc 2 94 30 discriminator 1 view .LVU218
 1100 000a 0906     		lsls	r1, r1, #24
 1101              	.LVL118:
  94:Core/Src/Print.cpp ****   else return printNumber(n, base);
 1102              		.loc 2 94 30 discriminator 1 view .LVU219
 1103 000c 090E     		lsrs	r1, r1, #24
 1104 000e 00F008F8 		bl	.L48
 1105              	.LVL119:
 1106              	.L45:
  96:Core/Src/Print.cpp **** 
 1107              		.loc 2 96 1 view .LVU220
 1108              		@ sp needed
 1109 0012 10BC     		pop	{r4}
 1110 0014 02BC     		pop	{r1}
 1111 0016 0847     		bx	r1
 1112              	.LVL120:
 1113              	.L46:
  95:Core/Src/Print.cpp **** }
 1114              		.loc 2 95 8 is_stmt 1 view .LVU221
  95:Core/Src/Print.cpp **** }
 1115              		.loc 2 95 26 is_stmt 0 view .LVU222
 1116 0018 1206     		lsls	r2, r2, #24
 1117              	.LVL121:
  95:Core/Src/Print.cpp **** }
 1118              		.loc 2 95 26 view .LVU223
 1119 001a 120E     		lsrs	r2, r2, #24
 1120 001c FFF7FEFF 		bl	_ZN5Print11printNumberEmh
 1121              	.LVL122:
  95:Core/Src/Print.cpp **** }
 1122              		.loc 2 95 34 view .LVU224
 1123 0020 F7E7     		b	.L45
 1124              	.L48:
 1125 0022 1847     		bx	r3
 1126              		.cfi_endproc
 1127              	.LFE1259:
 1128              		.fnend
 1130              		.section	.text._ZN5Print5printEhi,"ax",%progbits
 1131              		.align	1
 1132              		.global	_ZN5Print5printEhi
 1133              		.syntax unified
 1134              		.code	16
 1135              		.thumb_func
 1136              		.fpu softvfp
 1138              	_ZN5Print5printEhi:
 1139              		.fnstart
 1140              	.LVL123:
 1141              	.LFB1255:
  62:Core/Src/Print.cpp ****   return print((unsigned long) b, base);
 1142              		.loc 2 62 1 is_stmt 1 view -0
ARM GAS  C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s 			page 68


 1143              		.cfi_startproc
 1144              		@ Function supports interworking.
 1145              		@ args = 0, pretend = 0, frame = 0
 1146              		@ frame_needed = 0, uses_anonymous_args = 0
  62:Core/Src/Print.cpp ****   return print((unsigned long) b, base);
 1147              		.loc 2 62 1 is_stmt 0 view .LVU226
 1148 0000 10B5     		push	{r4, lr}
 1149              		.save {r4, lr}
 1150              	.LCFI16:
 1151              		.cfi_def_cfa_offset 8
 1152              		.cfi_offset 4, -8
 1153              		.cfi_offset 14, -4
  63:Core/Src/Print.cpp **** }
 1154              		.loc 2 63 3 is_stmt 1 view .LVU227
  63:Core/Src/Print.cpp **** }
 1155              		.loc 2 63 15 is_stmt 0 view .LVU228
 1156 0002 FFF7FEFF 		bl	_ZN5Print5printEmi
 1157              	.LVL124:
  64:Core/Src/Print.cpp **** 
 1158              		.loc 2 64 1 view .LVU229
 1159              		@ sp needed
 1160 0006 10BC     		pop	{r4}
 1161 0008 02BC     		pop	{r1}
 1162 000a 0847     		bx	r1
 1163              		.cfi_endproc
 1164              	.LFE1255:
 1165              		.fnend
 1167              		.section	.text._ZN5Print7printlnEhi,"ax",%progbits
 1168              		.align	1
 1169              		.global	_ZN5Print7printlnEhi
 1170              		.syntax unified
 1171              		.code	16
 1172              		.thumb_func
 1173              		.fpu softvfp
 1175              	_ZN5Print7printlnEhi:
 1176              		.fnstart
 1177              	.LVL125:
 1178              	.LFB1265:
 130:Core/Src/Print.cpp ****   size_t n = print(b, base);
 1179              		.loc 2 130 1 is_stmt 1 view -0
 1180              		.cfi_startproc
 1181              		@ Function supports interworking.
 1182              		@ args = 0, pretend = 0, frame = 0
 1183              		@ frame_needed = 0, uses_anonymous_args = 0
 130:Core/Src/Print.cpp ****   size_t n = print(b, base);
 1184              		.loc 2 130 1 is_stmt 0 view .LVU231
 1185 0000 70B5     		push	{r4, r5, r6, lr}
 1186              		.save {r4, r5, r6, lr}
 1187              	.LCFI17:
 1188              		.cfi_def_cfa_offset 16
 1189              		.cfi_offset 4, -16
 1190              		.cfi_offset 5, -12
 1191              		.cfi_offset 6, -8
 1192              		.cfi_offset 14, -4
 1193 0002 0500     		movs	r5, r0
 131:Core/Src/Print.cpp ****   n += println();
 1194              		.loc 2 131 3 is_stmt 1 view .LVU232
ARM GAS  C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s 			page 69


 131:Core/Src/Print.cpp ****   n += println();
 1195              		.loc 2 131 19 is_stmt 0 view .LVU233
 1196 0004 FFF7FEFF 		bl	_ZN5Print5printEhi
 1197              	.LVL126:
 131:Core/Src/Print.cpp ****   n += println();
 1198              		.loc 2 131 19 view .LVU234
 1199 0008 0400     		movs	r4, r0
 1200              	.LVL127:
 132:Core/Src/Print.cpp ****   return n;
 1201              		.loc 2 132 3 is_stmt 1 view .LVU235
 132:Core/Src/Print.cpp ****   return n;
 1202              		.loc 2 132 15 is_stmt 0 view .LVU236
 1203 000a 2800     		movs	r0, r5
 1204              	.LVL128:
 132:Core/Src/Print.cpp ****   return n;
 1205              		.loc 2 132 15 view .LVU237
 1206 000c FFF7FEFF 		bl	_ZN5Print7printlnEv
 1207              	.LVL129:
 132:Core/Src/Print.cpp ****   return n;
 1208              		.loc 2 132 5 view .LVU238
 1209 0010 2018     		adds	r0, r4, r0
 1210              	.LVL130:
 133:Core/Src/Print.cpp **** }
 1211              		.loc 2 133 3 is_stmt 1 view .LVU239
 134:Core/Src/Print.cpp **** 
 1212              		.loc 2 134 1 is_stmt 0 view .LVU240
 1213              		@ sp needed
 1214              	.LVL131:
 134:Core/Src/Print.cpp **** 
 1215              		.loc 2 134 1 view .LVU241
 1216 0012 70BC     		pop	{r4, r5, r6}
 1217 0014 02BC     		pop	{r1}
 1218 0016 0847     		bx	r1
 1219              		.cfi_endproc
 1220              	.LFE1265:
 1221              		.fnend
 1223              		.section	.text._ZN5Print5printEji,"ax",%progbits
 1224              		.align	1
 1225              		.global	_ZN5Print5printEji
 1226              		.syntax unified
 1227              		.code	16
 1228              		.thumb_func
 1229              		.fpu softvfp
 1231              	_ZN5Print5printEji:
 1232              		.fnstart
 1233              	.LVL132:
 1234              	.LFB1257:
  72:Core/Src/Print.cpp ****   return print((unsigned long) n, base);
 1235              		.loc 2 72 1 is_stmt 1 view -0
 1236              		.cfi_startproc
 1237              		@ Function supports interworking.
 1238              		@ args = 0, pretend = 0, frame = 0
 1239              		@ frame_needed = 0, uses_anonymous_args = 0
  72:Core/Src/Print.cpp ****   return print((unsigned long) n, base);
 1240              		.loc 2 72 1 is_stmt 0 view .LVU243
 1241 0000 10B5     		push	{r4, lr}
 1242              		.save {r4, lr}
ARM GAS  C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s 			page 70


 1243              	.LCFI18:
 1244              		.cfi_def_cfa_offset 8
 1245              		.cfi_offset 4, -8
 1246              		.cfi_offset 14, -4
  73:Core/Src/Print.cpp **** }
 1247              		.loc 2 73 3 is_stmt 1 view .LVU244
  73:Core/Src/Print.cpp **** }
 1248              		.loc 2 73 15 is_stmt 0 view .LVU245
 1249 0002 FFF7FEFF 		bl	_ZN5Print5printEmi
 1250              	.LVL133:
  74:Core/Src/Print.cpp **** 
 1251              		.loc 2 74 1 view .LVU246
 1252              		@ sp needed
 1253 0006 10BC     		pop	{r4}
 1254 0008 02BC     		pop	{r1}
 1255 000a 0847     		bx	r1
 1256              		.cfi_endproc
 1257              	.LFE1257:
 1258              		.fnend
 1260              		.section	.text._ZN5Print7printlnEji,"ax",%progbits
 1261              		.align	1
 1262              		.global	_ZN5Print7printlnEji
 1263              		.syntax unified
 1264              		.code	16
 1265              		.thumb_func
 1266              		.fpu softvfp
 1268              	_ZN5Print7printlnEji:
 1269              		.fnstart
 1270              	.LVL134:
 1271              	.LFB1267:
 144:Core/Src/Print.cpp ****   size_t n = print(num, base);
 1272              		.loc 2 144 1 is_stmt 1 view -0
 1273              		.cfi_startproc
 1274              		@ Function supports interworking.
 1275              		@ args = 0, pretend = 0, frame = 0
 1276              		@ frame_needed = 0, uses_anonymous_args = 0
 144:Core/Src/Print.cpp ****   size_t n = print(num, base);
 1277              		.loc 2 144 1 is_stmt 0 view .LVU248
 1278 0000 70B5     		push	{r4, r5, r6, lr}
 1279              		.save {r4, r5, r6, lr}
 1280              	.LCFI19:
 1281              		.cfi_def_cfa_offset 16
 1282              		.cfi_offset 4, -16
 1283              		.cfi_offset 5, -12
 1284              		.cfi_offset 6, -8
 1285              		.cfi_offset 14, -4
 1286 0002 0500     		movs	r5, r0
 145:Core/Src/Print.cpp ****   n += println();
 1287              		.loc 2 145 3 is_stmt 1 view .LVU249
 145:Core/Src/Print.cpp ****   n += println();
 1288              		.loc 2 145 19 is_stmt 0 view .LVU250
 1289 0004 FFF7FEFF 		bl	_ZN5Print5printEji
 1290              	.LVL135:
 145:Core/Src/Print.cpp ****   n += println();
 1291              		.loc 2 145 19 view .LVU251
 1292 0008 0400     		movs	r4, r0
 1293              	.LVL136:
ARM GAS  C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s 			page 71


 146:Core/Src/Print.cpp ****   return n;
 1294              		.loc 2 146 3 is_stmt 1 view .LVU252
 146:Core/Src/Print.cpp ****   return n;
 1295              		.loc 2 146 15 is_stmt 0 view .LVU253
 1296 000a 2800     		movs	r0, r5
 1297              	.LVL137:
 146:Core/Src/Print.cpp ****   return n;
 1298              		.loc 2 146 15 view .LVU254
 1299 000c FFF7FEFF 		bl	_ZN5Print7printlnEv
 1300              	.LVL138:
 146:Core/Src/Print.cpp ****   return n;
 1301              		.loc 2 146 5 view .LVU255
 1302 0010 2018     		adds	r0, r4, r0
 1303              	.LVL139:
 147:Core/Src/Print.cpp **** }
 1304              		.loc 2 147 3 is_stmt 1 view .LVU256
 148:Core/Src/Print.cpp **** 
 1305              		.loc 2 148 1 is_stmt 0 view .LVU257
 1306              		@ sp needed
 1307              	.LVL140:
 148:Core/Src/Print.cpp **** 
 1308              		.loc 2 148 1 view .LVU258
 1309 0012 70BC     		pop	{r4, r5, r6}
 1310 0014 02BC     		pop	{r1}
 1311 0016 0847     		bx	r1
 1312              		.cfi_endproc
 1313              	.LFE1267:
 1314              		.fnend
 1316              		.section	.text._ZN5Print7printlnEmi,"ax",%progbits
 1317              		.align	1
 1318              		.global	_ZN5Print7printlnEmi
 1319              		.syntax unified
 1320              		.code	16
 1321              		.thumb_func
 1322              		.fpu softvfp
 1324              	_ZN5Print7printlnEmi:
 1325              		.fnstart
 1326              	.LVL141:
 1327              	.LFB1269:
 158:Core/Src/Print.cpp ****   size_t n = print(num, base);
 1328              		.loc 2 158 1 is_stmt 1 view -0
 1329              		.cfi_startproc
 1330              		@ Function supports interworking.
 1331              		@ args = 0, pretend = 0, frame = 0
 1332              		@ frame_needed = 0, uses_anonymous_args = 0
 158:Core/Src/Print.cpp ****   size_t n = print(num, base);
 1333              		.loc 2 158 1 is_stmt 0 view .LVU260
 1334 0000 70B5     		push	{r4, r5, r6, lr}
 1335              		.save {r4, r5, r6, lr}
 1336              	.LCFI20:
 1337              		.cfi_def_cfa_offset 16
 1338              		.cfi_offset 4, -16
 1339              		.cfi_offset 5, -12
 1340              		.cfi_offset 6, -8
 1341              		.cfi_offset 14, -4
 1342 0002 0500     		movs	r5, r0
 159:Core/Src/Print.cpp ****   n += println();
ARM GAS  C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s 			page 72


 1343              		.loc 2 159 3 is_stmt 1 view .LVU261
 159:Core/Src/Print.cpp ****   n += println();
 1344              		.loc 2 159 19 is_stmt 0 view .LVU262
 1345 0004 FFF7FEFF 		bl	_ZN5Print5printEmi
 1346              	.LVL142:
 159:Core/Src/Print.cpp ****   n += println();
 1347              		.loc 2 159 19 view .LVU263
 1348 0008 0400     		movs	r4, r0
 1349              	.LVL143:
 160:Core/Src/Print.cpp ****   return n;
 1350              		.loc 2 160 3 is_stmt 1 view .LVU264
 160:Core/Src/Print.cpp ****   return n;
 1351              		.loc 2 160 15 is_stmt 0 view .LVU265
 1352 000a 2800     		movs	r0, r5
 1353              	.LVL144:
 160:Core/Src/Print.cpp ****   return n;
 1354              		.loc 2 160 15 view .LVU266
 1355 000c FFF7FEFF 		bl	_ZN5Print7printlnEv
 1356              	.LVL145:
 160:Core/Src/Print.cpp ****   return n;
 1357              		.loc 2 160 5 view .LVU267
 1358 0010 2018     		adds	r0, r4, r0
 1359              	.LVL146:
 161:Core/Src/Print.cpp **** }
 1360              		.loc 2 161 3 is_stmt 1 view .LVU268
 162:Core/Src/Print.cpp **** 
 1361              		.loc 2 162 1 is_stmt 0 view .LVU269
 1362              		@ sp needed
 1363              	.LVL147:
 162:Core/Src/Print.cpp **** 
 1364              		.loc 2 162 1 view .LVU270
 1365 0012 70BC     		pop	{r4, r5, r6}
 1366 0014 02BC     		pop	{r1}
 1367 0016 0847     		bx	r1
 1368              		.cfi_endproc
 1369              	.LFE1269:
 1370              		.fnend
 1372              		.global	__aeabi_dcmpun
 1373              		.section	.rodata._ZN5Print10printFloatEdh.str1.4,"aMS",%progbits,1
 1374              		.align	2
 1375              	.LC2:
 1376 0000 6E616E00 		.ascii	"nan\000"
 1377              		.global	__aeabi_dcmple
 1378              		.align	2
 1379              	.LC4:
 1380 0004 696E6600 		.ascii	"inf\000"
 1381              		.global	__aeabi_dcmpgt
 1382              		.align	2
 1383              	.LC6:
 1384 0008 6F766600 		.ascii	"ovf\000"
 1385              		.global	__aeabi_dcmplt
 1386              		.global	__aeabi_ddiv
 1387              		.global	__aeabi_dadd
 1388              		.global	__aeabi_d2uiz
 1389              		.global	__aeabi_ui2d
 1390              		.global	__aeabi_dsub
 1391              		.global	__aeabi_dmul
ARM GAS  C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s 			page 73


 1392              		.section	.text._ZN5Print10printFloatEdh,"ax",%progbits
 1393              		.align	1
 1394              		.global	_ZN5Print10printFloatEdh
 1395              		.syntax unified
 1396              		.code	16
 1397              		.thumb_func
 1398              		.fpu softvfp
 1400              	_ZN5Print10printFloatEdh:
 1401              		.fnstart
 1402              	.LVL148:
 1403              	.LFB1272:
 191:Core/Src/Print.cpp **** 
 192:Core/Src/Print.cpp **** size_t Print::printFloat(double number, uint8_t digits) 
 193:Core/Src/Print.cpp **** { 
 1404              		.loc 2 193 1 is_stmt 1 view -0
 1405              		.cfi_startproc
 1406              		@ Function supports interworking.
 1407              		@ args = 4, pretend = 0, frame = 0
 1408              		@ frame_needed = 0, uses_anonymous_args = 0
 1409              		.loc 2 193 1 is_stmt 0 view .LVU272
 1410 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1411              		.save {r3, r4, r5, r6, r7, lr}
 1412              	.LCFI21:
 1413              		.cfi_def_cfa_offset 24
 1414              		.cfi_offset 3, -24
 1415              		.cfi_offset 4, -20
 1416              		.cfi_offset 5, -16
 1417              		.cfi_offset 6, -12
 1418              		.cfi_offset 7, -8
 1419              		.cfi_offset 14, -4
 1420 0002 CE46     		mov	lr, r9
 1421 0004 4746     		mov	r7, r8
 1422 0006 80B5     		push	{r7, lr}
 1423              		.save {r8, r9}
 1424              	.LCFI22:
 1425              		.cfi_def_cfa_offset 32
 1426              		.cfi_offset 8, -32
 1427              		.cfi_offset 9, -28
 1428 0008 8046     		mov	r8, r0
 1429 000a 1600     		movs	r6, r2
 1430 000c 1F00     		movs	r7, r3
 1431 000e 08AB     		add	r3, sp, #32
 1432              	.LVL149:
 1433              		.loc 2 193 1 view .LVU273
 1434 0010 1D78     		ldrb	r5, [r3]
 194:Core/Src/Print.cpp ****   size_t n = 0;
 1435              		.loc 2 194 3 is_stmt 1 view .LVU274
 1436              	.LVL150:
 195:Core/Src/Print.cpp ****   
 196:Core/Src/Print.cpp ****   if (isnan(number)) return print("nan");
 1437              		.loc 2 196 3 view .LVU275
 1438              		.file 4 "c:\\gcc-arm-none-eabi-10-2020-q4-major-win32\\gcc-arm-none-eabi-10-2020-q4-major\\arm-non
   1:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** // -*- C++ -*- C forwarding header.
   2:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
   3:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** // Copyright (C) 1997-2020 Free Software Foundation, Inc.
   4:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** //
   5:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** // This file is part of the GNU ISO C++ Library.  This library is free
ARM GAS  C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s 			page 74


   6:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** // software; you can redistribute it and/or modify it under the
   7:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** // terms of the GNU General Public License as published by the
   8:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** // Free Software Foundation; either version 3, or (at your option)
   9:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** // any later version.
  10:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
  11:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** // This library is distributed in the hope that it will be useful,
  12:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** // GNU General Public License for more details.
  15:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
  16:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** // Under Section 7 of GPL version 3, you are granted additional
  17:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** // permissions described in the GCC Runtime Library Exception, version
  18:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** // 3.1, as published by the Free Software Foundation.
  19:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
  20:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** // You should have received a copy of the GNU General Public License and
  21:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** // a copy of the GCC Runtime Library Exception along with this program;
  22:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** // <http://www.gnu.org/licenses/>.
  24:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
  25:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** /** @file include/cmath
  26:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****  *  This is a Standard C++ Library file.  You should @c \#include this file
  27:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****  *  in your programs, rather than any of the @a *.h implementation files.
  28:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****  *
  29:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****  *  This is the C++ version of the Standard C Library header @c math.h,
  30:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****  *  and its contents are (mostly) the same as that header, but are all
  31:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****  *  contained in the namespace @c std (except for names which are defined
  32:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****  *  as macros in C).
  33:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****  */
  34:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
  35:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** //
  36:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** // ISO C++ 14882: 26.5  C library
  37:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** //
  38:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
  39:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** #pragma GCC system_header
  40:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
  41:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** #include <bits/c++config.h>
  42:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** #include <bits/cpp_type_traits.h>
  43:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** #include <ext/type_traits.h>
  44:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** #define _GLIBCXX_INCLUDE_NEXT_C_HEADERS
  45:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** #include_next <math.h>
  46:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** #undef _GLIBCXX_INCLUDE_NEXT_C_HEADERS
  47:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** #include <bits/std_abs.h>
  48:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
  49:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** #ifndef _GLIBCXX_CMATH
  50:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** #define _GLIBCXX_CMATH 1
  51:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
  52:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** // Get rid of those macros defined in <math.h> in lieu of real functions.
  53:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** #undef div
  54:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** #undef acos
  55:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** #undef asin
  56:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** #undef atan
  57:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** #undef atan2
  58:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** #undef ceil
  59:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** #undef cos
  60:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** #undef cosh
  61:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** #undef exp
  62:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** #undef fabs
ARM GAS  C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s 			page 75


  63:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** #undef floor
  64:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** #undef fmod
  65:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** #undef frexp
  66:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** #undef ldexp
  67:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** #undef log
  68:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** #undef log10
  69:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** #undef modf
  70:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** #undef pow
  71:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** #undef sin
  72:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** #undef sinh
  73:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** #undef sqrt
  74:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** #undef tan
  75:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** #undef tanh
  76:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
  77:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** extern "C++"
  78:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** {
  79:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** namespace std _GLIBCXX_VISIBILITY(default)
  80:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** {
  81:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  82:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
  83:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   using ::acos;
  84:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
  85:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  86:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   inline _GLIBCXX_CONSTEXPR float
  87:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   acos(float __x)
  88:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   { return __builtin_acosf(__x); }
  89:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
  90:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   inline _GLIBCXX_CONSTEXPR long double
  91:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   acos(long double __x)
  92:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   { return __builtin_acosl(__x); }
  93:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** #endif
  94:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
  95:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   template<typename _Tp>
  96:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****     inline _GLIBCXX_CONSTEXPR
  97:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
  98:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****                                     double>::__type
  99:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****     acos(_Tp __x)
 100:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****     { return __builtin_acos(__x); }
 101:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
 102:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   using ::asin;
 103:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
 104:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 105:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   inline _GLIBCXX_CONSTEXPR float
 106:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   asin(float __x)
 107:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   { return __builtin_asinf(__x); }
 108:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
 109:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   inline _GLIBCXX_CONSTEXPR long double
 110:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   asin(long double __x)
 111:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   { return __builtin_asinl(__x); }
 112:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** #endif
 113:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
 114:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   template<typename _Tp>
 115:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****     inline _GLIBCXX_CONSTEXPR
 116:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
 117:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****                                     double>::__type
 118:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****     asin(_Tp __x)
 119:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****     { return __builtin_asin(__x); }
ARM GAS  C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s 			page 76


 120:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
 121:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   using ::atan;
 122:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
 123:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 124:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   inline _GLIBCXX_CONSTEXPR float
 125:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   atan(float __x)
 126:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   { return __builtin_atanf(__x); }
 127:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
 128:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   inline _GLIBCXX_CONSTEXPR long double
 129:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   atan(long double __x)
 130:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   { return __builtin_atanl(__x); }
 131:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** #endif
 132:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
 133:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   template<typename _Tp>
 134:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****     inline _GLIBCXX_CONSTEXPR
 135:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
 136:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****                                     double>::__type
 137:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****     atan(_Tp __x)
 138:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****     { return __builtin_atan(__x); }
 139:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
 140:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   using ::atan2;
 141:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
 142:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 143:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   inline _GLIBCXX_CONSTEXPR float
 144:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   atan2(float __y, float __x)
 145:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   { return __builtin_atan2f(__y, __x); }
 146:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
 147:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   inline _GLIBCXX_CONSTEXPR long double
 148:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   atan2(long double __y, long double __x)
 149:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   { return __builtin_atan2l(__y, __x); }
 150:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** #endif
 151:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
 152:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   template<typename _Tp, typename _Up>
 153:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****     inline _GLIBCXX_CONSTEXPR
 154:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****     typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
 155:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****     atan2(_Tp __y, _Up __x)
 156:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****     {
 157:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****       typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
 158:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****       return atan2(__type(__y), __type(__x));
 159:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****     }
 160:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
 161:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   using ::ceil;
 162:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
 163:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 164:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   inline _GLIBCXX_CONSTEXPR float
 165:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   ceil(float __x)
 166:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   { return __builtin_ceilf(__x); }
 167:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
 168:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   inline _GLIBCXX_CONSTEXPR long double
 169:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   ceil(long double __x)
 170:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   { return __builtin_ceill(__x); }
 171:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** #endif
 172:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
 173:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   template<typename _Tp>
 174:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****     inline _GLIBCXX_CONSTEXPR
 175:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
 176:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****                                     double>::__type
ARM GAS  C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s 			page 77


 177:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****     ceil(_Tp __x)
 178:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****     { return __builtin_ceil(__x); }
 179:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
 180:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   using ::cos;
 181:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
 182:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 183:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   inline _GLIBCXX_CONSTEXPR float
 184:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   cos(float __x)
 185:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   { return __builtin_cosf(__x); }
 186:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
 187:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   inline _GLIBCXX_CONSTEXPR long double
 188:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   cos(long double __x)
 189:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   { return __builtin_cosl(__x); }
 190:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** #endif
 191:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
 192:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   template<typename _Tp>
 193:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****     inline _GLIBCXX_CONSTEXPR
 194:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
 195:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****                                     double>::__type
 196:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****     cos(_Tp __x)
 197:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****     { return __builtin_cos(__x); }
 198:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
 199:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   using ::cosh;
 200:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
 201:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 202:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   inline _GLIBCXX_CONSTEXPR float
 203:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   cosh(float __x)
 204:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   { return __builtin_coshf(__x); }
 205:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
 206:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   inline _GLIBCXX_CONSTEXPR long double
 207:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   cosh(long double __x)
 208:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   { return __builtin_coshl(__x); }
 209:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** #endif
 210:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
 211:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   template<typename _Tp>
 212:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****     inline _GLIBCXX_CONSTEXPR
 213:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
 214:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****                                     double>::__type
 215:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****     cosh(_Tp __x)
 216:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****     { return __builtin_cosh(__x); }
 217:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
 218:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   using ::exp;
 219:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
 220:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 221:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   inline _GLIBCXX_CONSTEXPR float
 222:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   exp(float __x)
 223:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   { return __builtin_expf(__x); }
 224:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
 225:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   inline _GLIBCXX_CONSTEXPR long double
 226:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   exp(long double __x)
 227:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   { return __builtin_expl(__x); }
 228:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** #endif
 229:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
 230:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   template<typename _Tp>
 231:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****     inline _GLIBCXX_CONSTEXPR
 232:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
 233:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****                                     double>::__type
ARM GAS  C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s 			page 78


 234:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****     exp(_Tp __x)
 235:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****     { return __builtin_exp(__x); }
 236:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
 237:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   using ::fabs;
 238:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
 239:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 240:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   inline _GLIBCXX_CONSTEXPR float
 241:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   fabs(float __x)
 242:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   { return __builtin_fabsf(__x); }
 243:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
 244:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   inline _GLIBCXX_CONSTEXPR long double
 245:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   fabs(long double __x)
 246:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   { return __builtin_fabsl(__x); }
 247:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** #endif
 248:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
 249:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   template<typename _Tp>
 250:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****     inline _GLIBCXX_CONSTEXPR
 251:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
 252:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****                                     double>::__type
 253:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****     fabs(_Tp __x)
 254:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****     { return __builtin_fabs(__x); }
 255:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
 256:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   using ::floor;
 257:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
 258:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 259:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   inline _GLIBCXX_CONSTEXPR float
 260:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   floor(float __x)
 261:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   { return __builtin_floorf(__x); }
 262:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
 263:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   inline _GLIBCXX_CONSTEXPR long double
 264:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   floor(long double __x)
 265:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   { return __builtin_floorl(__x); }
 266:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** #endif
 267:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
 268:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   template<typename _Tp>
 269:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****     inline _GLIBCXX_CONSTEXPR
 270:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
 271:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****                                     double>::__type
 272:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****     floor(_Tp __x)
 273:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****     { return __builtin_floor(__x); }
 274:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
 275:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   using ::fmod;
 276:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
 277:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 278:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   inline _GLIBCXX_CONSTEXPR float
 279:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   fmod(float __x, float __y)
 280:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   { return __builtin_fmodf(__x, __y); }
 281:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
 282:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   inline _GLIBCXX_CONSTEXPR long double
 283:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   fmod(long double __x, long double __y)
 284:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   { return __builtin_fmodl(__x, __y); }
 285:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** #endif
 286:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
 287:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   template<typename _Tp, typename _Up>
 288:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****     inline _GLIBCXX_CONSTEXPR
 289:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****     typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
 290:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****     fmod(_Tp __x, _Up __y)
ARM GAS  C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s 			page 79


 291:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****     {
 292:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****       typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
 293:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****       return fmod(__type(__x), __type(__y));
 294:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****     }
 295:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
 296:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   using ::frexp;
 297:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
 298:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 299:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   inline float
 300:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   frexp(float __x, int* __exp)
 301:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   { return __builtin_frexpf(__x, __exp); }
 302:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
 303:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   inline long double
 304:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   frexp(long double __x, int* __exp)
 305:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   { return __builtin_frexpl(__x, __exp); }
 306:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** #endif
 307:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
 308:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   template<typename _Tp>
 309:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****     inline _GLIBCXX_CONSTEXPR
 310:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
 311:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****                                     double>::__type
 312:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****     frexp(_Tp __x, int* __exp)
 313:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****     { return __builtin_frexp(__x, __exp); }
 314:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
 315:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   using ::ldexp;
 316:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
 317:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 318:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   inline _GLIBCXX_CONSTEXPR float
 319:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   ldexp(float __x, int __exp)
 320:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   { return __builtin_ldexpf(__x, __exp); }
 321:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
 322:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   inline _GLIBCXX_CONSTEXPR long double
 323:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   ldexp(long double __x, int __exp)
 324:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   { return __builtin_ldexpl(__x, __exp); }
 325:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** #endif
 326:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
 327:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   template<typename _Tp>
 328:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****     inline _GLIBCXX_CONSTEXPR
 329:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
 330:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****                                     double>::__type
 331:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****     ldexp(_Tp __x, int __exp)
 332:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****     { return __builtin_ldexp(__x, __exp); }
 333:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
 334:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   using ::log;
 335:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
 336:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 337:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   inline _GLIBCXX_CONSTEXPR float
 338:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   log(float __x)
 339:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   { return __builtin_logf(__x); }
 340:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
 341:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   inline _GLIBCXX_CONSTEXPR long double
 342:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   log(long double __x)
 343:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   { return __builtin_logl(__x); }
 344:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** #endif
 345:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
 346:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   template<typename _Tp>
 347:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****     inline _GLIBCXX_CONSTEXPR
ARM GAS  C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s 			page 80


 348:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
 349:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****                                     double>::__type
 350:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****     log(_Tp __x)
 351:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****     { return __builtin_log(__x); }
 352:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
 353:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   using ::log10;
 354:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
 355:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 356:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   inline _GLIBCXX_CONSTEXPR float
 357:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   log10(float __x)
 358:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   { return __builtin_log10f(__x); }
 359:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
 360:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   inline _GLIBCXX_CONSTEXPR long double
 361:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   log10(long double __x)
 362:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   { return __builtin_log10l(__x); }
 363:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** #endif
 364:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
 365:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   template<typename _Tp>
 366:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****     inline _GLIBCXX_CONSTEXPR
 367:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
 368:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****                                     double>::__type
 369:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****     log10(_Tp __x)
 370:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****     { return __builtin_log10(__x); }
 371:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
 372:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   using ::modf;
 373:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
 374:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 375:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   inline float
 376:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   modf(float __x, float* __iptr)
 377:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   { return __builtin_modff(__x, __iptr); }
 378:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
 379:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   inline long double
 380:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   modf(long double __x, long double* __iptr)
 381:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   { return __builtin_modfl(__x, __iptr); }
 382:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** #endif
 383:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
 384:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   using ::pow;
 385:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
 386:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 387:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   inline _GLIBCXX_CONSTEXPR float
 388:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   pow(float __x, float __y)
 389:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   { return __builtin_powf(__x, __y); }
 390:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
 391:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   inline _GLIBCXX_CONSTEXPR long double
 392:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   pow(long double __x, long double __y)
 393:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   { return __builtin_powl(__x, __y); }
 394:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
 395:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** #if __cplusplus < 201103L
 396:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
 397:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   // DR 550. What should the return type of pow(float,int) be?
 398:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   inline double
 399:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   pow(double __x, int __i)
 400:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   { return __builtin_powi(__x, __i); }
 401:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
 402:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   inline float
 403:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   pow(float __x, int __n)
 404:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   { return __builtin_powif(__x, __n); }
ARM GAS  C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s 			page 81


 405:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
 406:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   inline long double
 407:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   pow(long double __x, int __n)
 408:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   { return __builtin_powil(__x, __n); }
 409:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** #endif
 410:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** #endif
 411:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
 412:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   template<typename _Tp, typename _Up>
 413:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****     inline _GLIBCXX_CONSTEXPR
 414:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****     typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
 415:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****     pow(_Tp __x, _Up __y)
 416:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****     {
 417:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****       typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
 418:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****       return pow(__type(__x), __type(__y));
 419:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****     }
 420:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
 421:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   using ::sin;
 422:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
 423:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 424:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   inline _GLIBCXX_CONSTEXPR float
 425:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   sin(float __x)
 426:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   { return __builtin_sinf(__x); }
 427:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
 428:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   inline _GLIBCXX_CONSTEXPR long double
 429:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   sin(long double __x)
 430:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   { return __builtin_sinl(__x); }
 431:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** #endif
 432:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
 433:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   template<typename _Tp>
 434:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****     inline _GLIBCXX_CONSTEXPR
 435:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
 436:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****                                     double>::__type
 437:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****     sin(_Tp __x)
 438:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****     { return __builtin_sin(__x); }
 439:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
 440:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   using ::sinh;
 441:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
 442:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 443:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   inline _GLIBCXX_CONSTEXPR float
 444:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   sinh(float __x)
 445:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   { return __builtin_sinhf(__x); }
 446:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
 447:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   inline _GLIBCXX_CONSTEXPR long double
 448:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   sinh(long double __x)
 449:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   { return __builtin_sinhl(__x); }
 450:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** #endif
 451:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
 452:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   template<typename _Tp>
 453:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****     inline _GLIBCXX_CONSTEXPR
 454:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
 455:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****                                     double>::__type
 456:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****     sinh(_Tp __x)
 457:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****     { return __builtin_sinh(__x); }
 458:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
 459:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   using ::sqrt;
 460:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
 461:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
ARM GAS  C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s 			page 82


 462:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   inline _GLIBCXX_CONSTEXPR float
 463:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   sqrt(float __x)
 464:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   { return __builtin_sqrtf(__x); }
 465:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
 466:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   inline _GLIBCXX_CONSTEXPR long double
 467:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   sqrt(long double __x)
 468:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   { return __builtin_sqrtl(__x); }
 469:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** #endif
 470:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
 471:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   template<typename _Tp>
 472:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****     inline _GLIBCXX_CONSTEXPR
 473:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
 474:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****                                     double>::__type
 475:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****     sqrt(_Tp __x)
 476:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****     { return __builtin_sqrt(__x); }
 477:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
 478:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   using ::tan;
 479:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
 480:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 481:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   inline _GLIBCXX_CONSTEXPR float
 482:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   tan(float __x)
 483:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   { return __builtin_tanf(__x); }
 484:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
 485:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   inline _GLIBCXX_CONSTEXPR long double
 486:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   tan(long double __x)
 487:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   { return __builtin_tanl(__x); }
 488:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** #endif
 489:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
 490:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   template<typename _Tp>
 491:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****     inline _GLIBCXX_CONSTEXPR
 492:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
 493:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****                                     double>::__type
 494:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****     tan(_Tp __x)
 495:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****     { return __builtin_tan(__x); }
 496:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
 497:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   using ::tanh;
 498:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
 499:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 500:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   inline _GLIBCXX_CONSTEXPR float
 501:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   tanh(float __x)
 502:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   { return __builtin_tanhf(__x); }
 503:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
 504:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   inline _GLIBCXX_CONSTEXPR long double
 505:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   tanh(long double __x)
 506:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   { return __builtin_tanhl(__x); }
 507:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** #endif
 508:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
 509:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   template<typename _Tp>
 510:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****     inline _GLIBCXX_CONSTEXPR
 511:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
 512:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****                                     double>::__type
 513:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****     tanh(_Tp __x)
 514:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****     { return __builtin_tanh(__x); }
 515:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
 516:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** #if _GLIBCXX_USE_C99_MATH
 517:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** #if !_GLIBCXX_USE_C99_FP_MACROS_DYNAMIC
 518:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
ARM GAS  C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s 			page 83


 519:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** // These are possible macros imported from C99-land.
 520:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** #undef fpclassify
 521:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** #undef isfinite
 522:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** #undef isinf
 523:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** #undef isnan
 524:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** #undef isnormal
 525:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** #undef signbit
 526:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** #undef isgreater
 527:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** #undef isgreaterequal
 528:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** #undef isless
 529:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** #undef islessequal
 530:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** #undef islessgreater
 531:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** #undef isunordered
 532:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
 533:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** #if __cplusplus >= 201103L
 534:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
 535:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** #ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
 536:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   constexpr int
 537:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   fpclassify(float __x)
 538:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   { return __builtin_fpclassify(FP_NAN, FP_INFINITE, FP_NORMAL,
 539:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 				FP_SUBNORMAL, FP_ZERO, __x); }
 540:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
 541:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   constexpr int
 542:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   fpclassify(double __x)
 543:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   { return __builtin_fpclassify(FP_NAN, FP_INFINITE, FP_NORMAL,
 544:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 				FP_SUBNORMAL, FP_ZERO, __x); }
 545:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
 546:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   constexpr int
 547:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   fpclassify(long double __x)
 548:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   { return __builtin_fpclassify(FP_NAN, FP_INFINITE, FP_NORMAL,
 549:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 				FP_SUBNORMAL, FP_ZERO, __x); }
 550:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** #endif
 551:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
 552:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** #ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_INT
 553:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   template<typename _Tp>
 554:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****     constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
 555:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****                                               int>::__type
 556:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****     fpclassify(_Tp __x)
 557:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****     { return __x != 0 ? FP_NORMAL : FP_ZERO; }
 558:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** #endif
 559:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
 560:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** #ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
 561:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   constexpr bool
 562:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   isfinite(float __x)
 563:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   { return __builtin_isfinite(__x); }
 564:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
 565:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   constexpr bool
 566:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   isfinite(double __x)
 567:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   { return __builtin_isfinite(__x); }
 568:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
 569:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   constexpr bool
 570:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   isfinite(long double __x)
 571:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   { return __builtin_isfinite(__x); }
 572:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** #endif
 573:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
 574:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** #ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_INT
 575:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   template<typename _Tp>
ARM GAS  C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s 			page 84


 576:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****     constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
 577:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****                                               bool>::__type
 578:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****     isfinite(_Tp __x)
 579:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****     { return true; }
 580:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** #endif
 581:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
 582:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** #ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
 583:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   constexpr bool
 584:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   isinf(float __x)
 585:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   { return __builtin_isinf(__x); }
 586:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
 587:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** #if _GLIBCXX_HAVE_OBSOLETE_ISINF \
 588:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
 589:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   using ::isinf;
 590:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** #else
 591:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   constexpr bool
 592:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   isinf(double __x)
 593:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   { return __builtin_isinf(__x); }
 594:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** #endif
 595:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
 596:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   constexpr bool
 597:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   isinf(long double __x)
 598:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   { return __builtin_isinf(__x); }
 599:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** #endif
 600:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
 601:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** #ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_INT
 602:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   template<typename _Tp>
 603:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****     constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
 604:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****                                               bool>::__type
 605:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****     isinf(_Tp __x)
 606:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****     { return false; }
 607:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** #endif
 608:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
 609:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** #ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
 610:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   constexpr bool
 611:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   isnan(float __x)
 612:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   { return __builtin_isnan(__x); }
 613:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** 
 614:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** #if _GLIBCXX_HAVE_OBSOLETE_ISNAN \
 615:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
 616:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   using ::isnan;
 617:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** #else
 618:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   constexpr bool
 619:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   isnan(double __x)
 620:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   { return __builtin_isnan(__x); }
 1439              		.loc 4 620 5 view .LVU276
 1440              		.loc 2 196 3 is_stmt 0 view .LVU277
 1441 0012 3200     		movs	r2, r6
 1442              	.LVL151:
 1443              		.loc 2 196 3 view .LVU278
 1444 0014 3B00     		movs	r3, r7
 1445              	.LVL152:
 1446              		.loc 2 196 3 view .LVU279
 1447 0016 3000     		movs	r0, r6
 1448              	.LVL153:
 1449              		.loc 2 196 3 view .LVU280
 1450 0018 3900     		movs	r1, r7
ARM GAS  C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s 			page 85


 1451 001a FFF7FEFF 		bl	__aeabi_dcmpun
 1452              	.LVL154:
 1453 001e 0028     		cmp	r0, #0
 1454 0020 33D1     		bne	.L78
 197:Core/Src/Print.cpp ****   if (isinf(number)) return print("inf");
 1455              		.loc 2 197 3 is_stmt 1 view .LVU281
 1456              	.LVL155:
 1457              	.LBB51:
 1458              	.LBI51:
 592:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath ****   { return __builtin_isinf(__x); }
 1459              		.loc 4 592 3 view .LVU282
 1460              	.LBB52:
 593:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** #endif
 1461              		.loc 4 593 5 view .LVU283
 593:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** #endif
 1462              		.loc 4 593 27 is_stmt 0 view .LVU284
 1463 0022 7C00     		lsls	r4, r7, #1
 1464 0024 6408     		lsrs	r4, r4, #1
 1465              	.LVL156:
 593:c:\gcc-arm-none-eabi-10-2020-q4-major-win32\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\cmath **** #endif
 1466              		.loc 4 593 27 view .LVU285
 1467              	.LBE52:
 1468              	.LBE51:
 1469              		.loc 2 197 3 view .LVU286
 1470 0026 0122     		movs	r2, #1
 1471 0028 5242     		rsbs	r2, r2, #0
 1472 002a 534B     		ldr	r3, .L85
 1473 002c 3000     		movs	r0, r6
 1474 002e 2100     		movs	r1, r4
 1475 0030 FFF7FEFF 		bl	__aeabi_dcmpun
 1476              	.LVL157:
 1477 0034 0028     		cmp	r0, #0
 1478 0036 08D1     		bne	.L58
 1479 0038 0122     		movs	r2, #1
 1480 003a 5242     		rsbs	r2, r2, #0
 1481 003c 4E4B     		ldr	r3, .L85
 1482 003e 3000     		movs	r0, r6
 1483 0040 2100     		movs	r1, r4
 1484 0042 FFF7FEFF 		bl	__aeabi_dcmple
 1485              	.LVL158:
 1486 0046 0028     		cmp	r0, #0
 1487 0048 25D0     		beq	.L79
 1488              	.L58:
 198:Core/Src/Print.cpp ****   if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 1489              		.loc 2 198 3 is_stmt 1 view .LVU287
 1490 004a E022     		movs	r2, #224
 1491 004c 1206     		lsls	r2, r2, #24
 1492 004e 4B4B     		ldr	r3, .L85+4
 1493 0050 3000     		movs	r0, r6
 1494 0052 3900     		movs	r1, r7
 1495 0054 FFF7FEFF 		bl	__aeabi_dcmpgt
 1496              	.LVL159:
 1497 0058 0028     		cmp	r0, #0
 1498 005a 28D1     		bne	.L80
 199:Core/Src/Print.cpp ****   if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 1499              		.loc 2 199 3 view .LVU288
 1500 005c E022     		movs	r2, #224
ARM GAS  C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s 			page 86


 1501 005e 1206     		lsls	r2, r2, #24
 1502 0060 474B     		ldr	r3, .L85+8
 1503 0062 3000     		movs	r0, r6
 1504 0064 3900     		movs	r1, r7
 1505 0066 FFF7FEFF 		bl	__aeabi_dcmplt
 1506              	.LVL160:
 1507 006a 0028     		cmp	r0, #0
 1508 006c 25D1     		bne	.L81
 200:Core/Src/Print.cpp ****   
 201:Core/Src/Print.cpp ****   // Handle negative numbers
 202:Core/Src/Print.cpp ****   if (number < 0.0)
 1509              		.loc 2 202 3 view .LVU289
 1510 006e 0022     		movs	r2, #0
 1511 0070 0023     		movs	r3, #0
 1512 0072 3000     		movs	r0, r6
 1513 0074 3900     		movs	r1, r7
 1514 0076 FFF7FEFF 		bl	__aeabi_dcmplt
 1515              	.LVL161:
 1516 007a 0028     		cmp	r0, #0
 1517 007c 23D1     		bne	.L82
 194:Core/Src/Print.cpp ****   
 1518              		.loc 2 194 10 is_stmt 0 view .LVU290
 1519 007e 0023     		movs	r3, #0
 1520 0080 9946     		mov	r9, r3
 1521              	.LVL162:
 1522              	.L63:
 203:Core/Src/Print.cpp ****   {
 204:Core/Src/Print.cpp ****      n += print('-');
 205:Core/Src/Print.cpp ****      number = -number;
 206:Core/Src/Print.cpp ****   }
 207:Core/Src/Print.cpp **** 
 208:Core/Src/Print.cpp ****   // Round correctly so that print(1.999, 2) prints as "2.00"
 209:Core/Src/Print.cpp ****   double rounding = 0.5;
 1523              		.loc 2 209 3 is_stmt 1 view .LVU291
 210:Core/Src/Print.cpp ****   for (uint8_t i=0; i<digits; ++i)
 1524              		.loc 2 210 3 view .LVU292
 1525              	.LBB53:
 1526              		.loc 2 210 16 is_stmt 0 view .LVU293
 1527 0082 0024     		movs	r4, #0
 1528              	.LBE53:
 209:Core/Src/Print.cpp ****   for (uint8_t i=0; i<digits; ++i)
 1529              		.loc 2 209 10 view .LVU294
 1530 0084 0020     		movs	r0, #0
 1531 0086 3F49     		ldr	r1, .L85+12
 1532 0088 2EE0     		b	.L66
 1533              	.LVL163:
 1534              	.L78:
 196:Core/Src/Print.cpp ****   if (isinf(number)) return print("inf");
 1535              		.loc 2 196 22 is_stmt 1 discriminator 1 view .LVU295
 196:Core/Src/Print.cpp ****   if (isinf(number)) return print("inf");
 1536              		.loc 2 196 34 is_stmt 0 discriminator 1 view .LVU296
 1537 008a 3F49     		ldr	r1, .L85+16
 1538 008c 4046     		mov	r0, r8
 1539 008e FFF7FEFF 		bl	_ZN5Print5printEPKc
 1540              	.LVL164:
 1541 0092 8146     		mov	r9, r0
 196:Core/Src/Print.cpp ****   if (isinf(number)) return print("inf");
ARM GAS  C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s 			page 87


 1542              		.loc 2 196 40 discriminator 1 view .LVU297
 1543 0094 04E0     		b	.L54
 1544              	.L79:
 197:Core/Src/Print.cpp ****   if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 1545              		.loc 2 197 22 is_stmt 1 discriminator 1 view .LVU298
 197:Core/Src/Print.cpp ****   if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 1546              		.loc 2 197 34 is_stmt 0 discriminator 1 view .LVU299
 1547 0096 3D49     		ldr	r1, .L85+20
 1548 0098 4046     		mov	r0, r8
 1549 009a FFF7FEFF 		bl	_ZN5Print5printEPKc
 1550              	.LVL165:
 1551 009e 8146     		mov	r9, r0
 1552              	.LVL166:
 1553              	.L54:
 211:Core/Src/Print.cpp ****     rounding /= 10.0;
 212:Core/Src/Print.cpp ****   
 213:Core/Src/Print.cpp ****   number += rounding;
 214:Core/Src/Print.cpp **** 
 215:Core/Src/Print.cpp ****   // Extract the integer part of the number and print it
 216:Core/Src/Print.cpp ****   unsigned long int_part = (unsigned long)number;
 217:Core/Src/Print.cpp ****   double remainder = number - (double)int_part;
 218:Core/Src/Print.cpp ****   n += print(int_part);
 219:Core/Src/Print.cpp **** 
 220:Core/Src/Print.cpp ****   // Print the decimal point, but only if there are digits beyond
 221:Core/Src/Print.cpp ****   if (digits > 0) {
 222:Core/Src/Print.cpp ****     n += print('.'); 
 223:Core/Src/Print.cpp ****   }
 224:Core/Src/Print.cpp **** 
 225:Core/Src/Print.cpp ****   // Extract digits from the remainder one at a time
 226:Core/Src/Print.cpp ****   while (digits-- > 0)
 227:Core/Src/Print.cpp ****   {
 228:Core/Src/Print.cpp ****     remainder *= 10.0;
 229:Core/Src/Print.cpp ****     unsigned int toPrint = (unsigned int)(remainder);
 230:Core/Src/Print.cpp ****     n += print(toPrint);
 231:Core/Src/Print.cpp ****     remainder -= toPrint; 
 232:Core/Src/Print.cpp ****   } 
 233:Core/Src/Print.cpp ****   
 234:Core/Src/Print.cpp ****   return n;
 235:Core/Src/Print.cpp **** }
 1554              		.loc 2 235 1 view .LVU300
 1555 00a0 4846     		mov	r0, r9
 1556              		@ sp needed
 1557              	.LVL167:
 1558              		.loc 2 235 1 view .LVU301
 1559 00a2 C0BC     		pop	{r6, r7}
 1560 00a4 B946     		mov	r9, r7
 1561 00a6 B046     		mov	r8, r6
 1562 00a8 F8BC     		pop	{r3, r4, r5, r6, r7}
 1563 00aa 02BC     		pop	{r1}
 1564 00ac 0847     		bx	r1
 1565              	.LVL168:
 1566              	.L80:
 198:Core/Src/Print.cpp ****   if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 1567              		.loc 2 198 30 is_stmt 1 discriminator 1 view .LVU302
 198:Core/Src/Print.cpp ****   if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 1568              		.loc 2 198 43 is_stmt 0 discriminator 1 view .LVU303
 1569 00ae 3849     		ldr	r1, .L85+24
ARM GAS  C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s 			page 88


 1570 00b0 4046     		mov	r0, r8
 1571 00b2 FFF7FEFF 		bl	_ZN5Print5printEPKc
 1572              	.LVL169:
 1573 00b6 8146     		mov	r9, r0
 198:Core/Src/Print.cpp ****   if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 1574              		.loc 2 198 49 discriminator 1 view .LVU304
 1575 00b8 F2E7     		b	.L54
 1576              	.L81:
 199:Core/Src/Print.cpp ****   
 1577              		.loc 2 199 30 is_stmt 1 discriminator 1 view .LVU305
 199:Core/Src/Print.cpp ****   
 1578              		.loc 2 199 43 is_stmt 0 discriminator 1 view .LVU306
 1579 00ba 3549     		ldr	r1, .L85+24
 1580 00bc 4046     		mov	r0, r8
 1581 00be FFF7FEFF 		bl	_ZN5Print5printEPKc
 1582              	.LVL170:
 1583 00c2 8146     		mov	r9, r0
 199:Core/Src/Print.cpp ****   
 1584              		.loc 2 199 49 discriminator 1 view .LVU307
 1585 00c4 ECE7     		b	.L54
 1586              	.L82:
 204:Core/Src/Print.cpp ****      number = -number;
 1587              		.loc 2 204 6 is_stmt 1 view .LVU308
 204:Core/Src/Print.cpp ****      number = -number;
 1588              		.loc 2 204 16 is_stmt 0 view .LVU309
 1589 00c6 2D21     		movs	r1, #45
 1590 00c8 4046     		mov	r0, r8
 1591 00ca FFF7FEFF 		bl	_ZN5Print5printEc
 1592              	.LVL171:
 1593 00ce 8146     		mov	r9, r0
 1594              	.LVL172:
 205:Core/Src/Print.cpp ****   }
 1595              		.loc 2 205 6 is_stmt 1 view .LVU310
 205:Core/Src/Print.cpp ****   }
 1596              		.loc 2 205 13 is_stmt 0 view .LVU311
 1597 00d0 8023     		movs	r3, #128
 1598 00d2 1B06     		lsls	r3, r3, #24
 1599 00d4 9C46     		mov	ip, r3
 1600 00d6 6744     		add	r7, r7, ip
 1601              	.LVL173:
 205:Core/Src/Print.cpp ****   }
 1602              		.loc 2 205 13 view .LVU312
 1603 00d8 D3E7     		b	.L63
 1604              	.LVL174:
 1605              	.L83:
 1606              	.LBB54:
 211:Core/Src/Print.cpp ****   
 1607              		.loc 2 211 5 is_stmt 1 discriminator 2 view .LVU313
 211:Core/Src/Print.cpp ****   
 1608              		.loc 2 211 14 is_stmt 0 discriminator 2 view .LVU314
 1609 00da 0022     		movs	r2, #0
 1610 00dc 2D4B     		ldr	r3, .L85+28
 1611 00de FFF7FEFF 		bl	__aeabi_ddiv
 1612              	.LVL175:
 210:Core/Src/Print.cpp ****     rounding /= 10.0;
 1613              		.loc 2 210 3 is_stmt 1 discriminator 2 view .LVU315
 1614 00e2 0134     		adds	r4, r4, #1
ARM GAS  C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s 			page 89


 1615              	.LVL176:
 210:Core/Src/Print.cpp ****     rounding /= 10.0;
 1616              		.loc 2 210 3 is_stmt 0 discriminator 2 view .LVU316
 1617 00e4 2406     		lsls	r4, r4, #24
 1618 00e6 240E     		lsrs	r4, r4, #24
 1619              	.LVL177:
 1620              	.L66:
 210:Core/Src/Print.cpp ****     rounding /= 10.0;
 1621              		.loc 2 210 22 is_stmt 1 discriminator 3 view .LVU317
 1622 00e8 AC42     		cmp	r4, r5
 1623 00ea F6D3     		bcc	.L83
 1624              	.LBE54:
 213:Core/Src/Print.cpp **** 
 1625              		.loc 2 213 3 view .LVU318
 213:Core/Src/Print.cpp **** 
 1626              		.loc 2 213 10 is_stmt 0 view .LVU319
 1627 00ec 0200     		movs	r2, r0
 1628 00ee 0B00     		movs	r3, r1
 1629 00f0 3000     		movs	r0, r6
 1630              	.LVL178:
 213:Core/Src/Print.cpp **** 
 1631              		.loc 2 213 10 view .LVU320
 1632 00f2 3900     		movs	r1, r7
 1633 00f4 FFF7FEFF 		bl	__aeabi_dadd
 1634              	.LVL179:
 1635 00f8 0600     		movs	r6, r0
 1636              	.LVL180:
 213:Core/Src/Print.cpp **** 
 1637              		.loc 2 213 10 view .LVU321
 1638 00fa 0F00     		movs	r7, r1
 1639              	.LVL181:
 216:Core/Src/Print.cpp ****   double remainder = number - (double)int_part;
 1640              		.loc 2 216 3 is_stmt 1 view .LVU322
 216:Core/Src/Print.cpp ****   double remainder = number - (double)int_part;
 1641              		.loc 2 216 17 is_stmt 0 view .LVU323
 1642 00fc FFF7FEFF 		bl	__aeabi_d2uiz
 1643              	.LVL182:
 1644 0100 0400     		movs	r4, r0
 1645              	.LVL183:
 217:Core/Src/Print.cpp ****   n += print(int_part);
 1646              		.loc 2 217 3 is_stmt 1 view .LVU324
 217:Core/Src/Print.cpp ****   n += print(int_part);
 1647              		.loc 2 217 31 is_stmt 0 view .LVU325
 1648 0102 FFF7FEFF 		bl	__aeabi_ui2d
 1649              	.LVL184:
 217:Core/Src/Print.cpp ****   n += print(int_part);
 1650              		.loc 2 217 31 view .LVU326
 1651 0106 0200     		movs	r2, r0
 1652 0108 0B00     		movs	r3, r1
 217:Core/Src/Print.cpp ****   n += print(int_part);
 1653              		.loc 2 217 10 view .LVU327
 1654 010a 3000     		movs	r0, r6
 1655 010c 3900     		movs	r1, r7
 1656 010e FFF7FEFF 		bl	__aeabi_dsub
 1657              	.LVL185:
 1658 0112 0600     		movs	r6, r0
 1659              	.LVL186:
ARM GAS  C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s 			page 90


 217:Core/Src/Print.cpp ****   n += print(int_part);
 1660              		.loc 2 217 10 view .LVU328
 1661 0114 0F00     		movs	r7, r1
 1662              	.LVL187:
 218:Core/Src/Print.cpp **** 
 1663              		.loc 2 218 3 is_stmt 1 view .LVU329
 218:Core/Src/Print.cpp **** 
 1664              		.loc 2 218 13 is_stmt 0 view .LVU330
 1665 0116 0A22     		movs	r2, #10
 1666 0118 2100     		movs	r1, r4
 1667 011a 4046     		mov	r0, r8
 1668 011c FFF7FEFF 		bl	_ZN5Print5printEmi
 1669              	.LVL188:
 218:Core/Src/Print.cpp **** 
 1670              		.loc 2 218 5 view .LVU331
 1671 0120 8144     		add	r9, r9, r0
 1672              	.LVL189:
 221:Core/Src/Print.cpp ****     n += print('.'); 
 1673              		.loc 2 221 3 is_stmt 1 view .LVU332
 1674 0122 002D     		cmp	r5, #0
 1675 0124 22D0     		beq	.L68
 222:Core/Src/Print.cpp ****   }
 1676              		.loc 2 222 5 view .LVU333
 222:Core/Src/Print.cpp ****   }
 1677              		.loc 2 222 15 is_stmt 0 view .LVU334
 1678 0126 2E21     		movs	r1, #46
 1679 0128 4046     		mov	r0, r8
 1680 012a FFF7FEFF 		bl	_ZN5Print5printEc
 1681              	.LVL190:
 222:Core/Src/Print.cpp ****   }
 1682              		.loc 2 222 7 view .LVU335
 1683 012e 8144     		add	r9, r9, r0
 1684              	.LVL191:
 222:Core/Src/Print.cpp ****   }
 1685              		.loc 2 222 7 view .LVU336
 1686 0130 1CE0     		b	.L68
 1687              	.LVL192:
 1688              	.L84:
 1689              	.LBB55:
 228:Core/Src/Print.cpp ****     unsigned int toPrint = (unsigned int)(remainder);
 1690              		.loc 2 228 5 is_stmt 1 view .LVU337
 228:Core/Src/Print.cpp ****     unsigned int toPrint = (unsigned int)(remainder);
 1691              		.loc 2 228 15 is_stmt 0 view .LVU338
 1692 0132 0022     		movs	r2, #0
 1693 0134 174B     		ldr	r3, .L85+28
 1694 0136 3000     		movs	r0, r6
 1695 0138 3900     		movs	r1, r7
 1696 013a FFF7FEFF 		bl	__aeabi_dmul
 1697              	.LVL193:
 1698 013e 0600     		movs	r6, r0
 1699              	.LVL194:
 228:Core/Src/Print.cpp ****     unsigned int toPrint = (unsigned int)(remainder);
 1700              		.loc 2 228 15 view .LVU339
 1701 0140 0F00     		movs	r7, r1
 1702              	.LVL195:
 229:Core/Src/Print.cpp ****     n += print(toPrint);
 1703              		.loc 2 229 5 is_stmt 1 view .LVU340
ARM GAS  C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s 			page 91


 229:Core/Src/Print.cpp ****     n += print(toPrint);
 1704              		.loc 2 229 18 is_stmt 0 view .LVU341
 1705 0142 FFF7FEFF 		bl	__aeabi_d2uiz
 1706              	.LVL196:
 1707 0146 0500     		movs	r5, r0
 1708              	.LVL197:
 230:Core/Src/Print.cpp ****     remainder -= toPrint; 
 1709              		.loc 2 230 5 is_stmt 1 view .LVU342
 230:Core/Src/Print.cpp ****     remainder -= toPrint; 
 1710              		.loc 2 230 15 is_stmt 0 view .LVU343
 1711 0148 0A22     		movs	r2, #10
 1712 014a 0100     		movs	r1, r0
 1713 014c 4046     		mov	r0, r8
 1714              	.LVL198:
 230:Core/Src/Print.cpp ****     remainder -= toPrint; 
 1715              		.loc 2 230 15 view .LVU344
 1716 014e FFF7FEFF 		bl	_ZN5Print5printEji
 1717              	.LVL199:
 230:Core/Src/Print.cpp ****     remainder -= toPrint; 
 1718              		.loc 2 230 7 view .LVU345
 1719 0152 8144     		add	r9, r9, r0
 1720              	.LVL200:
 231:Core/Src/Print.cpp ****   } 
 1721              		.loc 2 231 5 is_stmt 1 view .LVU346
 231:Core/Src/Print.cpp ****   } 
 1722              		.loc 2 231 15 is_stmt 0 view .LVU347
 1723 0154 2800     		movs	r0, r5
 1724 0156 FFF7FEFF 		bl	__aeabi_ui2d
 1725              	.LVL201:
 1726 015a 0200     		movs	r2, r0
 1727 015c 0B00     		movs	r3, r1
 1728 015e 3000     		movs	r0, r6
 1729 0160 3900     		movs	r1, r7
 1730 0162 FFF7FEFF 		bl	__aeabi_dsub
 1731              	.LVL202:
 1732 0166 0600     		movs	r6, r0
 1733              	.LVL203:
 231:Core/Src/Print.cpp ****   } 
 1734              		.loc 2 231 15 view .LVU348
 1735 0168 0F00     		movs	r7, r1
 1736              	.LVL204:
 231:Core/Src/Print.cpp ****   } 
 1737              		.loc 2 231 15 view .LVU349
 1738              	.LBE55:
 226:Core/Src/Print.cpp ****   {
 1739              		.loc 2 226 16 view .LVU350
 1740 016a 2500     		movs	r5, r4
 1741              	.LVL205:
 1742              	.L68:
 226:Core/Src/Print.cpp ****   {
 1743              		.loc 2 226 3 is_stmt 1 view .LVU351
 226:Core/Src/Print.cpp ****   {
 1744              		.loc 2 226 19 view .LVU352
 226:Core/Src/Print.cpp ****   {
 1745              		.loc 2 226 16 is_stmt 0 view .LVU353
 1746 016c 6C1E     		subs	r4, r5, #1
 1747 016e 2406     		lsls	r4, r4, #24
ARM GAS  C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s 			page 92


 1748 0170 240E     		lsrs	r4, r4, #24
 1749              	.LVL206:
 226:Core/Src/Print.cpp ****   {
 1750              		.loc 2 226 19 view .LVU354
 1751 0172 002D     		cmp	r5, #0
 1752 0174 DDD1     		bne	.L84
 226:Core/Src/Print.cpp ****   {
 1753              		.loc 2 226 19 view .LVU355
 1754 0176 93E7     		b	.L54
 1755              	.L86:
 1756              		.align	2
 1757              	.L85:
 1758 0178 FFFFEF7F 		.word	2146435071
 1759 017c FFFFEF41 		.word	1106247679
 1760 0180 FFFFEFC1 		.word	-1041235969
 1761 0184 0000E03F 		.word	1071644672
 1762 0188 00000000 		.word	.LC2
 1763 018c 04000000 		.word	.LC4
 1764 0190 08000000 		.word	.LC6
 1765 0194 00002440 		.word	1076101120
 1766              		.cfi_endproc
 1767              	.LFE1272:
 1768              		.fnend
 1770              		.section	.text._ZN5Print5printEdi,"ax",%progbits
 1771              		.align	1
 1772              		.global	_ZN5Print5printEdi
 1773              		.syntax unified
 1774              		.code	16
 1775              		.thumb_func
 1776              		.fpu softvfp
 1778              	_ZN5Print5printEdi:
 1779              		.fnstart
 1780              	.LVL207:
 1781              	.LFB1260:
  99:Core/Src/Print.cpp ****   return printFloat(n, digits);
 1782              		.loc 2 99 1 is_stmt 1 view -0
 1783              		.cfi_startproc
 1784              		@ Function supports interworking.
 1785              		@ args = 4, pretend = 0, frame = 0
 1786              		@ frame_needed = 0, uses_anonymous_args = 0
  99:Core/Src/Print.cpp ****   return printFloat(n, digits);
 1787              		.loc 2 99 1 is_stmt 0 view .LVU357
 1788 0000 30B5     		push	{r4, r5, lr}
 1789              		.save {r4, r5, lr}
 1790              	.LCFI23:
 1791              		.cfi_def_cfa_offset 12
 1792              		.cfi_offset 4, -12
 1793              		.cfi_offset 5, -8
 1794              		.cfi_offset 14, -4
 1795              		.pad #12
 1796 0002 83B0     		sub	sp, sp, #12
 1797              	.LCFI24:
 1798              		.cfi_def_cfa_offset 24
 1799 0004 1D00     		movs	r5, r3
 100:Core/Src/Print.cpp **** }
 1800              		.loc 2 100 3 is_stmt 1 view .LVU358
 100:Core/Src/Print.cpp **** }
ARM GAS  C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s 			page 93


 1801              		.loc 2 100 20 is_stmt 0 view .LVU359
 1802 0006 069B     		ldr	r3, [sp, #24]
 1803 0008 1B06     		lsls	r3, r3, #24
 1804 000a 1B0E     		lsrs	r3, r3, #24
 1805 000c 0093     		str	r3, [sp]
 1806 000e 2B00     		movs	r3, r5
 1807 0010 FFF7FEFF 		bl	_ZN5Print10printFloatEdh
 1808              	.LVL208:
 101:Core/Src/Print.cpp **** 
 1809              		.loc 2 101 1 view .LVU360
 1810 0014 03B0     		add	sp, sp, #12
 1811              		@ sp needed
 1812 0016 30BC     		pop	{r4, r5}
 1813 0018 02BC     		pop	{r1}
 1814 001a 0847     		bx	r1
 1815              		.cfi_endproc
 1816              	.LFE1260:
 1817              		.fnend
 1819              		.section	.text._ZN5Print7printlnEdi,"ax",%progbits
 1820              		.align	1
 1821              		.global	_ZN5Print7printlnEdi
 1822              		.syntax unified
 1823              		.code	16
 1824              		.thumb_func
 1825              		.fpu softvfp
 1827              	_ZN5Print7printlnEdi:
 1828              		.fnstart
 1829              	.LVL209:
 1830              	.LFB1270:
 165:Core/Src/Print.cpp ****   size_t n = print(num, digits);
 1831              		.loc 2 165 1 is_stmt 1 view -0
 1832              		.cfi_startproc
 1833              		@ Function supports interworking.
 1834              		@ args = 4, pretend = 0, frame = 0
 1835              		@ frame_needed = 0, uses_anonymous_args = 0
 165:Core/Src/Print.cpp ****   size_t n = print(num, digits);
 1836              		.loc 2 165 1 is_stmt 0 view .LVU362
 1837 0000 30B5     		push	{r4, r5, lr}
 1838              		.save {r4, r5, lr}
 1839              	.LCFI25:
 1840              		.cfi_def_cfa_offset 12
 1841              		.cfi_offset 4, -12
 1842              		.cfi_offset 5, -8
 1843              		.cfi_offset 14, -4
 1844              		.pad #12
 1845 0002 83B0     		sub	sp, sp, #12
 1846              	.LCFI26:
 1847              		.cfi_def_cfa_offset 24
 1848 0004 0500     		movs	r5, r0
 166:Core/Src/Print.cpp ****   n += println();
 1849              		.loc 2 166 3 is_stmt 1 view .LVU363
 166:Core/Src/Print.cpp ****   n += println();
 1850              		.loc 2 166 19 is_stmt 0 view .LVU364
 1851 0006 0699     		ldr	r1, [sp, #24]
 1852 0008 0091     		str	r1, [sp]
 1853 000a FFF7FEFF 		bl	_ZN5Print5printEdi
 1854              	.LVL210:
ARM GAS  C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s 			page 94


 166:Core/Src/Print.cpp ****   n += println();
 1855              		.loc 2 166 19 view .LVU365
 1856 000e 0400     		movs	r4, r0
 1857              	.LVL211:
 167:Core/Src/Print.cpp ****   return n;
 1858              		.loc 2 167 3 is_stmt 1 view .LVU366
 167:Core/Src/Print.cpp ****   return n;
 1859              		.loc 2 167 15 is_stmt 0 view .LVU367
 1860 0010 2800     		movs	r0, r5
 1861              	.LVL212:
 167:Core/Src/Print.cpp ****   return n;
 1862              		.loc 2 167 15 view .LVU368
 1863 0012 FFF7FEFF 		bl	_ZN5Print7printlnEv
 1864              	.LVL213:
 167:Core/Src/Print.cpp ****   return n;
 1865              		.loc 2 167 5 view .LVU369
 1866 0016 2018     		adds	r0, r4, r0
 1867              	.LVL214:
 168:Core/Src/Print.cpp **** }
 1868              		.loc 2 168 3 is_stmt 1 view .LVU370
 169:Core/Src/Print.cpp **** // Private Methods /////////////////////////////////////////////////////////////
 1869              		.loc 2 169 1 is_stmt 0 view .LVU371
 1870 0018 03B0     		add	sp, sp, #12
 1871              		@ sp needed
 1872              	.LVL215:
 169:Core/Src/Print.cpp **** // Private Methods /////////////////////////////////////////////////////////////
 1873              		.loc 2 169 1 view .LVU372
 1874 001a 30BC     		pop	{r4, r5}
 1875 001c 02BC     		pop	{r1}
 1876 001e 0847     		bx	r1
 1877              		.cfi_endproc
 1878              	.LFE1270:
 1879              		.fnend
 1881              		.global	_ZTS5Print
 1882              		.global	_ZTI5Print
 1883              		.global	_ZTV5Print
 1884              		.section	.rodata._ZTI5Print,"a"
 1885              		.align	2
 1888              	_ZTI5Print:
 1889 0000 08000000 		.word	_ZTVN10__cxxabiv117__class_type_infoE+8
 1890 0004 00000000 		.word	_ZTS5Print
 1891              		.section	.rodata._ZTS5Print,"a"
 1892              		.align	2
 1895              	_ZTS5Print:
 1896 0000 35507269 		.ascii	"5Print\000"
 1896      6E7400
 1897              		.section	.rodata._ZTV5Print,"a"
 1898              		.align	2
 1901              	_ZTV5Print:
 1902 0000 00000000 		.word	0
 1903 0004 00000000 		.word	_ZTI5Print
 1904 0008 00000000 		.word	__cxa_pure_virtual
 1905 000c 00000000 		.word	_ZN5Print5writeEPKhj
 1906 0010 00000000 		.word	_ZN5Print17availableForWriteEv
 1907 0014 00000000 		.word	_ZN5Print5flushEv
 1908              		.text
 1909              	.Letext0:
ARM GAS  C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s 			page 95


 1910              		.file 5 "c:\\gcc-arm-none-eabi-10-2020-q4-major-win32\\gcc-arm-none-eabi-10-2020-q4-major\\arm-non
 1911              		.file 6 "c:\\gcc-arm-none-eabi-10-2020-q4-major-win32\\gcc-arm-none-eabi-10-2020-q4-major\\arm-non
 1912              		.file 7 "c:\\gcc-arm-none-eabi-10-2020-q4-major-win32\\gcc-arm-none-eabi-10-2020-q4-major\\arm-non
 1913              		.file 8 "c:\\gcc-arm-none-eabi-10-2020-q4-major-win32\\gcc-arm-none-eabi-10-2020-q4-major\\arm-non
 1914              		.file 9 "c:\\gcc-arm-none-eabi-10-2020-q4-major-win32\\gcc-arm-none-eabi-10-2020-q4-major\\arm-non
 1915              		.file 10 "c:\\gcc-arm-none-eabi-10-2020-q4-major-win32\\gcc-arm-none-eabi-10-2020-q4-major\\arm-no
 1916              		.file 11 "c:\\gcc-arm-none-eabi-10-2020-q4-major-win32\\gcc-arm-none-eabi-10-2020-q4-major\\arm-no
 1917              		.file 12 "c:\\gcc-arm-none-eabi-10-2020-q4-major-win32\\gcc-arm-none-eabi-10-2020-q4-major\\arm-no
 1918              		.file 13 "c:\\gcc-arm-none-eabi-10-2020-q4-major-win32\\gcc-arm-none-eabi-10-2020-q4-major\\arm-no
 1919              		.file 14 "c:\\gcc-arm-none-eabi-10-2020-q4-major-win32\\gcc-arm-none-eabi-10-2020-q4-major\\arm-no
 1920              		.file 15 "c:\\gcc-arm-none-eabi-10-2020-q4-major-win32\\gcc-arm-none-eabi-10-2020-q4-major\\arm-no
 1921              		.file 16 "c:\\gcc-arm-none-eabi-10-2020-q4-major-win32\\gcc-arm-none-eabi-10-2020-q4-major\\arm-no
 1922              		.file 17 "c:\\gcc-arm-none-eabi-10-2020-q4-major-win32\\gcc-arm-none-eabi-10-2020-q4-major\\arm-no
 1923              		.file 18 "c:\\gcc-arm-none-eabi-10-2020-q4-major-win32\\gcc-arm-none-eabi-10-2020-q4-major\\arm-no
 1924              		.file 19 "c:\\gcc-arm-none-eabi-10-2020-q4-major-win32\\gcc-arm-none-eabi-10-2020-q4-major\\arm-no
 1925              		.file 20 "c:\\gcc-arm-none-eabi-10-2020-q4-major-win32\\gcc-arm-none-eabi-10-2020-q4-major\\arm-no
 1926              		.file 21 "c:\\gcc-arm-none-eabi-10-2020-q4-major-win32\\gcc-arm-none-eabi-10-2020-q4-major\\arm-no
 1927              		.file 22 "c:\\gcc-arm-none-eabi-10-2020-q4-major-win32\\gcc-arm-none-eabi-10-2020-q4-major\\arm-no
 1928              		.file 23 "c:\\gcc-arm-none-eabi-10-2020-q4-major-win32\\gcc-arm-none-eabi-10-2020-q4-major\\arm-no
 1929              		.file 24 "c:\\gcc-arm-none-eabi-10-2020-q4-major-win32\\gcc-arm-none-eabi-10-2020-q4-major\\arm-no
 1930              		.file 25 "c:\\gcc-arm-none-eabi-10-2020-q4-major-win32\\gcc-arm-none-eabi-10-2020-q4-major\\arm-no
 1931              		.file 26 "c:\\gcc-arm-none-eabi-10-2020-q4-major-win32\\gcc-arm-none-eabi-10-2020-q4-major\\arm-no
 1932              		.file 27 "c:\\gcc-arm-none-eabi-10-2020-q4-major-win32\\gcc-arm-none-eabi-10-2020-q4-major\\arm-no
 1933              		.file 28 "c:\\gcc-arm-none-eabi-10-2020-q4-major-win32\\gcc-arm-none-eabi-10-2020-q4-major\\arm-no
 1934              		.file 29 "c:\\gcc-arm-none-eabi-10-2020-q4-major-win32\\gcc-arm-none-eabi-10-2020-q4-major\\lib\\g
 1935              		.file 30 "c:\\gcc-arm-none-eabi-10-2020-q4-major-win32\\gcc-arm-none-eabi-10-2020-q4-major\\arm-no
 1936              		.file 31 "c:\\gcc-arm-none-eabi-10-2020-q4-major-win32\\gcc-arm-none-eabi-10-2020-q4-major\\arm-no
 1937              		.file 32 "<built-in>"
 1938              		.file 33 "c:\\gcc-arm-none-eabi-10-2020-q4-major-win32\\gcc-arm-none-eabi-10-2020-q4-major\\arm-no
 1939              		.file 34 "c:\\gcc-arm-none-eabi-10-2020-q4-major-win32\\gcc-arm-none-eabi-10-2020-q4-major\\arm-no
 1940              		.file 35 "c:\\gcc-arm-none-eabi-10-2020-q4-major-win32\\gcc-arm-none-eabi-10-2020-q4-major\\arm-no
 1941              		.file 36 "c:\\gcc-arm-none-eabi-10-2020-q4-major-win32\\gcc-arm-none-eabi-10-2020-q4-major\\arm-no
 1942              		.file 37 "c:\\gcc-arm-none-eabi-10-2020-q4-major-win32\\gcc-arm-none-eabi-10-2020-q4-major\\lib\\g
 1943              		.file 38 "c:\\gcc-arm-none-eabi-10-2020-q4-major-win32\\gcc-arm-none-eabi-10-2020-q4-major\\arm-no
 1944              		.file 39 "c:\\gcc-arm-none-eabi-10-2020-q4-major-win32\\gcc-arm-none-eabi-10-2020-q4-major\\arm-no
 1945              		.file 40 "c:\\gcc-arm-none-eabi-10-2020-q4-major-win32\\gcc-arm-none-eabi-10-2020-q4-major\\arm-no
 1946              		.file 41 "c:\\gcc-arm-none-eabi-10-2020-q4-major-win32\\gcc-arm-none-eabi-10-2020-q4-major\\arm-no
 1947              		.file 42 "c:\\gcc-arm-none-eabi-10-2020-q4-major-win32\\gcc-arm-none-eabi-10-2020-q4-major\\arm-no
 1948              		.file 43 "c:\\gcc-arm-none-eabi-10-2020-q4-major-win32\\gcc-arm-none-eabi-10-2020-q4-major\\arm-no
 1949              		.file 44 "c:\\gcc-arm-none-eabi-10-2020-q4-major-win32\\gcc-arm-none-eabi-10-2020-q4-major\\arm-no
 1950              		.file 45 "c:\\gcc-arm-none-eabi-10-2020-q4-major-win32\\gcc-arm-none-eabi-10-2020-q4-major\\arm-no
 1951              		.file 46 "c:\\gcc-arm-none-eabi-10-2020-q4-major-win32\\gcc-arm-none-eabi-10-2020-q4-major\\arm-no
ARM GAS  C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s 			page 96


DEFINED SYMBOLS
                            *ABS*:00000000 Print.cpp
C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s:24     .text._ZN5Print17availableForWriteEv:00000000 _ZN5Print17availableForWriteEv
C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s:37     .text._ZN5Print17availableForWriteEv:00000000 $t
.ARM.exidx.text._ZN5Print17availableForWriteEv:00000000 $d
C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s:48     .text._ZN5Print5flushEv:00000000 $t
C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s:55     .text._ZN5Print5flushEv:00000000 _ZN5Print5flushEv
.ARM.exidx.text._ZN5Print5flushEv:00000000 $d
C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s:74     .text._ZN5Print5writeEPKhj:00000000 $t
C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s:81     .text._ZN5Print5writeEPKhj:00000000 _ZN5Print5writeEPKhj
.ARM.exidx.text._ZN5Print5writeEPKhj:00000000 $d
C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s:161    .text._ZN5Print5printERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE:00000000 $t
C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s:168    .text._ZN5Print5printERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE:00000000 _ZN5Print5printERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
.ARM.exidx.text._ZN5Print5printERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE:00000000 $d
C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s:240    .text._ZN5Print5printEPKc:00000000 $t
C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s:247    .text._ZN5Print5printEPKc:00000000 _ZN5Print5printEPKc
.ARM.exidx.text._ZN5Print5printEPKc:00000000 $d
C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s:322    .text._ZN5Print5printEc:00000000 $t
C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s:329    .text._ZN5Print5printEc:00000000 _ZN5Print5printEc
.ARM.exidx.text._ZN5Print5printEc:00000000 $d
C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s:364    .rodata._ZN5Print7printlnEv.str1.4:00000000 $d
C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s:368    .text._ZN5Print7printlnEv:00000000 $t
C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s:375    .text._ZN5Print7printlnEv:00000000 _ZN5Print7printlnEv
C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s:418    .text._ZN5Print7printlnEv:00000014 $d
C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s:420    .text._ZN5Print7printlnEv:00000018 $t
.ARM.exidx.text._ZN5Print7printlnEv:00000000 $d
C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s:426    .text._ZN5Print7printlnERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE:00000000 $t
C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s:433    .text._ZN5Print7printlnERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE:00000000 _ZN5Print7printlnERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
.ARM.exidx.text._ZN5Print7printlnERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE:00000000 $d
C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s:482    .text._ZN5Print7printlnEPKc:00000000 $t
C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s:489    .text._ZN5Print7printlnEPKc:00000000 _ZN5Print7printlnEPKc
.ARM.exidx.text._ZN5Print7printlnEPKc:00000000 $d
C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s:538    .text._ZN5Print7printlnEc:00000000 $t
C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s:545    .text._ZN5Print7printlnEc:00000000 _ZN5Print7printlnEc
.ARM.exidx.text._ZN5Print7printlnEc:00000000 $d
C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s:596    .text._ZN5Print11printNumberEmh:00000000 $t
C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s:603    .text._ZN5Print11printNumberEmh:00000000 _ZN5Print11printNumberEmh
.ARM.extab.text._ZN5Print11printNumberEmh:00000000 $d
.ARM.exidx.text._ZN5Print11printNumberEmh:00000000 $d
C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s:792    .text._ZN5Print5printEli:00000000 $t
C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s:799    .text._ZN5Print5printEli:00000000 _ZN5Print5printEli
.ARM.exidx.text._ZN5Print5printEli:00000000 $d
C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s:920    .text._ZN5Print5printEii:00000000 $t
C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s:927    .text._ZN5Print5printEii:00000000 _ZN5Print5printEii
.ARM.exidx.text._ZN5Print5printEii:00000000 $d
C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s:957    .text._ZN5Print7printlnEii:00000000 $t
C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s:964    .text._ZN5Print7printlnEii:00000000 _ZN5Print7printlnEii
.ARM.exidx.text._ZN5Print7printlnEii:00000000 $d
C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s:1013   .text._ZN5Print7printlnEli:00000000 $t
C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s:1020   .text._ZN5Print7printlnEli:00000000 _ZN5Print7printlnEli
.ARM.exidx.text._ZN5Print7printlnEli:00000000 $d
C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s:1069   .text._ZN5Print5printEmi:00000000 $t
C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s:1076   .text._ZN5Print5printEmi:00000000 _ZN5Print5printEmi
.ARM.exidx.text._ZN5Print5printEmi:00000000 $d
C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s:1131   .text._ZN5Print5printEhi:00000000 $t
C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s:1138   .text._ZN5Print5printEhi:00000000 _ZN5Print5printEhi
.ARM.exidx.text._ZN5Print5printEhi:00000000 $d
ARM GAS  C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s 			page 97


C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s:1168   .text._ZN5Print7printlnEhi:00000000 $t
C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s:1175   .text._ZN5Print7printlnEhi:00000000 _ZN5Print7printlnEhi
.ARM.exidx.text._ZN5Print7printlnEhi:00000000 $d
C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s:1224   .text._ZN5Print5printEji:00000000 $t
C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s:1231   .text._ZN5Print5printEji:00000000 _ZN5Print5printEji
.ARM.exidx.text._ZN5Print5printEji:00000000 $d
C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s:1261   .text._ZN5Print7printlnEji:00000000 $t
C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s:1268   .text._ZN5Print7printlnEji:00000000 _ZN5Print7printlnEji
.ARM.exidx.text._ZN5Print7printlnEji:00000000 $d
C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s:1317   .text._ZN5Print7printlnEmi:00000000 $t
C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s:1324   .text._ZN5Print7printlnEmi:00000000 _ZN5Print7printlnEmi
.ARM.exidx.text._ZN5Print7printlnEmi:00000000 $d
C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s:1374   .rodata._ZN5Print10printFloatEdh.str1.4:00000000 $d
C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s:1393   .text._ZN5Print10printFloatEdh:00000000 $t
C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s:1400   .text._ZN5Print10printFloatEdh:00000000 _ZN5Print10printFloatEdh
C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s:1758   .text._ZN5Print10printFloatEdh:00000178 $d
.ARM.extab.text._ZN5Print10printFloatEdh:00000000 $d
.ARM.exidx.text._ZN5Print10printFloatEdh:00000000 $d
C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s:1771   .text._ZN5Print5printEdi:00000000 $t
C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s:1778   .text._ZN5Print5printEdi:00000000 _ZN5Print5printEdi
.ARM.exidx.text._ZN5Print5printEdi:00000000 $d
C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s:1820   .text._ZN5Print7printlnEdi:00000000 $t
C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s:1827   .text._ZN5Print7printlnEdi:00000000 _ZN5Print7printlnEdi
.ARM.exidx.text._ZN5Print7printlnEdi:00000000 $d
C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s:1895   .rodata._ZTS5Print:00000000 _ZTS5Print
C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s:1888   .rodata._ZTI5Print:00000000 _ZTI5Print
C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s:1901   .rodata._ZTV5Print:00000000 _ZTV5Print
C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s:1885   .rodata._ZTI5Print:00000000 $d
C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s:1892   .rodata._ZTS5Print:00000000 $d
C:\Users\hoang\AppData\Local\Temp\ccNMsdI7.s:1898   .rodata._ZTV5Print:00000000 $d

UNDEFINED SYMBOLS
__aeabi_unwind_cpp_pr0
strlen
__aeabi_uidivmod
__aeabi_uidiv
__aeabi_unwind_cpp_pr1
__aeabi_dcmpun
__aeabi_dcmple
__aeabi_dcmpgt
__aeabi_dcmplt
__aeabi_ddiv
__aeabi_dadd
__aeabi_d2uiz
__aeabi_ui2d
__aeabi_dsub
__aeabi_dmul
_ZTVN10__cxxabiv117__class_type_infoE
__cxa_pure_virtual
